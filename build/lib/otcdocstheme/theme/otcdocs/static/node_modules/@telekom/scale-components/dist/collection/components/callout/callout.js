import { Component, h, Host, Prop, Element } from '@stencil/core';
import classNames from 'classnames';
import statusNote from '../../utils/status-note';
export class Callout {
  constructor() {
    /** (optional) Variant size of the callout itself */
    this.size = 'large';
    /** (optional) Variant rotation of the callout/circle */
    this.rotation = 0;
  }
  connectedCallback() {
    statusNote({ source: this.hostElement, tag: 'beta' });
  }
  displayStyle() {
    return `:host {
      --rotation: ${this.rotation}deg;
    }`;
  }
  render() {
    return (h(Host, null,
      h("style", null, this.displayStyle()),
      h("div", { part: this.getBasePartMap(), class: this.getCssClassMap() },
        h("div", { part: "inner", class: "callout__inner" },
          h("div", { class: "callout__prefix" },
            h("slot", { name: "prefix" })),
          h("div", { class: "callout__text" },
            h("span", null,
              h("slot", null)),
            this.asterisk && (h("sup", { title: this.asterisk, class: "callout__sup" }, "*")))))));
  }
  getBasePartMap() {
    return this.getCssOrBasePartMap('basePart');
  }
  getCssClassMap() {
    return this.getCssOrBasePartMap('css');
  }
  getCssOrBasePartMap(mode) {
    const name = 'callout';
    const prefix = mode === 'basePart' ? '' : `${name}--`;
    return classNames(name, this.variant && `${prefix}color-${this.variant}`, this.size && `${prefix}size-${this.size}`, this.asterisk && `${prefix}asterisk`);
  }
  static get is() { return "scale-callout"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() { return {
    "$": ["callout.css"]
  }; }
  static get styleUrls() { return {
    "$": ["callout.css"]
  }; }
  static get properties() { return {
    "size": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "'large' | 'small'",
        "resolved": "\"large\" | \"small\"",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) Variant size of the callout itself"
      },
      "attribute": "size",
      "reflect": false,
      "defaultValue": "'large'"
    },
    "variant": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "'primary' | 'white' | 'black' | 'blue'",
        "resolved": "\"black\" | \"blue\" | \"primary\" | \"white\"",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) Variant filling of the callout"
      },
      "attribute": "variant",
      "reflect": false
    },
    "rotation": {
      "type": "number",
      "mutable": true,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) Variant rotation of the callout/circle"
      },
      "attribute": "rotation",
      "reflect": false,
      "defaultValue": "0"
    },
    "asterisk": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "(optional) text when hovering with asterisk"
      },
      "attribute": "asterisk",
      "reflect": false
    }
  }; }
  static get elementRef() { return "hostElement"; }
}
