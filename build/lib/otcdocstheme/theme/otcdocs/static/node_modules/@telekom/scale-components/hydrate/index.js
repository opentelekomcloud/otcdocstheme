'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

/*!
 Stencil Mock Doc v2.7.1 | MIT Licensed | https://stenciljs.com
 */
const CONTENT_REF_ID = 'r';
const ORG_LOCATION_ID = 'o';
const SLOT_NODE_ID = 's';
const TEXT_NODE_ID = 't';
const XLINK_NS = 'http://www.w3.org/1999/xlink';

const attrHandler = {
  get(obj, prop) {
    if (prop in obj) {
      return obj[prop];
    }
    if (typeof prop !== 'symbol' && !isNaN(prop)) {
      return obj.__items[prop];
    }
    return undefined;
  },
};
const createAttributeProxy = (caseInsensitive) => new Proxy(new MockAttributeMap(caseInsensitive), attrHandler);
class MockAttributeMap {
  constructor(caseInsensitive = false) {
    this.caseInsensitive = caseInsensitive;
    this.__items = [];
  }
  get length() {
    return this.__items.length;
  }
  item(index) {
    return this.__items[index] || null;
  }
  setNamedItem(attr) {
    attr.namespaceURI = null;
    this.setNamedItemNS(attr);
  }
  setNamedItemNS(attr) {
    if (attr != null && attr.value != null) {
      attr.value = String(attr.value);
    }
    const existingAttr = this.__items.find((a) => a.name === attr.name && a.namespaceURI === attr.namespaceURI);
    if (existingAttr != null) {
      existingAttr.value = attr.value;
    }
    else {
      this.__items.push(attr);
    }
  }
  getNamedItem(attrName) {
    if (this.caseInsensitive) {
      attrName = attrName.toLowerCase();
    }
    return this.getNamedItemNS(null, attrName);
  }
  getNamedItemNS(namespaceURI, attrName) {
    namespaceURI = getNamespaceURI(namespaceURI);
    return (this.__items.find((attr) => attr.name === attrName && getNamespaceURI(attr.namespaceURI) === namespaceURI) || null);
  }
  removeNamedItem(attr) {
    this.removeNamedItemNS(attr);
  }
  removeNamedItemNS(attr) {
    for (let i = 0, ii = this.__items.length; i < ii; i++) {
      if (this.__items[i].name === attr.name && this.__items[i].namespaceURI === attr.namespaceURI) {
        this.__items.splice(i, 1);
        break;
      }
    }
  }
  [Symbol.iterator]() {
    let i = 0;
    return {
      next: () => ({
        done: i === this.length,
        value: this.item(i++),
      }),
    };
  }
  get [Symbol.toStringTag]() {
    return 'MockAttributeMap';
  }
}
function getNamespaceURI(namespaceURI) {
  return namespaceURI === XLINK_NS ? null : namespaceURI;
}
function cloneAttributes(srcAttrs, sortByName = false) {
  const dstAttrs = new MockAttributeMap(srcAttrs.caseInsensitive);
  if (srcAttrs != null) {
    const attrLen = srcAttrs.length;
    if (sortByName && attrLen > 1) {
      const sortedAttrs = [];
      for (let i = 0; i < attrLen; i++) {
        const srcAttr = srcAttrs.item(i);
        const dstAttr = new MockAttr(srcAttr.name, srcAttr.value, srcAttr.namespaceURI);
        sortedAttrs.push(dstAttr);
      }
      sortedAttrs.sort(sortAttributes).forEach((attr) => {
        dstAttrs.setNamedItemNS(attr);
      });
    }
    else {
      for (let i = 0; i < attrLen; i++) {
        const srcAttr = srcAttrs.item(i);
        const dstAttr = new MockAttr(srcAttr.name, srcAttr.value, srcAttr.namespaceURI);
        dstAttrs.setNamedItemNS(dstAttr);
      }
    }
  }
  return dstAttrs;
}
function sortAttributes(a, b) {
  if (a.name < b.name)
    return -1;
  if (a.name > b.name)
    return 1;
  return 0;
}
class MockAttr {
  constructor(attrName, attrValue, namespaceURI = null) {
    this._name = attrName;
    this._value = String(attrValue);
    this._namespaceURI = namespaceURI;
  }
  get name() {
    return this._name;
  }
  set name(value) {
    this._name = value;
  }
  get value() {
    return this._value;
  }
  set value(value) {
    this._value = String(value);
  }
  get nodeName() {
    return this._name;
  }
  set nodeName(value) {
    this._name = value;
  }
  get nodeValue() {
    return this._value;
  }
  set nodeValue(value) {
    this._value = String(value);
  }
  get namespaceURI() {
    return this._namespaceURI;
  }
  set namespaceURI(namespaceURI) {
    this._namespaceURI = namespaceURI;
  }
}

class MockCustomElementRegistry {
  constructor(win) {
    this.win = win;
  }
  define(tagName, cstr, options) {
    if (tagName.toLowerCase() !== tagName) {
      throw new Error(`Failed to execute 'define' on 'CustomElementRegistry': "${tagName}" is not a valid custom element name`);
    }
    if (this.__registry == null) {
      this.__registry = new Map();
    }
    this.__registry.set(tagName, { cstr, options });
    if (this.__whenDefined != null) {
      const whenDefinedResolveFns = this.__whenDefined.get(tagName);
      if (whenDefinedResolveFns != null) {
        whenDefinedResolveFns.forEach((whenDefinedResolveFn) => {
          whenDefinedResolveFn();
        });
        whenDefinedResolveFns.length = 0;
        this.__whenDefined.delete(tagName);
      }
    }
    const doc = this.win.document;
    if (doc != null) {
      const hosts = doc.querySelectorAll(tagName);
      hosts.forEach((host) => {
        if (upgradedElements.has(host) === false) {
          tempDisableCallbacks.add(doc);
          const upgradedCmp = createCustomElement(this, doc, tagName);
          for (let i = 0; i < host.childNodes.length; i++) {
            const childNode = host.childNodes[i];
            childNode.remove();
            upgradedCmp.appendChild(childNode);
          }
          tempDisableCallbacks.delete(doc);
          if (proxyElements.has(host)) {
            proxyElements.set(host, upgradedCmp);
          }
        }
        fireConnectedCallback(host);
      });
    }
  }
  get(tagName) {
    if (this.__registry != null) {
      const def = this.__registry.get(tagName.toLowerCase());
      if (def != null) {
        return def.cstr;
      }
    }
    return undefined;
  }
  upgrade(_rootNode) {
    //
  }
  clear() {
    if (this.__registry != null) {
      this.__registry.clear();
    }
    if (this.__whenDefined != null) {
      this.__whenDefined.clear();
    }
  }
  whenDefined(tagName) {
    tagName = tagName.toLowerCase();
    if (this.__registry != null && this.__registry.has(tagName) === true) {
      return Promise.resolve();
    }
    return new Promise((resolve) => {
      if (this.__whenDefined == null) {
        this.__whenDefined = new Map();
      }
      let whenDefinedResolveFns = this.__whenDefined.get(tagName);
      if (whenDefinedResolveFns == null) {
        whenDefinedResolveFns = [];
        this.__whenDefined.set(tagName, whenDefinedResolveFns);
      }
      whenDefinedResolveFns.push(resolve);
    });
  }
}
function createCustomElement(customElements, ownerDocument, tagName) {
  const Cstr = customElements.get(tagName);
  if (Cstr != null) {
    const cmp = new Cstr(ownerDocument);
    cmp.nodeName = tagName.toUpperCase();
    upgradedElements.add(cmp);
    return cmp;
  }
  const host = new Proxy({}, {
    get(obj, prop) {
      const elm = proxyElements.get(host);
      if (elm != null) {
        return elm[prop];
      }
      return obj[prop];
    },
    set(obj, prop, val) {
      const elm = proxyElements.get(host);
      if (elm != null) {
        elm[prop] = val;
      }
      else {
        obj[prop] = val;
      }
      return true;
    },
    has(obj, prop) {
      const elm = proxyElements.get(host);
      if (prop in elm) {
        return true;
      }
      if (prop in obj) {
        return true;
      }
      return false;
    },
  });
  const elm = new MockHTMLElement(ownerDocument, tagName);
  proxyElements.set(host, elm);
  return host;
}
const proxyElements = new WeakMap();
const upgradedElements = new WeakSet();
function connectNode(ownerDocument, node) {
  node.ownerDocument = ownerDocument;
  if (node.nodeType === 1 /* ELEMENT_NODE */) {
    if (ownerDocument != null && node.nodeName.includes('-')) {
      const win = ownerDocument.defaultView;
      if (win != null && typeof node.connectedCallback === 'function' && node.isConnected) {
        fireConnectedCallback(node);
      }
      const shadowRoot = node.shadowRoot;
      if (shadowRoot != null) {
        shadowRoot.childNodes.forEach((childNode) => {
          connectNode(ownerDocument, childNode);
        });
      }
    }
    node.childNodes.forEach((childNode) => {
      connectNode(ownerDocument, childNode);
    });
  }
  else {
    node.childNodes.forEach((childNode) => {
      childNode.ownerDocument = ownerDocument;
    });
  }
}
function fireConnectedCallback(node) {
  if (typeof node.connectedCallback === 'function') {
    if (tempDisableCallbacks.has(node.ownerDocument) === false) {
      try {
        node.connectedCallback();
      }
      catch (e) {
        console.error(e);
      }
    }
  }
}
function disconnectNode(node) {
  if (node.nodeType === 1 /* ELEMENT_NODE */) {
    if (node.nodeName.includes('-') === true && typeof node.disconnectedCallback === 'function') {
      if (tempDisableCallbacks.has(node.ownerDocument) === false) {
        try {
          node.disconnectedCallback();
        }
        catch (e) {
          console.error(e);
        }
      }
    }
    node.childNodes.forEach(disconnectNode);
  }
}
function attributeChanged(node, attrName, oldValue, newValue) {
  attrName = attrName.toLowerCase();
  const observedAttributes = node.constructor.observedAttributes;
  if (Array.isArray(observedAttributes) === true &&
    observedAttributes.some((obs) => obs.toLowerCase() === attrName) === true) {
    try {
      node.attributeChangedCallback(attrName, oldValue, newValue);
    }
    catch (e) {
      console.error(e);
    }
  }
}
function checkAttributeChanged(node) {
  return node.nodeName.includes('-') === true && typeof node.attributeChangedCallback === 'function';
}
const tempDisableCallbacks = new Set();

function dataset(elm) {
  const ds = {};
  const attributes = elm.attributes;
  const attrLen = attributes.length;
  for (let i = 0; i < attrLen; i++) {
    const attr = attributes.item(i);
    const nodeName = attr.nodeName;
    if (nodeName.startsWith('data-')) {
      ds[dashToPascalCase(nodeName)] = attr.nodeValue;
    }
  }
  return new Proxy(ds, {
    get(_obj, camelCaseProp) {
      return ds[camelCaseProp];
    },
    set(_obj, camelCaseProp, value) {
      const dataAttr = toDataAttribute(camelCaseProp);
      elm.setAttribute(dataAttr, value);
      return true;
    },
  });
}
function toDataAttribute(str) {
  return ('data-' +
    String(str)
      .replace(/([A-Z0-9])/g, (g) => ' ' + g[0])
      .trim()
      .replace(/ /g, '-')
      .toLowerCase());
}
function dashToPascalCase(str) {
  str = String(str).substr(5);
  return str
    .split('-')
    .map((segment, index) => {
    if (index === 0) {
      return segment.charAt(0).toLowerCase() + segment.slice(1);
    }
    return segment.charAt(0).toUpperCase() + segment.slice(1);
  })
    .join('');
}

// Sizzle 2.3.6
const Sizzle = (function() {
const window = {
  document: {
  createElement() {
    return {};
  },
  nodeType: 9,
  documentElement: {
    nodeType: 1,
    nodeName: 'HTML'
  }
  }
};
const module = { exports: {} };

/*! Sizzle v2.3.6 | (c) JS Foundation and other contributors | js.foundation */
!function(e){var t,n,r,i,o,u,l,a,c,s,d,f,p,h,g,m,y,v,w,b="sizzle"+1*new Date,N=e.document,C=0,x=0,E=ae(),A=ae(),S=ae(),D=ae(),T=function(e,t){return e===t&&(d=!0),0},L={}.hasOwnProperty,q=[],I=q.pop,B=q.push,R=q.push,$=q.slice,k=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return -1},H="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",M="[\\x20\\t\\r\\n\\f]",P="(?:\\\\[\\da-fA-F]{1,6}"+M+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",z="\\["+M+"*("+P+")(?:"+M+"*([*^$|!~]?=)"+M+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+P+"))|)"+M+"*\\]",F=":("+P+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+z+")*)|.*)\\)|)",O=new RegExp(M+"+","g"),j=new RegExp("^"+M+"+|((?:^|[^\\\\])(?:\\\\.)*)"+M+"+$","g"),G=new RegExp("^"+M+"*,"+M+"*"),U=new RegExp("^"+M+"*([>+~]|"+M+")"+M+"*"),V=new RegExp(M+"|>"),X=new RegExp(F),J=new RegExp("^"+P+"$"),K={ID:new RegExp("^#("+P+")"),CLASS:new RegExp("^\\.("+P+")"),TAG:new RegExp("^("+P+"|[*])"),ATTR:new RegExp("^"+z),PSEUDO:new RegExp("^"+F),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+M+"*(even|odd|(([+-]|)(\\d*)n|)"+M+"*(?:([+-]|)"+M+"*(\\d+)|))"+M+"*\\)|)","i"),bool:new RegExp("^(?:"+H+")$","i"),needsContext:new RegExp("^"+M+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+M+"*((?:-\\d)?\\d*)"+M+"*\\)|)(?=[^-]|$)","i")},Q=/HTML$/i,W=/^(?:input|select|textarea|button)$/i,Y=/^h\d$/i,Z=/^[^{]+\{\s*\[native \w/,_=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\[\\da-fA-F]{1,6}"+M+"?|\\\\([^\\r\\n\\f])","g"),ne=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},re=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ie=function(e,t){return t?"\0"===e?"\ufffd":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},oe=function(){f();},ue=ve(function(e){return !0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{R.apply(q=$.call(N.childNodes),N.childNodes),q[N.childNodes.length].nodeType;}catch(e){R={apply:q.length?function(e,t){B.apply(e,$.call(t));}:function(e,t){var n=e.length,r=0;while(e[n++]=t[r++]);e.length=n-1;}};}function le(e,t,r,i){var o,l,c,s,d,h,y,v=t&&t.ownerDocument,N=t?t.nodeType:9;if(r=r||[],"string"!=typeof e||!e||1!==N&&9!==N&&11!==N)return r;if(!i&&(f(t),t=t||p,g)){if(11!==N&&(d=_.exec(e)))if(o=d[1]){if(9===N){if(!(c=t.getElementById(o)))return r;if(c.id===o)return r.push(c),r}else if(v&&(c=v.getElementById(o))&&w(t,c)&&c.id===o)return r.push(c),r}else {if(d[2])return R.apply(r,t.getElementsByTagName(e)),r;if((o=d[3])&&n.getElementsByClassName&&t.getElementsByClassName)return R.apply(r,t.getElementsByClassName(o)),r}if(n.qsa&&!D[e+" "]&&(!m||!m.test(e))&&(1!==N||"object"!==t.nodeName.toLowerCase())){if(y=e,v=t,1===N&&(V.test(e)||U.test(e))){(v=ee.test(e)&&ge(t.parentNode)||t)===t&&n.scope||((s=t.getAttribute("id"))?s=s.replace(re,ie):t.setAttribute("id",s=b)),l=(h=u(e)).length;while(l--)h[l]=(s?"#"+s:":scope")+" "+ye(h[l]);y=h.join(",");}try{return R.apply(r,v.querySelectorAll(y)),r}catch(t){D(e,!0);}finally{s===b&&t.removeAttribute("id");}}}return a(e.replace(j,"$1"),t,r,i)}function ae(){var e=[];function t(n,i){return e.push(n+" ")>r.cacheLength&&delete t[e.shift()],t[n+" "]=i}return t}function ce(e){return e[b]=!0,e}function se(e){var t=p.createElement("fieldset");try{return !!e(t)}catch(e){return !1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null;}}function de(e,t){var n=e.split("|"),i=n.length;while(i--)r.attrHandle[n[i]]=t;}function fe(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)while(n=n.nextSibling)if(n===t)return -1;return e?1:-1}function pe(e){return function(t){return "form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&ue(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function he(e){return ce(function(t){return t=+t,ce(function(n,r){var i,o=e([],n.length,t),u=o.length;while(u--)n[i=o[u]]&&(n[i]=!(r[i]=n[i]));})})}function ge(e){return e&&void 0!==e.getElementsByTagName&&e}n=le.support={},o=le.isXML=function(e){var t=e&&e.namespaceURI,n=e&&(e.ownerDocument||e).documentElement;return !Q.test(t||n&&n.nodeName||"HTML")},f=le.setDocument=function(e){var t,i,u=e?e.ownerDocument||e:N;return u!=p&&9===u.nodeType&&u.documentElement?(p=u,h=p.documentElement,g=!o(p),N!=p&&(i=p.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",oe,!1):i.attachEvent&&i.attachEvent("onunload",oe)),n.scope=se(function(e){return h.appendChild(e).appendChild(p.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length}),n.attributes=se(function(e){return e.className="i",!e.getAttribute("className")}),n.getElementsByTagName=se(function(e){return e.appendChild(p.createComment("")),!e.getElementsByTagName("*").length}),n.getElementsByClassName=Z.test(p.getElementsByClassName),n.getById=se(function(e){return h.appendChild(e).id=b,!p.getElementsByName||!p.getElementsByName(b).length}),n.getById?(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&g){var n=t.getElementById(e);return n?[n]:[]}}):(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&g){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return [o];i=t.getElementsByName(e),r=0;while(o=i[r++])if((n=o.getAttributeNode("id"))&&n.value===e)return [o]}return []}}),r.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){while(n=o[i++])1===n.nodeType&&r.push(n);return r}return o},r.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&g)return t.getElementsByClassName(e)},y=[],m=[],(n.qsa=Z.test(p.querySelectorAll))&&(se(function(e){var t;h.appendChild(e).innerHTML="<a id='"+b+"'></a><select id='"+b+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]="+M+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||m.push("\\["+M+"*(?:value|"+H+")"),e.querySelectorAll("[id~="+b+"-]").length||m.push("~="),(t=p.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||m.push("\\["+M+"*name"+M+"*="+M+"*(?:''|\"\")"),e.querySelectorAll(":checked").length||m.push(":checked"),e.querySelectorAll("a#"+b+"+*").length||m.push(".#.+[+~]"),e.querySelectorAll("\\\f"),m.push("[\\r\\n\\f]");}),se(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=p.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&m.push("name"+M+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&m.push(":enabled",":disabled"),h.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&m.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),m.push(",.*:");})),(n.matchesSelector=Z.test(v=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&se(function(e){n.disconnectedMatch=v.call(e,"*"),v.call(e,"[s!='']:x"),y.push("!=",F);}),m=m.length&&new RegExp(m.join("|")),y=y.length&&new RegExp(y.join("|")),t=Z.test(h.compareDocumentPosition),w=t||Z.test(h.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)while(t=t.parentNode)if(t===e)return !0;return !1},T=t?function(e,t){if(e===t)return d=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r||(1&(r=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===r?e==p||e.ownerDocument==N&&w(N,e)?-1:t==p||t.ownerDocument==N&&w(N,t)?1:s?k(s,e)-k(s,t):0:4&r?-1:1)}:function(e,t){if(e===t)return d=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,u=[e],l=[t];if(!i||!o)return e==p?-1:t==p?1:i?-1:o?1:s?k(s,e)-k(s,t):0;if(i===o)return fe(e,t);n=e;while(n=n.parentNode)u.unshift(n);n=t;while(n=n.parentNode)l.unshift(n);while(u[r]===l[r])r++;return r?fe(u[r],l[r]):u[r]==N?-1:l[r]==N?1:0},p):p},le.matches=function(e,t){return le(e,null,null,t)},le.matchesSelector=function(e,t){if(f(e),n.matchesSelector&&g&&!D[t+" "]&&(!y||!y.test(t))&&(!m||!m.test(t)))try{var r=v.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){D(t,!0);}return le(t,p,null,[e]).length>0},le.contains=function(e,t){return (e.ownerDocument||e)!=p&&f(e),w(e,t)},le.attr=function(e,t){(e.ownerDocument||e)!=p&&f(e);var i=r.attrHandle[t.toLowerCase()],o=i&&L.call(r.attrHandle,t.toLowerCase())?i(e,t,!g):void 0;return void 0!==o?o:n.attributes||!g?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null},le.escape=function(e){return (e+"").replace(re,ie)},le.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},le.uniqueSort=function(e){var t,r=[],i=0,o=0;if(d=!n.detectDuplicates,s=!n.sortStable&&e.slice(0),e.sort(T),d){while(t=e[o++])t===e[o]&&(i=r.push(o));while(i--)e.splice(r[i],1);}return s=null,e},i=le.getText=function(e){var t,n="",r=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=i(e);}else if(3===o||4===o)return e.nodeValue}else while(t=e[r++])n+=i(t);return n},(r=le.selectors={cacheLength:50,createPseudo:ce,match:K,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||le.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&le.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return K.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&X.test(n)&&(t=u(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return "*"===e?function(){return !0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=E[e+" "];return t||(t=new RegExp("(^|"+M+")"+e+"("+M+"|$)"))&&E(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(r){var i=le.attr(r,e);return null==i?"!="===t:!t||(i+="","="===t?i===n:"!="===t?i!==n:"^="===t?n&&0===i.indexOf(n):"*="===t?n&&i.indexOf(n)>-1:"$="===t?n&&i.slice(-n.length)===n:"~="===t?(" "+i.replace(O," ")+" ").indexOf(n)>-1:"|="===t&&(i===n||i.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),u="last"!==e.slice(-4),l="of-type"===t;return 1===r&&0===i?function(e){return !!e.parentNode}:function(t,n,a){var c,s,d,f,p,h,g=o!==u?"nextSibling":"previousSibling",m=t.parentNode,y=l&&t.nodeName.toLowerCase(),v=!a&&!l,w=!1;if(m){if(o){while(g){f=t;while(f=f[g])if(l?f.nodeName.toLowerCase()===y:1===f.nodeType)return !1;h=g="only"===e&&!h&&"nextSibling";}return !0}if(h=[u?m.firstChild:m.lastChild],u&&v){w=(p=(c=(s=(d=(f=m)[b]||(f[b]={}))[f.uniqueID]||(d[f.uniqueID]={}))[e]||[])[0]===C&&c[1])&&c[2],f=p&&m.childNodes[p];while(f=++p&&f&&f[g]||(w=p=0)||h.pop())if(1===f.nodeType&&++w&&f===t){s[e]=[C,p,w];break}}else if(v&&(w=p=(c=(s=(d=(f=t)[b]||(f[b]={}))[f.uniqueID]||(d[f.uniqueID]={}))[e]||[])[0]===C&&c[1]),!1===w)while(f=++p&&f&&f[g]||(w=p=0)||h.pop())if((l?f.nodeName.toLowerCase()===y:1===f.nodeType)&&++w&&(v&&((s=(d=f[b]||(f[b]={}))[f.uniqueID]||(d[f.uniqueID]={}))[e]=[C,w]),f===t))break;return (w-=i)===r||w%r==0&&w/r>=0}}},PSEUDO:function(e,t){var n,i=r.pseudos[e]||r.setFilters[e.toLowerCase()]||le.error("unsupported pseudo: "+e);return i[b]?i(t):i.length>1?(n=[e,e,"",t],r.setFilters.hasOwnProperty(e.toLowerCase())?ce(function(e,n){var r,o=i(e,t),u=o.length;while(u--)e[r=k(e,o[u])]=!(n[r]=o[u]);}):function(e){return i(e,0,n)}):i}},pseudos:{not:ce(function(e){var t=[],n=[],r=l(e.replace(j,"$1"));return r[b]?ce(function(e,t,n,i){var o,u=r(e,null,i,[]),l=e.length;while(l--)(o=u[l])&&(e[l]=!(t[l]=o));}):function(e,i,o){return t[0]=e,r(t,null,o,n),t[0]=null,!n.pop()}}),has:ce(function(e){return function(t){return le(e,t).length>0}}),contains:ce(function(e){return e=e.replace(te,ne),function(t){return (t.textContent||i(t)).indexOf(e)>-1}}),lang:ce(function(e){return J.test(e||"")||le.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=g?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return (n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return !1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===p.activeElement&&(!p.hasFocus||p.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:pe(!1),disabled:pe(!0),checked:function(e){var t=e.nodeName.toLowerCase();return "input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return !1;return !0},parent:function(e){return !r.pseudos.empty(e)},header:function(e){return Y.test(e.nodeName)},input:function(e){return W.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return "input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return "input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:he(function(){return [0]}),last:he(function(e,t){return [t-1]}),eq:he(function(e,t,n){return [n<0?n+t:n]}),even:he(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:he(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:he(function(e,t,n){for(var r=n<0?n+t:n>t?t:n;--r>=0;)e.push(r);return e}),gt:he(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=r.pseudos.eq;for(t in {radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[t]=function(e){return function(t){return "input"===t.nodeName.toLowerCase()&&t.type===e}}(t);for(t in {submit:!0,reset:!0})r.pseudos[t]=function(e){return function(t){var n=t.nodeName.toLowerCase();return ("input"===n||"button"===n)&&t.type===e}}(t);function me(){}me.prototype=r.filters=r.pseudos,r.setFilters=new me,u=le.tokenize=function(e,t){var n,i,o,u,l,a,c,s=A[e+" "];if(s)return t?0:s.slice(0);l=e,a=[],c=r.preFilter;while(l){n&&!(i=G.exec(l))||(i&&(l=l.slice(i[0].length)||l),a.push(o=[])),n=!1,(i=U.exec(l))&&(n=i.shift(),o.push({value:n,type:i[0].replace(j," ")}),l=l.slice(n.length));for(u in r.filter)!(i=K[u].exec(l))||c[u]&&!(i=c[u](i))||(n=i.shift(),o.push({value:n,type:u,matches:i}),l=l.slice(n.length));if(!n)break}return t?l.length:l?le.error(e):A(e,a).slice(0)};function ye(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function ve(e,t,n){var r=t.dir,i=t.next,o=i||r,u=n&&"parentNode"===o,l=x++;return t.first?function(t,n,i){while(t=t[r])if(1===t.nodeType||u)return e(t,n,i);return !1}:function(t,n,a){var c,s,d,f=[C,l];if(a){while(t=t[r])if((1===t.nodeType||u)&&e(t,n,a))return !0}else while(t=t[r])if(1===t.nodeType||u)if(d=t[b]||(t[b]={}),s=d[t.uniqueID]||(d[t.uniqueID]={}),i&&i===t.nodeName.toLowerCase())t=t[r]||t;else {if((c=s[o])&&c[0]===C&&c[1]===l)return f[2]=c[2];if(s[o]=f,f[2]=e(t,n,a))return !0}return !1}}function we(e){return e.length>1?function(t,n,r){var i=e.length;while(i--)if(!e[i](t,n,r))return !1;return !0}:e[0]}function be(e,t,n){for(var r=0,i=t.length;r<i;r++)le(e,t[r],n);return n}function Ne(e,t,n,r,i){for(var o,u=[],l=0,a=e.length,c=null!=t;l<a;l++)(o=e[l])&&(n&&!n(o,r,i)||(u.push(o),c&&t.push(l)));return u}function Ce(e,t,n,r,i,o){return r&&!r[b]&&(r=Ce(r)),i&&!i[b]&&(i=Ce(i,o)),ce(function(o,u,l,a){var c,s,d,f=[],p=[],h=u.length,g=o||be(t||"*",l.nodeType?[l]:l,[]),m=!e||!o&&t?g:Ne(g,f,e,l,a),y=n?i||(o?e:h||r)?[]:u:m;if(n&&n(m,y,l,a),r){c=Ne(y,p),r(c,[],l,a),s=c.length;while(s--)(d=c[s])&&(y[p[s]]=!(m[p[s]]=d));}if(o){if(i||e){if(i){c=[],s=y.length;while(s--)(d=y[s])&&c.push(m[s]=d);i(null,y=[],c,a);}s=y.length;while(s--)(d=y[s])&&(c=i?k(o,d):f[s])>-1&&(o[c]=!(u[c]=d));}}else y=Ne(y===u?y.splice(h,y.length):y),i?i(null,u,y,a):R.apply(u,y);})}function xe(e){for(var t,n,i,o=e.length,u=r.relative[e[0].type],l=u||r.relative[" "],a=u?1:0,s=ve(function(e){return e===t},l,!0),d=ve(function(e){return k(t,e)>-1},l,!0),f=[function(e,n,r){var i=!u&&(r||n!==c)||((t=n).nodeType?s(e,n,r):d(e,n,r));return t=null,i}];a<o;a++)if(n=r.relative[e[a].type])f=[ve(we(f),n)];else {if((n=r.filter[e[a].type].apply(null,e[a].matches))[b]){for(i=++a;i<o;i++)if(r.relative[e[i].type])break;return Ce(a>1&&we(f),a>1&&ye(e.slice(0,a-1).concat({value:" "===e[a-2].type?"*":""})).replace(j,"$1"),n,a<i&&xe(e.slice(a,i)),i<o&&xe(e=e.slice(i)),i<o&&ye(e))}f.push(n);}return we(f)}function Ee(e,t){var n=t.length>0,i=e.length>0,o=function(o,u,l,a,s){var d,h,m,y=0,v="0",w=o&&[],b=[],N=c,x=o||i&&r.find.TAG("*",s),E=C+=null==N?1:Math.random()||.1,A=x.length;for(s&&(c=u==p||u||s);v!==A&&null!=(d=x[v]);v++){if(i&&d){h=0,u||d.ownerDocument==p||(f(d),l=!g);while(m=e[h++])if(m(d,u||p,l)){a.push(d);break}s&&(C=E);}n&&((d=!m&&d)&&y--,o&&w.push(d));}if(y+=v,n&&v!==y){h=0;while(m=t[h++])m(w,b,u,l);if(o){if(y>0)while(v--)w[v]||b[v]||(b[v]=I.call(a));b=Ne(b);}R.apply(a,b),s&&!o&&b.length>0&&y+t.length>1&&le.uniqueSort(a);}return s&&(C=E,c=N),w};return n?ce(o):o}l=le.compile=function(e,t){var n,r=[],i=[],o=S[e+" "];if(!o){t||(t=u(e)),n=t.length;while(n--)(o=xe(t[n]))[b]?r.push(o):i.push(o);(o=S(e,Ee(i,r))).selector=e;}return o},a=le.select=function(e,t,n,i){var o,a,c,s,d,f="function"==typeof e&&e,p=!i&&u(e=f.selector||e);if(n=n||[],1===p.length){if((a=p[0]=p[0].slice(0)).length>2&&"ID"===(c=a[0]).type&&9===t.nodeType&&g&&r.relative[a[1].type]){if(!(t=(r.find.ID(c.matches[0].replace(te,ne),t)||[])[0]))return n;f&&(t=t.parentNode),e=e.slice(a.shift().value.length);}o=K.needsContext.test(e)?0:a.length;while(o--){if(c=a[o],r.relative[s=c.type])break;if((d=r.find[s])&&(i=d(c.matches[0].replace(te,ne),ee.test(a[0].type)&&ge(t.parentNode)||t))){if(a.splice(o,1),!(e=i.length&&ye(a)))return R.apply(n,i),n;break}}}return (f||l(e,p))(i,t,!g,n,!t||ee.test(e)&&ge(t.parentNode)||t),n},n.sortStable=b.split("").sort(T).join("")===b,n.detectDuplicates=!!d,f(),n.sortDetached=se(function(e){return 1&e.compareDocumentPosition(p.createElement("fieldset"))}),se(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||de("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),n.attributes&&se(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||de("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),se(function(e){return null==e.getAttribute("disabled")})||de(H,function(e,t,n){var r;if(!n)return !0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null});var Ae=e.Sizzle;le.noConflict=function(){return e.Sizzle===le&&(e.Sizzle=Ae),le},"function"==typeof define&&define.amd?define(function(){return le}):"undefined"!=typeof module&&module.exports?module.exports=le:e.Sizzle=le;}(window);
//# sourceMappingURL=sizzle.min.map

return module.exports;
})();

function matches(selector, elm) {
  const r = Sizzle.matches(selector, [elm]);
  return r.length > 0;
}
function selectOne(selector, elm) {
  const r = Sizzle(selector, elm);
  return r[0] || null;
}
function selectAll(selector, elm) {
  return Sizzle(selector, elm);
}

class MockClassList {
  constructor(elm) {
    this.elm = elm;
  }
  add(...classNames) {
    const clsNames = getItems(this.elm);
    let updated = false;
    classNames.forEach((className) => {
      className = String(className);
      validateClass(className);
      if (clsNames.includes(className) === false) {
        clsNames.push(className);
        updated = true;
      }
    });
    if (updated) {
      this.elm.setAttributeNS(null, 'class', clsNames.join(' '));
    }
  }
  remove(...classNames) {
    const clsNames = getItems(this.elm);
    let updated = false;
    classNames.forEach((className) => {
      className = String(className);
      validateClass(className);
      const index = clsNames.indexOf(className);
      if (index > -1) {
        clsNames.splice(index, 1);
        updated = true;
      }
    });
    if (updated) {
      this.elm.setAttributeNS(null, 'class', clsNames.filter((c) => c.length > 0).join(' '));
    }
  }
  contains(className) {
    className = String(className);
    return getItems(this.elm).includes(className);
  }
  toggle(className) {
    className = String(className);
    if (this.contains(className) === true) {
      this.remove(className);
    }
    else {
      this.add(className);
    }
  }
  get length() {
    return getItems(this.elm).length;
  }
  item(index) {
    return getItems(this.elm)[index];
  }
  toString() {
    return getItems(this.elm).join(' ');
  }
}
function validateClass(className) {
  if (className === '') {
    throw new Error('The token provided must not be empty.');
  }
  if (/\s/.test(className)) {
    throw new Error(`The token provided ('${className}') contains HTML space characters, which are not valid in tokens.`);
  }
}
function getItems(elm) {
  const className = elm.getAttribute('class');
  if (typeof className === 'string' && className.length > 0) {
    return className
      .trim()
      .split(' ')
      .filter((c) => c.length > 0);
  }
  return [];
}

class MockCSSStyleDeclaration {
  constructor() {
    this._styles = new Map();
  }
  setProperty(prop, value) {
    prop = jsCaseToCssCase(prop);
    if (value == null || value === '') {
      this._styles.delete(prop);
    }
    else {
      this._styles.set(prop, String(value));
    }
  }
  getPropertyValue(prop) {
    prop = jsCaseToCssCase(prop);
    return String(this._styles.get(prop) || '');
  }
  removeProperty(prop) {
    prop = jsCaseToCssCase(prop);
    this._styles.delete(prop);
  }
  get length() {
    return this._styles.size;
  }
  get cssText() {
    const cssText = [];
    this._styles.forEach((value, prop) => {
      cssText.push(`${prop}: ${value};`);
    });
    return cssText.join(' ').trim();
  }
  set cssText(cssText) {
    if (cssText == null || cssText === '') {
      this._styles.clear();
      return;
    }
    cssText.split(';').forEach((rule) => {
      rule = rule.trim();
      if (rule.length > 0) {
        const splt = rule.split(':');
        if (splt.length > 1) {
          const prop = splt[0].trim();
          const value = splt[1].trim();
          if (prop !== '' && value !== '') {
            this._styles.set(jsCaseToCssCase(prop), value);
          }
        }
      }
    });
  }
}
function createCSSStyleDeclaration() {
  return new Proxy(new MockCSSStyleDeclaration(), cssProxyHandler);
}
const cssProxyHandler = {
  get(cssStyle, prop) {
    if (prop in cssStyle) {
      return cssStyle[prop];
    }
    prop = cssCaseToJsCase(prop);
    return cssStyle.getPropertyValue(prop);
  },
  set(cssStyle, prop, value) {
    if (prop in cssStyle) {
      cssStyle[prop] = value;
    }
    else {
      cssStyle.setProperty(prop, value);
    }
    return true;
  },
};
function cssCaseToJsCase(str) {
  // font-size to fontSize
  if (str.length > 1 && str.includes('-') === true) {
    str = str
      .toLowerCase()
      .split('-')
      .map((segment) => segment.charAt(0).toUpperCase() + segment.slice(1))
      .join('');
    str = str.substr(0, 1).toLowerCase() + str.substr(1);
  }
  return str;
}
function jsCaseToCssCase(str) {
  // fontSize to font-size
  if (str.length > 1 && str.includes('-') === false && /[A-Z]/.test(str) === true) {
    str = str
      .replace(/([A-Z])/g, (g) => ' ' + g[0])
      .trim()
      .replace(/ /g, '-')
      .toLowerCase();
  }
  return str;
}

class MockEvent {
  constructor(type, eventInitDict) {
    this.bubbles = false;
    this.cancelBubble = false;
    this.cancelable = false;
    this.composed = false;
    this.currentTarget = null;
    this.defaultPrevented = false;
    this.srcElement = null;
    this.target = null;
    if (typeof type !== 'string') {
      throw new Error(`Event type required`);
    }
    this.type = type;
    this.timeStamp = Date.now();
    if (eventInitDict != null) {
      Object.assign(this, eventInitDict);
    }
  }
  preventDefault() {
    this.defaultPrevented = true;
  }
  stopPropagation() {
    this.cancelBubble = true;
  }
  stopImmediatePropagation() {
    this.cancelBubble = true;
  }
}
class MockCustomEvent extends MockEvent {
  constructor(type, customEventInitDic) {
    super(type);
    this.detail = null;
    if (customEventInitDic != null) {
      Object.assign(this, customEventInitDic);
    }
  }
}
class MockKeyboardEvent extends MockEvent {
  constructor(type, keyboardEventInitDic) {
    super(type);
    this.code = '';
    this.key = '';
    this.altKey = false;
    this.ctrlKey = false;
    this.metaKey = false;
    this.shiftKey = false;
    this.location = 0;
    this.repeat = false;
    if (keyboardEventInitDic != null) {
      Object.assign(this, keyboardEventInitDic);
    }
  }
}
class MockMouseEvent extends MockEvent {
  constructor(type, mouseEventInitDic) {
    super(type);
    this.screenX = 0;
    this.screenY = 0;
    this.clientX = 0;
    this.clientY = 0;
    this.ctrlKey = false;
    this.shiftKey = false;
    this.altKey = false;
    this.metaKey = false;
    this.button = 0;
    this.buttons = 0;
    this.relatedTarget = null;
    if (mouseEventInitDic != null) {
      Object.assign(this, mouseEventInitDic);
    }
  }
}
class MockEventListener {
  constructor(type, handler) {
    this.type = type;
    this.handler = handler;
  }
}
function addEventListener(elm, type, handler) {
  const target = elm;
  if (target.__listeners == null) {
    target.__listeners = [];
  }
  target.__listeners.push(new MockEventListener(type, handler));
}
function removeEventListener(elm, type, handler) {
  const target = elm;
  if (target != null && Array.isArray(target.__listeners) === true) {
    const elmListener = target.__listeners.find((e) => e.type === type && e.handler === handler);
    if (elmListener != null) {
      const index = target.__listeners.indexOf(elmListener);
      target.__listeners.splice(index, 1);
    }
  }
}
function resetEventListeners(target) {
  if (target != null && target.__listeners != null) {
    target.__listeners = null;
  }
}
function triggerEventListener(elm, ev) {
  if (elm == null || ev.cancelBubble === true) {
    return;
  }
  const target = elm;
  ev.currentTarget = elm;
  if (Array.isArray(target.__listeners) === true) {
    const listeners = target.__listeners.filter((e) => e.type === ev.type);
    listeners.forEach((listener) => {
      try {
        listener.handler.call(target, ev);
      }
      catch (err) {
        console.error(err);
      }
    });
  }
  if (ev.bubbles === false) {
    return;
  }
  if (elm.nodeName === "#document" /* DOCUMENT_NODE */) {
    triggerEventListener(elm.defaultView, ev);
  }
  else {
    triggerEventListener(elm.parentElement, ev);
  }
}
function dispatchEvent(currentTarget, ev) {
  ev.target = currentTarget;
  triggerEventListener(currentTarget, ev);
  return true;
}

function serializeNodeToHtml(elm, opts = {}) {
  const output = {
    currentLineWidth: 0,
    indent: 0,
    isWithinBody: false,
    text: [],
  };
  if (opts.prettyHtml) {
    if (typeof opts.indentSpaces !== 'number') {
      opts.indentSpaces = 2;
    }
    if (typeof opts.newLines !== 'boolean') {
      opts.newLines = true;
    }
    opts.approximateLineWidth = -1;
  }
  else {
    opts.prettyHtml = false;
    if (typeof opts.newLines !== 'boolean') {
      opts.newLines = false;
    }
    if (typeof opts.indentSpaces !== 'number') {
      opts.indentSpaces = 0;
    }
  }
  if (typeof opts.approximateLineWidth !== 'number') {
    opts.approximateLineWidth = -1;
  }
  if (typeof opts.removeEmptyAttributes !== 'boolean') {
    opts.removeEmptyAttributes = true;
  }
  if (typeof opts.removeAttributeQuotes !== 'boolean') {
    opts.removeAttributeQuotes = false;
  }
  if (typeof opts.removeBooleanAttributeQuotes !== 'boolean') {
    opts.removeBooleanAttributeQuotes = false;
  }
  if (typeof opts.removeHtmlComments !== 'boolean') {
    opts.removeHtmlComments = false;
  }
  if (typeof opts.serializeShadowRoot !== 'boolean') {
    opts.serializeShadowRoot = false;
  }
  if (opts.outerHtml) {
    serializeToHtml(elm, opts, output, false);
  }
  else {
    for (let i = 0, ii = elm.childNodes.length; i < ii; i++) {
      serializeToHtml(elm.childNodes[i], opts, output, false);
    }
  }
  if (output.text[0] === '\n') {
    output.text.shift();
  }
  if (output.text[output.text.length - 1] === '\n') {
    output.text.pop();
  }
  return output.text.join('');
}
function serializeToHtml(node, opts, output, isShadowRoot) {
  if (node.nodeType === 1 /* ELEMENT_NODE */ || isShadowRoot) {
    const tagName = isShadowRoot ? 'mock:shadow-root' : getTagName(node);
    if (tagName === 'body') {
      output.isWithinBody = true;
    }
    const ignoreTag = opts.excludeTags != null && opts.excludeTags.includes(tagName);
    if (ignoreTag === false) {
      const isWithinWhitespaceSensitiveNode = opts.newLines || opts.indentSpaces > 0 ? isWithinWhitespaceSensitive(node) : false;
      if (opts.newLines && !isWithinWhitespaceSensitiveNode) {
        output.text.push('\n');
        output.currentLineWidth = 0;
      }
      if (opts.indentSpaces > 0 && !isWithinWhitespaceSensitiveNode) {
        for (let i = 0; i < output.indent; i++) {
          output.text.push(' ');
        }
        output.currentLineWidth += output.indent;
      }
      output.text.push('<' + tagName);
      output.currentLineWidth += tagName.length + 1;
      const attrsLength = node.attributes.length;
      const attributes = opts.prettyHtml && attrsLength > 1
        ? cloneAttributes(node.attributes, true)
        : node.attributes;
      for (let i = 0; i < attrsLength; i++) {
        const attr = attributes.item(i);
        const attrName = attr.name;
        if (attrName === 'style') {
          continue;
        }
        let attrValue = attr.value;
        if (opts.removeEmptyAttributes && attrValue === '' && REMOVE_EMPTY_ATTR.has(attrName)) {
          continue;
        }
        const attrNamespaceURI = attr.namespaceURI;
        if (attrNamespaceURI == null) {
          output.currentLineWidth += attrName.length + 1;
          if (opts.approximateLineWidth > 0 && output.currentLineWidth > opts.approximateLineWidth) {
            output.text.push('\n' + attrName);
            output.currentLineWidth = 0;
          }
          else {
            output.text.push(' ' + attrName);
          }
        }
        else if (attrNamespaceURI === 'http://www.w3.org/XML/1998/namespace') {
          output.text.push(' xml:' + attrName);
          output.currentLineWidth += attrName.length + 5;
        }
        else if (attrNamespaceURI === 'http://www.w3.org/2000/xmlns/') {
          if (attrName !== 'xmlns') {
            output.text.push(' xmlns:' + attrName);
            output.currentLineWidth += attrName.length + 7;
          }
          else {
            output.text.push(' ' + attrName);
            output.currentLineWidth += attrName.length + 1;
          }
        }
        else if (attrNamespaceURI === XLINK_NS) {
          output.text.push(' xlink:' + attrName);
          output.currentLineWidth += attrName.length + 7;
        }
        else {
          output.text.push(' ' + attrNamespaceURI + ':' + attrName);
          output.currentLineWidth += attrNamespaceURI.length + attrName.length + 2;
        }
        if (opts.prettyHtml && attrName === 'class') {
          attrValue = attr.value = attrValue
            .split(' ')
            .filter((t) => t !== '')
            .sort()
            .join(' ')
            .trim();
        }
        if (attrValue === '') {
          if (opts.removeBooleanAttributeQuotes && BOOLEAN_ATTR.has(attrName)) {
            continue;
          }
          if (opts.removeEmptyAttributes && attrName.startsWith('data-')) {
            continue;
          }
        }
        if (opts.removeAttributeQuotes && CAN_REMOVE_ATTR_QUOTES.test(attrValue)) {
          output.text.push('=' + escapeString(attrValue, true));
          output.currentLineWidth += attrValue.length + 1;
        }
        else {
          output.text.push('="' + escapeString(attrValue, true) + '"');
          output.currentLineWidth += attrValue.length + 3;
        }
      }
      if (node.hasAttribute('style')) {
        const cssText = node.style.cssText;
        if (opts.approximateLineWidth > 0 &&
          output.currentLineWidth + cssText.length + 10 > opts.approximateLineWidth) {
          output.text.push(`\nstyle="${cssText}">`);
          output.currentLineWidth = 0;
        }
        else {
          output.text.push(` style="${cssText}">`);
          output.currentLineWidth += cssText.length + 10;
        }
      }
      else {
        output.text.push('>');
        output.currentLineWidth += 1;
      }
    }
    if (EMPTY_ELEMENTS.has(tagName) === false) {
      if (opts.serializeShadowRoot && node.shadowRoot != null) {
        output.indent = output.indent + opts.indentSpaces;
        serializeToHtml(node.shadowRoot, opts, output, true);
        output.indent = output.indent - opts.indentSpaces;
        if (opts.newLines &&
          (node.childNodes.length === 0 ||
            (node.childNodes.length === 1 &&
              node.childNodes[0].nodeType === 3 /* TEXT_NODE */ &&
              node.childNodes[0].nodeValue.trim() === ''))) {
          output.text.push('\n');
          output.currentLineWidth = 0;
          for (let i = 0; i < output.indent; i++) {
            output.text.push(' ');
          }
          output.currentLineWidth += output.indent;
        }
      }
      if (opts.excludeTagContent == null || opts.excludeTagContent.includes(tagName) === false) {
        const childNodes = tagName === 'template' ? node.content.childNodes : node.childNodes;
        const childNodeLength = childNodes.length;
        if (childNodeLength > 0) {
          if (childNodeLength === 1 &&
            childNodes[0].nodeType === 3 /* TEXT_NODE */ &&
            (typeof childNodes[0].nodeValue !== 'string' || childNodes[0].nodeValue.trim() === '')) ;
          else {
            const isWithinWhitespaceSensitiveNode = opts.newLines || opts.indentSpaces > 0 ? isWithinWhitespaceSensitive(node) : false;
            if (!isWithinWhitespaceSensitiveNode && opts.indentSpaces > 0 && ignoreTag === false) {
              output.indent = output.indent + opts.indentSpaces;
            }
            for (let i = 0; i < childNodeLength; i++) {
              serializeToHtml(childNodes[i], opts, output, false);
            }
            if (ignoreTag === false) {
              if (opts.newLines && !isWithinWhitespaceSensitiveNode) {
                output.text.push('\n');
                output.currentLineWidth = 0;
              }
              if (opts.indentSpaces > 0 && !isWithinWhitespaceSensitiveNode) {
                output.indent = output.indent - opts.indentSpaces;
                for (let i = 0; i < output.indent; i++) {
                  output.text.push(' ');
                }
                output.currentLineWidth += output.indent;
              }
            }
          }
        }
        if (ignoreTag === false) {
          output.text.push('</' + tagName + '>');
          output.currentLineWidth += tagName.length + 3;
        }
      }
    }
    if (opts.approximateLineWidth > 0 && STRUCTURE_ELEMENTS.has(tagName)) {
      output.text.push('\n');
      output.currentLineWidth = 0;
    }
    if (tagName === 'body') {
      output.isWithinBody = false;
    }
  }
  else if (node.nodeType === 3 /* TEXT_NODE */) {
    let textContent = node.nodeValue;
    if (typeof textContent === 'string') {
      const trimmedTextContent = textContent.trim();
      if (trimmedTextContent === '') {
        // this text node is whitespace only
        if (isWithinWhitespaceSensitive(node)) {
          // whitespace matters within this element
          // just add the exact text we were given
          output.text.push(textContent);
          output.currentLineWidth += textContent.length;
        }
        else if (opts.approximateLineWidth > 0 && !output.isWithinBody) ;
        else if (!opts.prettyHtml) {
          // this text node is only whitespace, and it's not
          // within a whitespace sensitive element like <pre> or <code>
          // so replace the entire white space with a single new line
          output.currentLineWidth += 1;
          if (opts.approximateLineWidth > 0 && output.currentLineWidth > opts.approximateLineWidth) {
            // good enough for a new line
            // for perf these are all just estimates
            // we don't care to ensure exact line lengths
            output.text.push('\n');
            output.currentLineWidth = 0;
          }
          else {
            // let's keep it all on the same line yet
            output.text.push(' ');
          }
        }
      }
      else {
        // this text node has text content
        const isWithinWhitespaceSensitiveNode = opts.newLines || opts.indentSpaces > 0 || opts.prettyHtml ? isWithinWhitespaceSensitive(node) : false;
        if (opts.newLines && !isWithinWhitespaceSensitiveNode) {
          output.text.push('\n');
          output.currentLineWidth = 0;
        }
        if (opts.indentSpaces > 0 && !isWithinWhitespaceSensitiveNode) {
          for (let i = 0; i < output.indent; i++) {
            output.text.push(' ');
          }
          output.currentLineWidth += output.indent;
        }
        let textContentLength = textContent.length;
        if (textContentLength > 0) {
          // this text node has text content
          const parentTagName = node.parentNode != null && node.parentNode.nodeType === 1 /* ELEMENT_NODE */
            ? node.parentNode.nodeName
            : null;
          if (NON_ESCAPABLE_CONTENT.has(parentTagName)) {
            // this text node cannot have its content escaped since it's going
            // into an element like <style> or <script>
            if (isWithinWhitespaceSensitive(node)) {
              output.text.push(textContent);
            }
            else {
              output.text.push(trimmedTextContent);
              textContentLength = trimmedTextContent.length;
            }
            output.currentLineWidth += textContentLength;
          }
          else {
            // this text node is going into a normal element and html can be escaped
            if (opts.prettyHtml && !isWithinWhitespaceSensitiveNode) {
              // pretty print the text node
              output.text.push(escapeString(textContent.replace(/\s\s+/g, ' ').trim(), false));
              output.currentLineWidth += textContentLength;
            }
            else {
              // not pretty printing the text node
              if (isWithinWhitespaceSensitive(node)) {
                output.currentLineWidth += textContentLength;
              }
              else {
                // this element is not a whitespace sensitive one, like <pre> or <code> so
                // any whitespace at the start and end can be cleaned up to just be one space
                if (/\s/.test(textContent.charAt(0))) {
                  textContent = ' ' + textContent.trimLeft();
                }
                textContentLength = textContent.length;
                if (textContentLength > 1) {
                  if (/\s/.test(textContent.charAt(textContentLength - 1))) {
                    if (opts.approximateLineWidth > 0 &&
                      output.currentLineWidth + textContentLength > opts.approximateLineWidth) {
                      textContent = textContent.trimRight() + '\n';
                      output.currentLineWidth = 0;
                    }
                    else {
                      textContent = textContent.trimRight() + ' ';
                    }
                  }
                }
                output.currentLineWidth += textContentLength;
              }
              output.text.push(escapeString(textContent, false));
            }
          }
        }
      }
    }
  }
  else if (node.nodeType === 8 /* COMMENT_NODE */) {
    const nodeValue = node.nodeValue;
    if (opts.removeHtmlComments) {
      const isHydrateAnnotation = nodeValue.startsWith(CONTENT_REF_ID + '.') ||
        nodeValue.startsWith(ORG_LOCATION_ID + '.') ||
        nodeValue.startsWith(SLOT_NODE_ID + '.') ||
        nodeValue.startsWith(TEXT_NODE_ID + '.');
      if (!isHydrateAnnotation) {
        return;
      }
    }
    const isWithinWhitespaceSensitiveNode = opts.newLines || opts.indentSpaces > 0 ? isWithinWhitespaceSensitive(node) : false;
    if (opts.newLines && !isWithinWhitespaceSensitiveNode) {
      output.text.push('\n');
      output.currentLineWidth = 0;
    }
    if (opts.indentSpaces > 0 && !isWithinWhitespaceSensitiveNode) {
      for (let i = 0; i < output.indent; i++) {
        output.text.push(' ');
      }
      output.currentLineWidth += output.indent;
    }
    output.text.push('<!--' + nodeValue + '-->');
    output.currentLineWidth += nodeValue.length + 7;
  }
  else if (node.nodeType === 10 /* DOCUMENT_TYPE_NODE */) {
    output.text.push('<!doctype html>');
  }
}
const AMP_REGEX = /&/g;
const NBSP_REGEX = /\u00a0/g;
const DOUBLE_QUOTE_REGEX = /"/g;
const LT_REGEX = /</g;
const GT_REGEX = />/g;
const CAN_REMOVE_ATTR_QUOTES = /^[^ \t\n\f\r"'`=<>\/\\-]+$/;
function getTagName(element) {
  if (element.namespaceURI === 'http://www.w3.org/1999/xhtml') {
    return element.nodeName.toLowerCase();
  }
  else {
    return element.nodeName;
  }
}
function escapeString(str, attrMode) {
  str = str.replace(AMP_REGEX, '&amp;').replace(NBSP_REGEX, '&nbsp;');
  if (attrMode) {
    return str.replace(DOUBLE_QUOTE_REGEX, '&quot;');
  }
  return str.replace(LT_REGEX, '&lt;').replace(GT_REGEX, '&gt;');
}
function isWithinWhitespaceSensitive(node) {
  while (node != null) {
    if (WHITESPACE_SENSITIVE.has(node.nodeName)) {
      return true;
    }
    node = node.parentNode;
  }
  return false;
}
/*@__PURE__*/ const NON_ESCAPABLE_CONTENT = new Set([
  'STYLE',
  'SCRIPT',
  'IFRAME',
  'NOSCRIPT',
  'XMP',
  'NOEMBED',
  'NOFRAMES',
  'PLAINTEXT',
]);
/*@__PURE__*/ const WHITESPACE_SENSITIVE = new Set([
  'CODE',
  'OUTPUT',
  'PLAINTEXT',
  'PRE',
  'SCRIPT',
  'TEMPLATE',
  'TEXTAREA',
]);
/*@__PURE__*/ const EMPTY_ELEMENTS = new Set([
  'area',
  'base',
  'basefont',
  'bgsound',
  'br',
  'col',
  'embed',
  'frame',
  'hr',
  'img',
  'input',
  'keygen',
  'link',
  'meta',
  'param',
  'source',
  'trace',
  'wbr',
]);
/*@__PURE__*/ const REMOVE_EMPTY_ATTR = new Set(['class', 'dir', 'id', 'lang', 'name', 'title']);
/*@__PURE__*/ const BOOLEAN_ATTR = new Set([
  'allowfullscreen',
  'async',
  'autofocus',
  'autoplay',
  'checked',
  'compact',
  'controls',
  'declare',
  'default',
  'defaultchecked',
  'defaultmuted',
  'defaultselected',
  'defer',
  'disabled',
  'enabled',
  'formnovalidate',
  'hidden',
  'indeterminate',
  'inert',
  'ismap',
  'itemscope',
  'loop',
  'multiple',
  'muted',
  'nohref',
  'nomodule',
  'noresize',
  'noshade',
  'novalidate',
  'nowrap',
  'open',
  'pauseonexit',
  'readonly',
  'required',
  'reversed',
  'scoped',
  'seamless',
  'selected',
  'sortable',
  'truespeed',
  'typemustmatch',
  'visible',
]);
/*@__PURE__*/ const STRUCTURE_ELEMENTS = new Set([
  'html',
  'body',
  'head',
  'iframe',
  'meta',
  'link',
  'base',
  'title',
  'script',
  'style',
]);

// Parse5 6.0.1
const e=function(e){const t=[65534,65535,131070,131071,196606,196607,262142,262143,327678,327679,393214,393215,458750,458751,524286,524287,589822,589823,655358,655359,720894,720895,786430,786431,851966,851967,917502,917503,983038,983039,1048574,1048575,1114110,1114111];var n="�",s={EOF:-1,NULL:0,TABULATION:9,CARRIAGE_RETURN:13,LINE_FEED:10,FORM_FEED:12,SPACE:32,EXCLAMATION_MARK:33,QUOTATION_MARK:34,NUMBER_SIGN:35,AMPERSAND:38,APOSTROPHE:39,HYPHEN_MINUS:45,SOLIDUS:47,DIGIT_0:48,DIGIT_9:57,SEMICOLON:59,LESS_THAN_SIGN:60,EQUALS_SIGN:61,GREATER_THAN_SIGN:62,QUESTION_MARK:63,LATIN_CAPITAL_A:65,LATIN_CAPITAL_F:70,LATIN_CAPITAL_X:88,LATIN_CAPITAL_Z:90,RIGHT_SQUARE_BRACKET:93,GRAVE_ACCENT:96,LATIN_SMALL_A:97,LATIN_SMALL_F:102,LATIN_SMALL_X:120,LATIN_SMALL_Z:122,REPLACEMENT_CHARACTER:65533},r=function(e){return e>=55296&&e<=57343},i=function(e){return 32!==e&&10!==e&&13!==e&&9!==e&&12!==e&&e>=1&&e<=31||e>=127&&e<=159},o=function(e){return e>=64976&&e<=65007||t.indexOf(e)>-1},a="unexpected-null-character",T="invalid-first-character-of-tag-name",E="missing-semicolon-after-character-reference",h="eof-before-tag-name",c="eof-in-tag",_="missing-whitespace-after-doctype-public-keyword",l="missing-whitespace-between-doctype-public-and-system-identifiers",m="missing-whitespace-after-doctype-system-keyword",p="missing-quote-before-doctype-public-identifier",A="missing-quote-before-doctype-system-identifier",u="missing-doctype-public-identifier",N="missing-doctype-system-identifier",d="abrupt-doctype-public-identifier",C="abrupt-doctype-system-identifier",O="eof-in-script-html-comment-like-text",f="eof-in-doctype",S="abrupt-closing-of-empty-comment",R="eof-in-comment",I="absence-of-digits-in-numeric-character-reference",L="end-tag-without-matching-open-element",k="misplaced-start-tag-for-head-element";const M=s;var g=new Uint16Array([4,52,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,106,303,412,810,1432,1701,1796,1987,2114,2360,2420,2484,3170,3251,4140,4393,4575,4610,5106,5512,5728,6117,6274,6315,6345,6427,6516,7002,7910,8733,9323,9870,10170,10631,10893,11318,11386,11467,12773,13092,14474,14922,15448,15542,16419,17666,18166,18611,19004,19095,19298,19397,4,16,69,77,97,98,99,102,103,108,109,110,111,112,114,115,116,117,140,150,158,169,176,194,199,210,216,222,226,242,256,266,283,294,108,105,103,5,198,1,59,148,1,198,80,5,38,1,59,156,1,38,99,117,116,101,5,193,1,59,167,1,193,114,101,118,101,59,1,258,4,2,105,121,182,191,114,99,5,194,1,59,189,1,194,59,1,1040,114,59,3,55349,56580,114,97,118,101,5,192,1,59,208,1,192,112,104,97,59,1,913,97,99,114,59,1,256,100,59,1,10835,4,2,103,112,232,237,111,110,59,1,260,102,59,3,55349,56632,112,108,121,70,117,110,99,116,105,111,110,59,1,8289,105,110,103,5,197,1,59,264,1,197,4,2,99,115,272,277,114,59,3,55349,56476,105,103,110,59,1,8788,105,108,100,101,5,195,1,59,292,1,195,109,108,5,196,1,59,301,1,196,4,8,97,99,101,102,111,114,115,117,321,350,354,383,388,394,400,405,4,2,99,114,327,336,107,115,108,97,115,104,59,1,8726,4,2,118,119,342,345,59,1,10983,101,100,59,1,8966,121,59,1,1041,4,3,99,114,116,362,369,379,97,117,115,101,59,1,8757,110,111,117,108,108,105,115,59,1,8492,97,59,1,914,114,59,3,55349,56581,112,102,59,3,55349,56633,101,118,101,59,1,728,99,114,59,1,8492,109,112,101,113,59,1,8782,4,14,72,79,97,99,100,101,102,104,105,108,111,114,115,117,442,447,456,504,542,547,569,573,577,616,678,784,790,796,99,121,59,1,1063,80,89,5,169,1,59,454,1,169,4,3,99,112,121,464,470,497,117,116,101,59,1,262,4,2,59,105,476,478,1,8914,116,97,108,68,105,102,102,101,114,101,110,116,105,97,108,68,59,1,8517,108,101,121,115,59,1,8493,4,4,97,101,105,111,514,520,530,535,114,111,110,59,1,268,100,105,108,5,199,1,59,528,1,199,114,99,59,1,264,110,105,110,116,59,1,8752,111,116,59,1,266,4,2,100,110,553,560,105,108,108,97,59,1,184,116,101,114,68,111,116,59,1,183,114,59,1,8493,105,59,1,935,114,99,108,101,4,4,68,77,80,84,591,596,603,609,111,116,59,1,8857,105,110,117,115,59,1,8854,108,117,115,59,1,8853,105,109,101,115,59,1,8855,111,4,2,99,115,623,646,107,119,105,115,101,67,111,110,116,111,117,114,73,110,116,101,103,114,97,108,59,1,8754,101,67,117,114,108,121,4,2,68,81,658,671,111,117,98,108,101,81,117,111,116,101,59,1,8221,117,111,116,101,59,1,8217,4,4,108,110,112,117,688,701,736,753,111,110,4,2,59,101,696,698,1,8759,59,1,10868,4,3,103,105,116,709,717,722,114,117,101,110,116,59,1,8801,110,116,59,1,8751,111,117,114,73,110,116,101,103,114,97,108,59,1,8750,4,2,102,114,742,745,59,1,8450,111,100,117,99,116,59,1,8720,110,116,101,114,67,108,111,99,107,119,105,115,101,67,111,110,116,111,117,114,73,110,116,101,103,114,97,108,59,1,8755,111,115,115,59,1,10799,99,114,59,3,55349,56478,112,4,2,59,67,803,805,1,8915,97,112,59,1,8781,4,11,68,74,83,90,97,99,101,102,105,111,115,834,850,855,860,865,888,903,916,921,1011,1415,4,2,59,111,840,842,1,8517,116,114,97,104,100,59,1,10513,99,121,59,1,1026,99,121,59,1,1029,99,121,59,1,1039,4,3,103,114,115,873,879,883,103,101,114,59,1,8225,114,59,1,8609,104,118,59,1,10980,4,2,97,121,894,900,114,111,110,59,1,270,59,1,1044,108,4,2,59,116,910,912,1,8711,97,59,1,916,114,59,3,55349,56583,4,2,97,102,927,998,4,2,99,109,933,992,114,105,116,105,99,97,108,4,4,65,68,71,84,950,957,978,985,99,117,116,101,59,1,180,111,4,2,116,117,964,967,59,1,729,98,108,101,65,99,117,116,101,59,1,733,114,97,118,101,59,1,96,105,108,100,101,59,1,732,111,110,100,59,1,8900,102,101,114,101,110,116,105,97,108,68,59,1,8518,4,4,112,116,117,119,1021,1026,1048,1249,102,59,3,55349,56635,4,3,59,68,69,1034,1036,1041,1,168,111,116,59,1,8412,113,117,97,108,59,1,8784,98,108,101,4,6,67,68,76,82,85,86,1065,1082,1101,1189,1211,1236,111,110,116,111,117,114,73,110,116,101,103,114,97,108,59,1,8751,111,4,2,116,119,1089,1092,59,1,168,110,65,114,114,111,119,59,1,8659,4,2,101,111,1107,1141,102,116,4,3,65,82,84,1117,1124,1136,114,114,111,119,59,1,8656,105,103,104,116,65,114,114,111,119,59,1,8660,101,101,59,1,10980,110,103,4,2,76,82,1149,1177,101,102,116,4,2,65,82,1158,1165,114,114,111,119,59,1,10232,105,103,104,116,65,114,114,111,119,59,1,10234,105,103,104,116,65,114,114,111,119,59,1,10233,105,103,104,116,4,2,65,84,1199,1206,114,114,111,119,59,1,8658,101,101,59,1,8872,112,4,2,65,68,1218,1225,114,114,111,119,59,1,8657,111,119,110,65,114,114,111,119,59,1,8661,101,114,116,105,99,97,108,66,97,114,59,1,8741,110,4,6,65,66,76,82,84,97,1264,1292,1299,1352,1391,1408,114,114,111,119,4,3,59,66,85,1276,1278,1283,1,8595,97,114,59,1,10515,112,65,114,114,111,119,59,1,8693,114,101,118,101,59,1,785,101,102,116,4,3,82,84,86,1310,1323,1334,105,103,104,116,86,101,99,116,111,114,59,1,10576,101,101,86,101,99,116,111,114,59,1,10590,101,99,116,111,114,4,2,59,66,1345,1347,1,8637,97,114,59,1,10582,105,103,104,116,4,2,84,86,1362,1373,101,101,86,101,99,116,111,114,59,1,10591,101,99,116,111,114,4,2,59,66,1384,1386,1,8641,97,114,59,1,10583,101,101,4,2,59,65,1399,1401,1,8868,114,114,111,119,59,1,8615,114,114,111,119,59,1,8659,4,2,99,116,1421,1426,114,59,3,55349,56479,114,111,107,59,1,272,4,16,78,84,97,99,100,102,103,108,109,111,112,113,115,116,117,120,1466,1470,1478,1489,1515,1520,1525,1536,1544,1593,1609,1617,1650,1664,1668,1677,71,59,1,330,72,5,208,1,59,1476,1,208,99,117,116,101,5,201,1,59,1487,1,201,4,3,97,105,121,1497,1503,1512,114,111,110,59,1,282,114,99,5,202,1,59,1510,1,202,59,1,1069,111,116,59,1,278,114,59,3,55349,56584,114,97,118,101,5,200,1,59,1534,1,200,101,109,101,110,116,59,1,8712,4,2,97,112,1550,1555,99,114,59,1,274,116,121,4,2,83,86,1563,1576,109,97,108,108,83,113,117,97,114,101,59,1,9723,101,114,121,83,109,97,108,108,83,113,117,97,114,101,59,1,9643,4,2,103,112,1599,1604,111,110,59,1,280,102,59,3,55349,56636,115,105,108,111,110,59,1,917,117,4,2,97,105,1624,1640,108,4,2,59,84,1631,1633,1,10869,105,108,100,101,59,1,8770,108,105,98,114,105,117,109,59,1,8652,4,2,99,105,1656,1660,114,59,1,8496,109,59,1,10867,97,59,1,919,109,108,5,203,1,59,1675,1,203,4,2,105,112,1683,1689,115,116,115,59,1,8707,111,110,101,110,116,105,97,108,69,59,1,8519,4,5,99,102,105,111,115,1713,1717,1722,1762,1791,121,59,1,1060,114,59,3,55349,56585,108,108,101,100,4,2,83,86,1732,1745,109,97,108,108,83,113,117,97,114,101,59,1,9724,101,114,121,83,109,97,108,108,83,113,117,97,114,101,59,1,9642,4,3,112,114,117,1770,1775,1781,102,59,3,55349,56637,65,108,108,59,1,8704,114,105,101,114,116,114,102,59,1,8497,99,114,59,1,8497,4,12,74,84,97,98,99,100,102,103,111,114,115,116,1822,1827,1834,1848,1855,1877,1882,1887,1890,1896,1978,1984,99,121,59,1,1027,5,62,1,59,1832,1,62,109,109,97,4,2,59,100,1843,1845,1,915,59,1,988,114,101,118,101,59,1,286,4,3,101,105,121,1863,1869,1874,100,105,108,59,1,290,114,99,59,1,284,59,1,1043,111,116,59,1,288,114,59,3,55349,56586,59,1,8921,112,102,59,3,55349,56638,101,97,116,101,114,4,6,69,70,71,76,83,84,1915,1933,1944,1953,1959,1971,113,117,97,108,4,2,59,76,1925,1927,1,8805,101,115,115,59,1,8923,117,108,108,69,113,117,97,108,59,1,8807,114,101,97,116,101,114,59,1,10914,101,115,115,59,1,8823,108,97,110,116,69,113,117,97,108,59,1,10878,105,108,100,101,59,1,8819,99,114,59,3,55349,56482,59,1,8811,4,8,65,97,99,102,105,111,115,117,2005,2012,2026,2032,2036,2049,2073,2089,82,68,99,121,59,1,1066,4,2,99,116,2018,2023,101,107,59,1,711,59,1,94,105,114,99,59,1,292,114,59,1,8460,108,98,101,114,116,83,112,97,99,101,59,1,8459,4,2,112,114,2055,2059,102,59,1,8461,105,122,111,110,116,97,108,76,105,110,101,59,1,9472,4,2,99,116,2079,2083,114,59,1,8459,114,111,107,59,1,294,109,112,4,2,68,69,2097,2107,111,119,110,72,117,109,112,59,1,8782,113,117,97,108,59,1,8783,4,14,69,74,79,97,99,100,102,103,109,110,111,115,116,117,2144,2149,2155,2160,2171,2189,2194,2198,2209,2245,2307,2329,2334,2341,99,121,59,1,1045,108,105,103,59,1,306,99,121,59,1,1025,99,117,116,101,5,205,1,59,2169,1,205,4,2,105,121,2177,2186,114,99,5,206,1,59,2184,1,206,59,1,1048,111,116,59,1,304,114,59,1,8465,114,97,118,101,5,204,1,59,2207,1,204,4,3,59,97,112,2217,2219,2238,1,8465,4,2,99,103,2225,2229,114,59,1,298,105,110,97,114,121,73,59,1,8520,108,105,101,115,59,1,8658,4,2,116,118,2251,2281,4,2,59,101,2257,2259,1,8748,4,2,103,114,2265,2271,114,97,108,59,1,8747,115,101,99,116,105,111,110,59,1,8898,105,115,105,98,108,101,4,2,67,84,2293,2300,111,109,109,97,59,1,8291,105,109,101,115,59,1,8290,4,3,103,112,116,2315,2320,2325,111,110,59,1,302,102,59,3,55349,56640,97,59,1,921,99,114,59,1,8464,105,108,100,101,59,1,296,4,2,107,109,2347,2352,99,121,59,1,1030,108,5,207,1,59,2358,1,207,4,5,99,102,111,115,117,2372,2386,2391,2397,2414,4,2,105,121,2378,2383,114,99,59,1,308,59,1,1049,114,59,3,55349,56589,112,102,59,3,55349,56641,4,2,99,101,2403,2408,114,59,3,55349,56485,114,99,121,59,1,1032,107,99,121,59,1,1028,4,7,72,74,97,99,102,111,115,2436,2441,2446,2452,2467,2472,2478,99,121,59,1,1061,99,121,59,1,1036,112,112,97,59,1,922,4,2,101,121,2458,2464,100,105,108,59,1,310,59,1,1050,114,59,3,55349,56590,112,102,59,3,55349,56642,99,114,59,3,55349,56486,4,11,74,84,97,99,101,102,108,109,111,115,116,2508,2513,2520,2562,2585,2981,2986,3004,3011,3146,3167,99,121,59,1,1033,5,60,1,59,2518,1,60,4,5,99,109,110,112,114,2532,2538,2544,2548,2558,117,116,101,59,1,313,98,100,97,59,1,923,103,59,1,10218,108,97,99,101,116,114,102,59,1,8466,114,59,1,8606,4,3,97,101,121,2570,2576,2582,114,111,110,59,1,317,100,105,108,59,1,315,59,1,1051,4,2,102,115,2591,2907,116,4,10,65,67,68,70,82,84,85,86,97,114,2614,2663,2672,2728,2735,2760,2820,2870,2888,2895,4,2,110,114,2620,2633,103,108,101,66,114,97,99,107,101,116,59,1,10216,114,111,119,4,3,59,66,82,2644,2646,2651,1,8592,97,114,59,1,8676,105,103,104,116,65,114,114,111,119,59,1,8646,101,105,108,105,110,103,59,1,8968,111,4,2,117,119,2679,2692,98,108,101,66,114,97,99,107,101,116,59,1,10214,110,4,2,84,86,2699,2710,101,101,86,101,99,116,111,114,59,1,10593,101,99,116,111,114,4,2,59,66,2721,2723,1,8643,97,114,59,1,10585,108,111,111,114,59,1,8970,105,103,104,116,4,2,65,86,2745,2752,114,114,111,119,59,1,8596,101,99,116,111,114,59,1,10574,4,2,101,114,2766,2792,101,4,3,59,65,86,2775,2777,2784,1,8867,114,114,111,119,59,1,8612,101,99,116,111,114,59,1,10586,105,97,110,103,108,101,4,3,59,66,69,2806,2808,2813,1,8882,97,114,59,1,10703,113,117,97,108,59,1,8884,112,4,3,68,84,86,2829,2841,2852,111,119,110,86,101,99,116,111,114,59,1,10577,101,101,86,101,99,116,111,114,59,1,10592,101,99,116,111,114,4,2,59,66,2863,2865,1,8639,97,114,59,1,10584,101,99,116,111,114,4,2,59,66,2881,2883,1,8636,97,114,59,1,10578,114,114,111,119,59,1,8656,105,103,104,116,97,114,114,111,119,59,1,8660,115,4,6,69,70,71,76,83,84,2922,2936,2947,2956,2962,2974,113,117,97,108,71,114,101,97,116,101,114,59,1,8922,117,108,108,69,113,117,97,108,59,1,8806,114,101,97,116,101,114,59,1,8822,101,115,115,59,1,10913,108,97,110,116,69,113,117,97,108,59,1,10877,105,108,100,101,59,1,8818,114,59,3,55349,56591,4,2,59,101,2992,2994,1,8920,102,116,97,114,114,111,119,59,1,8666,105,100,111,116,59,1,319,4,3,110,112,119,3019,3110,3115,103,4,4,76,82,108,114,3030,3058,3070,3098,101,102,116,4,2,65,82,3039,3046,114,114,111,119,59,1,10229,105,103,104,116,65,114,114,111,119,59,1,10231,105,103,104,116,65,114,114,111,119,59,1,10230,101,102,116,4,2,97,114,3079,3086,114,114,111,119,59,1,10232,105,103,104,116,97,114,114,111,119,59,1,10234,105,103,104,116,97,114,114,111,119,59,1,10233,102,59,3,55349,56643,101,114,4,2,76,82,3123,3134,101,102,116,65,114,114,111,119,59,1,8601,105,103,104,116,65,114,114,111,119,59,1,8600,4,3,99,104,116,3154,3158,3161,114,59,1,8466,59,1,8624,114,111,107,59,1,321,59,1,8810,4,8,97,99,101,102,105,111,115,117,3188,3192,3196,3222,3227,3237,3243,3248,112,59,1,10501,121,59,1,1052,4,2,100,108,3202,3213,105,117,109,83,112,97,99,101,59,1,8287,108,105,110,116,114,102,59,1,8499,114,59,3,55349,56592,110,117,115,80,108,117,115,59,1,8723,112,102,59,3,55349,56644,99,114,59,1,8499,59,1,924,4,9,74,97,99,101,102,111,115,116,117,3271,3276,3283,3306,3422,3427,4120,4126,4137,99,121,59,1,1034,99,117,116,101,59,1,323,4,3,97,101,121,3291,3297,3303,114,111,110,59,1,327,100,105,108,59,1,325,59,1,1053,4,3,103,115,119,3314,3380,3415,97,116,105,118,101,4,3,77,84,86,3327,3340,3365,101,100,105,117,109,83,112,97,99,101,59,1,8203,104,105,4,2,99,110,3348,3357,107,83,112,97,99,101,59,1,8203,83,112,97,99,101,59,1,8203,101,114,121,84,104,105,110,83,112,97,99,101,59,1,8203,116,101,100,4,2,71,76,3389,3405,114,101,97,116,101,114,71,114,101,97,116,101,114,59,1,8811,101,115,115,76,101,115,115,59,1,8810,76,105,110,101,59,1,10,114,59,3,55349,56593,4,4,66,110,112,116,3437,3444,3460,3464,114,101,97,107,59,1,8288,66,114,101,97,107,105,110,103,83,112,97,99,101,59,1,160,102,59,1,8469,4,13,59,67,68,69,71,72,76,78,80,82,83,84,86,3492,3494,3517,3536,3578,3657,3685,3784,3823,3860,3915,4066,4107,1,10988,4,2,111,117,3500,3510,110,103,114,117,101,110,116,59,1,8802,112,67,97,112,59,1,8813,111,117,98,108,101,86,101,114,116,105,99,97,108,66,97,114,59,1,8742,4,3,108,113,120,3544,3552,3571,101,109,101,110,116,59,1,8713,117,97,108,4,2,59,84,3561,3563,1,8800,105,108,100,101,59,3,8770,824,105,115,116,115,59,1,8708,114,101,97,116,101,114,4,7,59,69,70,71,76,83,84,3600,3602,3609,3621,3631,3637,3650,1,8815,113,117,97,108,59,1,8817,117,108,108,69,113,117,97,108,59,3,8807,824,114,101,97,116,101,114,59,3,8811,824,101,115,115,59,1,8825,108,97,110,116,69,113,117,97,108,59,3,10878,824,105,108,100,101,59,1,8821,117,109,112,4,2,68,69,3666,3677,111,119,110,72,117,109,112,59,3,8782,824,113,117,97,108,59,3,8783,824,101,4,2,102,115,3692,3724,116,84,114,105,97,110,103,108,101,4,3,59,66,69,3709,3711,3717,1,8938,97,114,59,3,10703,824,113,117,97,108,59,1,8940,115,4,6,59,69,71,76,83,84,3739,3741,3748,3757,3764,3777,1,8814,113,117,97,108,59,1,8816,114,101,97,116,101,114,59,1,8824,101,115,115,59,3,8810,824,108,97,110,116,69,113,117,97,108,59,3,10877,824,105,108,100,101,59,1,8820,101,115,116,101,100,4,2,71,76,3795,3812,114,101,97,116,101,114,71,114,101,97,116,101,114,59,3,10914,824,101,115,115,76,101,115,115,59,3,10913,824,114,101,99,101,100,101,115,4,3,59,69,83,3838,3840,3848,1,8832,113,117,97,108,59,3,10927,824,108,97,110,116,69,113,117,97,108,59,1,8928,4,2,101,105,3866,3881,118,101,114,115,101,69,108,101,109,101,110,116,59,1,8716,103,104,116,84,114,105,97,110,103,108,101,4,3,59,66,69,3900,3902,3908,1,8939,97,114,59,3,10704,824,113,117,97,108,59,1,8941,4,2,113,117,3921,3973,117,97,114,101,83,117,4,2,98,112,3933,3952,115,101,116,4,2,59,69,3942,3945,3,8847,824,113,117,97,108,59,1,8930,101,114,115,101,116,4,2,59,69,3963,3966,3,8848,824,113,117,97,108,59,1,8931,4,3,98,99,112,3981,4e3,4045,115,101,116,4,2,59,69,3990,3993,3,8834,8402,113,117,97,108,59,1,8840,99,101,101,100,115,4,4,59,69,83,84,4015,4017,4025,4037,1,8833,113,117,97,108,59,3,10928,824,108,97,110,116,69,113,117,97,108,59,1,8929,105,108,100,101,59,3,8831,824,101,114,115,101,116,4,2,59,69,4056,4059,3,8835,8402,113,117,97,108,59,1,8841,105,108,100,101,4,4,59,69,70,84,4080,4082,4089,4100,1,8769,113,117,97,108,59,1,8772,117,108,108,69,113,117,97,108,59,1,8775,105,108,100,101,59,1,8777,101,114,116,105,99,97,108,66,97,114,59,1,8740,99,114,59,3,55349,56489,105,108,100,101,5,209,1,59,4135,1,209,59,1,925,4,14,69,97,99,100,102,103,109,111,112,114,115,116,117,118,4170,4176,4187,4205,4212,4217,4228,4253,4259,4292,4295,4316,4337,4346,108,105,103,59,1,338,99,117,116,101,5,211,1,59,4185,1,211,4,2,105,121,4193,4202,114,99,5,212,1,59,4200,1,212,59,1,1054,98,108,97,99,59,1,336,114,59,3,55349,56594,114,97,118,101,5,210,1,59,4226,1,210,4,3,97,101,105,4236,4241,4246,99,114,59,1,332,103,97,59,1,937,99,114,111,110,59,1,927,112,102,59,3,55349,56646,101,110,67,117,114,108,121,4,2,68,81,4272,4285,111,117,98,108,101,81,117,111,116,101,59,1,8220,117,111,116,101,59,1,8216,59,1,10836,4,2,99,108,4301,4306,114,59,3,55349,56490,97,115,104,5,216,1,59,4314,1,216,105,4,2,108,109,4323,4332,100,101,5,213,1,59,4330,1,213,101,115,59,1,10807,109,108,5,214,1,59,4344,1,214,101,114,4,2,66,80,4354,4380,4,2,97,114,4360,4364,114,59,1,8254,97,99,4,2,101,107,4372,4375,59,1,9182,101,116,59,1,9140,97,114,101,110,116,104,101,115,105,115,59,1,9180,4,9,97,99,102,104,105,108,111,114,115,4413,4422,4426,4431,4435,4438,4448,4471,4561,114,116,105,97,108,68,59,1,8706,121,59,1,1055,114,59,3,55349,56595,105,59,1,934,59,1,928,117,115,77,105,110,117,115,59,1,177,4,2,105,112,4454,4467,110,99,97,114,101,112,108,97,110,101,59,1,8460,102,59,1,8473,4,4,59,101,105,111,4481,4483,4526,4531,1,10939,99,101,100,101,115,4,4,59,69,83,84,4498,4500,4507,4519,1,8826,113,117,97,108,59,1,10927,108,97,110,116,69,113,117,97,108,59,1,8828,105,108,100,101,59,1,8830,109,101,59,1,8243,4,2,100,112,4537,4543,117,99,116,59,1,8719,111,114,116,105,111,110,4,2,59,97,4555,4557,1,8759,108,59,1,8733,4,2,99,105,4567,4572,114,59,3,55349,56491,59,1,936,4,4,85,102,111,115,4585,4594,4599,4604,79,84,5,34,1,59,4592,1,34,114,59,3,55349,56596,112,102,59,1,8474,99,114,59,3,55349,56492,4,12,66,69,97,99,101,102,104,105,111,114,115,117,4636,4642,4650,4681,4704,4763,4767,4771,5047,5069,5081,5094,97,114,114,59,1,10512,71,5,174,1,59,4648,1,174,4,3,99,110,114,4658,4664,4668,117,116,101,59,1,340,103,59,1,10219,114,4,2,59,116,4675,4677,1,8608,108,59,1,10518,4,3,97,101,121,4689,4695,4701,114,111,110,59,1,344,100,105,108,59,1,342,59,1,1056,4,2,59,118,4710,4712,1,8476,101,114,115,101,4,2,69,85,4722,4748,4,2,108,113,4728,4736,101,109,101,110,116,59,1,8715,117,105,108,105,98,114,105,117,109,59,1,8651,112,69,113,117,105,108,105,98,114,105,117,109,59,1,10607,114,59,1,8476,111,59,1,929,103,104,116,4,8,65,67,68,70,84,85,86,97,4792,4840,4849,4905,4912,4972,5022,5040,4,2,110,114,4798,4811,103,108,101,66,114,97,99,107,101,116,59,1,10217,114,111,119,4,3,59,66,76,4822,4824,4829,1,8594,97,114,59,1,8677,101,102,116,65,114,114,111,119,59,1,8644,101,105,108,105,110,103,59,1,8969,111,4,2,117,119,4856,4869,98,108,101,66,114,97,99,107,101,116,59,1,10215,110,4,2,84,86,4876,4887,101,101,86,101,99,116,111,114,59,1,10589,101,99,116,111,114,4,2,59,66,4898,4900,1,8642,97,114,59,1,10581,108,111,111,114,59,1,8971,4,2,101,114,4918,4944,101,4,3,59,65,86,4927,4929,4936,1,8866,114,114,111,119,59,1,8614,101,99,116,111,114,59,1,10587,105,97,110,103,108,101,4,3,59,66,69,4958,4960,4965,1,8883,97,114,59,1,10704,113,117,97,108,59,1,8885,112,4,3,68,84,86,4981,4993,5004,111,119,110,86,101,99,116,111,114,59,1,10575,101,101,86,101,99,116,111,114,59,1,10588,101,99,116,111,114,4,2,59,66,5015,5017,1,8638,97,114,59,1,10580,101,99,116,111,114,4,2,59,66,5033,5035,1,8640,97,114,59,1,10579,114,114,111,119,59,1,8658,4,2,112,117,5053,5057,102,59,1,8477,110,100,73,109,112,108,105,101,115,59,1,10608,105,103,104,116,97,114,114,111,119,59,1,8667,4,2,99,104,5087,5091,114,59,1,8475,59,1,8625,108,101,68,101,108,97,121,101,100,59,1,10740,4,13,72,79,97,99,102,104,105,109,111,113,115,116,117,5134,5150,5157,5164,5198,5203,5259,5265,5277,5283,5374,5380,5385,4,2,67,99,5140,5146,72,99,121,59,1,1065,121,59,1,1064,70,84,99,121,59,1,1068,99,117,116,101,59,1,346,4,5,59,97,101,105,121,5176,5178,5184,5190,5195,1,10940,114,111,110,59,1,352,100,105,108,59,1,350,114,99,59,1,348,59,1,1057,114,59,3,55349,56598,111,114,116,4,4,68,76,82,85,5216,5227,5238,5250,111,119,110,65,114,114,111,119,59,1,8595,101,102,116,65,114,114,111,119,59,1,8592,105,103,104,116,65,114,114,111,119,59,1,8594,112,65,114,114,111,119,59,1,8593,103,109,97,59,1,931,97,108,108,67,105,114,99,108,101,59,1,8728,112,102,59,3,55349,56650,4,2,114,117,5289,5293,116,59,1,8730,97,114,101,4,4,59,73,83,85,5306,5308,5322,5367,1,9633,110,116,101,114,115,101,99,116,105,111,110,59,1,8851,117,4,2,98,112,5329,5347,115,101,116,4,2,59,69,5338,5340,1,8847,113,117,97,108,59,1,8849,101,114,115,101,116,4,2,59,69,5358,5360,1,8848,113,117,97,108,59,1,8850,110,105,111,110,59,1,8852,99,114,59,3,55349,56494,97,114,59,1,8902,4,4,98,99,109,112,5395,5420,5475,5478,4,2,59,115,5401,5403,1,8912,101,116,4,2,59,69,5411,5413,1,8912,113,117,97,108,59,1,8838,4,2,99,104,5426,5468,101,101,100,115,4,4,59,69,83,84,5440,5442,5449,5461,1,8827,113,117,97,108,59,1,10928,108,97,110,116,69,113,117,97,108,59,1,8829,105,108,100,101,59,1,8831,84,104,97,116,59,1,8715,59,1,8721,4,3,59,101,115,5486,5488,5507,1,8913,114,115,101,116,4,2,59,69,5498,5500,1,8835,113,117,97,108,59,1,8839,101,116,59,1,8913,4,11,72,82,83,97,99,102,104,105,111,114,115,5536,5546,5552,5567,5579,5602,5607,5655,5695,5701,5711,79,82,78,5,222,1,59,5544,1,222,65,68,69,59,1,8482,4,2,72,99,5558,5563,99,121,59,1,1035,121,59,1,1062,4,2,98,117,5573,5576,59,1,9,59,1,932,4,3,97,101,121,5587,5593,5599,114,111,110,59,1,356,100,105,108,59,1,354,59,1,1058,114,59,3,55349,56599,4,2,101,105,5613,5631,4,2,114,116,5619,5627,101,102,111,114,101,59,1,8756,97,59,1,920,4,2,99,110,5637,5647,107,83,112,97,99,101,59,3,8287,8202,83,112,97,99,101,59,1,8201,108,100,101,4,4,59,69,70,84,5668,5670,5677,5688,1,8764,113,117,97,108,59,1,8771,117,108,108,69,113,117,97,108,59,1,8773,105,108,100,101,59,1,8776,112,102,59,3,55349,56651,105,112,108,101,68,111,116,59,1,8411,4,2,99,116,5717,5722,114,59,3,55349,56495,114,111,107,59,1,358,4,14,97,98,99,100,102,103,109,110,111,112,114,115,116,117,5758,5789,5805,5823,5830,5835,5846,5852,5921,5937,6089,6095,6101,6108,4,2,99,114,5764,5774,117,116,101,5,218,1,59,5772,1,218,114,4,2,59,111,5781,5783,1,8607,99,105,114,59,1,10569,114,4,2,99,101,5796,5800,121,59,1,1038,118,101,59,1,364,4,2,105,121,5811,5820,114,99,5,219,1,59,5818,1,219,59,1,1059,98,108,97,99,59,1,368,114,59,3,55349,56600,114,97,118,101,5,217,1,59,5844,1,217,97,99,114,59,1,362,4,2,100,105,5858,5905,101,114,4,2,66,80,5866,5892,4,2,97,114,5872,5876,114,59,1,95,97,99,4,2,101,107,5884,5887,59,1,9183,101,116,59,1,9141,97,114,101,110,116,104,101,115,105,115,59,1,9181,111,110,4,2,59,80,5913,5915,1,8899,108,117,115,59,1,8846,4,2,103,112,5927,5932,111,110,59,1,370,102,59,3,55349,56652,4,8,65,68,69,84,97,100,112,115,5955,5985,5996,6009,6026,6033,6044,6075,114,114,111,119,4,3,59,66,68,5967,5969,5974,1,8593,97,114,59,1,10514,111,119,110,65,114,114,111,119,59,1,8645,111,119,110,65,114,114,111,119,59,1,8597,113,117,105,108,105,98,114,105,117,109,59,1,10606,101,101,4,2,59,65,6017,6019,1,8869,114,114,111,119,59,1,8613,114,114,111,119,59,1,8657,111,119,110,97,114,114,111,119,59,1,8661,101,114,4,2,76,82,6052,6063,101,102,116,65,114,114,111,119,59,1,8598,105,103,104,116,65,114,114,111,119,59,1,8599,105,4,2,59,108,6082,6084,1,978,111,110,59,1,933,105,110,103,59,1,366,99,114,59,3,55349,56496,105,108,100,101,59,1,360,109,108,5,220,1,59,6115,1,220,4,9,68,98,99,100,101,102,111,115,118,6137,6143,6148,6152,6166,6250,6255,6261,6267,97,115,104,59,1,8875,97,114,59,1,10987,121,59,1,1042,97,115,104,4,2,59,108,6161,6163,1,8873,59,1,10982,4,2,101,114,6172,6175,59,1,8897,4,3,98,116,121,6183,6188,6238,97,114,59,1,8214,4,2,59,105,6194,6196,1,8214,99,97,108,4,4,66,76,83,84,6209,6214,6220,6231,97,114,59,1,8739,105,110,101,59,1,124,101,112,97,114,97,116,111,114,59,1,10072,105,108,100,101,59,1,8768,84,104,105,110,83,112,97,99,101,59,1,8202,114,59,3,55349,56601,112,102,59,3,55349,56653,99,114,59,3,55349,56497,100,97,115,104,59,1,8874,4,5,99,101,102,111,115,6286,6292,6298,6303,6309,105,114,99,59,1,372,100,103,101,59,1,8896,114,59,3,55349,56602,112,102,59,3,55349,56654,99,114,59,3,55349,56498,4,4,102,105,111,115,6325,6330,6333,6339,114,59,3,55349,56603,59,1,926,112,102,59,3,55349,56655,99,114,59,3,55349,56499,4,9,65,73,85,97,99,102,111,115,117,6365,6370,6375,6380,6391,6405,6410,6416,6422,99,121,59,1,1071,99,121,59,1,1031,99,121,59,1,1070,99,117,116,101,5,221,1,59,6389,1,221,4,2,105,121,6397,6402,114,99,59,1,374,59,1,1067,114,59,3,55349,56604,112,102,59,3,55349,56656,99,114,59,3,55349,56500,109,108,59,1,376,4,8,72,97,99,100,101,102,111,115,6445,6450,6457,6472,6477,6501,6505,6510,99,121,59,1,1046,99,117,116,101,59,1,377,4,2,97,121,6463,6469,114,111,110,59,1,381,59,1,1047,111,116,59,1,379,4,2,114,116,6483,6497,111,87,105,100,116,104,83,112,97,99,101,59,1,8203,97,59,1,918,114,59,1,8488,112,102,59,1,8484,99,114,59,3,55349,56501,4,16,97,98,99,101,102,103,108,109,110,111,112,114,115,116,117,119,6550,6561,6568,6612,6622,6634,6645,6672,6699,6854,6870,6923,6933,6963,6974,6983,99,117,116,101,5,225,1,59,6559,1,225,114,101,118,101,59,1,259,4,6,59,69,100,105,117,121,6582,6584,6588,6591,6600,6609,1,8766,59,3,8766,819,59,1,8767,114,99,5,226,1,59,6598,1,226,116,101,5,180,1,59,6607,1,180,59,1,1072,108,105,103,5,230,1,59,6620,1,230,4,2,59,114,6628,6630,1,8289,59,3,55349,56606,114,97,118,101,5,224,1,59,6643,1,224,4,2,101,112,6651,6667,4,2,102,112,6657,6663,115,121,109,59,1,8501,104,59,1,8501,104,97,59,1,945,4,2,97,112,6678,6692,4,2,99,108,6684,6688,114,59,1,257,103,59,1,10815,5,38,1,59,6697,1,38,4,2,100,103,6705,6737,4,5,59,97,100,115,118,6717,6719,6724,6727,6734,1,8743,110,100,59,1,10837,59,1,10844,108,111,112,101,59,1,10840,59,1,10842,4,7,59,101,108,109,114,115,122,6753,6755,6758,6762,6814,6835,6848,1,8736,59,1,10660,101,59,1,8736,115,100,4,2,59,97,6770,6772,1,8737,4,8,97,98,99,100,101,102,103,104,6790,6793,6796,6799,6802,6805,6808,6811,59,1,10664,59,1,10665,59,1,10666,59,1,10667,59,1,10668,59,1,10669,59,1,10670,59,1,10671,116,4,2,59,118,6821,6823,1,8735,98,4,2,59,100,6830,6832,1,8894,59,1,10653,4,2,112,116,6841,6845,104,59,1,8738,59,1,197,97,114,114,59,1,9084,4,2,103,112,6860,6865,111,110,59,1,261,102,59,3,55349,56658,4,7,59,69,97,101,105,111,112,6886,6888,6891,6897,6900,6904,6908,1,8776,59,1,10864,99,105,114,59,1,10863,59,1,8778,100,59,1,8779,115,59,1,39,114,111,120,4,2,59,101,6917,6919,1,8776,113,59,1,8778,105,110,103,5,229,1,59,6931,1,229,4,3,99,116,121,6941,6946,6949,114,59,3,55349,56502,59,1,42,109,112,4,2,59,101,6957,6959,1,8776,113,59,1,8781,105,108,100,101,5,227,1,59,6972,1,227,109,108,5,228,1,59,6981,1,228,4,2,99,105,6989,6997,111,110,105,110,116,59,1,8755,110,116,59,1,10769,4,16,78,97,98,99,100,101,102,105,107,108,110,111,112,114,115,117,7036,7041,7119,7135,7149,7155,7219,7224,7347,7354,7463,7489,7786,7793,7814,7866,111,116,59,1,10989,4,2,99,114,7047,7094,107,4,4,99,101,112,115,7058,7064,7073,7080,111,110,103,59,1,8780,112,115,105,108,111,110,59,1,1014,114,105,109,101,59,1,8245,105,109,4,2,59,101,7088,7090,1,8765,113,59,1,8909,4,2,118,119,7100,7105,101,101,59,1,8893,101,100,4,2,59,103,7113,7115,1,8965,101,59,1,8965,114,107,4,2,59,116,7127,7129,1,9141,98,114,107,59,1,9142,4,2,111,121,7141,7146,110,103,59,1,8780,59,1,1073,113,117,111,59,1,8222,4,5,99,109,112,114,116,7167,7181,7188,7193,7199,97,117,115,4,2,59,101,7176,7178,1,8757,59,1,8757,112,116,121,118,59,1,10672,115,105,59,1,1014,110,111,117,59,1,8492,4,3,97,104,119,7207,7210,7213,59,1,946,59,1,8502,101,101,110,59,1,8812,114,59,3,55349,56607,103,4,7,99,111,115,116,117,118,119,7241,7262,7288,7305,7328,7335,7340,4,3,97,105,117,7249,7253,7258,112,59,1,8898,114,99,59,1,9711,112,59,1,8899,4,3,100,112,116,7270,7275,7281,111,116,59,1,10752,108,117,115,59,1,10753,105,109,101,115,59,1,10754,4,2,113,116,7294,7300,99,117,112,59,1,10758,97,114,59,1,9733,114,105,97,110,103,108,101,4,2,100,117,7318,7324,111,119,110,59,1,9661,112,59,1,9651,112,108,117,115,59,1,10756,101,101,59,1,8897,101,100,103,101,59,1,8896,97,114,111,119,59,1,10509,4,3,97,107,111,7362,7436,7458,4,2,99,110,7368,7432,107,4,3,108,115,116,7377,7386,7394,111,122,101,110,103,101,59,1,10731,113,117,97,114,101,59,1,9642,114,105,97,110,103,108,101,4,4,59,100,108,114,7411,7413,7419,7425,1,9652,111,119,110,59,1,9662,101,102,116,59,1,9666,105,103,104,116,59,1,9656,107,59,1,9251,4,2,49,51,7442,7454,4,2,50,52,7448,7451,59,1,9618,59,1,9617,52,59,1,9619,99,107,59,1,9608,4,2,101,111,7469,7485,4,2,59,113,7475,7478,3,61,8421,117,105,118,59,3,8801,8421,116,59,1,8976,4,4,112,116,119,120,7499,7504,7517,7523,102,59,3,55349,56659,4,2,59,116,7510,7512,1,8869,111,109,59,1,8869,116,105,101,59,1,8904,4,12,68,72,85,86,98,100,104,109,112,116,117,118,7549,7571,7597,7619,7655,7660,7682,7708,7715,7721,7728,7750,4,4,76,82,108,114,7559,7562,7565,7568,59,1,9559,59,1,9556,59,1,9558,59,1,9555,4,5,59,68,85,100,117,7583,7585,7588,7591,7594,1,9552,59,1,9574,59,1,9577,59,1,9572,59,1,9575,4,4,76,82,108,114,7607,7610,7613,7616,59,1,9565,59,1,9562,59,1,9564,59,1,9561,4,7,59,72,76,82,104,108,114,7635,7637,7640,7643,7646,7649,7652,1,9553,59,1,9580,59,1,9571,59,1,9568,59,1,9579,59,1,9570,59,1,9567,111,120,59,1,10697,4,4,76,82,108,114,7670,7673,7676,7679,59,1,9557,59,1,9554,59,1,9488,59,1,9484,4,5,59,68,85,100,117,7694,7696,7699,7702,7705,1,9472,59,1,9573,59,1,9576,59,1,9516,59,1,9524,105,110,117,115,59,1,8863,108,117,115,59,1,8862,105,109,101,115,59,1,8864,4,4,76,82,108,114,7738,7741,7744,7747,59,1,9563,59,1,9560,59,1,9496,59,1,9492,4,7,59,72,76,82,104,108,114,7766,7768,7771,7774,7777,7780,7783,1,9474,59,1,9578,59,1,9569,59,1,9566,59,1,9532,59,1,9508,59,1,9500,114,105,109,101,59,1,8245,4,2,101,118,7799,7804,118,101,59,1,728,98,97,114,5,166,1,59,7812,1,166,4,4,99,101,105,111,7824,7829,7834,7846,114,59,3,55349,56503,109,105,59,1,8271,109,4,2,59,101,7841,7843,1,8765,59,1,8909,108,4,3,59,98,104,7855,7857,7860,1,92,59,1,10693,115,117,98,59,1,10184,4,2,108,109,7872,7885,108,4,2,59,101,7879,7881,1,8226,116,59,1,8226,112,4,3,59,69,101,7894,7896,7899,1,8782,59,1,10926,4,2,59,113,7905,7907,1,8783,59,1,8783,4,15,97,99,100,101,102,104,105,108,111,114,115,116,117,119,121,7942,8021,8075,8080,8121,8126,8157,8279,8295,8430,8446,8485,8491,8707,8726,4,3,99,112,114,7950,7956,8007,117,116,101,59,1,263,4,6,59,97,98,99,100,115,7970,7972,7977,7984,7998,8003,1,8745,110,100,59,1,10820,114,99,117,112,59,1,10825,4,2,97,117,7990,7994,112,59,1,10827,112,59,1,10823,111,116,59,1,10816,59,3,8745,65024,4,2,101,111,8013,8017,116,59,1,8257,110,59,1,711,4,4,97,101,105,117,8031,8046,8056,8061,4,2,112,114,8037,8041,115,59,1,10829,111,110,59,1,269,100,105,108,5,231,1,59,8054,1,231,114,99,59,1,265,112,115,4,2,59,115,8069,8071,1,10828,109,59,1,10832,111,116,59,1,267,4,3,100,109,110,8088,8097,8104,105,108,5,184,1,59,8095,1,184,112,116,121,118,59,1,10674,116,5,162,2,59,101,8112,8114,1,162,114,100,111,116,59,1,183,114,59,3,55349,56608,4,3,99,101,105,8134,8138,8154,121,59,1,1095,99,107,4,2,59,109,8146,8148,1,10003,97,114,107,59,1,10003,59,1,967,114,4,7,59,69,99,101,102,109,115,8174,8176,8179,8258,8261,8268,8273,1,9675,59,1,10691,4,3,59,101,108,8187,8189,8193,1,710,113,59,1,8791,101,4,2,97,100,8200,8223,114,114,111,119,4,2,108,114,8210,8216,101,102,116,59,1,8634,105,103,104,116,59,1,8635,4,5,82,83,97,99,100,8235,8238,8241,8246,8252,59,1,174,59,1,9416,115,116,59,1,8859,105,114,99,59,1,8858,97,115,104,59,1,8861,59,1,8791,110,105,110,116,59,1,10768,105,100,59,1,10991,99,105,114,59,1,10690,117,98,115,4,2,59,117,8288,8290,1,9827,105,116,59,1,9827,4,4,108,109,110,112,8305,8326,8376,8400,111,110,4,2,59,101,8313,8315,1,58,4,2,59,113,8321,8323,1,8788,59,1,8788,4,2,109,112,8332,8344,97,4,2,59,116,8339,8341,1,44,59,1,64,4,3,59,102,108,8352,8354,8358,1,8705,110,59,1,8728,101,4,2,109,120,8365,8371,101,110,116,59,1,8705,101,115,59,1,8450,4,2,103,105,8382,8395,4,2,59,100,8388,8390,1,8773,111,116,59,1,10861,110,116,59,1,8750,4,3,102,114,121,8408,8412,8417,59,3,55349,56660,111,100,59,1,8720,5,169,2,59,115,8424,8426,1,169,114,59,1,8471,4,2,97,111,8436,8441,114,114,59,1,8629,115,115,59,1,10007,4,2,99,117,8452,8457,114,59,3,55349,56504,4,2,98,112,8463,8474,4,2,59,101,8469,8471,1,10959,59,1,10961,4,2,59,101,8480,8482,1,10960,59,1,10962,100,111,116,59,1,8943,4,7,100,101,108,112,114,118,119,8507,8522,8536,8550,8600,8697,8702,97,114,114,4,2,108,114,8516,8519,59,1,10552,59,1,10549,4,2,112,115,8528,8532,114,59,1,8926,99,59,1,8927,97,114,114,4,2,59,112,8545,8547,1,8630,59,1,10557,4,6,59,98,99,100,111,115,8564,8566,8573,8587,8592,8596,1,8746,114,99,97,112,59,1,10824,4,2,97,117,8579,8583,112,59,1,10822,112,59,1,10826,111,116,59,1,8845,114,59,1,10821,59,3,8746,65024,4,4,97,108,114,118,8610,8623,8663,8672,114,114,4,2,59,109,8618,8620,1,8631,59,1,10556,121,4,3,101,118,119,8632,8651,8656,113,4,2,112,115,8639,8645,114,101,99,59,1,8926,117,99,99,59,1,8927,101,101,59,1,8910,101,100,103,101,59,1,8911,101,110,5,164,1,59,8670,1,164,101,97,114,114,111,119,4,2,108,114,8684,8690,101,102,116,59,1,8630,105,103,104,116,59,1,8631,101,101,59,1,8910,101,100,59,1,8911,4,2,99,105,8713,8721,111,110,105,110,116,59,1,8754,110,116,59,1,8753,108,99,116,121,59,1,9005,4,19,65,72,97,98,99,100,101,102,104,105,106,108,111,114,115,116,117,119,122,8773,8778,8783,8821,8839,8854,8887,8914,8930,8944,9036,9041,9058,9197,9227,9258,9281,9297,9305,114,114,59,1,8659,97,114,59,1,10597,4,4,103,108,114,115,8793,8799,8805,8809,103,101,114,59,1,8224,101,116,104,59,1,8504,114,59,1,8595,104,4,2,59,118,8816,8818,1,8208,59,1,8867,4,2,107,108,8827,8834,97,114,111,119,59,1,10511,97,99,59,1,733,4,2,97,121,8845,8851,114,111,110,59,1,271,59,1,1076,4,3,59,97,111,8862,8864,8880,1,8518,4,2,103,114,8870,8876,103,101,114,59,1,8225,114,59,1,8650,116,115,101,113,59,1,10871,4,3,103,108,109,8895,8902,8907,5,176,1,59,8900,1,176,116,97,59,1,948,112,116,121,118,59,1,10673,4,2,105,114,8920,8926,115,104,116,59,1,10623,59,3,55349,56609,97,114,4,2,108,114,8938,8941,59,1,8643,59,1,8642,4,5,97,101,103,115,118,8956,8986,8989,8996,9001,109,4,3,59,111,115,8965,8967,8983,1,8900,110,100,4,2,59,115,8975,8977,1,8900,117,105,116,59,1,9830,59,1,9830,59,1,168,97,109,109,97,59,1,989,105,110,59,1,8946,4,3,59,105,111,9009,9011,9031,1,247,100,101,5,247,2,59,111,9020,9022,1,247,110,116,105,109,101,115,59,1,8903,110,120,59,1,8903,99,121,59,1,1106,99,4,2,111,114,9048,9053,114,110,59,1,8990,111,112,59,1,8973,4,5,108,112,116,117,119,9070,9076,9081,9130,9144,108,97,114,59,1,36,102,59,3,55349,56661,4,5,59,101,109,112,115,9093,9095,9109,9116,9122,1,729,113,4,2,59,100,9102,9104,1,8784,111,116,59,1,8785,105,110,117,115,59,1,8760,108,117,115,59,1,8724,113,117,97,114,101,59,1,8865,98,108,101,98,97,114,119,101,100,103,101,59,1,8966,110,4,3,97,100,104,9153,9160,9172,114,114,111,119,59,1,8595,111,119,110,97,114,114,111,119,115,59,1,8650,97,114,112,111,111,110,4,2,108,114,9184,9190,101,102,116,59,1,8643,105,103,104,116,59,1,8642,4,2,98,99,9203,9211,107,97,114,111,119,59,1,10512,4,2,111,114,9217,9222,114,110,59,1,8991,111,112,59,1,8972,4,3,99,111,116,9235,9248,9252,4,2,114,121,9241,9245,59,3,55349,56505,59,1,1109,108,59,1,10742,114,111,107,59,1,273,4,2,100,114,9264,9269,111,116,59,1,8945,105,4,2,59,102,9276,9278,1,9663,59,1,9662,4,2,97,104,9287,9292,114,114,59,1,8693,97,114,59,1,10607,97,110,103,108,101,59,1,10662,4,2,99,105,9311,9315,121,59,1,1119,103,114,97,114,114,59,1,10239,4,18,68,97,99,100,101,102,103,108,109,110,111,112,113,114,115,116,117,120,9361,9376,9398,9439,9444,9447,9462,9495,9531,9585,9598,9614,9659,9755,9771,9792,9808,9826,4,2,68,111,9367,9372,111,116,59,1,10871,116,59,1,8785,4,2,99,115,9382,9392,117,116,101,5,233,1,59,9390,1,233,116,101,114,59,1,10862,4,4,97,105,111,121,9408,9414,9430,9436,114,111,110,59,1,283,114,4,2,59,99,9421,9423,1,8790,5,234,1,59,9428,1,234,108,111,110,59,1,8789,59,1,1101,111,116,59,1,279,59,1,8519,4,2,68,114,9453,9458,111,116,59,1,8786,59,3,55349,56610,4,3,59,114,115,9470,9472,9482,1,10906,97,118,101,5,232,1,59,9480,1,232,4,2,59,100,9488,9490,1,10902,111,116,59,1,10904,4,4,59,105,108,115,9505,9507,9515,9518,1,10905,110,116,101,114,115,59,1,9191,59,1,8467,4,2,59,100,9524,9526,1,10901,111,116,59,1,10903,4,3,97,112,115,9539,9544,9564,99,114,59,1,275,116,121,4,3,59,115,118,9554,9556,9561,1,8709,101,116,59,1,8709,59,1,8709,112,4,2,49,59,9571,9583,4,2,51,52,9577,9580,59,1,8196,59,1,8197,1,8195,4,2,103,115,9591,9594,59,1,331,112,59,1,8194,4,2,103,112,9604,9609,111,110,59,1,281,102,59,3,55349,56662,4,3,97,108,115,9622,9635,9640,114,4,2,59,115,9629,9631,1,8917,108,59,1,10723,117,115,59,1,10865,105,4,3,59,108,118,9649,9651,9656,1,949,111,110,59,1,949,59,1,1013,4,4,99,115,117,118,9669,9686,9716,9747,4,2,105,111,9675,9680,114,99,59,1,8790,108,111,110,59,1,8789,4,2,105,108,9692,9696,109,59,1,8770,97,110,116,4,2,103,108,9705,9710,116,114,59,1,10902,101,115,115,59,1,10901,4,3,97,101,105,9724,9729,9734,108,115,59,1,61,115,116,59,1,8799,118,4,2,59,68,9741,9743,1,8801,68,59,1,10872,112,97,114,115,108,59,1,10725,4,2,68,97,9761,9766,111,116,59,1,8787,114,114,59,1,10609,4,3,99,100,105,9779,9783,9788,114,59,1,8495,111,116,59,1,8784,109,59,1,8770,4,2,97,104,9798,9801,59,1,951,5,240,1,59,9806,1,240,4,2,109,114,9814,9822,108,5,235,1,59,9820,1,235,111,59,1,8364,4,3,99,105,112,9834,9838,9843,108,59,1,33,115,116,59,1,8707,4,2,101,111,9849,9859,99,116,97,116,105,111,110,59,1,8496,110,101,110,116,105,97,108,101,59,1,8519,4,12,97,99,101,102,105,106,108,110,111,112,114,115,9896,9910,9914,9921,9954,9960,9967,9989,9994,10027,10036,10164,108,108,105,110,103,100,111,116,115,101,113,59,1,8786,121,59,1,1092,109,97,108,101,59,1,9792,4,3,105,108,114,9929,9935,9950,108,105,103,59,1,64259,4,2,105,108,9941,9945,103,59,1,64256,105,103,59,1,64260,59,3,55349,56611,108,105,103,59,1,64257,108,105,103,59,3,102,106,4,3,97,108,116,9975,9979,9984,116,59,1,9837,105,103,59,1,64258,110,115,59,1,9649,111,102,59,1,402,4,2,112,114,1e4,10005,102,59,3,55349,56663,4,2,97,107,10011,10016,108,108,59,1,8704,4,2,59,118,10022,10024,1,8916,59,1,10969,97,114,116,105,110,116,59,1,10765,4,2,97,111,10042,10159,4,2,99,115,10048,10155,4,6,49,50,51,52,53,55,10062,10102,10114,10135,10139,10151,4,6,50,51,52,53,54,56,10076,10083,10086,10093,10096,10099,5,189,1,59,10081,1,189,59,1,8531,5,188,1,59,10091,1,188,59,1,8533,59,1,8537,59,1,8539,4,2,51,53,10108,10111,59,1,8532,59,1,8534,4,3,52,53,56,10122,10129,10132,5,190,1,59,10127,1,190,59,1,8535,59,1,8540,53,59,1,8536,4,2,54,56,10145,10148,59,1,8538,59,1,8541,56,59,1,8542,108,59,1,8260,119,110,59,1,8994,99,114,59,3,55349,56507,4,17,69,97,98,99,100,101,102,103,105,106,108,110,111,114,115,116,118,10206,10217,10247,10254,10268,10273,10358,10363,10374,10380,10385,10406,10458,10464,10470,10497,10610,4,2,59,108,10212,10214,1,8807,59,1,10892,4,3,99,109,112,10225,10231,10244,117,116,101,59,1,501,109,97,4,2,59,100,10239,10241,1,947,59,1,989,59,1,10886,114,101,118,101,59,1,287,4,2,105,121,10260,10265,114,99,59,1,285,59,1,1075,111,116,59,1,289,4,4,59,108,113,115,10283,10285,10288,10308,1,8805,59,1,8923,4,3,59,113,115,10296,10298,10301,1,8805,59,1,8807,108,97,110,116,59,1,10878,4,4,59,99,100,108,10318,10320,10324,10345,1,10878,99,59,1,10921,111,116,4,2,59,111,10332,10334,1,10880,4,2,59,108,10340,10342,1,10882,59,1,10884,4,2,59,101,10351,10354,3,8923,65024,115,59,1,10900,114,59,3,55349,56612,4,2,59,103,10369,10371,1,8811,59,1,8921,109,101,108,59,1,8503,99,121,59,1,1107,4,4,59,69,97,106,10395,10397,10400,10403,1,8823,59,1,10898,59,1,10917,59,1,10916,4,4,69,97,101,115,10416,10419,10434,10453,59,1,8809,112,4,2,59,112,10426,10428,1,10890,114,111,120,59,1,10890,4,2,59,113,10440,10442,1,10888,4,2,59,113,10448,10450,1,10888,59,1,8809,105,109,59,1,8935,112,102,59,3,55349,56664,97,118,101,59,1,96,4,2,99,105,10476,10480,114,59,1,8458,109,4,3,59,101,108,10489,10491,10494,1,8819,59,1,10894,59,1,10896,5,62,6,59,99,100,108,113,114,10512,10514,10527,10532,10538,10545,1,62,4,2,99,105,10520,10523,59,1,10919,114,59,1,10874,111,116,59,1,8919,80,97,114,59,1,10645,117,101,115,116,59,1,10876,4,5,97,100,101,108,115,10557,10574,10579,10599,10605,4,2,112,114,10563,10570,112,114,111,120,59,1,10886,114,59,1,10616,111,116,59,1,8919,113,4,2,108,113,10586,10592,101,115,115,59,1,8923,108,101,115,115,59,1,10892,101,115,115,59,1,8823,105,109,59,1,8819,4,2,101,110,10616,10626,114,116,110,101,113,113,59,3,8809,65024,69,59,3,8809,65024,4,10,65,97,98,99,101,102,107,111,115,121,10653,10658,10713,10718,10724,10760,10765,10786,10850,10875,114,114,59,1,8660,4,4,105,108,109,114,10668,10674,10678,10684,114,115,112,59,1,8202,102,59,1,189,105,108,116,59,1,8459,4,2,100,114,10690,10695,99,121,59,1,1098,4,3,59,99,119,10703,10705,10710,1,8596,105,114,59,1,10568,59,1,8621,97,114,59,1,8463,105,114,99,59,1,293,4,3,97,108,114,10732,10748,10754,114,116,115,4,2,59,117,10741,10743,1,9829,105,116,59,1,9829,108,105,112,59,1,8230,99,111,110,59,1,8889,114,59,3,55349,56613,115,4,2,101,119,10772,10779,97,114,111,119,59,1,10533,97,114,111,119,59,1,10534,4,5,97,109,111,112,114,10798,10803,10809,10839,10844,114,114,59,1,8703,116,104,116,59,1,8763,107,4,2,108,114,10816,10827,101,102,116,97,114,114,111,119,59,1,8617,105,103,104,116,97,114,114,111,119,59,1,8618,102,59,3,55349,56665,98,97,114,59,1,8213,4,3,99,108,116,10858,10863,10869,114,59,3,55349,56509,97,115,104,59,1,8463,114,111,107,59,1,295,4,2,98,112,10881,10887,117,108,108,59,1,8259,104,101,110,59,1,8208,4,15,97,99,101,102,103,105,106,109,110,111,112,113,115,116,117,10925,10936,10958,10977,10990,11001,11039,11045,11101,11192,11220,11226,11237,11285,11299,99,117,116,101,5,237,1,59,10934,1,237,4,3,59,105,121,10944,10946,10955,1,8291,114,99,5,238,1,59,10953,1,238,59,1,1080,4,2,99,120,10964,10968,121,59,1,1077,99,108,5,161,1,59,10975,1,161,4,2,102,114,10983,10986,59,1,8660,59,3,55349,56614,114,97,118,101,5,236,1,59,10999,1,236,4,4,59,105,110,111,11011,11013,11028,11034,1,8520,4,2,105,110,11019,11024,110,116,59,1,10764,116,59,1,8749,102,105,110,59,1,10716,116,97,59,1,8489,108,105,103,59,1,307,4,3,97,111,112,11053,11092,11096,4,3,99,103,116,11061,11065,11088,114,59,1,299,4,3,101,108,112,11073,11076,11082,59,1,8465,105,110,101,59,1,8464,97,114,116,59,1,8465,104,59,1,305,102,59,1,8887,101,100,59,1,437,4,5,59,99,102,111,116,11113,11115,11121,11136,11142,1,8712,97,114,101,59,1,8453,105,110,4,2,59,116,11129,11131,1,8734,105,101,59,1,10717,100,111,116,59,1,305,4,5,59,99,101,108,112,11154,11156,11161,11179,11186,1,8747,97,108,59,1,8890,4,2,103,114,11167,11173,101,114,115,59,1,8484,99,97,108,59,1,8890,97,114,104,107,59,1,10775,114,111,100,59,1,10812,4,4,99,103,112,116,11202,11206,11211,11216,121,59,1,1105,111,110,59,1,303,102,59,3,55349,56666,97,59,1,953,114,111,100,59,1,10812,117,101,115,116,5,191,1,59,11235,1,191,4,2,99,105,11243,11248,114,59,3,55349,56510,110,4,5,59,69,100,115,118,11261,11263,11266,11271,11282,1,8712,59,1,8953,111,116,59,1,8949,4,2,59,118,11277,11279,1,8948,59,1,8947,59,1,8712,4,2,59,105,11291,11293,1,8290,108,100,101,59,1,297,4,2,107,109,11305,11310,99,121,59,1,1110,108,5,239,1,59,11316,1,239,4,6,99,102,109,111,115,117,11332,11346,11351,11357,11363,11380,4,2,105,121,11338,11343,114,99,59,1,309,59,1,1081,114,59,3,55349,56615,97,116,104,59,1,567,112,102,59,3,55349,56667,4,2,99,101,11369,11374,114,59,3,55349,56511,114,99,121,59,1,1112,107,99,121,59,1,1108,4,8,97,99,102,103,104,106,111,115,11404,11418,11433,11438,11445,11450,11455,11461,112,112,97,4,2,59,118,11413,11415,1,954,59,1,1008,4,2,101,121,11424,11430,100,105,108,59,1,311,59,1,1082,114,59,3,55349,56616,114,101,101,110,59,1,312,99,121,59,1,1093,99,121,59,1,1116,112,102,59,3,55349,56668,99,114,59,3,55349,56512,4,23,65,66,69,72,97,98,99,100,101,102,103,104,106,108,109,110,111,112,114,115,116,117,118,11515,11538,11544,11555,11560,11721,11780,11818,11868,12136,12160,12171,12203,12208,12246,12275,12327,12509,12523,12569,12641,12732,12752,4,3,97,114,116,11523,11528,11532,114,114,59,1,8666,114,59,1,8656,97,105,108,59,1,10523,97,114,114,59,1,10510,4,2,59,103,11550,11552,1,8806,59,1,10891,97,114,59,1,10594,4,9,99,101,103,109,110,112,113,114,116,11580,11586,11594,11600,11606,11624,11627,11636,11694,117,116,101,59,1,314,109,112,116,121,118,59,1,10676,114,97,110,59,1,8466,98,100,97,59,1,955,103,4,3,59,100,108,11615,11617,11620,1,10216,59,1,10641,101,59,1,10216,59,1,10885,117,111,5,171,1,59,11634,1,171,114,4,8,59,98,102,104,108,112,115,116,11655,11657,11669,11673,11677,11681,11685,11690,1,8592,4,2,59,102,11663,11665,1,8676,115,59,1,10527,115,59,1,10525,107,59,1,8617,112,59,1,8619,108,59,1,10553,105,109,59,1,10611,108,59,1,8610,4,3,59,97,101,11702,11704,11709,1,10923,105,108,59,1,10521,4,2,59,115,11715,11717,1,10925,59,3,10925,65024,4,3,97,98,114,11729,11734,11739,114,114,59,1,10508,114,107,59,1,10098,4,2,97,107,11745,11758,99,4,2,101,107,11752,11755,59,1,123,59,1,91,4,2,101,115,11764,11767,59,1,10635,108,4,2,100,117,11774,11777,59,1,10639,59,1,10637,4,4,97,101,117,121,11790,11796,11811,11815,114,111,110,59,1,318,4,2,100,105,11802,11807,105,108,59,1,316,108,59,1,8968,98,59,1,123,59,1,1083,4,4,99,113,114,115,11828,11832,11845,11864,97,59,1,10550,117,111,4,2,59,114,11840,11842,1,8220,59,1,8222,4,2,100,117,11851,11857,104,97,114,59,1,10599,115,104,97,114,59,1,10571,104,59,1,8626,4,5,59,102,103,113,115,11880,11882,12008,12011,12031,1,8804,116,4,5,97,104,108,114,116,11895,11913,11935,11947,11996,114,114,111,119,4,2,59,116,11905,11907,1,8592,97,105,108,59,1,8610,97,114,112,111,111,110,4,2,100,117,11925,11931,111,119,110,59,1,8637,112,59,1,8636,101,102,116,97,114,114,111,119,115,59,1,8647,105,103,104,116,4,3,97,104,115,11959,11974,11984,114,114,111,119,4,2,59,115,11969,11971,1,8596,59,1,8646,97,114,112,111,111,110,115,59,1,8651,113,117,105,103,97,114,114,111,119,59,1,8621,104,114,101,101,116,105,109,101,115,59,1,8907,59,1,8922,4,3,59,113,115,12019,12021,12024,1,8804,59,1,8806,108,97,110,116,59,1,10877,4,5,59,99,100,103,115,12043,12045,12049,12070,12083,1,10877,99,59,1,10920,111,116,4,2,59,111,12057,12059,1,10879,4,2,59,114,12065,12067,1,10881,59,1,10883,4,2,59,101,12076,12079,3,8922,65024,115,59,1,10899,4,5,97,100,101,103,115,12095,12103,12108,12126,12131,112,112,114,111,120,59,1,10885,111,116,59,1,8918,113,4,2,103,113,12115,12120,116,114,59,1,8922,103,116,114,59,1,10891,116,114,59,1,8822,105,109,59,1,8818,4,3,105,108,114,12144,12150,12156,115,104,116,59,1,10620,111,111,114,59,1,8970,59,3,55349,56617,4,2,59,69,12166,12168,1,8822,59,1,10897,4,2,97,98,12177,12198,114,4,2,100,117,12184,12187,59,1,8637,4,2,59,108,12193,12195,1,8636,59,1,10602,108,107,59,1,9604,99,121,59,1,1113,4,5,59,97,99,104,116,12220,12222,12227,12235,12241,1,8810,114,114,59,1,8647,111,114,110,101,114,59,1,8990,97,114,100,59,1,10603,114,105,59,1,9722,4,2,105,111,12252,12258,100,111,116,59,1,320,117,115,116,4,2,59,97,12267,12269,1,9136,99,104,101,59,1,9136,4,4,69,97,101,115,12285,12288,12303,12322,59,1,8808,112,4,2,59,112,12295,12297,1,10889,114,111,120,59,1,10889,4,2,59,113,12309,12311,1,10887,4,2,59,113,12317,12319,1,10887,59,1,8808,105,109,59,1,8934,4,8,97,98,110,111,112,116,119,122,12345,12359,12364,12421,12446,12467,12474,12490,4,2,110,114,12351,12355,103,59,1,10220,114,59,1,8701,114,107,59,1,10214,103,4,3,108,109,114,12373,12401,12409,101,102,116,4,2,97,114,12382,12389,114,114,111,119,59,1,10229,105,103,104,116,97,114,114,111,119,59,1,10231,97,112,115,116,111,59,1,10236,105,103,104,116,97,114,114,111,119,59,1,10230,112,97,114,114,111,119,4,2,108,114,12433,12439,101,102,116,59,1,8619,105,103,104,116,59,1,8620,4,3,97,102,108,12454,12458,12462,114,59,1,10629,59,3,55349,56669,117,115,59,1,10797,105,109,101,115,59,1,10804,4,2,97,98,12480,12485,115,116,59,1,8727,97,114,59,1,95,4,3,59,101,102,12498,12500,12506,1,9674,110,103,101,59,1,9674,59,1,10731,97,114,4,2,59,108,12517,12519,1,40,116,59,1,10643,4,5,97,99,104,109,116,12535,12540,12548,12561,12564,114,114,59,1,8646,111,114,110,101,114,59,1,8991,97,114,4,2,59,100,12556,12558,1,8651,59,1,10605,59,1,8206,114,105,59,1,8895,4,6,97,99,104,105,113,116,12583,12589,12594,12597,12614,12635,113,117,111,59,1,8249,114,59,3,55349,56513,59,1,8624,109,4,3,59,101,103,12606,12608,12611,1,8818,59,1,10893,59,1,10895,4,2,98,117,12620,12623,59,1,91,111,4,2,59,114,12630,12632,1,8216,59,1,8218,114,111,107,59,1,322,5,60,8,59,99,100,104,105,108,113,114,12660,12662,12675,12680,12686,12692,12698,12705,1,60,4,2,99,105,12668,12671,59,1,10918,114,59,1,10873,111,116,59,1,8918,114,101,101,59,1,8907,109,101,115,59,1,8905,97,114,114,59,1,10614,117,101,115,116,59,1,10875,4,2,80,105,12711,12716,97,114,59,1,10646,4,3,59,101,102,12724,12726,12729,1,9667,59,1,8884,59,1,9666,114,4,2,100,117,12739,12746,115,104,97,114,59,1,10570,104,97,114,59,1,10598,4,2,101,110,12758,12768,114,116,110,101,113,113,59,3,8808,65024,69,59,3,8808,65024,4,14,68,97,99,100,101,102,104,105,108,110,111,112,115,117,12803,12809,12893,12908,12914,12928,12933,12937,13011,13025,13032,13049,13052,13069,68,111,116,59,1,8762,4,4,99,108,112,114,12819,12827,12849,12887,114,5,175,1,59,12825,1,175,4,2,101,116,12833,12836,59,1,9794,4,2,59,101,12842,12844,1,10016,115,101,59,1,10016,4,2,59,115,12855,12857,1,8614,116,111,4,4,59,100,108,117,12869,12871,12877,12883,1,8614,111,119,110,59,1,8615,101,102,116,59,1,8612,112,59,1,8613,107,101,114,59,1,9646,4,2,111,121,12899,12905,109,109,97,59,1,10793,59,1,1084,97,115,104,59,1,8212,97,115,117,114,101,100,97,110,103,108,101,59,1,8737,114,59,3,55349,56618,111,59,1,8487,4,3,99,100,110,12945,12954,12985,114,111,5,181,1,59,12952,1,181,4,4,59,97,99,100,12964,12966,12971,12976,1,8739,115,116,59,1,42,105,114,59,1,10992,111,116,5,183,1,59,12983,1,183,117,115,4,3,59,98,100,12995,12997,13e3,1,8722,59,1,8863,4,2,59,117,13006,13008,1,8760,59,1,10794,4,2,99,100,13017,13021,112,59,1,10971,114,59,1,8230,112,108,117,115,59,1,8723,4,2,100,112,13038,13044,101,108,115,59,1,8871,102,59,3,55349,56670,59,1,8723,4,2,99,116,13058,13063,114,59,3,55349,56514,112,111,115,59,1,8766,4,3,59,108,109,13077,13079,13087,1,956,116,105,109,97,112,59,1,8888,97,112,59,1,8888,4,24,71,76,82,86,97,98,99,100,101,102,103,104,105,106,108,109,111,112,114,115,116,117,118,119,13142,13165,13217,13229,13247,13330,13359,13414,13420,13508,13513,13579,13602,13626,13631,13762,13767,13855,13936,13995,14214,14285,14312,14432,4,2,103,116,13148,13152,59,3,8921,824,4,2,59,118,13158,13161,3,8811,8402,59,3,8811,824,4,3,101,108,116,13173,13200,13204,102,116,4,2,97,114,13181,13188,114,114,111,119,59,1,8653,105,103,104,116,97,114,114,111,119,59,1,8654,59,3,8920,824,4,2,59,118,13210,13213,3,8810,8402,59,3,8810,824,105,103,104,116,97,114,114,111,119,59,1,8655,4,2,68,100,13235,13241,97,115,104,59,1,8879,97,115,104,59,1,8878,4,5,98,99,110,112,116,13259,13264,13270,13275,13308,108,97,59,1,8711,117,116,101,59,1,324,103,59,3,8736,8402,4,5,59,69,105,111,112,13287,13289,13293,13298,13302,1,8777,59,3,10864,824,100,59,3,8779,824,115,59,1,329,114,111,120,59,1,8777,117,114,4,2,59,97,13316,13318,1,9838,108,4,2,59,115,13325,13327,1,9838,59,1,8469,4,2,115,117,13336,13344,112,5,160,1,59,13342,1,160,109,112,4,2,59,101,13352,13355,3,8782,824,59,3,8783,824,4,5,97,101,111,117,121,13371,13385,13391,13407,13411,4,2,112,114,13377,13380,59,1,10819,111,110,59,1,328,100,105,108,59,1,326,110,103,4,2,59,100,13399,13401,1,8775,111,116,59,3,10861,824,112,59,1,10818,59,1,1085,97,115,104,59,1,8211,4,7,59,65,97,100,113,115,120,13436,13438,13443,13466,13472,13478,13494,1,8800,114,114,59,1,8663,114,4,2,104,114,13450,13454,107,59,1,10532,4,2,59,111,13460,13462,1,8599,119,59,1,8599,111,116,59,3,8784,824,117,105,118,59,1,8802,4,2,101,105,13484,13489,97,114,59,1,10536,109,59,3,8770,824,105,115,116,4,2,59,115,13503,13505,1,8708,59,1,8708,114,59,3,55349,56619,4,4,69,101,115,116,13523,13527,13563,13568,59,3,8807,824,4,3,59,113,115,13535,13537,13559,1,8817,4,3,59,113,115,13545,13547,13551,1,8817,59,3,8807,824,108,97,110,116,59,3,10878,824,59,3,10878,824,105,109,59,1,8821,4,2,59,114,13574,13576,1,8815,59,1,8815,4,3,65,97,112,13587,13592,13597,114,114,59,1,8654,114,114,59,1,8622,97,114,59,1,10994,4,3,59,115,118,13610,13612,13623,1,8715,4,2,59,100,13618,13620,1,8956,59,1,8954,59,1,8715,99,121,59,1,1114,4,7,65,69,97,100,101,115,116,13647,13652,13656,13661,13665,13737,13742,114,114,59,1,8653,59,3,8806,824,114,114,59,1,8602,114,59,1,8229,4,4,59,102,113,115,13675,13677,13703,13725,1,8816,116,4,2,97,114,13684,13691,114,114,111,119,59,1,8602,105,103,104,116,97,114,114,111,119,59,1,8622,4,3,59,113,115,13711,13713,13717,1,8816,59,3,8806,824,108,97,110,116,59,3,10877,824,4,2,59,115,13731,13734,3,10877,824,59,1,8814,105,109,59,1,8820,4,2,59,114,13748,13750,1,8814,105,4,2,59,101,13757,13759,1,8938,59,1,8940,105,100,59,1,8740,4,2,112,116,13773,13778,102,59,3,55349,56671,5,172,3,59,105,110,13787,13789,13829,1,172,110,4,4,59,69,100,118,13800,13802,13806,13812,1,8713,59,3,8953,824,111,116,59,3,8949,824,4,3,97,98,99,13820,13823,13826,59,1,8713,59,1,8951,59,1,8950,105,4,2,59,118,13836,13838,1,8716,4,3,97,98,99,13846,13849,13852,59,1,8716,59,1,8958,59,1,8957,4,3,97,111,114,13863,13892,13899,114,4,4,59,97,115,116,13874,13876,13883,13888,1,8742,108,108,101,108,59,1,8742,108,59,3,11005,8421,59,3,8706,824,108,105,110,116,59,1,10772,4,3,59,99,101,13907,13909,13914,1,8832,117,101,59,1,8928,4,2,59,99,13920,13923,3,10927,824,4,2,59,101,13929,13931,1,8832,113,59,3,10927,824,4,4,65,97,105,116,13946,13951,13971,13982,114,114,59,1,8655,114,114,4,3,59,99,119,13961,13963,13967,1,8603,59,3,10547,824,59,3,8605,824,103,104,116,97,114,114,111,119,59,1,8603,114,105,4,2,59,101,13990,13992,1,8939,59,1,8941,4,7,99,104,105,109,112,113,117,14011,14036,14060,14080,14085,14090,14106,4,4,59,99,101,114,14021,14023,14028,14032,1,8833,117,101,59,1,8929,59,3,10928,824,59,3,55349,56515,111,114,116,4,2,109,112,14045,14050,105,100,59,1,8740,97,114,97,108,108,101,108,59,1,8742,109,4,2,59,101,14067,14069,1,8769,4,2,59,113,14075,14077,1,8772,59,1,8772,105,100,59,1,8740,97,114,59,1,8742,115,117,4,2,98,112,14098,14102,101,59,1,8930,101,59,1,8931,4,3,98,99,112,14114,14157,14171,4,4,59,69,101,115,14124,14126,14130,14133,1,8836,59,3,10949,824,59,1,8840,101,116,4,2,59,101,14141,14144,3,8834,8402,113,4,2,59,113,14151,14153,1,8840,59,3,10949,824,99,4,2,59,101,14164,14166,1,8833,113,59,3,10928,824,4,4,59,69,101,115,14181,14183,14187,14190,1,8837,59,3,10950,824,59,1,8841,101,116,4,2,59,101,14198,14201,3,8835,8402,113,4,2,59,113,14208,14210,1,8841,59,3,10950,824,4,4,103,105,108,114,14224,14228,14238,14242,108,59,1,8825,108,100,101,5,241,1,59,14236,1,241,103,59,1,8824,105,97,110,103,108,101,4,2,108,114,14254,14269,101,102,116,4,2,59,101,14263,14265,1,8938,113,59,1,8940,105,103,104,116,4,2,59,101,14279,14281,1,8939,113,59,1,8941,4,2,59,109,14291,14293,1,957,4,3,59,101,115,14301,14303,14308,1,35,114,111,59,1,8470,112,59,1,8199,4,9,68,72,97,100,103,105,108,114,115,14332,14338,14344,14349,14355,14369,14376,14408,14426,97,115,104,59,1,8877,97,114,114,59,1,10500,112,59,3,8781,8402,97,115,104,59,1,8876,4,2,101,116,14361,14365,59,3,8805,8402,59,3,62,8402,110,102,105,110,59,1,10718,4,3,65,101,116,14384,14389,14393,114,114,59,1,10498,59,3,8804,8402,4,2,59,114,14399,14402,3,60,8402,105,101,59,3,8884,8402,4,2,65,116,14414,14419,114,114,59,1,10499,114,105,101,59,3,8885,8402,105,109,59,3,8764,8402,4,3,65,97,110,14440,14445,14468,114,114,59,1,8662,114,4,2,104,114,14452,14456,107,59,1,10531,4,2,59,111,14462,14464,1,8598,119,59,1,8598,101,97,114,59,1,10535,4,18,83,97,99,100,101,102,103,104,105,108,109,111,112,114,115,116,117,118,14512,14515,14535,14560,14597,14603,14618,14643,14657,14662,14701,14741,14747,14769,14851,14877,14907,14916,59,1,9416,4,2,99,115,14521,14531,117,116,101,5,243,1,59,14529,1,243,116,59,1,8859,4,2,105,121,14541,14557,114,4,2,59,99,14548,14550,1,8858,5,244,1,59,14555,1,244,59,1,1086,4,5,97,98,105,111,115,14572,14577,14583,14587,14591,115,104,59,1,8861,108,97,99,59,1,337,118,59,1,10808,116,59,1,8857,111,108,100,59,1,10684,108,105,103,59,1,339,4,2,99,114,14609,14614,105,114,59,1,10687,59,3,55349,56620,4,3,111,114,116,14626,14630,14640,110,59,1,731,97,118,101,5,242,1,59,14638,1,242,59,1,10689,4,2,98,109,14649,14654,97,114,59,1,10677,59,1,937,110,116,59,1,8750,4,4,97,99,105,116,14672,14677,14693,14698,114,114,59,1,8634,4,2,105,114,14683,14687,114,59,1,10686,111,115,115,59,1,10683,110,101,59,1,8254,59,1,10688,4,3,97,101,105,14709,14714,14719,99,114,59,1,333,103,97,59,1,969,4,3,99,100,110,14727,14733,14736,114,111,110,59,1,959,59,1,10678,117,115,59,1,8854,112,102,59,3,55349,56672,4,3,97,101,108,14755,14759,14764,114,59,1,10679,114,112,59,1,10681,117,115,59,1,8853,4,7,59,97,100,105,111,115,118,14785,14787,14792,14831,14837,14841,14848,1,8744,114,114,59,1,8635,4,4,59,101,102,109,14802,14804,14817,14824,1,10845,114,4,2,59,111,14811,14813,1,8500,102,59,1,8500,5,170,1,59,14822,1,170,5,186,1,59,14829,1,186,103,111,102,59,1,8886,114,59,1,10838,108,111,112,101,59,1,10839,59,1,10843,4,3,99,108,111,14859,14863,14873,114,59,1,8500,97,115,104,5,248,1,59,14871,1,248,108,59,1,8856,105,4,2,108,109,14884,14893,100,101,5,245,1,59,14891,1,245,101,115,4,2,59,97,14901,14903,1,8855,115,59,1,10806,109,108,5,246,1,59,14914,1,246,98,97,114,59,1,9021,4,12,97,99,101,102,104,105,108,109,111,114,115,117,14948,14992,14996,15033,15038,15068,15090,15189,15192,15222,15427,15441,114,4,4,59,97,115,116,14959,14961,14976,14989,1,8741,5,182,2,59,108,14968,14970,1,182,108,101,108,59,1,8741,4,2,105,108,14982,14986,109,59,1,10995,59,1,11005,59,1,8706,121,59,1,1087,114,4,5,99,105,109,112,116,15009,15014,15019,15024,15027,110,116,59,1,37,111,100,59,1,46,105,108,59,1,8240,59,1,8869,101,110,107,59,1,8241,114,59,3,55349,56621,4,3,105,109,111,15046,15057,15063,4,2,59,118,15052,15054,1,966,59,1,981,109,97,116,59,1,8499,110,101,59,1,9742,4,3,59,116,118,15076,15078,15087,1,960,99,104,102,111,114,107,59,1,8916,59,1,982,4,2,97,117,15096,15119,110,4,2,99,107,15103,15115,107,4,2,59,104,15110,15112,1,8463,59,1,8462,118,59,1,8463,115,4,9,59,97,98,99,100,101,109,115,116,15140,15142,15148,15151,15156,15168,15171,15179,15184,1,43,99,105,114,59,1,10787,59,1,8862,105,114,59,1,10786,4,2,111,117,15162,15165,59,1,8724,59,1,10789,59,1,10866,110,5,177,1,59,15177,1,177,105,109,59,1,10790,119,111,59,1,10791,59,1,177,4,3,105,112,117,15200,15208,15213,110,116,105,110,116,59,1,10773,102,59,3,55349,56673,110,100,5,163,1,59,15220,1,163,4,10,59,69,97,99,101,105,110,111,115,117,15244,15246,15249,15253,15258,15334,15347,15367,15416,15421,1,8826,59,1,10931,112,59,1,10935,117,101,59,1,8828,4,2,59,99,15264,15266,1,10927,4,6,59,97,99,101,110,115,15280,15282,15290,15299,15303,15329,1,8826,112,112,114,111,120,59,1,10935,117,114,108,121,101,113,59,1,8828,113,59,1,10927,4,3,97,101,115,15311,15319,15324,112,112,114,111,120,59,1,10937,113,113,59,1,10933,105,109,59,1,8936,105,109,59,1,8830,109,101,4,2,59,115,15342,15344,1,8242,59,1,8473,4,3,69,97,115,15355,15358,15362,59,1,10933,112,59,1,10937,105,109,59,1,8936,4,3,100,102,112,15375,15378,15404,59,1,8719,4,3,97,108,115,15386,15392,15398,108,97,114,59,1,9006,105,110,101,59,1,8978,117,114,102,59,1,8979,4,2,59,116,15410,15412,1,8733,111,59,1,8733,105,109,59,1,8830,114,101,108,59,1,8880,4,2,99,105,15433,15438,114,59,3,55349,56517,59,1,968,110,99,115,112,59,1,8200,4,6,102,105,111,112,115,117,15462,15467,15472,15478,15485,15491,114,59,3,55349,56622,110,116,59,1,10764,112,102,59,3,55349,56674,114,105,109,101,59,1,8279,99,114,59,3,55349,56518,4,3,97,101,111,15499,15520,15534,116,4,2,101,105,15506,15515,114,110,105,111,110,115,59,1,8461,110,116,59,1,10774,115,116,4,2,59,101,15528,15530,1,63,113,59,1,8799,116,5,34,1,59,15540,1,34,4,21,65,66,72,97,98,99,100,101,102,104,105,108,109,110,111,112,114,115,116,117,120,15586,15609,15615,15620,15796,15855,15893,15931,15977,16001,16039,16183,16204,16222,16228,16285,16312,16318,16363,16408,16416,4,3,97,114,116,15594,15599,15603,114,114,59,1,8667,114,59,1,8658,97,105,108,59,1,10524,97,114,114,59,1,10511,97,114,59,1,10596,4,7,99,100,101,110,113,114,116,15636,15651,15656,15664,15687,15696,15770,4,2,101,117,15642,15646,59,3,8765,817,116,101,59,1,341,105,99,59,1,8730,109,112,116,121,118,59,1,10675,103,4,4,59,100,101,108,15675,15677,15680,15683,1,10217,59,1,10642,59,1,10661,101,59,1,10217,117,111,5,187,1,59,15694,1,187,114,4,11,59,97,98,99,102,104,108,112,115,116,119,15721,15723,15727,15739,15742,15746,15750,15754,15758,15763,15767,1,8594,112,59,1,10613,4,2,59,102,15733,15735,1,8677,115,59,1,10528,59,1,10547,115,59,1,10526,107,59,1,8618,112,59,1,8620,108,59,1,10565,105,109,59,1,10612,108,59,1,8611,59,1,8605,4,2,97,105,15776,15781,105,108,59,1,10522,111,4,2,59,110,15788,15790,1,8758,97,108,115,59,1,8474,4,3,97,98,114,15804,15809,15814,114,114,59,1,10509,114,107,59,1,10099,4,2,97,107,15820,15833,99,4,2,101,107,15827,15830,59,1,125,59,1,93,4,2,101,115,15839,15842,59,1,10636,108,4,2,100,117,15849,15852,59,1,10638,59,1,10640,4,4,97,101,117,121,15865,15871,15886,15890,114,111,110,59,1,345,4,2,100,105,15877,15882,105,108,59,1,343,108,59,1,8969,98,59,1,125,59,1,1088,4,4,99,108,113,115,15903,15907,15914,15927,97,59,1,10551,100,104,97,114,59,1,10601,117,111,4,2,59,114,15922,15924,1,8221,59,1,8221,104,59,1,8627,4,3,97,99,103,15939,15966,15970,108,4,4,59,105,112,115,15950,15952,15957,15963,1,8476,110,101,59,1,8475,97,114,116,59,1,8476,59,1,8477,116,59,1,9645,5,174,1,59,15975,1,174,4,3,105,108,114,15985,15991,15997,115,104,116,59,1,10621,111,111,114,59,1,8971,59,3,55349,56623,4,2,97,111,16007,16028,114,4,2,100,117,16014,16017,59,1,8641,4,2,59,108,16023,16025,1,8640,59,1,10604,4,2,59,118,16034,16036,1,961,59,1,1009,4,3,103,110,115,16047,16167,16171,104,116,4,6,97,104,108,114,115,116,16063,16081,16103,16130,16143,16155,114,114,111,119,4,2,59,116,16073,16075,1,8594,97,105,108,59,1,8611,97,114,112,111,111,110,4,2,100,117,16093,16099,111,119,110,59,1,8641,112,59,1,8640,101,102,116,4,2,97,104,16112,16120,114,114,111,119,115,59,1,8644,97,114,112,111,111,110,115,59,1,8652,105,103,104,116,97,114,114,111,119,115,59,1,8649,113,117,105,103,97,114,114,111,119,59,1,8605,104,114,101,101,116,105,109,101,115,59,1,8908,103,59,1,730,105,110,103,100,111,116,115,101,113,59,1,8787,4,3,97,104,109,16191,16196,16201,114,114,59,1,8644,97,114,59,1,8652,59,1,8207,111,117,115,116,4,2,59,97,16214,16216,1,9137,99,104,101,59,1,9137,109,105,100,59,1,10990,4,4,97,98,112,116,16238,16252,16257,16278,4,2,110,114,16244,16248,103,59,1,10221,114,59,1,8702,114,107,59,1,10215,4,3,97,102,108,16265,16269,16273,114,59,1,10630,59,3,55349,56675,117,115,59,1,10798,105,109,101,115,59,1,10805,4,2,97,112,16291,16304,114,4,2,59,103,16298,16300,1,41,116,59,1,10644,111,108,105,110,116,59,1,10770,97,114,114,59,1,8649,4,4,97,99,104,113,16328,16334,16339,16342,113,117,111,59,1,8250,114,59,3,55349,56519,59,1,8625,4,2,98,117,16348,16351,59,1,93,111,4,2,59,114,16358,16360,1,8217,59,1,8217,4,3,104,105,114,16371,16377,16383,114,101,101,59,1,8908,109,101,115,59,1,8906,105,4,4,59,101,102,108,16394,16396,16399,16402,1,9657,59,1,8885,59,1,9656,116,114,105,59,1,10702,108,117,104,97,114,59,1,10600,59,1,8478,4,19,97,98,99,100,101,102,104,105,108,109,111,112,113,114,115,116,117,119,122,16459,16466,16472,16572,16590,16672,16687,16746,16844,16850,16924,16963,16988,17115,17121,17154,17206,17614,17656,99,117,116,101,59,1,347,113,117,111,59,1,8218,4,10,59,69,97,99,101,105,110,112,115,121,16494,16496,16499,16513,16518,16531,16536,16556,16564,16569,1,8827,59,1,10932,4,2,112,114,16505,16508,59,1,10936,111,110,59,1,353,117,101,59,1,8829,4,2,59,100,16524,16526,1,10928,105,108,59,1,351,114,99,59,1,349,4,3,69,97,115,16544,16547,16551,59,1,10934,112,59,1,10938,105,109,59,1,8937,111,108,105,110,116,59,1,10771,105,109,59,1,8831,59,1,1089,111,116,4,3,59,98,101,16582,16584,16587,1,8901,59,1,8865,59,1,10854,4,7,65,97,99,109,115,116,120,16606,16611,16634,16642,16646,16652,16668,114,114,59,1,8664,114,4,2,104,114,16618,16622,107,59,1,10533,4,2,59,111,16628,16630,1,8600,119,59,1,8600,116,5,167,1,59,16640,1,167,105,59,1,59,119,97,114,59,1,10537,109,4,2,105,110,16659,16665,110,117,115,59,1,8726,59,1,8726,116,59,1,10038,114,4,2,59,111,16679,16682,3,55349,56624,119,110,59,1,8994,4,4,97,99,111,121,16697,16702,16716,16739,114,112,59,1,9839,4,2,104,121,16708,16713,99,121,59,1,1097,59,1,1096,114,116,4,2,109,112,16724,16729,105,100,59,1,8739,97,114,97,108,108,101,108,59,1,8741,5,173,1,59,16744,1,173,4,2,103,109,16752,16770,109,97,4,3,59,102,118,16762,16764,16767,1,963,59,1,962,59,1,962,4,8,59,100,101,103,108,110,112,114,16788,16790,16795,16806,16817,16828,16832,16838,1,8764,111,116,59,1,10858,4,2,59,113,16801,16803,1,8771,59,1,8771,4,2,59,69,16812,16814,1,10910,59,1,10912,4,2,59,69,16823,16825,1,10909,59,1,10911,101,59,1,8774,108,117,115,59,1,10788,97,114,114,59,1,10610,97,114,114,59,1,8592,4,4,97,101,105,116,16860,16883,16891,16904,4,2,108,115,16866,16878,108,115,101,116,109,105,110,117,115,59,1,8726,104,112,59,1,10803,112,97,114,115,108,59,1,10724,4,2,100,108,16897,16900,59,1,8739,101,59,1,8995,4,2,59,101,16910,16912,1,10922,4,2,59,115,16918,16920,1,10924,59,3,10924,65024,4,3,102,108,112,16932,16938,16958,116,99,121,59,1,1100,4,2,59,98,16944,16946,1,47,4,2,59,97,16952,16954,1,10692,114,59,1,9023,102,59,3,55349,56676,97,4,2,100,114,16970,16985,101,115,4,2,59,117,16978,16980,1,9824,105,116,59,1,9824,59,1,8741,4,3,99,115,117,16996,17028,17089,4,2,97,117,17002,17015,112,4,2,59,115,17009,17011,1,8851,59,3,8851,65024,112,4,2,59,115,17022,17024,1,8852,59,3,8852,65024,117,4,2,98,112,17035,17062,4,3,59,101,115,17043,17045,17048,1,8847,59,1,8849,101,116,4,2,59,101,17056,17058,1,8847,113,59,1,8849,4,3,59,101,115,17070,17072,17075,1,8848,59,1,8850,101,116,4,2,59,101,17083,17085,1,8848,113,59,1,8850,4,3,59,97,102,17097,17099,17112,1,9633,114,4,2,101,102,17106,17109,59,1,9633,59,1,9642,59,1,9642,97,114,114,59,1,8594,4,4,99,101,109,116,17131,17136,17142,17148,114,59,3,55349,56520,116,109,110,59,1,8726,105,108,101,59,1,8995,97,114,102,59,1,8902,4,2,97,114,17160,17172,114,4,2,59,102,17167,17169,1,9734,59,1,9733,4,2,97,110,17178,17202,105,103,104,116,4,2,101,112,17188,17197,112,115,105,108,111,110,59,1,1013,104,105,59,1,981,115,59,1,175,4,5,98,99,109,110,112,17218,17351,17420,17423,17427,4,9,59,69,100,101,109,110,112,114,115,17238,17240,17243,17248,17261,17267,17279,17285,17291,1,8834,59,1,10949,111,116,59,1,10941,4,2,59,100,17254,17256,1,8838,111,116,59,1,10947,117,108,116,59,1,10945,4,2,69,101,17273,17276,59,1,10955,59,1,8842,108,117,115,59,1,10943,97,114,114,59,1,10617,4,3,101,105,117,17299,17335,17339,116,4,3,59,101,110,17308,17310,17322,1,8834,113,4,2,59,113,17317,17319,1,8838,59,1,10949,101,113,4,2,59,113,17330,17332,1,8842,59,1,10955,109,59,1,10951,4,2,98,112,17345,17348,59,1,10965,59,1,10963,99,4,6,59,97,99,101,110,115,17366,17368,17376,17385,17389,17415,1,8827,112,112,114,111,120,59,1,10936,117,114,108,121,101,113,59,1,8829,113,59,1,10928,4,3,97,101,115,17397,17405,17410,112,112,114,111,120,59,1,10938,113,113,59,1,10934,105,109,59,1,8937,105,109,59,1,8831,59,1,8721,103,59,1,9834,4,13,49,50,51,59,69,100,101,104,108,109,110,112,115,17455,17462,17469,17476,17478,17481,17496,17509,17524,17530,17536,17548,17554,5,185,1,59,17460,1,185,5,178,1,59,17467,1,178,5,179,1,59,17474,1,179,1,8835,59,1,10950,4,2,111,115,17487,17491,116,59,1,10942,117,98,59,1,10968,4,2,59,100,17502,17504,1,8839,111,116,59,1,10948,115,4,2,111,117,17516,17520,108,59,1,10185,98,59,1,10967,97,114,114,59,1,10619,117,108,116,59,1,10946,4,2,69,101,17542,17545,59,1,10956,59,1,8843,108,117,115,59,1,10944,4,3,101,105,117,17562,17598,17602,116,4,3,59,101,110,17571,17573,17585,1,8835,113,4,2,59,113,17580,17582,1,8839,59,1,10950,101,113,4,2,59,113,17593,17595,1,8843,59,1,10956,109,59,1,10952,4,2,98,112,17608,17611,59,1,10964,59,1,10966,4,3,65,97,110,17622,17627,17650,114,114,59,1,8665,114,4,2,104,114,17634,17638,107,59,1,10534,4,2,59,111,17644,17646,1,8601,119,59,1,8601,119,97,114,59,1,10538,108,105,103,5,223,1,59,17664,1,223,4,13,97,98,99,100,101,102,104,105,111,112,114,115,119,17694,17709,17714,17737,17742,17749,17754,17860,17905,17957,17964,18090,18122,4,2,114,117,17700,17706,103,101,116,59,1,8982,59,1,964,114,107,59,1,9140,4,3,97,101,121,17722,17728,17734,114,111,110,59,1,357,100,105,108,59,1,355,59,1,1090,111,116,59,1,8411,108,114,101,99,59,1,8981,114,59,3,55349,56625,4,4,101,105,107,111,17764,17805,17836,17851,4,2,114,116,17770,17786,101,4,2,52,102,17777,17780,59,1,8756,111,114,101,59,1,8756,97,4,3,59,115,118,17795,17797,17802,1,952,121,109,59,1,977,59,1,977,4,2,99,110,17811,17831,107,4,2,97,115,17818,17826,112,112,114,111,120,59,1,8776,105,109,59,1,8764,115,112,59,1,8201,4,2,97,115,17842,17846,112,59,1,8776,105,109,59,1,8764,114,110,5,254,1,59,17858,1,254,4,3,108,109,110,17868,17873,17901,100,101,59,1,732,101,115,5,215,3,59,98,100,17884,17886,17898,1,215,4,2,59,97,17892,17894,1,8864,114,59,1,10801,59,1,10800,116,59,1,8749,4,3,101,112,115,17913,17917,17953,97,59,1,10536,4,4,59,98,99,102,17927,17929,17934,17939,1,8868,111,116,59,1,9014,105,114,59,1,10993,4,2,59,111,17945,17948,3,55349,56677,114,107,59,1,10970,97,59,1,10537,114,105,109,101,59,1,8244,4,3,97,105,112,17972,17977,18082,100,101,59,1,8482,4,7,97,100,101,109,112,115,116,17993,18051,18056,18059,18066,18072,18076,110,103,108,101,4,5,59,100,108,113,114,18009,18011,18017,18032,18035,1,9653,111,119,110,59,1,9663,101,102,116,4,2,59,101,18026,18028,1,9667,113,59,1,8884,59,1,8796,105,103,104,116,4,2,59,101,18045,18047,1,9657,113,59,1,8885,111,116,59,1,9708,59,1,8796,105,110,117,115,59,1,10810,108,117,115,59,1,10809,98,59,1,10701,105,109,101,59,1,10811,101,122,105,117,109,59,1,9186,4,3,99,104,116,18098,18111,18116,4,2,114,121,18104,18108,59,3,55349,56521,59,1,1094,99,121,59,1,1115,114,111,107,59,1,359,4,2,105,111,18128,18133,120,116,59,1,8812,104,101,97,100,4,2,108,114,18143,18154,101,102,116,97,114,114,111,119,59,1,8606,105,103,104,116,97,114,114,111,119,59,1,8608,4,18,65,72,97,98,99,100,102,103,104,108,109,111,112,114,115,116,117,119,18204,18209,18214,18234,18250,18268,18292,18308,18319,18343,18379,18397,18413,18504,18547,18553,18584,18603,114,114,59,1,8657,97,114,59,1,10595,4,2,99,114,18220,18230,117,116,101,5,250,1,59,18228,1,250,114,59,1,8593,114,4,2,99,101,18241,18245,121,59,1,1118,118,101,59,1,365,4,2,105,121,18256,18265,114,99,5,251,1,59,18263,1,251,59,1,1091,4,3,97,98,104,18276,18281,18287,114,114,59,1,8645,108,97,99,59,1,369,97,114,59,1,10606,4,2,105,114,18298,18304,115,104,116,59,1,10622,59,3,55349,56626,114,97,118,101,5,249,1,59,18317,1,249,4,2,97,98,18325,18338,114,4,2,108,114,18332,18335,59,1,8639,59,1,8638,108,107,59,1,9600,4,2,99,116,18349,18374,4,2,111,114,18355,18369,114,110,4,2,59,101,18363,18365,1,8988,114,59,1,8988,111,112,59,1,8975,114,105,59,1,9720,4,2,97,108,18385,18390,99,114,59,1,363,5,168,1,59,18395,1,168,4,2,103,112,18403,18408,111,110,59,1,371,102,59,3,55349,56678,4,6,97,100,104,108,115,117,18427,18434,18445,18470,18475,18494,114,114,111,119,59,1,8593,111,119,110,97,114,114,111,119,59,1,8597,97,114,112,111,111,110,4,2,108,114,18457,18463,101,102,116,59,1,8639,105,103,104,116,59,1,8638,117,115,59,1,8846,105,4,3,59,104,108,18484,18486,18489,1,965,59,1,978,111,110,59,1,965,112,97,114,114,111,119,115,59,1,8648,4,3,99,105,116,18512,18537,18542,4,2,111,114,18518,18532,114,110,4,2,59,101,18526,18528,1,8989,114,59,1,8989,111,112,59,1,8974,110,103,59,1,367,114,105,59,1,9721,99,114,59,3,55349,56522,4,3,100,105,114,18561,18566,18572,111,116,59,1,8944,108,100,101,59,1,361,105,4,2,59,102,18579,18581,1,9653,59,1,9652,4,2,97,109,18590,18595,114,114,59,1,8648,108,5,252,1,59,18601,1,252,97,110,103,108,101,59,1,10663,4,15,65,66,68,97,99,100,101,102,108,110,111,112,114,115,122,18643,18648,18661,18667,18847,18851,18857,18904,18909,18915,18931,18937,18943,18949,18996,114,114,59,1,8661,97,114,4,2,59,118,18656,18658,1,10984,59,1,10985,97,115,104,59,1,8872,4,2,110,114,18673,18679,103,114,116,59,1,10652,4,7,101,107,110,112,114,115,116,18695,18704,18711,18720,18742,18754,18810,112,115,105,108,111,110,59,1,1013,97,112,112,97,59,1,1008,111,116,104,105,110,103,59,1,8709,4,3,104,105,114,18728,18732,18735,105,59,1,981,59,1,982,111,112,116,111,59,1,8733,4,2,59,104,18748,18750,1,8597,111,59,1,1009,4,2,105,117,18760,18766,103,109,97,59,1,962,4,2,98,112,18772,18791,115,101,116,110,101,113,4,2,59,113,18784,18787,3,8842,65024,59,3,10955,65024,115,101,116,110,101,113,4,2,59,113,18803,18806,3,8843,65024,59,3,10956,65024,4,2,104,114,18816,18822,101,116,97,59,1,977,105,97,110,103,108,101,4,2,108,114,18834,18840,101,102,116,59,1,8882,105,103,104,116,59,1,8883,121,59,1,1074,97,115,104,59,1,8866,4,3,101,108,114,18865,18884,18890,4,3,59,98,101,18873,18875,18880,1,8744,97,114,59,1,8891,113,59,1,8794,108,105,112,59,1,8942,4,2,98,116,18896,18901,97,114,59,1,124,59,1,124,114,59,3,55349,56627,116,114,105,59,1,8882,115,117,4,2,98,112,18923,18927,59,3,8834,8402,59,3,8835,8402,112,102,59,3,55349,56679,114,111,112,59,1,8733,116,114,105,59,1,8883,4,2,99,117,18955,18960,114,59,3,55349,56523,4,2,98,112,18966,18981,110,4,2,69,101,18973,18977,59,3,10955,65024,59,3,8842,65024,110,4,2,69,101,18988,18992,59,3,10956,65024,59,3,8843,65024,105,103,122,97,103,59,1,10650,4,7,99,101,102,111,112,114,115,19020,19026,19061,19066,19072,19075,19089,105,114,99,59,1,373,4,2,100,105,19032,19055,4,2,98,103,19038,19043,97,114,59,1,10847,101,4,2,59,113,19050,19052,1,8743,59,1,8793,101,114,112,59,1,8472,114,59,3,55349,56628,112,102,59,3,55349,56680,59,1,8472,4,2,59,101,19081,19083,1,8768,97,116,104,59,1,8768,99,114,59,3,55349,56524,4,14,99,100,102,104,105,108,109,110,111,114,115,117,118,119,19125,19146,19152,19157,19173,19176,19192,19197,19202,19236,19252,19269,19286,19291,4,3,97,105,117,19133,19137,19142,112,59,1,8898,114,99,59,1,9711,112,59,1,8899,116,114,105,59,1,9661,114,59,3,55349,56629,4,2,65,97,19163,19168,114,114,59,1,10234,114,114,59,1,10231,59,1,958,4,2,65,97,19182,19187,114,114,59,1,10232,114,114,59,1,10229,97,112,59,1,10236,105,115,59,1,8955,4,3,100,112,116,19210,19215,19230,111,116,59,1,10752,4,2,102,108,19221,19225,59,3,55349,56681,117,115,59,1,10753,105,109,101,59,1,10754,4,2,65,97,19242,19247,114,114,59,1,10233,114,114,59,1,10230,4,2,99,113,19258,19263,114,59,3,55349,56525,99,117,112,59,1,10758,4,2,112,116,19275,19281,108,117,115,59,1,10756,114,105,59,1,9651,101,101,59,1,8897,101,100,103,101,59,1,8896,4,8,97,99,101,102,105,111,115,117,19316,19335,19349,19357,19362,19367,19373,19379,99,4,2,117,121,19323,19332,116,101,5,253,1,59,19330,1,253,59,1,1103,4,2,105,121,19341,19346,114,99,59,1,375,59,1,1099,110,5,165,1,59,19355,1,165,114,59,3,55349,56630,99,121,59,1,1111,112,102,59,3,55349,56682,99,114,59,3,55349,56526,4,2,99,109,19385,19389,121,59,1,1102,108,5,255,1,59,19395,1,255,4,10,97,99,100,101,102,104,105,111,115,119,19419,19426,19441,19446,19462,19467,19472,19480,19486,19492,99,117,116,101,59,1,378,4,2,97,121,19432,19438,114,111,110,59,1,382,59,1,1079,111,116,59,1,380,4,2,101,116,19452,19458,116,114,102,59,1,8488,97,59,1,950,114,59,3,55349,56631,99,121,59,1,1078,103,114,97,114,114,59,1,8669,112,102,59,3,55349,56683,99,114,59,3,55349,56527,4,2,106,110,19498,19501,59,1,8205,106,59,1,8204]);const P=s,H={DASH_DASH_STRING:[45,45],DOCTYPE_STRING:[68,79,67,84,89,80,69],CDATA_START_STRING:[91,67,68,65,84,65,91],SCRIPT_STRING:[115,99,114,105,112,116],PUBLIC_STRING:[80,85,66,76,73,67],SYSTEM_STRING:[83,89,83,84,69,77]},D={128:8364,130:8218,131:402,132:8222,133:8230,134:8224,135:8225,136:710,137:8240,138:352,139:8249,140:338,142:381,145:8216,146:8217,147:8220,148:8221,149:8226,150:8211,151:8212,152:732,153:8482,154:353,155:8250,156:339,158:382,159:376},F="DATA_STATE",U="RCDATA_STATE",G="RAWTEXT_STATE",B="SCRIPT_DATA_STATE",K="PLAINTEXT_STATE",b="TAG_OPEN_STATE",x="END_TAG_OPEN_STATE",y="TAG_NAME_STATE",v="RCDATA_LESS_THAN_SIGN_STATE",Y="RCDATA_END_TAG_OPEN_STATE",w="RCDATA_END_TAG_NAME_STATE",Q="RAWTEXT_LESS_THAN_SIGN_STATE",X="RAWTEXT_END_TAG_OPEN_STATE",W="RAWTEXT_END_TAG_NAME_STATE",V="SCRIPT_DATA_LESS_THAN_SIGN_STATE",j="SCRIPT_DATA_END_TAG_OPEN_STATE",z="SCRIPT_DATA_END_TAG_NAME_STATE",q="SCRIPT_DATA_ESCAPE_START_STATE",J="SCRIPT_DATA_ESCAPE_START_DASH_STATE",Z="SCRIPT_DATA_ESCAPED_STATE",$="SCRIPT_DATA_ESCAPED_DASH_STATE",ee="SCRIPT_DATA_ESCAPED_DASH_DASH_STATE",te="SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE",ne="SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE",se="SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE",re="SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE",ie="SCRIPT_DATA_DOUBLE_ESCAPED_STATE",oe="SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE",ae="SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE",Te="SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE",Ee="SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE",he="BEFORE_ATTRIBUTE_NAME_STATE",ce="ATTRIBUTE_NAME_STATE",_e="AFTER_ATTRIBUTE_NAME_STATE",le="BEFORE_ATTRIBUTE_VALUE_STATE",me="ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE",pe="ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE",Ae="ATTRIBUTE_VALUE_UNQUOTED_STATE",ue="AFTER_ATTRIBUTE_VALUE_QUOTED_STATE",Ne="SELF_CLOSING_START_TAG_STATE",de="BOGUS_COMMENT_STATE",Ce="MARKUP_DECLARATION_OPEN_STATE",Oe="COMMENT_START_STATE",fe="COMMENT_START_DASH_STATE",Se="COMMENT_STATE",Re="COMMENT_LESS_THAN_SIGN_STATE",Ie="COMMENT_LESS_THAN_SIGN_BANG_STATE",Le="COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE",ke="COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE",Me="COMMENT_END_DASH_STATE",ge="COMMENT_END_STATE",Pe="COMMENT_END_BANG_STATE",He="DOCTYPE_STATE",De="BEFORE_DOCTYPE_NAME_STATE",Fe="DOCTYPE_NAME_STATE",Ue="AFTER_DOCTYPE_NAME_STATE",Ge="AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE",Be="BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE",Ke="DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE",be="DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE",xe="AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE",ye="BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE",ve="AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE",Ye="BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE",we="DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE",Qe="DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE",Xe="AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE",We="BOGUS_DOCTYPE_STATE",Ve="CDATA_SECTION_STATE",je="CDATA_SECTION_BRACKET_STATE",ze="CDATA_SECTION_END_STATE",qe="CHARACTER_REFERENCE_STATE",Je="NAMED_CHARACTER_REFERENCE_STATE",Ze="AMBIGUOS_AMPERSAND_STATE",$e="NUMERIC_CHARACTER_REFERENCE_STATE",et="HEXADEMICAL_CHARACTER_REFERENCE_START_STATE",tt="DECIMAL_CHARACTER_REFERENCE_START_STATE",nt="HEXADEMICAL_CHARACTER_REFERENCE_STATE",st="DECIMAL_CHARACTER_REFERENCE_STATE",rt="NUMERIC_CHARACTER_REFERENCE_END_STATE";function it(e){return e===P.SPACE||e===P.LINE_FEED||e===P.TABULATION||e===P.FORM_FEED}function ot(e){return e>=P.DIGIT_0&&e<=P.DIGIT_9}function at(e){return e>=P.LATIN_CAPITAL_A&&e<=P.LATIN_CAPITAL_Z}function Tt(e){return e>=P.LATIN_SMALL_A&&e<=P.LATIN_SMALL_Z}function Et(e){return Tt(e)||at(e)}function ht(e){return Et(e)||ot(e)}function ct(e){return e>=P.LATIN_CAPITAL_A&&e<=P.LATIN_CAPITAL_F}function _t(e){return e>=P.LATIN_SMALL_A&&e<=P.LATIN_SMALL_F}function lt(e){return e+32}function mt(e){return e<=65535?String.fromCharCode(e):(e-=65536,String.fromCharCode(e>>>10&1023|55296)+String.fromCharCode(56320|1023&e))}function pt(e){return String.fromCharCode(lt(e))}function At(e,t){const n=g[++e];let s=++e,r=s+n-1;for(;s<=r;){const e=s+r>>>1,i=g[e];if(i<t)s=e+1;else {if(!(i>t))return g[e+n];r=e-1;}}return -1}class ut{constructor(){this.preprocessor=new class{constructor(){this.html=null,this.pos=-1,this.lastGapPos=-1,this.lastCharPos=-1,this.gapStack=[],this.skipNextNewLine=!1,this.lastChunkWritten=!1,this.endOfChunkHit=!1,this.bufferWaterline=65536;}_err(){}_addGap(){this.gapStack.push(this.lastGapPos),this.lastGapPos=this.pos;}_processSurrogate(e){if(this.pos!==this.lastCharPos){const t=this.html.charCodeAt(this.pos+1);if(function(e){return e>=56320&&e<=57343}(t))return this.pos++,this._addGap(),1024*(e-55296)+9216+t}else if(!this.lastChunkWritten)return this.endOfChunkHit=!0,M.EOF;return this._err("surrogate-in-input-stream"),e}dropParsedChunk(){this.pos>this.bufferWaterline&&(this.lastCharPos-=this.pos,this.html=this.html.substring(this.pos),this.pos=0,this.lastGapPos=-1,this.gapStack=[]);}write(e,t){this.html?this.html+=e:this.html=e,this.lastCharPos=this.html.length-1,this.endOfChunkHit=!1,this.lastChunkWritten=t;}insertHtmlAtCurrentPos(e){this.html=this.html.substring(0,this.pos+1)+e+this.html.substring(this.pos+1,this.html.length),this.lastCharPos=this.html.length-1,this.endOfChunkHit=!1;}advance(){if(this.pos++,this.pos>this.lastCharPos)return this.endOfChunkHit=!this.lastChunkWritten,M.EOF;let e=this.html.charCodeAt(this.pos);return this.skipNextNewLine&&e===M.LINE_FEED?(this.skipNextNewLine=!1,this._addGap(),this.advance()):e===M.CARRIAGE_RETURN?(this.skipNextNewLine=!0,M.LINE_FEED):(this.skipNextNewLine=!1,r(e)&&(e=this._processSurrogate(e)),e>31&&e<127||e===M.LINE_FEED||e===M.CARRIAGE_RETURN||e>159&&e<64976||this._checkForProblematicCharacters(e),e)}_checkForProblematicCharacters(e){i(e)?this._err("control-character-in-input-stream"):o(e)&&this._err("noncharacter-in-input-stream");}retreat(){this.pos===this.lastGapPos&&(this.lastGapPos=this.gapStack.pop(),this.pos--),this.pos--;}},this.tokenQueue=[],this.allowCDATA=!1,this.state=F,this.returnState="",this.charRefCode=-1,this.tempBuff=[],this.lastStartTagName="",this.consumedAfterSnapshot=-1,this.active=!1,this.currentCharacterToken=null,this.currentToken=null,this.currentAttr=null;}_err(){}_errOnNextCodePoint(e){this._consume(),this._err(e),this._unconsume();}getNextToken(){for(;!this.tokenQueue.length&&this.active;){this.consumedAfterSnapshot=0;const e=this._consume();this._ensureHibernation()||this[this.state](e);}return this.tokenQueue.shift()}write(e,t){this.active=!0,this.preprocessor.write(e,t);}insertHtmlAtCurrentPos(e){this.active=!0,this.preprocessor.insertHtmlAtCurrentPos(e);}_ensureHibernation(){if(this.preprocessor.endOfChunkHit){for(;this.consumedAfterSnapshot>0;this.consumedAfterSnapshot--)this.preprocessor.retreat();return this.active=!1,this.tokenQueue.push({type:ut.HIBERNATION_TOKEN}),!0}return !1}_consume(){return this.consumedAfterSnapshot++,this.preprocessor.advance()}_unconsume(){this.consumedAfterSnapshot--,this.preprocessor.retreat();}_reconsumeInState(e){this.state=e,this._unconsume();}_consumeSequenceIfMatch(e,t,n){let s=0,r=!0;const i=e.length;let o,a=0,T=t;for(;a<i;a++){if(a>0&&(T=this._consume(),s++),T===P.EOF){r=!1;break}if(o=e[a],T!==o&&(n||T!==lt(o))){r=!1;break}}if(!r)for(;s--;)this._unconsume();return r}_isTempBufferEqualToScriptString(){if(this.tempBuff.length!==H.SCRIPT_STRING.length)return !1;for(let e=0;e<this.tempBuff.length;e++)if(this.tempBuff[e]!==H.SCRIPT_STRING[e])return !1;return !0}_createStartTagToken(){this.currentToken={type:ut.START_TAG_TOKEN,tagName:"",selfClosing:!1,ackSelfClosing:!1,attrs:[]};}_createEndTagToken(){this.currentToken={type:ut.END_TAG_TOKEN,tagName:"",selfClosing:!1,attrs:[]};}_createCommentToken(){this.currentToken={type:ut.COMMENT_TOKEN,data:""};}_createDoctypeToken(e){this.currentToken={type:ut.DOCTYPE_TOKEN,name:e,forceQuirks:!1,publicId:null,systemId:null};}_createCharacterToken(e,t){this.currentCharacterToken={type:e,chars:t};}_createEOFToken(){this.currentToken={type:ut.EOF_TOKEN};}_createAttr(e){this.currentAttr={name:e,value:""};}_leaveAttrName(e){null===ut.getTokenAttr(this.currentToken,this.currentAttr.name)?this.currentToken.attrs.push(this.currentAttr):this._err("duplicate-attribute"),this.state=e;}_leaveAttrValue(e){this.state=e;}_emitCurrentToken(){this._emitCurrentCharacterToken();const e=this.currentToken;this.currentToken=null,e.type===ut.START_TAG_TOKEN?this.lastStartTagName=e.tagName:e.type===ut.END_TAG_TOKEN&&(e.attrs.length>0&&this._err("end-tag-with-attributes"),e.selfClosing&&this._err("end-tag-with-trailing-solidus")),this.tokenQueue.push(e);}_emitCurrentCharacterToken(){this.currentCharacterToken&&(this.tokenQueue.push(this.currentCharacterToken),this.currentCharacterToken=null);}_emitEOFToken(){this._createEOFToken(),this._emitCurrentToken();}_appendCharToCurrentCharacterToken(e,t){this.currentCharacterToken&&this.currentCharacterToken.type!==e&&this._emitCurrentCharacterToken(),this.currentCharacterToken?this.currentCharacterToken.chars+=t:this._createCharacterToken(e,t);}_emitCodePoint(e){let t=ut.CHARACTER_TOKEN;it(e)?t=ut.WHITESPACE_CHARACTER_TOKEN:e===P.NULL&&(t=ut.NULL_CHARACTER_TOKEN),this._appendCharToCurrentCharacterToken(t,mt(e));}_emitSeveralCodePoints(e){for(let t=0;t<e.length;t++)this._emitCodePoint(e[t]);}_emitChars(e){this._appendCharToCurrentCharacterToken(ut.CHARACTER_TOKEN,e);}_matchNamedCharacterReference(e){let t=null,n=1,s=At(0,e);for(this.tempBuff.push(e);s>-1;){const e=g[s],r=e<7;r&&1&e&&(t=2&e?[g[++s],g[++s]]:[g[++s]],n=0);const i=this._consume();if(this.tempBuff.push(i),n++,i===P.EOF)break;s=r?4&e?At(s,i):-1:i===e?++s:-1;}for(;n--;)this.tempBuff.pop(),this._unconsume();return t}_isCharacterReferenceInAttribute(){return this.returnState===me||this.returnState===pe||this.returnState===Ae}_isCharacterReferenceAttributeQuirk(e){if(!e&&this._isCharacterReferenceInAttribute()){const e=this._consume();return this._unconsume(),e===P.EQUALS_SIGN||ht(e)}return !1}_flushCodePointsConsumedAsCharacterReference(){if(this._isCharacterReferenceInAttribute())for(let e=0;e<this.tempBuff.length;e++)this.currentAttr.value+=mt(this.tempBuff[e]);else this._emitSeveralCodePoints(this.tempBuff);this.tempBuff=[];}[F](e){this.preprocessor.dropParsedChunk(),e===P.LESS_THAN_SIGN?this.state=b:e===P.AMPERSAND?(this.returnState=F,this.state=qe):e===P.NULL?(this._err(a),this._emitCodePoint(e)):e===P.EOF?this._emitEOFToken():this._emitCodePoint(e);}[U](e){this.preprocessor.dropParsedChunk(),e===P.AMPERSAND?(this.returnState=U,this.state=qe):e===P.LESS_THAN_SIGN?this.state=v:e===P.NULL?(this._err(a),this._emitChars(n)):e===P.EOF?this._emitEOFToken():this._emitCodePoint(e);}[G](e){this.preprocessor.dropParsedChunk(),e===P.LESS_THAN_SIGN?this.state=Q:e===P.NULL?(this._err(a),this._emitChars(n)):e===P.EOF?this._emitEOFToken():this._emitCodePoint(e);}[B](e){this.preprocessor.dropParsedChunk(),e===P.LESS_THAN_SIGN?this.state=V:e===P.NULL?(this._err(a),this._emitChars(n)):e===P.EOF?this._emitEOFToken():this._emitCodePoint(e);}[K](e){this.preprocessor.dropParsedChunk(),e===P.NULL?(this._err(a),this._emitChars(n)):e===P.EOF?this._emitEOFToken():this._emitCodePoint(e);}[b](e){e===P.EXCLAMATION_MARK?this.state=Ce:e===P.SOLIDUS?this.state=x:Et(e)?(this._createStartTagToken(),this._reconsumeInState(y)):e===P.QUESTION_MARK?(this._err("unexpected-question-mark-instead-of-tag-name"),this._createCommentToken(),this._reconsumeInState(de)):e===P.EOF?(this._err(h),this._emitChars("<"),this._emitEOFToken()):(this._err(T),this._emitChars("<"),this._reconsumeInState(F));}[x](e){Et(e)?(this._createEndTagToken(),this._reconsumeInState(y)):e===P.GREATER_THAN_SIGN?(this._err("missing-end-tag-name"),this.state=F):e===P.EOF?(this._err(h),this._emitChars("</"),this._emitEOFToken()):(this._err(T),this._createCommentToken(),this._reconsumeInState(de));}[y](e){it(e)?this.state=he:e===P.SOLIDUS?this.state=Ne:e===P.GREATER_THAN_SIGN?(this.state=F,this._emitCurrentToken()):at(e)?this.currentToken.tagName+=pt(e):e===P.NULL?(this._err(a),this.currentToken.tagName+=n):e===P.EOF?(this._err(c),this._emitEOFToken()):this.currentToken.tagName+=mt(e);}[v](e){e===P.SOLIDUS?(this.tempBuff=[],this.state=Y):(this._emitChars("<"),this._reconsumeInState(U));}[Y](e){Et(e)?(this._createEndTagToken(),this._reconsumeInState(w)):(this._emitChars("</"),this._reconsumeInState(U));}[w](e){if(at(e))this.currentToken.tagName+=pt(e),this.tempBuff.push(e);else if(Tt(e))this.currentToken.tagName+=mt(e),this.tempBuff.push(e);else {if(this.lastStartTagName===this.currentToken.tagName){if(it(e))return void(this.state=he);if(e===P.SOLIDUS)return void(this.state=Ne);if(e===P.GREATER_THAN_SIGN)return this.state=F,void this._emitCurrentToken()}this._emitChars("</"),this._emitSeveralCodePoints(this.tempBuff),this._reconsumeInState(U);}}[Q](e){e===P.SOLIDUS?(this.tempBuff=[],this.state=X):(this._emitChars("<"),this._reconsumeInState(G));}[X](e){Et(e)?(this._createEndTagToken(),this._reconsumeInState(W)):(this._emitChars("</"),this._reconsumeInState(G));}[W](e){if(at(e))this.currentToken.tagName+=pt(e),this.tempBuff.push(e);else if(Tt(e))this.currentToken.tagName+=mt(e),this.tempBuff.push(e);else {if(this.lastStartTagName===this.currentToken.tagName){if(it(e))return void(this.state=he);if(e===P.SOLIDUS)return void(this.state=Ne);if(e===P.GREATER_THAN_SIGN)return this._emitCurrentToken(),void(this.state=F)}this._emitChars("</"),this._emitSeveralCodePoints(this.tempBuff),this._reconsumeInState(G);}}[V](e){e===P.SOLIDUS?(this.tempBuff=[],this.state=j):e===P.EXCLAMATION_MARK?(this.state=q,this._emitChars("<!")):(this._emitChars("<"),this._reconsumeInState(B));}[j](e){Et(e)?(this._createEndTagToken(),this._reconsumeInState(z)):(this._emitChars("</"),this._reconsumeInState(B));}[z](e){if(at(e))this.currentToken.tagName+=pt(e),this.tempBuff.push(e);else if(Tt(e))this.currentToken.tagName+=mt(e),this.tempBuff.push(e);else {if(this.lastStartTagName===this.currentToken.tagName){if(it(e))return void(this.state=he);if(e===P.SOLIDUS)return void(this.state=Ne);if(e===P.GREATER_THAN_SIGN)return this._emitCurrentToken(),void(this.state=F)}this._emitChars("</"),this._emitSeveralCodePoints(this.tempBuff),this._reconsumeInState(B);}}[q](e){e===P.HYPHEN_MINUS?(this.state=J,this._emitChars("-")):this._reconsumeInState(B);}[J](e){e===P.HYPHEN_MINUS?(this.state=ee,this._emitChars("-")):this._reconsumeInState(B);}[Z](e){e===P.HYPHEN_MINUS?(this.state=$,this._emitChars("-")):e===P.LESS_THAN_SIGN?this.state=te:e===P.NULL?(this._err(a),this._emitChars(n)):e===P.EOF?(this._err(O),this._emitEOFToken()):this._emitCodePoint(e);}[$](e){e===P.HYPHEN_MINUS?(this.state=ee,this._emitChars("-")):e===P.LESS_THAN_SIGN?this.state=te:e===P.NULL?(this._err(a),this.state=Z,this._emitChars(n)):e===P.EOF?(this._err(O),this._emitEOFToken()):(this.state=Z,this._emitCodePoint(e));}[ee](e){e===P.HYPHEN_MINUS?this._emitChars("-"):e===P.LESS_THAN_SIGN?this.state=te:e===P.GREATER_THAN_SIGN?(this.state=B,this._emitChars(">")):e===P.NULL?(this._err(a),this.state=Z,this._emitChars(n)):e===P.EOF?(this._err(O),this._emitEOFToken()):(this.state=Z,this._emitCodePoint(e));}[te](e){e===P.SOLIDUS?(this.tempBuff=[],this.state=ne):Et(e)?(this.tempBuff=[],this._emitChars("<"),this._reconsumeInState(re)):(this._emitChars("<"),this._reconsumeInState(Z));}[ne](e){Et(e)?(this._createEndTagToken(),this._reconsumeInState(se)):(this._emitChars("</"),this._reconsumeInState(Z));}[se](e){if(at(e))this.currentToken.tagName+=pt(e),this.tempBuff.push(e);else if(Tt(e))this.currentToken.tagName+=mt(e),this.tempBuff.push(e);else {if(this.lastStartTagName===this.currentToken.tagName){if(it(e))return void(this.state=he);if(e===P.SOLIDUS)return void(this.state=Ne);if(e===P.GREATER_THAN_SIGN)return this._emitCurrentToken(),void(this.state=F)}this._emitChars("</"),this._emitSeveralCodePoints(this.tempBuff),this._reconsumeInState(Z);}}[re](e){it(e)||e===P.SOLIDUS||e===P.GREATER_THAN_SIGN?(this.state=this._isTempBufferEqualToScriptString()?ie:Z,this._emitCodePoint(e)):at(e)?(this.tempBuff.push(lt(e)),this._emitCodePoint(e)):Tt(e)?(this.tempBuff.push(e),this._emitCodePoint(e)):this._reconsumeInState(Z);}[ie](e){e===P.HYPHEN_MINUS?(this.state=oe,this._emitChars("-")):e===P.LESS_THAN_SIGN?(this.state=Te,this._emitChars("<")):e===P.NULL?(this._err(a),this._emitChars(n)):e===P.EOF?(this._err(O),this._emitEOFToken()):this._emitCodePoint(e);}[oe](e){e===P.HYPHEN_MINUS?(this.state=ae,this._emitChars("-")):e===P.LESS_THAN_SIGN?(this.state=Te,this._emitChars("<")):e===P.NULL?(this._err(a),this.state=ie,this._emitChars(n)):e===P.EOF?(this._err(O),this._emitEOFToken()):(this.state=ie,this._emitCodePoint(e));}[ae](e){e===P.HYPHEN_MINUS?this._emitChars("-"):e===P.LESS_THAN_SIGN?(this.state=Te,this._emitChars("<")):e===P.GREATER_THAN_SIGN?(this.state=B,this._emitChars(">")):e===P.NULL?(this._err(a),this.state=ie,this._emitChars(n)):e===P.EOF?(this._err(O),this._emitEOFToken()):(this.state=ie,this._emitCodePoint(e));}[Te](e){e===P.SOLIDUS?(this.tempBuff=[],this.state=Ee,this._emitChars("/")):this._reconsumeInState(ie);}[Ee](e){it(e)||e===P.SOLIDUS||e===P.GREATER_THAN_SIGN?(this.state=this._isTempBufferEqualToScriptString()?Z:ie,this._emitCodePoint(e)):at(e)?(this.tempBuff.push(lt(e)),this._emitCodePoint(e)):Tt(e)?(this.tempBuff.push(e),this._emitCodePoint(e)):this._reconsumeInState(ie);}[he](e){it(e)||(e===P.SOLIDUS||e===P.GREATER_THAN_SIGN||e===P.EOF?this._reconsumeInState(_e):e===P.EQUALS_SIGN?(this._err("unexpected-equals-sign-before-attribute-name"),this._createAttr("="),this.state=ce):(this._createAttr(""),this._reconsumeInState(ce)));}[ce](e){it(e)||e===P.SOLIDUS||e===P.GREATER_THAN_SIGN||e===P.EOF?(this._leaveAttrName(_e),this._unconsume()):e===P.EQUALS_SIGN?this._leaveAttrName(le):at(e)?this.currentAttr.name+=pt(e):e===P.QUOTATION_MARK||e===P.APOSTROPHE||e===P.LESS_THAN_SIGN?(this._err("unexpected-character-in-attribute-name"),this.currentAttr.name+=mt(e)):e===P.NULL?(this._err(a),this.currentAttr.name+=n):this.currentAttr.name+=mt(e);}[_e](e){it(e)||(e===P.SOLIDUS?this.state=Ne:e===P.EQUALS_SIGN?this.state=le:e===P.GREATER_THAN_SIGN?(this.state=F,this._emitCurrentToken()):e===P.EOF?(this._err(c),this._emitEOFToken()):(this._createAttr(""),this._reconsumeInState(ce)));}[le](e){it(e)||(e===P.QUOTATION_MARK?this.state=me:e===P.APOSTROPHE?this.state=pe:e===P.GREATER_THAN_SIGN?(this._err("missing-attribute-value"),this.state=F,this._emitCurrentToken()):this._reconsumeInState(Ae));}[me](e){e===P.QUOTATION_MARK?this.state=ue:e===P.AMPERSAND?(this.returnState=me,this.state=qe):e===P.NULL?(this._err(a),this.currentAttr.value+=n):e===P.EOF?(this._err(c),this._emitEOFToken()):this.currentAttr.value+=mt(e);}[pe](e){e===P.APOSTROPHE?this.state=ue:e===P.AMPERSAND?(this.returnState=pe,this.state=qe):e===P.NULL?(this._err(a),this.currentAttr.value+=n):e===P.EOF?(this._err(c),this._emitEOFToken()):this.currentAttr.value+=mt(e);}[Ae](e){it(e)?this._leaveAttrValue(he):e===P.AMPERSAND?(this.returnState=Ae,this.state=qe):e===P.GREATER_THAN_SIGN?(this._leaveAttrValue(F),this._emitCurrentToken()):e===P.NULL?(this._err(a),this.currentAttr.value+=n):e===P.QUOTATION_MARK||e===P.APOSTROPHE||e===P.LESS_THAN_SIGN||e===P.EQUALS_SIGN||e===P.GRAVE_ACCENT?(this._err("unexpected-character-in-unquoted-attribute-value"),this.currentAttr.value+=mt(e)):e===P.EOF?(this._err(c),this._emitEOFToken()):this.currentAttr.value+=mt(e);}[ue](e){it(e)?this._leaveAttrValue(he):e===P.SOLIDUS?this._leaveAttrValue(Ne):e===P.GREATER_THAN_SIGN?(this._leaveAttrValue(F),this._emitCurrentToken()):e===P.EOF?(this._err(c),this._emitEOFToken()):(this._err("missing-whitespace-between-attributes"),this._reconsumeInState(he));}[Ne](e){e===P.GREATER_THAN_SIGN?(this.currentToken.selfClosing=!0,this.state=F,this._emitCurrentToken()):e===P.EOF?(this._err(c),this._emitEOFToken()):(this._err("unexpected-solidus-in-tag"),this._reconsumeInState(he));}[de](e){e===P.GREATER_THAN_SIGN?(this.state=F,this._emitCurrentToken()):e===P.EOF?(this._emitCurrentToken(),this._emitEOFToken()):e===P.NULL?(this._err(a),this.currentToken.data+=n):this.currentToken.data+=mt(e);}[Ce](e){this._consumeSequenceIfMatch(H.DASH_DASH_STRING,e,!0)?(this._createCommentToken(),this.state=Oe):this._consumeSequenceIfMatch(H.DOCTYPE_STRING,e,!1)?this.state=He:this._consumeSequenceIfMatch(H.CDATA_START_STRING,e,!0)?this.allowCDATA?this.state=Ve:(this._err("cdata-in-html-content"),this._createCommentToken(),this.currentToken.data="[CDATA[",this.state=de):this._ensureHibernation()||(this._err("incorrectly-opened-comment"),this._createCommentToken(),this._reconsumeInState(de));}[Oe](e){e===P.HYPHEN_MINUS?this.state=fe:e===P.GREATER_THAN_SIGN?(this._err(S),this.state=F,this._emitCurrentToken()):this._reconsumeInState(Se);}[fe](e){e===P.HYPHEN_MINUS?this.state=ge:e===P.GREATER_THAN_SIGN?(this._err(S),this.state=F,this._emitCurrentToken()):e===P.EOF?(this._err(R),this._emitCurrentToken(),this._emitEOFToken()):(this.currentToken.data+="-",this._reconsumeInState(Se));}[Se](e){e===P.HYPHEN_MINUS?this.state=Me:e===P.LESS_THAN_SIGN?(this.currentToken.data+="<",this.state=Re):e===P.NULL?(this._err(a),this.currentToken.data+=n):e===P.EOF?(this._err(R),this._emitCurrentToken(),this._emitEOFToken()):this.currentToken.data+=mt(e);}[Re](e){e===P.EXCLAMATION_MARK?(this.currentToken.data+="!",this.state=Ie):e===P.LESS_THAN_SIGN?this.currentToken.data+="!":this._reconsumeInState(Se);}[Ie](e){e===P.HYPHEN_MINUS?this.state=Le:this._reconsumeInState(Se);}[Le](e){e===P.HYPHEN_MINUS?this.state=ke:this._reconsumeInState(Me);}[ke](e){e!==P.GREATER_THAN_SIGN&&e!==P.EOF&&this._err("nested-comment"),this._reconsumeInState(ge);}[Me](e){e===P.HYPHEN_MINUS?this.state=ge:e===P.EOF?(this._err(R),this._emitCurrentToken(),this._emitEOFToken()):(this.currentToken.data+="-",this._reconsumeInState(Se));}[ge](e){e===P.GREATER_THAN_SIGN?(this.state=F,this._emitCurrentToken()):e===P.EXCLAMATION_MARK?this.state=Pe:e===P.HYPHEN_MINUS?this.currentToken.data+="-":e===P.EOF?(this._err(R),this._emitCurrentToken(),this._emitEOFToken()):(this.currentToken.data+="--",this._reconsumeInState(Se));}[Pe](e){e===P.HYPHEN_MINUS?(this.currentToken.data+="--!",this.state=Me):e===P.GREATER_THAN_SIGN?(this._err("incorrectly-closed-comment"),this.state=F,this._emitCurrentToken()):e===P.EOF?(this._err(R),this._emitCurrentToken(),this._emitEOFToken()):(this.currentToken.data+="--!",this._reconsumeInState(Se));}[He](e){it(e)?this.state=De:e===P.GREATER_THAN_SIGN?this._reconsumeInState(De):e===P.EOF?(this._err(f),this._createDoctypeToken(null),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):(this._err("missing-whitespace-before-doctype-name"),this._reconsumeInState(De));}[De](e){it(e)||(at(e)?(this._createDoctypeToken(pt(e)),this.state=Fe):e===P.NULL?(this._err(a),this._createDoctypeToken(n),this.state=Fe):e===P.GREATER_THAN_SIGN?(this._err("missing-doctype-name"),this._createDoctypeToken(null),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this.state=F):e===P.EOF?(this._err(f),this._createDoctypeToken(null),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):(this._createDoctypeToken(mt(e)),this.state=Fe));}[Fe](e){it(e)?this.state=Ue:e===P.GREATER_THAN_SIGN?(this.state=F,this._emitCurrentToken()):at(e)?this.currentToken.name+=pt(e):e===P.NULL?(this._err(a),this.currentToken.name+=n):e===P.EOF?(this._err(f),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):this.currentToken.name+=mt(e);}[Ue](e){it(e)||(e===P.GREATER_THAN_SIGN?(this.state=F,this._emitCurrentToken()):e===P.EOF?(this._err(f),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):this._consumeSequenceIfMatch(H.PUBLIC_STRING,e,!1)?this.state=Ge:this._consumeSequenceIfMatch(H.SYSTEM_STRING,e,!1)?this.state=ve:this._ensureHibernation()||(this._err("invalid-character-sequence-after-doctype-name"),this.currentToken.forceQuirks=!0,this._reconsumeInState(We)));}[Ge](e){it(e)?this.state=Be:e===P.QUOTATION_MARK?(this._err(_),this.currentToken.publicId="",this.state=Ke):e===P.APOSTROPHE?(this._err(_),this.currentToken.publicId="",this.state=be):e===P.GREATER_THAN_SIGN?(this._err(u),this.currentToken.forceQuirks=!0,this.state=F,this._emitCurrentToken()):e===P.EOF?(this._err(f),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):(this._err(p),this.currentToken.forceQuirks=!0,this._reconsumeInState(We));}[Be](e){it(e)||(e===P.QUOTATION_MARK?(this.currentToken.publicId="",this.state=Ke):e===P.APOSTROPHE?(this.currentToken.publicId="",this.state=be):e===P.GREATER_THAN_SIGN?(this._err(u),this.currentToken.forceQuirks=!0,this.state=F,this._emitCurrentToken()):e===P.EOF?(this._err(f),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):(this._err(p),this.currentToken.forceQuirks=!0,this._reconsumeInState(We)));}[Ke](e){e===P.QUOTATION_MARK?this.state=xe:e===P.NULL?(this._err(a),this.currentToken.publicId+=n):e===P.GREATER_THAN_SIGN?(this._err(d),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this.state=F):e===P.EOF?(this._err(f),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):this.currentToken.publicId+=mt(e);}[be](e){e===P.APOSTROPHE?this.state=xe:e===P.NULL?(this._err(a),this.currentToken.publicId+=n):e===P.GREATER_THAN_SIGN?(this._err(d),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this.state=F):e===P.EOF?(this._err(f),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):this.currentToken.publicId+=mt(e);}[xe](e){it(e)?this.state=ye:e===P.GREATER_THAN_SIGN?(this.state=F,this._emitCurrentToken()):e===P.QUOTATION_MARK?(this._err(l),this.currentToken.systemId="",this.state=we):e===P.APOSTROPHE?(this._err(l),this.currentToken.systemId="",this.state=Qe):e===P.EOF?(this._err(f),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):(this._err(A),this.currentToken.forceQuirks=!0,this._reconsumeInState(We));}[ye](e){it(e)||(e===P.GREATER_THAN_SIGN?(this._emitCurrentToken(),this.state=F):e===P.QUOTATION_MARK?(this.currentToken.systemId="",this.state=we):e===P.APOSTROPHE?(this.currentToken.systemId="",this.state=Qe):e===P.EOF?(this._err(f),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):(this._err(A),this.currentToken.forceQuirks=!0,this._reconsumeInState(We)));}[ve](e){it(e)?this.state=Ye:e===P.QUOTATION_MARK?(this._err(m),this.currentToken.systemId="",this.state=we):e===P.APOSTROPHE?(this._err(m),this.currentToken.systemId="",this.state=Qe):e===P.GREATER_THAN_SIGN?(this._err(N),this.currentToken.forceQuirks=!0,this.state=F,this._emitCurrentToken()):e===P.EOF?(this._err(f),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):(this._err(A),this.currentToken.forceQuirks=!0,this._reconsumeInState(We));}[Ye](e){it(e)||(e===P.QUOTATION_MARK?(this.currentToken.systemId="",this.state=we):e===P.APOSTROPHE?(this.currentToken.systemId="",this.state=Qe):e===P.GREATER_THAN_SIGN?(this._err(N),this.currentToken.forceQuirks=!0,this.state=F,this._emitCurrentToken()):e===P.EOF?(this._err(f),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):(this._err(A),this.currentToken.forceQuirks=!0,this._reconsumeInState(We)));}[we](e){e===P.QUOTATION_MARK?this.state=Xe:e===P.NULL?(this._err(a),this.currentToken.systemId+=n):e===P.GREATER_THAN_SIGN?(this._err(C),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this.state=F):e===P.EOF?(this._err(f),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):this.currentToken.systemId+=mt(e);}[Qe](e){e===P.APOSTROPHE?this.state=Xe:e===P.NULL?(this._err(a),this.currentToken.systemId+=n):e===P.GREATER_THAN_SIGN?(this._err(C),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this.state=F):e===P.EOF?(this._err(f),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):this.currentToken.systemId+=mt(e);}[Xe](e){it(e)||(e===P.GREATER_THAN_SIGN?(this._emitCurrentToken(),this.state=F):e===P.EOF?(this._err(f),this.currentToken.forceQuirks=!0,this._emitCurrentToken(),this._emitEOFToken()):(this._err("unexpected-character-after-doctype-system-identifier"),this._reconsumeInState(We)));}[We](e){e===P.GREATER_THAN_SIGN?(this._emitCurrentToken(),this.state=F):e===P.NULL?this._err(a):e===P.EOF&&(this._emitCurrentToken(),this._emitEOFToken());}[Ve](e){e===P.RIGHT_SQUARE_BRACKET?this.state=je:e===P.EOF?(this._err("eof-in-cdata"),this._emitEOFToken()):this._emitCodePoint(e);}[je](e){e===P.RIGHT_SQUARE_BRACKET?this.state=ze:(this._emitChars("]"),this._reconsumeInState(Ve));}[ze](e){e===P.GREATER_THAN_SIGN?this.state=F:e===P.RIGHT_SQUARE_BRACKET?this._emitChars("]"):(this._emitChars("]]"),this._reconsumeInState(Ve));}[qe](e){this.tempBuff=[P.AMPERSAND],e===P.NUMBER_SIGN?(this.tempBuff.push(e),this.state=$e):ht(e)?this._reconsumeInState(Je):(this._flushCodePointsConsumedAsCharacterReference(),this._reconsumeInState(this.returnState));}[Je](e){const t=this._matchNamedCharacterReference(e);if(this._ensureHibernation())this.tempBuff=[P.AMPERSAND];else if(t){const e=this.tempBuff[this.tempBuff.length-1]===P.SEMICOLON;this._isCharacterReferenceAttributeQuirk(e)||(e||this._errOnNextCodePoint(E),this.tempBuff=t),this._flushCodePointsConsumedAsCharacterReference(),this.state=this.returnState;}else this._flushCodePointsConsumedAsCharacterReference(),this.state=Ze;}[Ze](e){ht(e)?this._isCharacterReferenceInAttribute()?this.currentAttr.value+=mt(e):this._emitCodePoint(e):(e===P.SEMICOLON&&this._err("unknown-named-character-reference"),this._reconsumeInState(this.returnState));}[$e](e){this.charRefCode=0,e===P.LATIN_SMALL_X||e===P.LATIN_CAPITAL_X?(this.tempBuff.push(e),this.state=et):this._reconsumeInState(tt);}[et](e){!function(e){return ot(e)||ct(e)||_t(e)}(e)?(this._err(I),this._flushCodePointsConsumedAsCharacterReference(),this._reconsumeInState(this.returnState)):this._reconsumeInState(nt);}[tt](e){ot(e)?this._reconsumeInState(st):(this._err(I),this._flushCodePointsConsumedAsCharacterReference(),this._reconsumeInState(this.returnState));}[nt](e){ct(e)?this.charRefCode=16*this.charRefCode+e-55:_t(e)?this.charRefCode=16*this.charRefCode+e-87:ot(e)?this.charRefCode=16*this.charRefCode+e-48:e===P.SEMICOLON?this.state=rt:(this._err(E),this._reconsumeInState(rt));}[st](e){ot(e)?this.charRefCode=10*this.charRefCode+e-48:e===P.SEMICOLON?this.state=rt:(this._err(E),this._reconsumeInState(rt));}[rt](){if(this.charRefCode===P.NULL)this._err("null-character-reference"),this.charRefCode=P.REPLACEMENT_CHARACTER;else if(this.charRefCode>1114111)this._err("character-reference-outside-unicode-range"),this.charRefCode=P.REPLACEMENT_CHARACTER;else if(r(this.charRefCode))this._err("surrogate-character-reference"),this.charRefCode=P.REPLACEMENT_CHARACTER;else if(o(this.charRefCode))this._err("noncharacter-character-reference");else if(i(this.charRefCode)||this.charRefCode===P.CARRIAGE_RETURN){this._err("control-character-reference");const e=D[this.charRefCode];e&&(this.charRefCode=e);}this.tempBuff=[this.charRefCode],this._flushCodePointsConsumedAsCharacterReference(),this._reconsumeInState(this.returnState);}}ut.CHARACTER_TOKEN="CHARACTER_TOKEN",ut.NULL_CHARACTER_TOKEN="NULL_CHARACTER_TOKEN",ut.WHITESPACE_CHARACTER_TOKEN="WHITESPACE_CHARACTER_TOKEN",ut.START_TAG_TOKEN="START_TAG_TOKEN",ut.END_TAG_TOKEN="END_TAG_TOKEN",ut.COMMENT_TOKEN="COMMENT_TOKEN",ut.DOCTYPE_TOKEN="DOCTYPE_TOKEN",ut.EOF_TOKEN="EOF_TOKEN",ut.HIBERNATION_TOKEN="HIBERNATION_TOKEN",ut.MODE={DATA:F,RCDATA:U,RAWTEXT:G,SCRIPT_DATA:B,PLAINTEXT:K},ut.getTokenAttr=function(e,t){for(let n=e.attrs.length-1;n>=0;n--)if(e.attrs[n].name===t)return e.attrs[n].value;return null};var Nt=ut;function dt(e,t,n){return e(n={path:t,exports:{},require:function(e,t){return function(){throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs")}(null==t&&n.path)}},n.exports),n.exports}var Ct=dt((function(e,t){const n=t.NAMESPACES={HTML:"http://www.w3.org/1999/xhtml",MATHML:"http://www.w3.org/1998/Math/MathML",SVG:"http://www.w3.org/2000/svg",XLINK:"http://www.w3.org/1999/xlink",XML:"http://www.w3.org/XML/1998/namespace",XMLNS:"http://www.w3.org/2000/xmlns/"};t.ATTRS={TYPE:"type",ACTION:"action",ENCODING:"encoding",PROMPT:"prompt",NAME:"name",COLOR:"color",FACE:"face",SIZE:"size"},t.DOCUMENT_MODE={NO_QUIRKS:"no-quirks",QUIRKS:"quirks",LIMITED_QUIRKS:"limited-quirks"};const s=t.TAG_NAMES={A:"a",ADDRESS:"address",ANNOTATION_XML:"annotation-xml",APPLET:"applet",AREA:"area",ARTICLE:"article",ASIDE:"aside",B:"b",BASE:"base",BASEFONT:"basefont",BGSOUND:"bgsound",BIG:"big",BLOCKQUOTE:"blockquote",BODY:"body",BR:"br",BUTTON:"button",CAPTION:"caption",CENTER:"center",CODE:"code",COL:"col",COLGROUP:"colgroup",DD:"dd",DESC:"desc",DETAILS:"details",DIALOG:"dialog",DIR:"dir",DIV:"div",DL:"dl",DT:"dt",EM:"em",EMBED:"embed",FIELDSET:"fieldset",FIGCAPTION:"figcaption",FIGURE:"figure",FONT:"font",FOOTER:"footer",FOREIGN_OBJECT:"foreignObject",FORM:"form",FRAME:"frame",FRAMESET:"frameset",H1:"h1",H2:"h2",H3:"h3",H4:"h4",H5:"h5",H6:"h6",HEAD:"head",HEADER:"header",HGROUP:"hgroup",HR:"hr",HTML:"html",I:"i",IMG:"img",IMAGE:"image",INPUT:"input",IFRAME:"iframe",KEYGEN:"keygen",LABEL:"label",LI:"li",LINK:"link",LISTING:"listing",MAIN:"main",MALIGNMARK:"malignmark",MARQUEE:"marquee",MATH:"math",MENU:"menu",META:"meta",MGLYPH:"mglyph",MI:"mi",MO:"mo",MN:"mn",MS:"ms",MTEXT:"mtext",NAV:"nav",NOBR:"nobr",NOFRAMES:"noframes",NOEMBED:"noembed",NOSCRIPT:"noscript",OBJECT:"object",OL:"ol",OPTGROUP:"optgroup",OPTION:"option",P:"p",PARAM:"param",PLAINTEXT:"plaintext",PRE:"pre",RB:"rb",RP:"rp",RT:"rt",RTC:"rtc",RUBY:"ruby",S:"s",SCRIPT:"script",SECTION:"section",SELECT:"select",SOURCE:"source",SMALL:"small",SPAN:"span",STRIKE:"strike",STRONG:"strong",STYLE:"style",SUB:"sub",SUMMARY:"summary",SUP:"sup",TABLE:"table",TBODY:"tbody",TEMPLATE:"template",TEXTAREA:"textarea",TFOOT:"tfoot",TD:"td",TH:"th",THEAD:"thead",TITLE:"title",TR:"tr",TRACK:"track",TT:"tt",U:"u",UL:"ul",SVG:"svg",VAR:"var",WBR:"wbr",XMP:"xmp"};t.SPECIAL_ELEMENTS={[n.HTML]:{[s.ADDRESS]:!0,[s.APPLET]:!0,[s.AREA]:!0,[s.ARTICLE]:!0,[s.ASIDE]:!0,[s.BASE]:!0,[s.BASEFONT]:!0,[s.BGSOUND]:!0,[s.BLOCKQUOTE]:!0,[s.BODY]:!0,[s.BR]:!0,[s.BUTTON]:!0,[s.CAPTION]:!0,[s.CENTER]:!0,[s.COL]:!0,[s.COLGROUP]:!0,[s.DD]:!0,[s.DETAILS]:!0,[s.DIR]:!0,[s.DIV]:!0,[s.DL]:!0,[s.DT]:!0,[s.EMBED]:!0,[s.FIELDSET]:!0,[s.FIGCAPTION]:!0,[s.FIGURE]:!0,[s.FOOTER]:!0,[s.FORM]:!0,[s.FRAME]:!0,[s.FRAMESET]:!0,[s.H1]:!0,[s.H2]:!0,[s.H3]:!0,[s.H4]:!0,[s.H5]:!0,[s.H6]:!0,[s.HEAD]:!0,[s.HEADER]:!0,[s.HGROUP]:!0,[s.HR]:!0,[s.HTML]:!0,[s.IFRAME]:!0,[s.IMG]:!0,[s.INPUT]:!0,[s.LI]:!0,[s.LINK]:!0,[s.LISTING]:!0,[s.MAIN]:!0,[s.MARQUEE]:!0,[s.MENU]:!0,[s.META]:!0,[s.NAV]:!0,[s.NOEMBED]:!0,[s.NOFRAMES]:!0,[s.NOSCRIPT]:!0,[s.OBJECT]:!0,[s.OL]:!0,[s.P]:!0,[s.PARAM]:!0,[s.PLAINTEXT]:!0,[s.PRE]:!0,[s.SCRIPT]:!0,[s.SECTION]:!0,[s.SELECT]:!0,[s.SOURCE]:!0,[s.STYLE]:!0,[s.SUMMARY]:!0,[s.TABLE]:!0,[s.TBODY]:!0,[s.TD]:!0,[s.TEMPLATE]:!0,[s.TEXTAREA]:!0,[s.TFOOT]:!0,[s.TH]:!0,[s.THEAD]:!0,[s.TITLE]:!0,[s.TR]:!0,[s.TRACK]:!0,[s.UL]:!0,[s.WBR]:!0,[s.XMP]:!0},[n.MATHML]:{[s.MI]:!0,[s.MO]:!0,[s.MN]:!0,[s.MS]:!0,[s.MTEXT]:!0,[s.ANNOTATION_XML]:!0},[n.SVG]:{[s.TITLE]:!0,[s.FOREIGN_OBJECT]:!0,[s.DESC]:!0}};}));const Ot=Ct.TAG_NAMES,ft=Ct.NAMESPACES;function St(e){switch(e.length){case 1:return e===Ot.P;case 2:return e===Ot.RB||e===Ot.RP||e===Ot.RT||e===Ot.DD||e===Ot.DT||e===Ot.LI;case 3:return e===Ot.RTC;case 6:return e===Ot.OPTION;case 8:return e===Ot.OPTGROUP}return !1}function Rt(e){switch(e.length){case 1:return e===Ot.P;case 2:return e===Ot.RB||e===Ot.RP||e===Ot.RT||e===Ot.DD||e===Ot.DT||e===Ot.LI||e===Ot.TD||e===Ot.TH||e===Ot.TR;case 3:return e===Ot.RTC;case 5:return e===Ot.TBODY||e===Ot.TFOOT||e===Ot.THEAD;case 6:return e===Ot.OPTION;case 7:return e===Ot.CAPTION;case 8:return e===Ot.OPTGROUP||e===Ot.COLGROUP}return !1}function It(e,t){switch(e.length){case 2:if(e===Ot.TD||e===Ot.TH)return t===ft.HTML;if(e===Ot.MI||e===Ot.MO||e===Ot.MN||e===Ot.MS)return t===ft.MATHML;break;case 4:if(e===Ot.HTML)return t===ft.HTML;if(e===Ot.DESC)return t===ft.SVG;break;case 5:if(e===Ot.TABLE)return t===ft.HTML;if(e===Ot.MTEXT)return t===ft.MATHML;if(e===Ot.TITLE)return t===ft.SVG;break;case 6:return (e===Ot.APPLET||e===Ot.OBJECT)&&t===ft.HTML;case 7:return (e===Ot.CAPTION||e===Ot.MARQUEE)&&t===ft.HTML;case 8:return e===Ot.TEMPLATE&&t===ft.HTML;case 13:return e===Ot.FOREIGN_OBJECT&&t===ft.SVG;case 14:return e===Ot.ANNOTATION_XML&&t===ft.MATHML}return !1}class Lt{constructor(e){this.length=0,this.entries=[],this.treeAdapter=e,this.bookmark=null;}_getNoahArkConditionCandidates(e){const t=[];if(this.length>=3){const n=this.treeAdapter.getAttrList(e).length,s=this.treeAdapter.getTagName(e),r=this.treeAdapter.getNamespaceURI(e);for(let e=this.length-1;e>=0;e--){const i=this.entries[e];if(i.type===Lt.MARKER_ENTRY)break;const o=i.element,a=this.treeAdapter.getAttrList(o);this.treeAdapter.getTagName(o)===s&&this.treeAdapter.getNamespaceURI(o)===r&&a.length===n&&t.push({idx:e,attrs:a});}}return t.length<3?[]:t}_ensureNoahArkCondition(e){const t=this._getNoahArkConditionCandidates(e);let n=t.length;if(n){const s=this.treeAdapter.getAttrList(e),r=s.length,i=Object.create(null);for(let e=0;e<r;e++){const t=s[e];i[t.name]=t.value;}for(let e=0;e<r;e++)for(let s=0;s<n;s++){const r=t[s].attrs[e];if(i[r.name]!==r.value&&(t.splice(s,1),n--),t.length<3)return}for(let e=n-1;e>=2;e--)this.entries.splice(t[e].idx,1),this.length--;}}insertMarker(){this.entries.push({type:Lt.MARKER_ENTRY}),this.length++;}pushElement(e,t){this._ensureNoahArkCondition(e),this.entries.push({type:Lt.ELEMENT_ENTRY,element:e,token:t}),this.length++;}insertElementAfterBookmark(e,t){let n=this.length-1;for(;n>=0&&this.entries[n]!==this.bookmark;n--);this.entries.splice(n+1,0,{type:Lt.ELEMENT_ENTRY,element:e,token:t}),this.length++;}removeEntry(e){for(let t=this.length-1;t>=0;t--)if(this.entries[t]===e){this.entries.splice(t,1),this.length--;break}}clearToLastMarker(){for(;this.length;){const e=this.entries.pop();if(this.length--,e.type===Lt.MARKER_ENTRY)break}}getElementEntryInScopeWithTagName(e){for(let t=this.length-1;t>=0;t--){const n=this.entries[t];if(n.type===Lt.MARKER_ENTRY)return null;if(this.treeAdapter.getTagName(n.element)===e)return n}return null}getElementEntry(e){for(let t=this.length-1;t>=0;t--){const n=this.entries[t];if(n.type===Lt.ELEMENT_ENTRY&&n.element===e)return n}return null}}Lt.MARKER_ENTRY="MARKER_ENTRY",Lt.ELEMENT_ENTRY="ELEMENT_ENTRY";var kt=Lt;class Mt{constructor(e){const t={},n=this._getOverriddenMethods(this,t);for(const s of Object.keys(n))"function"==typeof n[s]&&(t[s]=e[s],e[s]=n[s]);}_getOverriddenMethods(){throw new Error("Not implemented")}}Mt.install=function(e,t,n){e.__mixins||(e.__mixins=[]);for(let n=0;n<e.__mixins.length;n++)if(e.__mixins[n].constructor===t)return e.__mixins[n];const s=new t(e,n);return e.__mixins.push(s),s};var gt=Mt,Pt=class extends gt{constructor(e){super(e),this.preprocessor=e,this.isEol=!1,this.lineStartPos=0,this.droppedBufferSize=0,this.offset=0,this.col=0,this.line=1;}_getOverriddenMethods(e,t){return {advance(){const n=this.pos+1,s=this.html[n];return e.isEol&&(e.isEol=!1,e.line++,e.lineStartPos=n),("\n"===s||"\r"===s&&"\n"!==this.html[n+1])&&(e.isEol=!0),e.col=n-e.lineStartPos+1,e.offset=e.droppedBufferSize+n,t.advance.call(this)},retreat(){t.retreat.call(this),e.isEol=!1,e.col=this.pos-e.lineStartPos+1;},dropParsedChunk(){const n=this.pos;t.dropParsedChunk.call(this);const s=n-this.pos;e.lineStartPos-=s,e.droppedBufferSize+=s,e.offset=e.droppedBufferSize+this.pos;}}}},Ht=class extends gt{constructor(e){super(e),this.tokenizer=e,this.posTracker=gt.install(e.preprocessor,Pt),this.currentAttrLocation=null,this.ctLoc=null;}_getCurrentLocation(){return {startLine:this.posTracker.line,startCol:this.posTracker.col,startOffset:this.posTracker.offset,endLine:-1,endCol:-1,endOffset:-1}}_attachCurrentAttrLocationInfo(){this.currentAttrLocation.endLine=this.posTracker.line,this.currentAttrLocation.endCol=this.posTracker.col,this.currentAttrLocation.endOffset=this.posTracker.offset;const e=this.tokenizer.currentToken,t=this.tokenizer.currentAttr;e.location.attrs||(e.location.attrs=Object.create(null)),e.location.attrs[t.name]=this.currentAttrLocation;}_getOverriddenMethods(e,t){const n={_createStartTagToken(){t._createStartTagToken.call(this),this.currentToken.location=e.ctLoc;},_createEndTagToken(){t._createEndTagToken.call(this),this.currentToken.location=e.ctLoc;},_createCommentToken(){t._createCommentToken.call(this),this.currentToken.location=e.ctLoc;},_createDoctypeToken(n){t._createDoctypeToken.call(this,n),this.currentToken.location=e.ctLoc;},_createCharacterToken(n,s){t._createCharacterToken.call(this,n,s),this.currentCharacterToken.location=e.ctLoc;},_createEOFToken(){t._createEOFToken.call(this),this.currentToken.location=e._getCurrentLocation();},_createAttr(n){t._createAttr.call(this,n),e.currentAttrLocation=e._getCurrentLocation();},_leaveAttrName(n){t._leaveAttrName.call(this,n),e._attachCurrentAttrLocationInfo();},_leaveAttrValue(n){t._leaveAttrValue.call(this,n),e._attachCurrentAttrLocationInfo();},_emitCurrentToken(){const n=this.currentToken.location;this.currentCharacterToken&&(this.currentCharacterToken.location.endLine=n.startLine,this.currentCharacterToken.location.endCol=n.startCol,this.currentCharacterToken.location.endOffset=n.startOffset),this.currentToken.type===Nt.EOF_TOKEN?(n.endLine=n.startLine,n.endCol=n.startCol,n.endOffset=n.startOffset):(n.endLine=e.posTracker.line,n.endCol=e.posTracker.col+1,n.endOffset=e.posTracker.offset+1),t._emitCurrentToken.call(this);},_emitCurrentCharacterToken(){const n=this.currentCharacterToken&&this.currentCharacterToken.location;n&&-1===n.endOffset&&(n.endLine=e.posTracker.line,n.endCol=e.posTracker.col,n.endOffset=e.posTracker.offset),t._emitCurrentCharacterToken.call(this);}};return Object.keys(Nt.MODE).forEach((s=>{const r=Nt.MODE[s];n[r]=function(n){e.ctLoc=e._getCurrentLocation(),t[r].call(this,n);};})),n}},Dt=class extends gt{constructor(e,t){super(e),this.onItemPop=t.onItemPop;}_getOverriddenMethods(e,t){return {pop(){e.onItemPop(this.current),t.pop.call(this);},popAllUpToHtmlElement(){for(let t=this.stackTop;t>0;t--)e.onItemPop(this.items[t]);t.popAllUpToHtmlElement.call(this);},remove(n){e.onItemPop(this.current),t.remove.call(this,n);}}}};const Ft=Ct.TAG_NAMES;var Ut=class extends gt{constructor(e){super(e),this.parser=e,this.treeAdapter=this.parser.treeAdapter,this.posTracker=null,this.lastStartTagToken=null,this.lastFosterParentingLocation=null,this.currentToken=null;}_setStartLocation(e){let t=null;this.lastStartTagToken&&(t=Object.assign({},this.lastStartTagToken.location),t.startTag=this.lastStartTagToken.location),this.treeAdapter.setNodeSourceCodeLocation(e,t);}_setEndLocation(e,t){if(this.treeAdapter.getNodeSourceCodeLocation(e)&&t.location){const n=t.location,s=this.treeAdapter.getTagName(e),r={};t.type===Nt.END_TAG_TOKEN&&s===t.tagName?(r.endTag=Object.assign({},n),r.endLine=n.endLine,r.endCol=n.endCol,r.endOffset=n.endOffset):(r.endLine=n.startLine,r.endCol=n.startCol,r.endOffset=n.startOffset),this.treeAdapter.updateNodeSourceCodeLocation(e,r);}}_getOverriddenMethods(e,t){return {_bootstrap(n,s){t._bootstrap.call(this,n,s),e.lastStartTagToken=null,e.lastFosterParentingLocation=null,e.currentToken=null;const r=gt.install(this.tokenizer,Ht);e.posTracker=r.posTracker,gt.install(this.openElements,Dt,{onItemPop:function(t){e._setEndLocation(t,e.currentToken);}});},_runParsingLoop(n){t._runParsingLoop.call(this,n);for(let t=this.openElements.stackTop;t>=0;t--)e._setEndLocation(this.openElements.items[t],e.currentToken);},_processTokenInForeignContent(n){e.currentToken=n,t._processTokenInForeignContent.call(this,n);},_processToken(n){if(e.currentToken=n,t._processToken.call(this,n),n.type===Nt.END_TAG_TOKEN&&(n.tagName===Ft.HTML||n.tagName===Ft.BODY&&this.openElements.hasInScope(Ft.BODY)))for(let t=this.openElements.stackTop;t>=0;t--){const s=this.openElements.items[t];if(this.treeAdapter.getTagName(s)===n.tagName){e._setEndLocation(s,n);break}}},_setDocumentType(e){t._setDocumentType.call(this,e);const n=this.treeAdapter.getChildNodes(this.document),s=n.length;for(let t=0;t<s;t++){const s=n[t];if(this.treeAdapter.isDocumentTypeNode(s)){this.treeAdapter.setNodeSourceCodeLocation(s,e.location);break}}},_attachElementToTree(n){e._setStartLocation(n),e.lastStartTagToken=null,t._attachElementToTree.call(this,n);},_appendElement(n,s){e.lastStartTagToken=n,t._appendElement.call(this,n,s);},_insertElement(n,s){e.lastStartTagToken=n,t._insertElement.call(this,n,s);},_insertTemplate(n){e.lastStartTagToken=n,t._insertTemplate.call(this,n);const s=this.treeAdapter.getTemplateContent(this.openElements.current);this.treeAdapter.setNodeSourceCodeLocation(s,null);},_insertFakeRootElement(){t._insertFakeRootElement.call(this),this.treeAdapter.setNodeSourceCodeLocation(this.openElements.current,null);},_appendCommentNode(e,n){t._appendCommentNode.call(this,e,n);const s=this.treeAdapter.getChildNodes(n),r=s[s.length-1];this.treeAdapter.setNodeSourceCodeLocation(r,e.location);},_findFosterParentingLocation(){return e.lastFosterParentingLocation=t._findFosterParentingLocation.call(this),e.lastFosterParentingLocation},_insertCharacters(n){t._insertCharacters.call(this,n);const s=this._shouldFosterParentOnInsertion(),r=s&&e.lastFosterParentingLocation.parent||this.openElements.currentTmplContent||this.openElements.current,i=this.treeAdapter.getChildNodes(r),o=s&&e.lastFosterParentingLocation.beforeElement?i.indexOf(e.lastFosterParentingLocation.beforeElement)-1:i.length-1,a=i[o];if(this.treeAdapter.getNodeSourceCodeLocation(a)){const{endLine:e,endCol:t,endOffset:s}=n.location;this.treeAdapter.updateNodeSourceCodeLocation(a,{endLine:e,endCol:t,endOffset:s});}else this.treeAdapter.setNodeSourceCodeLocation(a,n.location);}}}},Gt=class extends gt{constructor(e,t){super(e),this.posTracker=null,this.onParseError=t.onParseError;}_setErrorLocation(e){e.startLine=e.endLine=this.posTracker.line,e.startCol=e.endCol=this.posTracker.col,e.startOffset=e.endOffset=this.posTracker.offset;}_reportError(e){const t={code:e,startLine:-1,startCol:-1,startOffset:-1,endLine:-1,endCol:-1,endOffset:-1};this._setErrorLocation(t),this.onParseError(t);}_getOverriddenMethods(e){return {_err(t){e._reportError(t);}}}},Bt=class extends Gt{constructor(e,t){super(e,t),this.posTracker=gt.install(e,Pt),this.lastErrOffset=-1;}_reportError(e){this.lastErrOffset!==this.posTracker.offset&&(this.lastErrOffset=this.posTracker.offset,super._reportError(e));}},Kt=class extends Gt{constructor(e,t){super(e,t);const n=gt.install(e.preprocessor,Bt,t);this.posTracker=n.posTracker;}},bt=class extends Gt{constructor(e,t){super(e,t),this.opts=t,this.ctLoc=null,this.locBeforeToken=!1;}_setErrorLocation(e){this.ctLoc&&(e.startLine=this.ctLoc.startLine,e.startCol=this.ctLoc.startCol,e.startOffset=this.ctLoc.startOffset,e.endLine=this.locBeforeToken?this.ctLoc.startLine:this.ctLoc.endLine,e.endCol=this.locBeforeToken?this.ctLoc.startCol:this.ctLoc.endCol,e.endOffset=this.locBeforeToken?this.ctLoc.startOffset:this.ctLoc.endOffset);}_getOverriddenMethods(e,t){return {_bootstrap(n,s){t._bootstrap.call(this,n,s),gt.install(this.tokenizer,Kt,e.opts),gt.install(this.tokenizer,Ht);},_processInputToken(n){e.ctLoc=n.location,t._processInputToken.call(this,n);},_err(t,n){e.locBeforeToken=n&&n.beforeToken,e._reportError(t);}}}},xt=dt((function(e,t){const{DOCUMENT_MODE:n}=Ct;t.createDocument=function(){return {nodeName:"#document",mode:n.NO_QUIRKS,childNodes:[]}},t.createDocumentFragment=function(){return {nodeName:"#document-fragment",childNodes:[]}},t.createElement=function(e,t,n){return {nodeName:e,tagName:e,attrs:n,namespaceURI:t,childNodes:[],parentNode:null}},t.createCommentNode=function(e){return {nodeName:"#comment",data:e,parentNode:null}};const s=function(e){return {nodeName:"#text",value:e,parentNode:null}},r=t.appendChild=function(e,t){e.childNodes.push(t),t.parentNode=e;},i=t.insertBefore=function(e,t,n){const s=e.childNodes.indexOf(n);e.childNodes.splice(s,0,t),t.parentNode=e;};t.setTemplateContent=function(e,t){e.content=t;},t.getTemplateContent=function(e){return e.content},t.setDocumentType=function(e,t,n,s){let i=null;for(let t=0;t<e.childNodes.length;t++)if("#documentType"===e.childNodes[t].nodeName){i=e.childNodes[t];break}i?(i.name=t,i.publicId=n,i.systemId=s):r(e,{nodeName:"#documentType",name:t,publicId:n,systemId:s});},t.setDocumentMode=function(e,t){e.mode=t;},t.getDocumentMode=function(e){return e.mode},t.detachNode=function(e){if(e.parentNode){const t=e.parentNode.childNodes.indexOf(e);e.parentNode.childNodes.splice(t,1),e.parentNode=null;}},t.insertText=function(e,t){if(e.childNodes.length){const n=e.childNodes[e.childNodes.length-1];if("#text"===n.nodeName)return void(n.value+=t)}r(e,s(t));},t.insertTextBefore=function(e,t,n){const r=e.childNodes[e.childNodes.indexOf(n)-1];r&&"#text"===r.nodeName?r.value+=t:i(e,s(t),n);},t.adoptAttributes=function(e,t){const n=[];for(let t=0;t<e.attrs.length;t++)n.push(e.attrs[t].name);for(let s=0;s<t.length;s++)-1===n.indexOf(t[s].name)&&e.attrs.push(t[s]);},t.getFirstChild=function(e){return e.childNodes[0]},t.getChildNodes=function(e){return e.childNodes},t.getParentNode=function(e){return e.parentNode},t.getAttrList=function(e){return e.attrs},t.getTagName=function(e){return e.tagName},t.getNamespaceURI=function(e){return e.namespaceURI},t.getTextNodeContent=function(e){return e.value},t.getCommentNodeContent=function(e){return e.data},t.getDocumentTypeNodeName=function(e){return e.name},t.getDocumentTypeNodePublicId=function(e){return e.publicId},t.getDocumentTypeNodeSystemId=function(e){return e.systemId},t.isTextNode=function(e){return "#text"===e.nodeName},t.isCommentNode=function(e){return "#comment"===e.nodeName},t.isDocumentTypeNode=function(e){return "#documentType"===e.nodeName},t.isElementNode=function(e){return !!e.tagName},t.setNodeSourceCodeLocation=function(e,t){e.sourceCodeLocation=t;},t.getNodeSourceCodeLocation=function(e){return e.sourceCodeLocation},t.updateNodeSourceCodeLocation=function(e,t){e.sourceCodeLocation=Object.assign(e.sourceCodeLocation,t);};}));const{DOCUMENT_MODE:yt}=Ct,vt="html",Yt=["+//silmaril//dtd html pro v0r11 19970101//","-//as//dtd html 3.0 aswedit + extensions//","-//advasoft ltd//dtd html 3.0 aswedit + extensions//","-//ietf//dtd html 2.0 level 1//","-//ietf//dtd html 2.0 level 2//","-//ietf//dtd html 2.0 strict level 1//","-//ietf//dtd html 2.0 strict level 2//","-//ietf//dtd html 2.0 strict//","-//ietf//dtd html 2.0//","-//ietf//dtd html 2.1e//","-//ietf//dtd html 3.0//","-//ietf//dtd html 3.2 final//","-//ietf//dtd html 3.2//","-//ietf//dtd html 3//","-//ietf//dtd html level 0//","-//ietf//dtd html level 1//","-//ietf//dtd html level 2//","-//ietf//dtd html level 3//","-//ietf//dtd html strict level 0//","-//ietf//dtd html strict level 1//","-//ietf//dtd html strict level 2//","-//ietf//dtd html strict level 3//","-//ietf//dtd html strict//","-//ietf//dtd html//","-//metrius//dtd metrius presentational//","-//microsoft//dtd internet explorer 2.0 html strict//","-//microsoft//dtd internet explorer 2.0 html//","-//microsoft//dtd internet explorer 2.0 tables//","-//microsoft//dtd internet explorer 3.0 html strict//","-//microsoft//dtd internet explorer 3.0 html//","-//microsoft//dtd internet explorer 3.0 tables//","-//netscape comm. corp.//dtd html//","-//netscape comm. corp.//dtd strict html//","-//o'reilly and associates//dtd html 2.0//","-//o'reilly and associates//dtd html extended 1.0//","-//o'reilly and associates//dtd html extended relaxed 1.0//","-//sq//dtd html 2.0 hotmetal + extensions//","-//softquad software//dtd hotmetal pro 6.0::19990601::extensions to html 4.0//","-//softquad//dtd hotmetal pro 4.0::19971010::extensions to html 4.0//","-//spyglass//dtd html 2.0 extended//","-//sun microsystems corp.//dtd hotjava html//","-//sun microsystems corp.//dtd hotjava strict html//","-//w3c//dtd html 3 1995-03-24//","-//w3c//dtd html 3.2 draft//","-//w3c//dtd html 3.2 final//","-//w3c//dtd html 3.2//","-//w3c//dtd html 3.2s draft//","-//w3c//dtd html 4.0 frameset//","-//w3c//dtd html 4.0 transitional//","-//w3c//dtd html experimental 19960712//","-//w3c//dtd html experimental 970421//","-//w3c//dtd w3 html//","-//w3o//dtd w3 html 3.0//","-//webtechs//dtd mozilla html 2.0//","-//webtechs//dtd mozilla html//"],wt=Yt.concat(["-//w3c//dtd html 4.01 frameset//","-//w3c//dtd html 4.01 transitional//"]),Qt=["-//w3o//dtd w3 html strict 3.0//en//","-/w3c/dtd html 4.0 transitional/en","html"],Xt=["-//w3c//dtd xhtml 1.0 frameset//","-//w3c//dtd xhtml 1.0 transitional//"],Wt=Xt.concat(["-//w3c//dtd html 4.01 frameset//","-//w3c//dtd html 4.01 transitional//"]);function Vt(e,t){for(let n=0;n<t.length;n++)if(0===e.indexOf(t[n]))return !0;return !1}var jt=dt((function(e,t){const n=Ct.TAG_NAMES,s=Ct.NAMESPACES,r=Ct.ATTRS,i={attributename:"attributeName",attributetype:"attributeType",basefrequency:"baseFrequency",baseprofile:"baseProfile",calcmode:"calcMode",clippathunits:"clipPathUnits",diffuseconstant:"diffuseConstant",edgemode:"edgeMode",filterunits:"filterUnits",glyphref:"glyphRef",gradienttransform:"gradientTransform",gradientunits:"gradientUnits",kernelmatrix:"kernelMatrix",kernelunitlength:"kernelUnitLength",keypoints:"keyPoints",keysplines:"keySplines",keytimes:"keyTimes",lengthadjust:"lengthAdjust",limitingconeangle:"limitingConeAngle",markerheight:"markerHeight",markerunits:"markerUnits",markerwidth:"markerWidth",maskcontentunits:"maskContentUnits",maskunits:"maskUnits",numoctaves:"numOctaves",pathlength:"pathLength",patterncontentunits:"patternContentUnits",patterntransform:"patternTransform",patternunits:"patternUnits",pointsatx:"pointsAtX",pointsaty:"pointsAtY",pointsatz:"pointsAtZ",preservealpha:"preserveAlpha",preserveaspectratio:"preserveAspectRatio",primitiveunits:"primitiveUnits",refx:"refX",refy:"refY",repeatcount:"repeatCount",repeatdur:"repeatDur",requiredextensions:"requiredExtensions",requiredfeatures:"requiredFeatures",specularconstant:"specularConstant",specularexponent:"specularExponent",spreadmethod:"spreadMethod",startoffset:"startOffset",stddeviation:"stdDeviation",stitchtiles:"stitchTiles",surfacescale:"surfaceScale",systemlanguage:"systemLanguage",tablevalues:"tableValues",targetx:"targetX",targety:"targetY",textlength:"textLength",viewbox:"viewBox",viewtarget:"viewTarget",xchannelselector:"xChannelSelector",ychannelselector:"yChannelSelector",zoomandpan:"zoomAndPan"},o={"xlink:actuate":{prefix:"xlink",name:"actuate",namespace:s.XLINK},"xlink:arcrole":{prefix:"xlink",name:"arcrole",namespace:s.XLINK},"xlink:href":{prefix:"xlink",name:"href",namespace:s.XLINK},"xlink:role":{prefix:"xlink",name:"role",namespace:s.XLINK},"xlink:show":{prefix:"xlink",name:"show",namespace:s.XLINK},"xlink:title":{prefix:"xlink",name:"title",namespace:s.XLINK},"xlink:type":{prefix:"xlink",name:"type",namespace:s.XLINK},"xml:base":{prefix:"xml",name:"base",namespace:s.XML},"xml:lang":{prefix:"xml",name:"lang",namespace:s.XML},"xml:space":{prefix:"xml",name:"space",namespace:s.XML},xmlns:{prefix:"",name:"xmlns",namespace:s.XMLNS},"xmlns:xlink":{prefix:"xmlns",name:"xlink",namespace:s.XMLNS}},a=t.SVG_TAG_NAMES_ADJUSTMENT_MAP={altglyph:"altGlyph",altglyphdef:"altGlyphDef",altglyphitem:"altGlyphItem",animatecolor:"animateColor",animatemotion:"animateMotion",animatetransform:"animateTransform",clippath:"clipPath",feblend:"feBlend",fecolormatrix:"feColorMatrix",fecomponenttransfer:"feComponentTransfer",fecomposite:"feComposite",feconvolvematrix:"feConvolveMatrix",fediffuselighting:"feDiffuseLighting",fedisplacementmap:"feDisplacementMap",fedistantlight:"feDistantLight",feflood:"feFlood",fefunca:"feFuncA",fefuncb:"feFuncB",fefuncg:"feFuncG",fefuncr:"feFuncR",fegaussianblur:"feGaussianBlur",feimage:"feImage",femerge:"feMerge",femergenode:"feMergeNode",femorphology:"feMorphology",feoffset:"feOffset",fepointlight:"fePointLight",fespecularlighting:"feSpecularLighting",fespotlight:"feSpotLight",fetile:"feTile",feturbulence:"feTurbulence",foreignobject:"foreignObject",glyphref:"glyphRef",lineargradient:"linearGradient",radialgradient:"radialGradient",textpath:"textPath"},T={[n.B]:!0,[n.BIG]:!0,[n.BLOCKQUOTE]:!0,[n.BODY]:!0,[n.BR]:!0,[n.CENTER]:!0,[n.CODE]:!0,[n.DD]:!0,[n.DIV]:!0,[n.DL]:!0,[n.DT]:!0,[n.EM]:!0,[n.EMBED]:!0,[n.H1]:!0,[n.H2]:!0,[n.H3]:!0,[n.H4]:!0,[n.H5]:!0,[n.H6]:!0,[n.HEAD]:!0,[n.HR]:!0,[n.I]:!0,[n.IMG]:!0,[n.LI]:!0,[n.LISTING]:!0,[n.MENU]:!0,[n.META]:!0,[n.NOBR]:!0,[n.OL]:!0,[n.P]:!0,[n.PRE]:!0,[n.RUBY]:!0,[n.S]:!0,[n.SMALL]:!0,[n.SPAN]:!0,[n.STRONG]:!0,[n.STRIKE]:!0,[n.SUB]:!0,[n.SUP]:!0,[n.TABLE]:!0,[n.TT]:!0,[n.U]:!0,[n.UL]:!0,[n.VAR]:!0};t.causesExit=function(e){const t=e.tagName;return !(t!==n.FONT||null===Nt.getTokenAttr(e,r.COLOR)&&null===Nt.getTokenAttr(e,r.SIZE)&&null===Nt.getTokenAttr(e,r.FACE))||T[t]},t.adjustTokenMathMLAttrs=function(e){for(let t=0;t<e.attrs.length;t++)if("definitionurl"===e.attrs[t].name){e.attrs[t].name="definitionURL";break}},t.adjustTokenSVGAttrs=function(e){for(let t=0;t<e.attrs.length;t++){const n=i[e.attrs[t].name];n&&(e.attrs[t].name=n);}},t.adjustTokenXMLAttrs=function(e){for(let t=0;t<e.attrs.length;t++){const n=o[e.attrs[t].name];n&&(e.attrs[t].prefix=n.prefix,e.attrs[t].name=n.name,e.attrs[t].namespace=n.namespace);}},t.adjustTokenSVGTagName=function(e){const t=a[e.tagName];t&&(e.tagName=t);},t.isIntegrationPoint=function(e,t,i,o){return !(o&&o!==s.HTML||!function(e,t,i){if(t===s.MATHML&&e===n.ANNOTATION_XML)for(let e=0;e<i.length;e++)if(i[e].name===r.ENCODING){const t=i[e].value.toLowerCase();return "text/html"===t||"application/xhtml+xml"===t}return t===s.SVG&&(e===n.FOREIGN_OBJECT||e===n.DESC||e===n.TITLE)}(e,t,i))||!(o&&o!==s.MATHML||!function(e,t){return t===s.MATHML&&(e===n.MI||e===n.MO||e===n.MN||e===n.MS||e===n.MTEXT)}(e,t))};}));const zt=Ct.TAG_NAMES,qt=Ct.NAMESPACES,Jt=Ct.ATTRS,Zt={scriptingEnabled:!0,sourceCodeLocationInfo:!1,onParseError:null,treeAdapter:xt},$t="hidden",en="INITIAL_MODE",tn="BEFORE_HTML_MODE",nn="BEFORE_HEAD_MODE",sn="IN_HEAD_MODE",rn="IN_HEAD_NO_SCRIPT_MODE",on="AFTER_HEAD_MODE",an="IN_BODY_MODE",Tn="TEXT_MODE",En="IN_TABLE_MODE",hn="IN_TABLE_TEXT_MODE",cn="IN_CAPTION_MODE",_n="IN_COLUMN_GROUP_MODE",ln="IN_TABLE_BODY_MODE",mn="IN_ROW_MODE",pn="IN_CELL_MODE",An="IN_SELECT_MODE",un="IN_SELECT_IN_TABLE_MODE",Nn="IN_TEMPLATE_MODE",dn="AFTER_BODY_MODE",Cn="IN_FRAMESET_MODE",On="AFTER_FRAMESET_MODE",fn="AFTER_AFTER_BODY_MODE",Sn="AFTER_AFTER_FRAMESET_MODE",Rn={[zt.TR]:mn,[zt.TBODY]:ln,[zt.THEAD]:ln,[zt.TFOOT]:ln,[zt.CAPTION]:cn,[zt.COLGROUP]:_n,[zt.TABLE]:En,[zt.BODY]:an,[zt.FRAMESET]:Cn},In={[zt.CAPTION]:En,[zt.COLGROUP]:En,[zt.TBODY]:En,[zt.TFOOT]:En,[zt.THEAD]:En,[zt.COL]:_n,[zt.TR]:ln,[zt.TD]:mn,[zt.TH]:mn},Ln={[en]:{[Nt.CHARACTER_TOKEN]:vn,[Nt.NULL_CHARACTER_TOKEN]:vn,[Nt.WHITESPACE_CHARACTER_TOKEN]:Gn,[Nt.COMMENT_TOKEN]:Kn,[Nt.DOCTYPE_TOKEN]:function(e,t){e._setDocumentType(t);const n=t.forceQuirks?Ct.DOCUMENT_MODE.QUIRKS:function(e){if(e.name!==vt)return yt.QUIRKS;const t=e.systemId;if(t&&"http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd"===t.toLowerCase())return yt.QUIRKS;let n=e.publicId;if(null!==n){if(n=n.toLowerCase(),Qt.indexOf(n)>-1)return yt.QUIRKS;let e=null===t?wt:Yt;if(Vt(n,e))return yt.QUIRKS;if(e=null===t?Xt:Wt,Vt(n,e))return yt.LIMITED_QUIRKS}return yt.NO_QUIRKS}(t);(function(e){return e.name===vt&&null===e.publicId&&(null===e.systemId||"about:legacy-compat"===e.systemId)})(t)||e._err("non-conforming-doctype"),e.treeAdapter.setDocumentMode(e.document,n),e.insertionMode=tn;},[Nt.START_TAG_TOKEN]:vn,[Nt.END_TAG_TOKEN]:vn,[Nt.EOF_TOKEN]:vn},[tn]:{[Nt.CHARACTER_TOKEN]:Yn,[Nt.NULL_CHARACTER_TOKEN]:Yn,[Nt.WHITESPACE_CHARACTER_TOKEN]:Gn,[Nt.COMMENT_TOKEN]:Kn,[Nt.DOCTYPE_TOKEN]:Gn,[Nt.START_TAG_TOKEN]:function(e,t){t.tagName===zt.HTML?(e._insertElement(t,qt.HTML),e.insertionMode=nn):Yn(e,t);},[Nt.END_TAG_TOKEN]:function(e,t){const n=t.tagName;n!==zt.HTML&&n!==zt.HEAD&&n!==zt.BODY&&n!==zt.BR||Yn(e,t);},[Nt.EOF_TOKEN]:Yn},[nn]:{[Nt.CHARACTER_TOKEN]:wn,[Nt.NULL_CHARACTER_TOKEN]:wn,[Nt.WHITESPACE_CHARACTER_TOKEN]:Gn,[Nt.COMMENT_TOKEN]:Kn,[Nt.DOCTYPE_TOKEN]:Bn,[Nt.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===zt.HTML?as(e,t):n===zt.HEAD?(e._insertElement(t,qt.HTML),e.headElement=e.openElements.current,e.insertionMode=sn):wn(e,t);},[Nt.END_TAG_TOKEN]:function(e,t){const n=t.tagName;n===zt.HEAD||n===zt.BODY||n===zt.HTML||n===zt.BR?wn(e,t):e._err(L);},[Nt.EOF_TOKEN]:wn},[sn]:{[Nt.CHARACTER_TOKEN]:Wn,[Nt.NULL_CHARACTER_TOKEN]:Wn,[Nt.WHITESPACE_CHARACTER_TOKEN]:xn,[Nt.COMMENT_TOKEN]:Kn,[Nt.DOCTYPE_TOKEN]:Bn,[Nt.START_TAG_TOKEN]:Qn,[Nt.END_TAG_TOKEN]:Xn,[Nt.EOF_TOKEN]:Wn},[rn]:{[Nt.CHARACTER_TOKEN]:Vn,[Nt.NULL_CHARACTER_TOKEN]:Vn,[Nt.WHITESPACE_CHARACTER_TOKEN]:xn,[Nt.COMMENT_TOKEN]:Kn,[Nt.DOCTYPE_TOKEN]:Bn,[Nt.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===zt.HTML?as(e,t):n===zt.BASEFONT||n===zt.BGSOUND||n===zt.HEAD||n===zt.LINK||n===zt.META||n===zt.NOFRAMES||n===zt.STYLE?Qn(e,t):n===zt.NOSCRIPT?e._err("nested-noscript-in-head"):Vn(e,t);},[Nt.END_TAG_TOKEN]:function(e,t){const n=t.tagName;n===zt.NOSCRIPT?(e.openElements.pop(),e.insertionMode=sn):n===zt.BR?Vn(e,t):e._err(L);},[Nt.EOF_TOKEN]:Vn},[on]:{[Nt.CHARACTER_TOKEN]:jn,[Nt.NULL_CHARACTER_TOKEN]:jn,[Nt.WHITESPACE_CHARACTER_TOKEN]:xn,[Nt.COMMENT_TOKEN]:Kn,[Nt.DOCTYPE_TOKEN]:Bn,[Nt.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===zt.HTML?as(e,t):n===zt.BODY?(e._insertElement(t,qt.HTML),e.framesetOk=!1,e.insertionMode=an):n===zt.FRAMESET?(e._insertElement(t,qt.HTML),e.insertionMode=Cn):n===zt.BASE||n===zt.BASEFONT||n===zt.BGSOUND||n===zt.LINK||n===zt.META||n===zt.NOFRAMES||n===zt.SCRIPT||n===zt.STYLE||n===zt.TEMPLATE||n===zt.TITLE?(e._err("abandoned-head-element-child"),e.openElements.push(e.headElement),Qn(e,t),e.openElements.remove(e.headElement)):n===zt.HEAD?e._err(k):jn(e,t);},[Nt.END_TAG_TOKEN]:function(e,t){const n=t.tagName;n===zt.BODY||n===zt.HTML||n===zt.BR?jn(e,t):n===zt.TEMPLATE?Xn(e,t):e._err(L);},[Nt.EOF_TOKEN]:jn},[an]:{[Nt.CHARACTER_TOKEN]:qn,[Nt.NULL_CHARACTER_TOKEN]:Gn,[Nt.WHITESPACE_CHARACTER_TOKEN]:zn,[Nt.COMMENT_TOKEN]:Kn,[Nt.DOCTYPE_TOKEN]:Gn,[Nt.START_TAG_TOKEN]:as,[Nt.END_TAG_TOKEN]:cs,[Nt.EOF_TOKEN]:_s},[Tn]:{[Nt.CHARACTER_TOKEN]:xn,[Nt.NULL_CHARACTER_TOKEN]:xn,[Nt.WHITESPACE_CHARACTER_TOKEN]:xn,[Nt.COMMENT_TOKEN]:Gn,[Nt.DOCTYPE_TOKEN]:Gn,[Nt.START_TAG_TOKEN]:Gn,[Nt.END_TAG_TOKEN]:function(e,t){t.tagName===zt.SCRIPT&&(e.pendingScript=e.openElements.current),e.openElements.pop(),e.insertionMode=e.originalInsertionMode;},[Nt.EOF_TOKEN]:function(e,t){e._err("eof-in-element-that-can-contain-only-text"),e.openElements.pop(),e.insertionMode=e.originalInsertionMode,e._processToken(t);}},[En]:{[Nt.CHARACTER_TOKEN]:ls,[Nt.NULL_CHARACTER_TOKEN]:ls,[Nt.WHITESPACE_CHARACTER_TOKEN]:ls,[Nt.COMMENT_TOKEN]:Kn,[Nt.DOCTYPE_TOKEN]:Gn,[Nt.START_TAG_TOKEN]:ms,[Nt.END_TAG_TOKEN]:ps,[Nt.EOF_TOKEN]:_s},[hn]:{[Nt.CHARACTER_TOKEN]:function(e,t){e.pendingCharacterTokens.push(t),e.hasNonWhitespacePendingCharacterToken=!0;},[Nt.NULL_CHARACTER_TOKEN]:Gn,[Nt.WHITESPACE_CHARACTER_TOKEN]:function(e,t){e.pendingCharacterTokens.push(t);},[Nt.COMMENT_TOKEN]:us,[Nt.DOCTYPE_TOKEN]:us,[Nt.START_TAG_TOKEN]:us,[Nt.END_TAG_TOKEN]:us,[Nt.EOF_TOKEN]:us},[cn]:{[Nt.CHARACTER_TOKEN]:qn,[Nt.NULL_CHARACTER_TOKEN]:Gn,[Nt.WHITESPACE_CHARACTER_TOKEN]:zn,[Nt.COMMENT_TOKEN]:Kn,[Nt.DOCTYPE_TOKEN]:Gn,[Nt.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===zt.CAPTION||n===zt.COL||n===zt.COLGROUP||n===zt.TBODY||n===zt.TD||n===zt.TFOOT||n===zt.TH||n===zt.THEAD||n===zt.TR?e.openElements.hasInTableScope(zt.CAPTION)&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilTagNamePopped(zt.CAPTION),e.activeFormattingElements.clearToLastMarker(),e.insertionMode=En,e._processToken(t)):as(e,t);},[Nt.END_TAG_TOKEN]:function(e,t){const n=t.tagName;n===zt.CAPTION||n===zt.TABLE?e.openElements.hasInTableScope(zt.CAPTION)&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilTagNamePopped(zt.CAPTION),e.activeFormattingElements.clearToLastMarker(),e.insertionMode=En,n===zt.TABLE&&e._processToken(t)):n!==zt.BODY&&n!==zt.COL&&n!==zt.COLGROUP&&n!==zt.HTML&&n!==zt.TBODY&&n!==zt.TD&&n!==zt.TFOOT&&n!==zt.TH&&n!==zt.THEAD&&n!==zt.TR&&cs(e,t);},[Nt.EOF_TOKEN]:_s},[_n]:{[Nt.CHARACTER_TOKEN]:Ns,[Nt.NULL_CHARACTER_TOKEN]:Ns,[Nt.WHITESPACE_CHARACTER_TOKEN]:xn,[Nt.COMMENT_TOKEN]:Kn,[Nt.DOCTYPE_TOKEN]:Gn,[Nt.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===zt.HTML?as(e,t):n===zt.COL?(e._appendElement(t,qt.HTML),t.ackSelfClosing=!0):n===zt.TEMPLATE?Qn(e,t):Ns(e,t);},[Nt.END_TAG_TOKEN]:function(e,t){const n=t.tagName;n===zt.COLGROUP?e.openElements.currentTagName===zt.COLGROUP&&(e.openElements.pop(),e.insertionMode=En):n===zt.TEMPLATE?Xn(e,t):n!==zt.COL&&Ns(e,t);},[Nt.EOF_TOKEN]:_s},[ln]:{[Nt.CHARACTER_TOKEN]:ls,[Nt.NULL_CHARACTER_TOKEN]:ls,[Nt.WHITESPACE_CHARACTER_TOKEN]:ls,[Nt.COMMENT_TOKEN]:Kn,[Nt.DOCTYPE_TOKEN]:Gn,[Nt.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===zt.TR?(e.openElements.clearBackToTableBodyContext(),e._insertElement(t,qt.HTML),e.insertionMode=mn):n===zt.TH||n===zt.TD?(e.openElements.clearBackToTableBodyContext(),e._insertFakeElement(zt.TR),e.insertionMode=mn,e._processToken(t)):n===zt.CAPTION||n===zt.COL||n===zt.COLGROUP||n===zt.TBODY||n===zt.TFOOT||n===zt.THEAD?e.openElements.hasTableBodyContextInTableScope()&&(e.openElements.clearBackToTableBodyContext(),e.openElements.pop(),e.insertionMode=En,e._processToken(t)):ms(e,t);},[Nt.END_TAG_TOKEN]:function(e,t){const n=t.tagName;n===zt.TBODY||n===zt.TFOOT||n===zt.THEAD?e.openElements.hasInTableScope(n)&&(e.openElements.clearBackToTableBodyContext(),e.openElements.pop(),e.insertionMode=En):n===zt.TABLE?e.openElements.hasTableBodyContextInTableScope()&&(e.openElements.clearBackToTableBodyContext(),e.openElements.pop(),e.insertionMode=En,e._processToken(t)):(n!==zt.BODY&&n!==zt.CAPTION&&n!==zt.COL&&n!==zt.COLGROUP||n!==zt.HTML&&n!==zt.TD&&n!==zt.TH&&n!==zt.TR)&&ps(e,t);},[Nt.EOF_TOKEN]:_s},[mn]:{[Nt.CHARACTER_TOKEN]:ls,[Nt.NULL_CHARACTER_TOKEN]:ls,[Nt.WHITESPACE_CHARACTER_TOKEN]:ls,[Nt.COMMENT_TOKEN]:Kn,[Nt.DOCTYPE_TOKEN]:Gn,[Nt.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===zt.TH||n===zt.TD?(e.openElements.clearBackToTableRowContext(),e._insertElement(t,qt.HTML),e.insertionMode=pn,e.activeFormattingElements.insertMarker()):n===zt.CAPTION||n===zt.COL||n===zt.COLGROUP||n===zt.TBODY||n===zt.TFOOT||n===zt.THEAD||n===zt.TR?e.openElements.hasInTableScope(zt.TR)&&(e.openElements.clearBackToTableRowContext(),e.openElements.pop(),e.insertionMode=ln,e._processToken(t)):ms(e,t);},[Nt.END_TAG_TOKEN]:function(e,t){const n=t.tagName;n===zt.TR?e.openElements.hasInTableScope(zt.TR)&&(e.openElements.clearBackToTableRowContext(),e.openElements.pop(),e.insertionMode=ln):n===zt.TABLE?e.openElements.hasInTableScope(zt.TR)&&(e.openElements.clearBackToTableRowContext(),e.openElements.pop(),e.insertionMode=ln,e._processToken(t)):n===zt.TBODY||n===zt.TFOOT||n===zt.THEAD?(e.openElements.hasInTableScope(n)||e.openElements.hasInTableScope(zt.TR))&&(e.openElements.clearBackToTableRowContext(),e.openElements.pop(),e.insertionMode=ln,e._processToken(t)):(n!==zt.BODY&&n!==zt.CAPTION&&n!==zt.COL&&n!==zt.COLGROUP||n!==zt.HTML&&n!==zt.TD&&n!==zt.TH)&&ps(e,t);},[Nt.EOF_TOKEN]:_s},[pn]:{[Nt.CHARACTER_TOKEN]:qn,[Nt.NULL_CHARACTER_TOKEN]:Gn,[Nt.WHITESPACE_CHARACTER_TOKEN]:zn,[Nt.COMMENT_TOKEN]:Kn,[Nt.DOCTYPE_TOKEN]:Gn,[Nt.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===zt.CAPTION||n===zt.COL||n===zt.COLGROUP||n===zt.TBODY||n===zt.TD||n===zt.TFOOT||n===zt.TH||n===zt.THEAD||n===zt.TR?(e.openElements.hasInTableScope(zt.TD)||e.openElements.hasInTableScope(zt.TH))&&(e._closeTableCell(),e._processToken(t)):as(e,t);},[Nt.END_TAG_TOKEN]:function(e,t){const n=t.tagName;n===zt.TD||n===zt.TH?e.openElements.hasInTableScope(n)&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilTagNamePopped(n),e.activeFormattingElements.clearToLastMarker(),e.insertionMode=mn):n===zt.TABLE||n===zt.TBODY||n===zt.TFOOT||n===zt.THEAD||n===zt.TR?e.openElements.hasInTableScope(n)&&(e._closeTableCell(),e._processToken(t)):n!==zt.BODY&&n!==zt.CAPTION&&n!==zt.COL&&n!==zt.COLGROUP&&n!==zt.HTML&&cs(e,t);},[Nt.EOF_TOKEN]:_s},[An]:{[Nt.CHARACTER_TOKEN]:xn,[Nt.NULL_CHARACTER_TOKEN]:Gn,[Nt.WHITESPACE_CHARACTER_TOKEN]:xn,[Nt.COMMENT_TOKEN]:Kn,[Nt.DOCTYPE_TOKEN]:Gn,[Nt.START_TAG_TOKEN]:ds,[Nt.END_TAG_TOKEN]:Cs,[Nt.EOF_TOKEN]:_s},[un]:{[Nt.CHARACTER_TOKEN]:xn,[Nt.NULL_CHARACTER_TOKEN]:Gn,[Nt.WHITESPACE_CHARACTER_TOKEN]:xn,[Nt.COMMENT_TOKEN]:Kn,[Nt.DOCTYPE_TOKEN]:Gn,[Nt.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===zt.CAPTION||n===zt.TABLE||n===zt.TBODY||n===zt.TFOOT||n===zt.THEAD||n===zt.TR||n===zt.TD||n===zt.TH?(e.openElements.popUntilTagNamePopped(zt.SELECT),e._resetInsertionMode(),e._processToken(t)):ds(e,t);},[Nt.END_TAG_TOKEN]:function(e,t){const n=t.tagName;n===zt.CAPTION||n===zt.TABLE||n===zt.TBODY||n===zt.TFOOT||n===zt.THEAD||n===zt.TR||n===zt.TD||n===zt.TH?e.openElements.hasInTableScope(n)&&(e.openElements.popUntilTagNamePopped(zt.SELECT),e._resetInsertionMode(),e._processToken(t)):Cs(e,t);},[Nt.EOF_TOKEN]:_s},[Nn]:{[Nt.CHARACTER_TOKEN]:qn,[Nt.NULL_CHARACTER_TOKEN]:Gn,[Nt.WHITESPACE_CHARACTER_TOKEN]:zn,[Nt.COMMENT_TOKEN]:Kn,[Nt.DOCTYPE_TOKEN]:Gn,[Nt.START_TAG_TOKEN]:function(e,t){const n=t.tagName;if(n===zt.BASE||n===zt.BASEFONT||n===zt.BGSOUND||n===zt.LINK||n===zt.META||n===zt.NOFRAMES||n===zt.SCRIPT||n===zt.STYLE||n===zt.TEMPLATE||n===zt.TITLE)Qn(e,t);else {const s=In[n]||an;e._popTmplInsertionMode(),e._pushTmplInsertionMode(s),e.insertionMode=s,e._processToken(t);}},[Nt.END_TAG_TOKEN]:function(e,t){t.tagName===zt.TEMPLATE&&Xn(e,t);},[Nt.EOF_TOKEN]:Os},[dn]:{[Nt.CHARACTER_TOKEN]:fs,[Nt.NULL_CHARACTER_TOKEN]:fs,[Nt.WHITESPACE_CHARACTER_TOKEN]:zn,[Nt.COMMENT_TOKEN]:function(e,t){e._appendCommentNode(t,e.openElements.items[0]);},[Nt.DOCTYPE_TOKEN]:Gn,[Nt.START_TAG_TOKEN]:function(e,t){t.tagName===zt.HTML?as(e,t):fs(e,t);},[Nt.END_TAG_TOKEN]:function(e,t){t.tagName===zt.HTML?e.fragmentContext||(e.insertionMode=fn):fs(e,t);},[Nt.EOF_TOKEN]:yn},[Cn]:{[Nt.CHARACTER_TOKEN]:Gn,[Nt.NULL_CHARACTER_TOKEN]:Gn,[Nt.WHITESPACE_CHARACTER_TOKEN]:xn,[Nt.COMMENT_TOKEN]:Kn,[Nt.DOCTYPE_TOKEN]:Gn,[Nt.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===zt.HTML?as(e,t):n===zt.FRAMESET?e._insertElement(t,qt.HTML):n===zt.FRAME?(e._appendElement(t,qt.HTML),t.ackSelfClosing=!0):n===zt.NOFRAMES&&Qn(e,t);},[Nt.END_TAG_TOKEN]:function(e,t){t.tagName!==zt.FRAMESET||e.openElements.isRootHtmlElementCurrent()||(e.openElements.pop(),e.fragmentContext||e.openElements.currentTagName===zt.FRAMESET||(e.insertionMode=On));},[Nt.EOF_TOKEN]:yn},[On]:{[Nt.CHARACTER_TOKEN]:Gn,[Nt.NULL_CHARACTER_TOKEN]:Gn,[Nt.WHITESPACE_CHARACTER_TOKEN]:xn,[Nt.COMMENT_TOKEN]:Kn,[Nt.DOCTYPE_TOKEN]:Gn,[Nt.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===zt.HTML?as(e,t):n===zt.NOFRAMES&&Qn(e,t);},[Nt.END_TAG_TOKEN]:function(e,t){t.tagName===zt.HTML&&(e.insertionMode=Sn);},[Nt.EOF_TOKEN]:yn},[fn]:{[Nt.CHARACTER_TOKEN]:Ss,[Nt.NULL_CHARACTER_TOKEN]:Ss,[Nt.WHITESPACE_CHARACTER_TOKEN]:zn,[Nt.COMMENT_TOKEN]:bn,[Nt.DOCTYPE_TOKEN]:Gn,[Nt.START_TAG_TOKEN]:function(e,t){t.tagName===zt.HTML?as(e,t):Ss(e,t);},[Nt.END_TAG_TOKEN]:Ss,[Nt.EOF_TOKEN]:yn},[Sn]:{[Nt.CHARACTER_TOKEN]:Gn,[Nt.NULL_CHARACTER_TOKEN]:Gn,[Nt.WHITESPACE_CHARACTER_TOKEN]:zn,[Nt.COMMENT_TOKEN]:bn,[Nt.DOCTYPE_TOKEN]:Gn,[Nt.START_TAG_TOKEN]:function(e,t){const n=t.tagName;n===zt.HTML?as(e,t):n===zt.NOFRAMES&&Qn(e,t);},[Nt.END_TAG_TOKEN]:Gn,[Nt.EOF_TOKEN]:yn}};var kn=class{constructor(e){this.options=function(e,t){return [e,t=t||Object.create(null)].reduce(((e,t)=>(Object.keys(t).forEach((n=>{e[n]=t[n];})),e)),Object.create(null))}(Zt,e),this.treeAdapter=this.options.treeAdapter,this.pendingScript=null,this.options.sourceCodeLocationInfo&&gt.install(this,Ut),this.options.onParseError&&gt.install(this,bt,{onParseError:this.options.onParseError});}parse(e){const t=this.treeAdapter.createDocument();return this._bootstrap(t,null),this.tokenizer.write(e,!0),this._runParsingLoop(null),t}parseFragment(e,t){t||(t=this.treeAdapter.createElement(zt.TEMPLATE,qt.HTML,[]));const n=this.treeAdapter.createElement("documentmock",qt.HTML,[]);this._bootstrap(n,t),this.treeAdapter.getTagName(t)===zt.TEMPLATE&&this._pushTmplInsertionMode(Nn),this._initTokenizerForFragmentParsing(),this._insertFakeRootElement(),this._resetInsertionMode(),this._findFormInFragmentContext(),this.tokenizer.write(e,!0),this._runParsingLoop(null);const s=this.treeAdapter.getFirstChild(n),r=this.treeAdapter.createDocumentFragment();return this._adoptNodes(s,r),r}_bootstrap(e,t){this.tokenizer=new Nt(this.options),this.stopped=!1,this.insertionMode=en,this.originalInsertionMode="",this.document=e,this.fragmentContext=t,this.headElement=null,this.formElement=null,this.openElements=new class{constructor(e,t){this.stackTop=-1,this.items=[],this.current=e,this.currentTagName=null,this.currentTmplContent=null,this.tmplCount=0,this.treeAdapter=t;}_indexOf(e){let t=-1;for(let n=this.stackTop;n>=0;n--)if(this.items[n]===e){t=n;break}return t}_isInTemplate(){return this.currentTagName===Ot.TEMPLATE&&this.treeAdapter.getNamespaceURI(this.current)===ft.HTML}_updateCurrentElement(){this.current=this.items[this.stackTop],this.currentTagName=this.current&&this.treeAdapter.getTagName(this.current),this.currentTmplContent=this._isInTemplate()?this.treeAdapter.getTemplateContent(this.current):null;}push(e){this.items[++this.stackTop]=e,this._updateCurrentElement(),this._isInTemplate()&&this.tmplCount++;}pop(){this.stackTop--,this.tmplCount>0&&this._isInTemplate()&&this.tmplCount--,this._updateCurrentElement();}replace(e,t){const n=this._indexOf(e);this.items[n]=t,n===this.stackTop&&this._updateCurrentElement();}insertAfter(e,t){const n=this._indexOf(e)+1;this.items.splice(n,0,t),n===++this.stackTop&&this._updateCurrentElement();}popUntilTagNamePopped(e){for(;this.stackTop>-1;){const t=this.currentTagName,n=this.treeAdapter.getNamespaceURI(this.current);if(this.pop(),t===e&&n===ft.HTML)break}}popUntilElementPopped(e){for(;this.stackTop>-1;){const t=this.current;if(this.pop(),t===e)break}}popUntilNumberedHeaderPopped(){for(;this.stackTop>-1;){const e=this.currentTagName,t=this.treeAdapter.getNamespaceURI(this.current);if(this.pop(),e===Ot.H1||e===Ot.H2||e===Ot.H3||e===Ot.H4||e===Ot.H5||e===Ot.H6&&t===ft.HTML)break}}popUntilTableCellPopped(){for(;this.stackTop>-1;){const e=this.currentTagName,t=this.treeAdapter.getNamespaceURI(this.current);if(this.pop(),e===Ot.TD||e===Ot.TH&&t===ft.HTML)break}}popAllUpToHtmlElement(){this.stackTop=0,this._updateCurrentElement();}clearBackToTableContext(){for(;this.currentTagName!==Ot.TABLE&&this.currentTagName!==Ot.TEMPLATE&&this.currentTagName!==Ot.HTML||this.treeAdapter.getNamespaceURI(this.current)!==ft.HTML;)this.pop();}clearBackToTableBodyContext(){for(;this.currentTagName!==Ot.TBODY&&this.currentTagName!==Ot.TFOOT&&this.currentTagName!==Ot.THEAD&&this.currentTagName!==Ot.TEMPLATE&&this.currentTagName!==Ot.HTML||this.treeAdapter.getNamespaceURI(this.current)!==ft.HTML;)this.pop();}clearBackToTableRowContext(){for(;this.currentTagName!==Ot.TR&&this.currentTagName!==Ot.TEMPLATE&&this.currentTagName!==Ot.HTML||this.treeAdapter.getNamespaceURI(this.current)!==ft.HTML;)this.pop();}remove(e){for(let t=this.stackTop;t>=0;t--)if(this.items[t]===e){this.items.splice(t,1),this.stackTop--,this._updateCurrentElement();break}}tryPeekProperlyNestedBodyElement(){const e=this.items[1];return e&&this.treeAdapter.getTagName(e)===Ot.BODY?e:null}contains(e){return this._indexOf(e)>-1}getCommonAncestor(e){let t=this._indexOf(e);return --t>=0?this.items[t]:null}isRootHtmlElementCurrent(){return 0===this.stackTop&&this.currentTagName===Ot.HTML}hasInScope(e){for(let t=this.stackTop;t>=0;t--){const n=this.treeAdapter.getTagName(this.items[t]),s=this.treeAdapter.getNamespaceURI(this.items[t]);if(n===e&&s===ft.HTML)return !0;if(It(n,s))return !1}return !0}hasNumberedHeaderInScope(){for(let e=this.stackTop;e>=0;e--){const t=this.treeAdapter.getTagName(this.items[e]),n=this.treeAdapter.getNamespaceURI(this.items[e]);if((t===Ot.H1||t===Ot.H2||t===Ot.H3||t===Ot.H4||t===Ot.H5||t===Ot.H6)&&n===ft.HTML)return !0;if(It(t,n))return !1}return !0}hasInListItemScope(e){for(let t=this.stackTop;t>=0;t--){const n=this.treeAdapter.getTagName(this.items[t]),s=this.treeAdapter.getNamespaceURI(this.items[t]);if(n===e&&s===ft.HTML)return !0;if((n===Ot.UL||n===Ot.OL)&&s===ft.HTML||It(n,s))return !1}return !0}hasInButtonScope(e){for(let t=this.stackTop;t>=0;t--){const n=this.treeAdapter.getTagName(this.items[t]),s=this.treeAdapter.getNamespaceURI(this.items[t]);if(n===e&&s===ft.HTML)return !0;if(n===Ot.BUTTON&&s===ft.HTML||It(n,s))return !1}return !0}hasInTableScope(e){for(let t=this.stackTop;t>=0;t--){const n=this.treeAdapter.getTagName(this.items[t]);if(this.treeAdapter.getNamespaceURI(this.items[t])===ft.HTML){if(n===e)return !0;if(n===Ot.TABLE||n===Ot.TEMPLATE||n===Ot.HTML)return !1}}return !0}hasTableBodyContextInTableScope(){for(let e=this.stackTop;e>=0;e--){const t=this.treeAdapter.getTagName(this.items[e]);if(this.treeAdapter.getNamespaceURI(this.items[e])===ft.HTML){if(t===Ot.TBODY||t===Ot.THEAD||t===Ot.TFOOT)return !0;if(t===Ot.TABLE||t===Ot.HTML)return !1}}return !0}hasInSelectScope(e){for(let t=this.stackTop;t>=0;t--){const n=this.treeAdapter.getTagName(this.items[t]);if(this.treeAdapter.getNamespaceURI(this.items[t])===ft.HTML){if(n===e)return !0;if(n!==Ot.OPTION&&n!==Ot.OPTGROUP)return !1}}return !0}generateImpliedEndTags(){for(;St(this.currentTagName);)this.pop();}generateImpliedEndTagsThoroughly(){for(;Rt(this.currentTagName);)this.pop();}generateImpliedEndTagsWithExclusion(e){for(;St(this.currentTagName)&&this.currentTagName!==e;)this.pop();}}(this.document,this.treeAdapter),this.activeFormattingElements=new kt(this.treeAdapter),this.tmplInsertionModeStack=[],this.tmplInsertionModeStackTop=-1,this.currentTmplInsertionMode=null,this.pendingCharacterTokens=[],this.hasNonWhitespacePendingCharacterToken=!1,this.framesetOk=!0,this.skipNextNewLine=!1,this.fosterParentingEnabled=!1;}_err(){}_runParsingLoop(e){for(;!this.stopped;){this._setupTokenizerCDATAMode();const t=this.tokenizer.getNextToken();if(t.type===Nt.HIBERNATION_TOKEN)break;if(this.skipNextNewLine&&(this.skipNextNewLine=!1,t.type===Nt.WHITESPACE_CHARACTER_TOKEN&&"\n"===t.chars[0])){if(1===t.chars.length)continue;t.chars=t.chars.substr(1);}if(this._processInputToken(t),e&&this.pendingScript)break}}runParsingLoopForCurrentChunk(e,t){if(this._runParsingLoop(t),t&&this.pendingScript){const e=this.pendingScript;return this.pendingScript=null,void t(e)}e&&e();}_setupTokenizerCDATAMode(){const e=this._getAdjustedCurrentElement();this.tokenizer.allowCDATA=e&&e!==this.document&&this.treeAdapter.getNamespaceURI(e)!==qt.HTML&&!this._isIntegrationPoint(e);}_switchToTextParsing(e,t){this._insertElement(e,qt.HTML),this.tokenizer.state=t,this.originalInsertionMode=this.insertionMode,this.insertionMode=Tn;}switchToPlaintextParsing(){this.insertionMode=Tn,this.originalInsertionMode=an,this.tokenizer.state=Nt.MODE.PLAINTEXT;}_getAdjustedCurrentElement(){return 0===this.openElements.stackTop&&this.fragmentContext?this.fragmentContext:this.openElements.current}_findFormInFragmentContext(){let e=this.fragmentContext;do{if(this.treeAdapter.getTagName(e)===zt.FORM){this.formElement=e;break}e=this.treeAdapter.getParentNode(e);}while(e)}_initTokenizerForFragmentParsing(){if(this.treeAdapter.getNamespaceURI(this.fragmentContext)===qt.HTML){const e=this.treeAdapter.getTagName(this.fragmentContext);e===zt.TITLE||e===zt.TEXTAREA?this.tokenizer.state=Nt.MODE.RCDATA:e===zt.STYLE||e===zt.XMP||e===zt.IFRAME||e===zt.NOEMBED||e===zt.NOFRAMES||e===zt.NOSCRIPT?this.tokenizer.state=Nt.MODE.RAWTEXT:e===zt.SCRIPT?this.tokenizer.state=Nt.MODE.SCRIPT_DATA:e===zt.PLAINTEXT&&(this.tokenizer.state=Nt.MODE.PLAINTEXT);}}_setDocumentType(e){const t=e.name||"",n=e.publicId||"",s=e.systemId||"";this.treeAdapter.setDocumentType(this.document,t,n,s);}_attachElementToTree(e){if(this._shouldFosterParentOnInsertion())this._fosterParentElement(e);else {const t=this.openElements.currentTmplContent||this.openElements.current;this.treeAdapter.appendChild(t,e);}}_appendElement(e,t){const n=this.treeAdapter.createElement(e.tagName,t,e.attrs);this._attachElementToTree(n);}_insertElement(e,t){const n=this.treeAdapter.createElement(e.tagName,t,e.attrs);this._attachElementToTree(n),this.openElements.push(n);}_insertFakeElement(e){const t=this.treeAdapter.createElement(e,qt.HTML,[]);this._attachElementToTree(t),this.openElements.push(t);}_insertTemplate(e){const t=this.treeAdapter.createElement(e.tagName,qt.HTML,e.attrs),n=this.treeAdapter.createDocumentFragment();this.treeAdapter.setTemplateContent(t,n),this._attachElementToTree(t),this.openElements.push(t);}_insertFakeRootElement(){const e=this.treeAdapter.createElement(zt.HTML,qt.HTML,[]);this.treeAdapter.appendChild(this.openElements.current,e),this.openElements.push(e);}_appendCommentNode(e,t){const n=this.treeAdapter.createCommentNode(e.data);this.treeAdapter.appendChild(t,n);}_insertCharacters(e){if(this._shouldFosterParentOnInsertion())this._fosterParentText(e.chars);else {const t=this.openElements.currentTmplContent||this.openElements.current;this.treeAdapter.insertText(t,e.chars);}}_adoptNodes(e,t){for(let n=this.treeAdapter.getFirstChild(e);n;n=this.treeAdapter.getFirstChild(e))this.treeAdapter.detachNode(n),this.treeAdapter.appendChild(t,n);}_shouldProcessTokenInForeignContent(e){const t=this._getAdjustedCurrentElement();if(!t||t===this.document)return !1;const n=this.treeAdapter.getNamespaceURI(t);if(n===qt.HTML)return !1;if(this.treeAdapter.getTagName(t)===zt.ANNOTATION_XML&&n===qt.MATHML&&e.type===Nt.START_TAG_TOKEN&&e.tagName===zt.SVG)return !1;const s=e.type===Nt.CHARACTER_TOKEN||e.type===Nt.NULL_CHARACTER_TOKEN||e.type===Nt.WHITESPACE_CHARACTER_TOKEN;return !((e.type===Nt.START_TAG_TOKEN&&e.tagName!==zt.MGLYPH&&e.tagName!==zt.MALIGNMARK||s)&&this._isIntegrationPoint(t,qt.MATHML)||(e.type===Nt.START_TAG_TOKEN||s)&&this._isIntegrationPoint(t,qt.HTML)||e.type===Nt.EOF_TOKEN)}_processToken(e){Ln[this.insertionMode][e.type](this,e);}_processTokenInBodyMode(e){Ln.IN_BODY_MODE[e.type](this,e);}_processTokenInForeignContent(e){e.type===Nt.CHARACTER_TOKEN?function(e,t){e._insertCharacters(t),e.framesetOk=!1;}(this,e):e.type===Nt.NULL_CHARACTER_TOKEN?function(e,t){t.chars=n,e._insertCharacters(t);}(this,e):e.type===Nt.WHITESPACE_CHARACTER_TOKEN?xn(this,e):e.type===Nt.COMMENT_TOKEN?Kn(this,e):e.type===Nt.START_TAG_TOKEN?function(e,t){if(jt.causesExit(t)&&!e.fragmentContext){for(;e.treeAdapter.getNamespaceURI(e.openElements.current)!==qt.HTML&&!e._isIntegrationPoint(e.openElements.current);)e.openElements.pop();e._processToken(t);}else {const n=e._getAdjustedCurrentElement(),s=e.treeAdapter.getNamespaceURI(n);s===qt.MATHML?jt.adjustTokenMathMLAttrs(t):s===qt.SVG&&(jt.adjustTokenSVGTagName(t),jt.adjustTokenSVGAttrs(t)),jt.adjustTokenXMLAttrs(t),t.selfClosing?e._appendElement(t,s):e._insertElement(t,s),t.ackSelfClosing=!0;}}(this,e):e.type===Nt.END_TAG_TOKEN&&function(e,t){for(let n=e.openElements.stackTop;n>0;n--){const s=e.openElements.items[n];if(e.treeAdapter.getNamespaceURI(s)===qt.HTML){e._processToken(t);break}if(e.treeAdapter.getTagName(s).toLowerCase()===t.tagName){e.openElements.popUntilElementPopped(s);break}}}(this,e);}_processInputToken(e){this._shouldProcessTokenInForeignContent(e)?this._processTokenInForeignContent(e):this._processToken(e),e.type===Nt.START_TAG_TOKEN&&e.selfClosing&&!e.ackSelfClosing&&this._err("non-void-html-element-start-tag-with-trailing-solidus");}_isIntegrationPoint(e,t){const n=this.treeAdapter.getTagName(e),s=this.treeAdapter.getNamespaceURI(e),r=this.treeAdapter.getAttrList(e);return jt.isIntegrationPoint(n,s,r,t)}_reconstructActiveFormattingElements(){const e=this.activeFormattingElements.length;if(e){let t=e,n=null;do{if(t--,n=this.activeFormattingElements.entries[t],n.type===kt.MARKER_ENTRY||this.openElements.contains(n.element)){t++;break}}while(t>0);for(let s=t;s<e;s++)n=this.activeFormattingElements.entries[s],this._insertElement(n.token,this.treeAdapter.getNamespaceURI(n.element)),n.element=this.openElements.current;}}_closeTableCell(){this.openElements.generateImpliedEndTags(),this.openElements.popUntilTableCellPopped(),this.activeFormattingElements.clearToLastMarker(),this.insertionMode=mn;}_closePElement(){this.openElements.generateImpliedEndTagsWithExclusion(zt.P),this.openElements.popUntilTagNamePopped(zt.P);}_resetInsertionMode(){for(let e=this.openElements.stackTop,t=!1;e>=0;e--){let n=this.openElements.items[e];0===e&&(t=!0,this.fragmentContext&&(n=this.fragmentContext));const s=this.treeAdapter.getTagName(n),r=Rn[s];if(r){this.insertionMode=r;break}if(!(t||s!==zt.TD&&s!==zt.TH)){this.insertionMode=pn;break}if(!t&&s===zt.HEAD){this.insertionMode=sn;break}if(s===zt.SELECT){this._resetInsertionModeForSelect(e);break}if(s===zt.TEMPLATE){this.insertionMode=this.currentTmplInsertionMode;break}if(s===zt.HTML){this.insertionMode=this.headElement?on:nn;break}if(t){this.insertionMode=an;break}}}_resetInsertionModeForSelect(e){if(e>0)for(let t=e-1;t>0;t--){const e=this.openElements.items[t],n=this.treeAdapter.getTagName(e);if(n===zt.TEMPLATE)break;if(n===zt.TABLE)return void(this.insertionMode=un)}this.insertionMode=An;}_pushTmplInsertionMode(e){this.tmplInsertionModeStack.push(e),this.tmplInsertionModeStackTop++,this.currentTmplInsertionMode=e;}_popTmplInsertionMode(){this.tmplInsertionModeStack.pop(),this.tmplInsertionModeStackTop--,this.currentTmplInsertionMode=this.tmplInsertionModeStack[this.tmplInsertionModeStackTop];}_isElementCausesFosterParenting(e){const t=this.treeAdapter.getTagName(e);return t===zt.TABLE||t===zt.TBODY||t===zt.TFOOT||t===zt.THEAD||t===zt.TR}_shouldFosterParentOnInsertion(){return this.fosterParentingEnabled&&this._isElementCausesFosterParenting(this.openElements.current)}_findFosterParentingLocation(){const e={parent:null,beforeElement:null};for(let t=this.openElements.stackTop;t>=0;t--){const n=this.openElements.items[t],s=this.treeAdapter.getTagName(n),r=this.treeAdapter.getNamespaceURI(n);if(s===zt.TEMPLATE&&r===qt.HTML){e.parent=this.treeAdapter.getTemplateContent(n);break}if(s===zt.TABLE){e.parent=this.treeAdapter.getParentNode(n),e.parent?e.beforeElement=n:e.parent=this.openElements.items[t-1];break}}return e.parent||(e.parent=this.openElements.items[0]),e}_fosterParentElement(e){const t=this._findFosterParentingLocation();t.beforeElement?this.treeAdapter.insertBefore(t.parent,e,t.beforeElement):this.treeAdapter.appendChild(t.parent,e);}_fosterParentText(e){const t=this._findFosterParentingLocation();t.beforeElement?this.treeAdapter.insertTextBefore(t.parent,e,t.beforeElement):this.treeAdapter.insertText(t.parent,e);}_isSpecialElement(e){const t=this.treeAdapter.getTagName(e),n=this.treeAdapter.getNamespaceURI(e);return Ct.SPECIAL_ELEMENTS[n][t]}};function Mn(e,t){let n=e.activeFormattingElements.getElementEntryInScopeWithTagName(t.tagName);return n?e.openElements.contains(n.element)?e.openElements.hasInScope(t.tagName)||(n=null):(e.activeFormattingElements.removeEntry(n),n=null):hs(e,t),n}function gn(e,t){let n=null;for(let s=e.openElements.stackTop;s>=0;s--){const r=e.openElements.items[s];if(r===t.element)break;e._isSpecialElement(r)&&(n=r);}return n||(e.openElements.popUntilElementPopped(t.element),e.activeFormattingElements.removeEntry(t)),n}function Pn(e,t,n){let s=t,r=e.openElements.getCommonAncestor(t);for(let i=0,o=r;o!==n;i++,o=r){r=e.openElements.getCommonAncestor(o);const n=e.activeFormattingElements.getElementEntry(o),a=n&&i>=3;!n||a?(a&&e.activeFormattingElements.removeEntry(n),e.openElements.remove(o)):(o=Hn(e,n),s===t&&(e.activeFormattingElements.bookmark=n),e.treeAdapter.detachNode(s),e.treeAdapter.appendChild(o,s),s=o);}return s}function Hn(e,t){const n=e.treeAdapter.getNamespaceURI(t.element),s=e.treeAdapter.createElement(t.token.tagName,n,t.token.attrs);return e.openElements.replace(t.element,s),t.element=s,s}function Dn(e,t,n){if(e._isElementCausesFosterParenting(t))e._fosterParentElement(n);else {const s=e.treeAdapter.getTagName(t),r=e.treeAdapter.getNamespaceURI(t);s===zt.TEMPLATE&&r===qt.HTML&&(t=e.treeAdapter.getTemplateContent(t)),e.treeAdapter.appendChild(t,n);}}function Fn(e,t,n){const s=e.treeAdapter.getNamespaceURI(n.element),r=n.token,i=e.treeAdapter.createElement(r.tagName,s,r.attrs);e._adoptNodes(t,i),e.treeAdapter.appendChild(t,i),e.activeFormattingElements.insertElementAfterBookmark(i,n.token),e.activeFormattingElements.removeEntry(n),e.openElements.remove(n.element),e.openElements.insertAfter(t,i);}function Un(e,t){let n;for(let s=0;s<8&&(n=Mn(e,t),n);s++){const t=gn(e,n);if(!t)break;e.activeFormattingElements.bookmark=n;const s=Pn(e,t,n.element),r=e.openElements.getCommonAncestor(n.element);e.treeAdapter.detachNode(s),Dn(e,r,s),Fn(e,t,n);}}function Gn(){}function Bn(e){e._err("misplaced-doctype");}function Kn(e,t){e._appendCommentNode(t,e.openElements.currentTmplContent||e.openElements.current);}function bn(e,t){e._appendCommentNode(t,e.document);}function xn(e,t){e._insertCharacters(t);}function yn(e){e.stopped=!0;}function vn(e,t){e._err("missing-doctype",{beforeToken:!0}),e.treeAdapter.setDocumentMode(e.document,Ct.DOCUMENT_MODE.QUIRKS),e.insertionMode=tn,e._processToken(t);}function Yn(e,t){e._insertFakeRootElement(),e.insertionMode=nn,e._processToken(t);}function wn(e,t){e._insertFakeElement(zt.HEAD),e.headElement=e.openElements.current,e.insertionMode=sn,e._processToken(t);}function Qn(e,t){const n=t.tagName;n===zt.HTML?as(e,t):n===zt.BASE||n===zt.BASEFONT||n===zt.BGSOUND||n===zt.LINK||n===zt.META?(e._appendElement(t,qt.HTML),t.ackSelfClosing=!0):n===zt.TITLE?e._switchToTextParsing(t,Nt.MODE.RCDATA):n===zt.NOSCRIPT?e.options.scriptingEnabled?e._switchToTextParsing(t,Nt.MODE.RAWTEXT):(e._insertElement(t,qt.HTML),e.insertionMode=rn):n===zt.NOFRAMES||n===zt.STYLE?e._switchToTextParsing(t,Nt.MODE.RAWTEXT):n===zt.SCRIPT?e._switchToTextParsing(t,Nt.MODE.SCRIPT_DATA):n===zt.TEMPLATE?(e._insertTemplate(t,qt.HTML),e.activeFormattingElements.insertMarker(),e.framesetOk=!1,e.insertionMode=Nn,e._pushTmplInsertionMode(Nn)):n===zt.HEAD?e._err(k):Wn(e,t);}function Xn(e,t){const n=t.tagName;n===zt.HEAD?(e.openElements.pop(),e.insertionMode=on):n===zt.BODY||n===zt.BR||n===zt.HTML?Wn(e,t):n===zt.TEMPLATE&&e.openElements.tmplCount>0?(e.openElements.generateImpliedEndTagsThoroughly(),e.openElements.currentTagName!==zt.TEMPLATE&&e._err("closing-of-element-with-open-child-elements"),e.openElements.popUntilTagNamePopped(zt.TEMPLATE),e.activeFormattingElements.clearToLastMarker(),e._popTmplInsertionMode(),e._resetInsertionMode()):e._err(L);}function Wn(e,t){e.openElements.pop(),e.insertionMode=on,e._processToken(t);}function Vn(e,t){const n=t.type===Nt.EOF_TOKEN?"open-elements-left-after-eof":"disallowed-content-in-noscript-in-head";e._err(n),e.openElements.pop(),e.insertionMode=sn,e._processToken(t);}function jn(e,t){e._insertFakeElement(zt.BODY),e.insertionMode=an,e._processToken(t);}function zn(e,t){e._reconstructActiveFormattingElements(),e._insertCharacters(t);}function qn(e,t){e._reconstructActiveFormattingElements(),e._insertCharacters(t),e.framesetOk=!1;}function Jn(e,t){e.openElements.hasInButtonScope(zt.P)&&e._closePElement(),e._insertElement(t,qt.HTML);}function Zn(e,t){e.openElements.hasInButtonScope(zt.P)&&e._closePElement(),e._insertElement(t,qt.HTML),e.skipNextNewLine=!0,e.framesetOk=!1;}function $n(e,t){e._reconstructActiveFormattingElements(),e._insertElement(t,qt.HTML),e.activeFormattingElements.pushElement(e.openElements.current,t);}function es(e,t){e._reconstructActiveFormattingElements(),e._insertElement(t,qt.HTML),e.activeFormattingElements.insertMarker(),e.framesetOk=!1;}function ts(e,t){e._reconstructActiveFormattingElements(),e._appendElement(t,qt.HTML),e.framesetOk=!1,t.ackSelfClosing=!0;}function ns(e,t){e._appendElement(t,qt.HTML),t.ackSelfClosing=!0;}function ss(e,t){e._switchToTextParsing(t,Nt.MODE.RAWTEXT);}function rs(e,t){e.openElements.currentTagName===zt.OPTION&&e.openElements.pop(),e._reconstructActiveFormattingElements(),e._insertElement(t,qt.HTML);}function is(e,t){e.openElements.hasInScope(zt.RUBY)&&e.openElements.generateImpliedEndTags(),e._insertElement(t,qt.HTML);}function os(e,t){e._reconstructActiveFormattingElements(),e._insertElement(t,qt.HTML);}function as(e,t){const n=t.tagName;switch(n.length){case 1:n===zt.I||n===zt.S||n===zt.B||n===zt.U?$n(e,t):n===zt.P?Jn(e,t):n===zt.A?function(e,t){const n=e.activeFormattingElements.getElementEntryInScopeWithTagName(zt.A);n&&(Un(e,t),e.openElements.remove(n.element),e.activeFormattingElements.removeEntry(n)),e._reconstructActiveFormattingElements(),e._insertElement(t,qt.HTML),e.activeFormattingElements.pushElement(e.openElements.current,t);}(e,t):os(e,t);break;case 2:n===zt.DL||n===zt.OL||n===zt.UL?Jn(e,t):n===zt.H1||n===zt.H2||n===zt.H3||n===zt.H4||n===zt.H5||n===zt.H6?function(e,t){e.openElements.hasInButtonScope(zt.P)&&e._closePElement();const n=e.openElements.currentTagName;n!==zt.H1&&n!==zt.H2&&n!==zt.H3&&n!==zt.H4&&n!==zt.H5&&n!==zt.H6||e.openElements.pop(),e._insertElement(t,qt.HTML);}(e,t):n===zt.LI||n===zt.DD||n===zt.DT?function(e,t){e.framesetOk=!1;const n=t.tagName;for(let t=e.openElements.stackTop;t>=0;t--){const s=e.openElements.items[t],r=e.treeAdapter.getTagName(s);let i=null;if(n===zt.LI&&r===zt.LI?i=zt.LI:n!==zt.DD&&n!==zt.DT||r!==zt.DD&&r!==zt.DT||(i=r),i){e.openElements.generateImpliedEndTagsWithExclusion(i),e.openElements.popUntilTagNamePopped(i);break}if(r!==zt.ADDRESS&&r!==zt.DIV&&r!==zt.P&&e._isSpecialElement(s))break}e.openElements.hasInButtonScope(zt.P)&&e._closePElement(),e._insertElement(t,qt.HTML);}(e,t):n===zt.EM||n===zt.TT?$n(e,t):n===zt.BR?ts(e,t):n===zt.HR?function(e,t){e.openElements.hasInButtonScope(zt.P)&&e._closePElement(),e._appendElement(t,qt.HTML),e.framesetOk=!1,t.ackSelfClosing=!0;}(e,t):n===zt.RB?is(e,t):n===zt.RT||n===zt.RP?function(e,t){e.openElements.hasInScope(zt.RUBY)&&e.openElements.generateImpliedEndTagsWithExclusion(zt.RTC),e._insertElement(t,qt.HTML);}(e,t):n!==zt.TH&&n!==zt.TD&&n!==zt.TR&&os(e,t);break;case 3:n===zt.DIV||n===zt.DIR||n===zt.NAV?Jn(e,t):n===zt.PRE?Zn(e,t):n===zt.BIG?$n(e,t):n===zt.IMG||n===zt.WBR?ts(e,t):n===zt.XMP?function(e,t){e.openElements.hasInButtonScope(zt.P)&&e._closePElement(),e._reconstructActiveFormattingElements(),e.framesetOk=!1,e._switchToTextParsing(t,Nt.MODE.RAWTEXT);}(e,t):n===zt.SVG?function(e,t){e._reconstructActiveFormattingElements(),jt.adjustTokenSVGAttrs(t),jt.adjustTokenXMLAttrs(t),t.selfClosing?e._appendElement(t,qt.SVG):e._insertElement(t,qt.SVG),t.ackSelfClosing=!0;}(e,t):n===zt.RTC?is(e,t):n!==zt.COL&&os(e,t);break;case 4:n===zt.HTML?function(e,t){0===e.openElements.tmplCount&&e.treeAdapter.adoptAttributes(e.openElements.items[0],t.attrs);}(e,t):n===zt.BASE||n===zt.LINK||n===zt.META?Qn(e,t):n===zt.BODY?function(e,t){const n=e.openElements.tryPeekProperlyNestedBodyElement();n&&0===e.openElements.tmplCount&&(e.framesetOk=!1,e.treeAdapter.adoptAttributes(n,t.attrs));}(e,t):n===zt.MAIN||n===zt.MENU?Jn(e,t):n===zt.FORM?function(e,t){const n=e.openElements.tmplCount>0;e.formElement&&!n||(e.openElements.hasInButtonScope(zt.P)&&e._closePElement(),e._insertElement(t,qt.HTML),n||(e.formElement=e.openElements.current));}(e,t):n===zt.CODE||n===zt.FONT?$n(e,t):n===zt.NOBR?function(e,t){e._reconstructActiveFormattingElements(),e.openElements.hasInScope(zt.NOBR)&&(Un(e,t),e._reconstructActiveFormattingElements()),e._insertElement(t,qt.HTML),e.activeFormattingElements.pushElement(e.openElements.current,t);}(e,t):n===zt.AREA?ts(e,t):n===zt.MATH?function(e,t){e._reconstructActiveFormattingElements(),jt.adjustTokenMathMLAttrs(t),jt.adjustTokenXMLAttrs(t),t.selfClosing?e._appendElement(t,qt.MATHML):e._insertElement(t,qt.MATHML),t.ackSelfClosing=!0;}(e,t):n===zt.MENU?function(e,t){e.openElements.hasInButtonScope(zt.P)&&e._closePElement(),e._insertElement(t,qt.HTML);}(e,t):n!==zt.HEAD&&os(e,t);break;case 5:n===zt.STYLE||n===zt.TITLE?Qn(e,t):n===zt.ASIDE?Jn(e,t):n===zt.SMALL?$n(e,t):n===zt.TABLE?function(e,t){e.treeAdapter.getDocumentMode(e.document)!==Ct.DOCUMENT_MODE.QUIRKS&&e.openElements.hasInButtonScope(zt.P)&&e._closePElement(),e._insertElement(t,qt.HTML),e.framesetOk=!1,e.insertionMode=En;}(e,t):n===zt.EMBED?ts(e,t):n===zt.INPUT?function(e,t){e._reconstructActiveFormattingElements(),e._appendElement(t,qt.HTML);const n=Nt.getTokenAttr(t,Jt.TYPE);n&&n.toLowerCase()===$t||(e.framesetOk=!1),t.ackSelfClosing=!0;}(e,t):n===zt.PARAM||n===zt.TRACK?ns(e,t):n===zt.IMAGE?function(e,t){t.tagName=zt.IMG,ts(e,t);}(e,t):n!==zt.FRAME&&n!==zt.TBODY&&n!==zt.TFOOT&&n!==zt.THEAD&&os(e,t);break;case 6:n===zt.SCRIPT?Qn(e,t):n===zt.CENTER||n===zt.FIGURE||n===zt.FOOTER||n===zt.HEADER||n===zt.HGROUP||n===zt.DIALOG?Jn(e,t):n===zt.BUTTON?function(e,t){e.openElements.hasInScope(zt.BUTTON)&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilTagNamePopped(zt.BUTTON)),e._reconstructActiveFormattingElements(),e._insertElement(t,qt.HTML),e.framesetOk=!1;}(e,t):n===zt.STRIKE||n===zt.STRONG?$n(e,t):n===zt.APPLET||n===zt.OBJECT?es(e,t):n===zt.KEYGEN?ts(e,t):n===zt.SOURCE?ns(e,t):n===zt.IFRAME?function(e,t){e.framesetOk=!1,e._switchToTextParsing(t,Nt.MODE.RAWTEXT);}(e,t):n===zt.SELECT?function(e,t){e._reconstructActiveFormattingElements(),e._insertElement(t,qt.HTML),e.framesetOk=!1,e.insertionMode===En||e.insertionMode===cn||e.insertionMode===ln||e.insertionMode===mn||e.insertionMode===pn?e.insertionMode=un:e.insertionMode=An;}(e,t):n===zt.OPTION?rs(e,t):os(e,t);break;case 7:n===zt.BGSOUND?Qn(e,t):n===zt.DETAILS||n===zt.ADDRESS||n===zt.ARTICLE||n===zt.SECTION||n===zt.SUMMARY?Jn(e,t):n===zt.LISTING?Zn(e,t):n===zt.MARQUEE?es(e,t):n===zt.NOEMBED?ss(e,t):n!==zt.CAPTION&&os(e,t);break;case 8:n===zt.BASEFONT?Qn(e,t):n===zt.FRAMESET?function(e,t){const n=e.openElements.tryPeekProperlyNestedBodyElement();e.framesetOk&&n&&(e.treeAdapter.detachNode(n),e.openElements.popAllUpToHtmlElement(),e._insertElement(t,qt.HTML),e.insertionMode=Cn);}(e,t):n===zt.FIELDSET?Jn(e,t):n===zt.TEXTAREA?function(e,t){e._insertElement(t,qt.HTML),e.skipNextNewLine=!0,e.tokenizer.state=Nt.MODE.RCDATA,e.originalInsertionMode=e.insertionMode,e.framesetOk=!1,e.insertionMode=Tn;}(e,t):n===zt.TEMPLATE?Qn(e,t):n===zt.NOSCRIPT?e.options.scriptingEnabled?ss(e,t):os(e,t):n===zt.OPTGROUP?rs(e,t):n!==zt.COLGROUP&&os(e,t);break;case 9:n===zt.PLAINTEXT?function(e,t){e.openElements.hasInButtonScope(zt.P)&&e._closePElement(),e._insertElement(t,qt.HTML),e.tokenizer.state=Nt.MODE.PLAINTEXT;}(e,t):os(e,t);break;case 10:n===zt.BLOCKQUOTE||n===zt.FIGCAPTION?Jn(e,t):os(e,t);break;default:os(e,t);}}function Ts(e,t){const n=t.tagName;e.openElements.hasInScope(n)&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilTagNamePopped(n));}function Es(e,t){const n=t.tagName;e.openElements.hasInScope(n)&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilTagNamePopped(n),e.activeFormattingElements.clearToLastMarker());}function hs(e,t){const n=t.tagName;for(let t=e.openElements.stackTop;t>0;t--){const s=e.openElements.items[t];if(e.treeAdapter.getTagName(s)===n){e.openElements.generateImpliedEndTagsWithExclusion(n),e.openElements.popUntilElementPopped(s);break}if(e._isSpecialElement(s))break}}function cs(e,t){const n=t.tagName;switch(n.length){case 1:n===zt.A||n===zt.B||n===zt.I||n===zt.S||n===zt.U?Un(e,t):n===zt.P?function(e){e.openElements.hasInButtonScope(zt.P)||e._insertFakeElement(zt.P),e._closePElement();}(e):hs(e,t);break;case 2:n===zt.DL||n===zt.UL||n===zt.OL?Ts(e,t):n===zt.LI?function(e){e.openElements.hasInListItemScope(zt.LI)&&(e.openElements.generateImpliedEndTagsWithExclusion(zt.LI),e.openElements.popUntilTagNamePopped(zt.LI));}(e):n===zt.DD||n===zt.DT?function(e,t){const n=t.tagName;e.openElements.hasInScope(n)&&(e.openElements.generateImpliedEndTagsWithExclusion(n),e.openElements.popUntilTagNamePopped(n));}(e,t):n===zt.H1||n===zt.H2||n===zt.H3||n===zt.H4||n===zt.H5||n===zt.H6?function(e){e.openElements.hasNumberedHeaderInScope()&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilNumberedHeaderPopped());}(e):n===zt.BR?function(e){e._reconstructActiveFormattingElements(),e._insertFakeElement(zt.BR),e.openElements.pop(),e.framesetOk=!1;}(e):n===zt.EM||n===zt.TT?Un(e,t):hs(e,t);break;case 3:n===zt.BIG?Un(e,t):n===zt.DIR||n===zt.DIV||n===zt.NAV||n===zt.PRE?Ts(e,t):hs(e,t);break;case 4:n===zt.BODY?function(e){e.openElements.hasInScope(zt.BODY)&&(e.insertionMode=dn);}(e):n===zt.HTML?function(e,t){e.openElements.hasInScope(zt.BODY)&&(e.insertionMode=dn,e._processToken(t));}(e,t):n===zt.FORM?function(e){const t=e.openElements.tmplCount>0,n=e.formElement;t||(e.formElement=null),(n||t)&&e.openElements.hasInScope(zt.FORM)&&(e.openElements.generateImpliedEndTags(),t?e.openElements.popUntilTagNamePopped(zt.FORM):e.openElements.remove(n));}(e):n===zt.CODE||n===zt.FONT||n===zt.NOBR?Un(e,t):n===zt.MAIN||n===zt.MENU?Ts(e,t):hs(e,t);break;case 5:n===zt.ASIDE?Ts(e,t):n===zt.SMALL?Un(e,t):hs(e,t);break;case 6:n===zt.CENTER||n===zt.FIGURE||n===zt.FOOTER||n===zt.HEADER||n===zt.HGROUP||n===zt.DIALOG?Ts(e,t):n===zt.APPLET||n===zt.OBJECT?Es(e,t):n===zt.STRIKE||n===zt.STRONG?Un(e,t):hs(e,t);break;case 7:n===zt.ADDRESS||n===zt.ARTICLE||n===zt.DETAILS||n===zt.SECTION||n===zt.SUMMARY||n===zt.LISTING?Ts(e,t):n===zt.MARQUEE?Es(e,t):hs(e,t);break;case 8:n===zt.FIELDSET?Ts(e,t):n===zt.TEMPLATE?Xn(e,t):hs(e,t);break;case 10:n===zt.BLOCKQUOTE||n===zt.FIGCAPTION?Ts(e,t):hs(e,t);break;default:hs(e,t);}}function _s(e,t){e.tmplInsertionModeStackTop>-1?Os(e,t):e.stopped=!0;}function ls(e,t){const n=e.openElements.currentTagName;n===zt.TABLE||n===zt.TBODY||n===zt.TFOOT||n===zt.THEAD||n===zt.TR?(e.pendingCharacterTokens=[],e.hasNonWhitespacePendingCharacterToken=!1,e.originalInsertionMode=e.insertionMode,e.insertionMode=hn,e._processToken(t)):As(e,t);}function ms(e,t){const n=t.tagName;switch(n.length){case 2:n===zt.TD||n===zt.TH||n===zt.TR?function(e,t){e.openElements.clearBackToTableContext(),e._insertFakeElement(zt.TBODY),e.insertionMode=ln,e._processToken(t);}(e,t):As(e,t);break;case 3:n===zt.COL?function(e,t){e.openElements.clearBackToTableContext(),e._insertFakeElement(zt.COLGROUP),e.insertionMode=_n,e._processToken(t);}(e,t):As(e,t);break;case 4:n===zt.FORM?function(e,t){e.formElement||0!==e.openElements.tmplCount||(e._insertElement(t,qt.HTML),e.formElement=e.openElements.current,e.openElements.pop());}(e,t):As(e,t);break;case 5:n===zt.TABLE?function(e,t){e.openElements.hasInTableScope(zt.TABLE)&&(e.openElements.popUntilTagNamePopped(zt.TABLE),e._resetInsertionMode(),e._processToken(t));}(e,t):n===zt.STYLE?Qn(e,t):n===zt.TBODY||n===zt.TFOOT||n===zt.THEAD?function(e,t){e.openElements.clearBackToTableContext(),e._insertElement(t,qt.HTML),e.insertionMode=ln;}(e,t):n===zt.INPUT?function(e,t){const n=Nt.getTokenAttr(t,Jt.TYPE);n&&n.toLowerCase()===$t?e._appendElement(t,qt.HTML):As(e,t),t.ackSelfClosing=!0;}(e,t):As(e,t);break;case 6:n===zt.SCRIPT?Qn(e,t):As(e,t);break;case 7:n===zt.CAPTION?function(e,t){e.openElements.clearBackToTableContext(),e.activeFormattingElements.insertMarker(),e._insertElement(t,qt.HTML),e.insertionMode=cn;}(e,t):As(e,t);break;case 8:n===zt.COLGROUP?function(e,t){e.openElements.clearBackToTableContext(),e._insertElement(t,qt.HTML),e.insertionMode=_n;}(e,t):n===zt.TEMPLATE?Qn(e,t):As(e,t);break;default:As(e,t);}}function ps(e,t){const n=t.tagName;n===zt.TABLE?e.openElements.hasInTableScope(zt.TABLE)&&(e.openElements.popUntilTagNamePopped(zt.TABLE),e._resetInsertionMode()):n===zt.TEMPLATE?Xn(e,t):n!==zt.BODY&&n!==zt.CAPTION&&n!==zt.COL&&n!==zt.COLGROUP&&n!==zt.HTML&&n!==zt.TBODY&&n!==zt.TD&&n!==zt.TFOOT&&n!==zt.TH&&n!==zt.THEAD&&n!==zt.TR&&As(e,t);}function As(e,t){const n=e.fosterParentingEnabled;e.fosterParentingEnabled=!0,e._processTokenInBodyMode(t),e.fosterParentingEnabled=n;}function us(e,t){let n=0;if(e.hasNonWhitespacePendingCharacterToken)for(;n<e.pendingCharacterTokens.length;n++)As(e,e.pendingCharacterTokens[n]);else for(;n<e.pendingCharacterTokens.length;n++)e._insertCharacters(e.pendingCharacterTokens[n]);e.insertionMode=e.originalInsertionMode,e._processToken(t);}function Ns(e,t){e.openElements.currentTagName===zt.COLGROUP&&(e.openElements.pop(),e.insertionMode=En,e._processToken(t));}function ds(e,t){const n=t.tagName;n===zt.HTML?as(e,t):n===zt.OPTION?(e.openElements.currentTagName===zt.OPTION&&e.openElements.pop(),e._insertElement(t,qt.HTML)):n===zt.OPTGROUP?(e.openElements.currentTagName===zt.OPTION&&e.openElements.pop(),e.openElements.currentTagName===zt.OPTGROUP&&e.openElements.pop(),e._insertElement(t,qt.HTML)):n===zt.INPUT||n===zt.KEYGEN||n===zt.TEXTAREA||n===zt.SELECT?e.openElements.hasInSelectScope(zt.SELECT)&&(e.openElements.popUntilTagNamePopped(zt.SELECT),e._resetInsertionMode(),n!==zt.SELECT&&e._processToken(t)):n!==zt.SCRIPT&&n!==zt.TEMPLATE||Qn(e,t);}function Cs(e,t){const n=t.tagName;if(n===zt.OPTGROUP){const t=e.openElements.items[e.openElements.stackTop-1],n=t&&e.treeAdapter.getTagName(t);e.openElements.currentTagName===zt.OPTION&&n===zt.OPTGROUP&&e.openElements.pop(),e.openElements.currentTagName===zt.OPTGROUP&&e.openElements.pop();}else n===zt.OPTION?e.openElements.currentTagName===zt.OPTION&&e.openElements.pop():n===zt.SELECT&&e.openElements.hasInSelectScope(zt.SELECT)?(e.openElements.popUntilTagNamePopped(zt.SELECT),e._resetInsertionMode()):n===zt.TEMPLATE&&Xn(e,t);}function Os(e,t){e.openElements.tmplCount>0?(e.openElements.popUntilTagNamePopped(zt.TEMPLATE),e.activeFormattingElements.clearToLastMarker(),e._popTmplInsertionMode(),e._resetInsertionMode(),e._processToken(t)):e.stopped=!0;}function fs(e,t){e.insertionMode=an,e._processToken(t);}function Ss(e,t){e.insertionMode=an,e._processToken(t);}return Ct.TAG_NAMES,Ct.NAMESPACES,e.parse=function(e,t){return new kn(t).parse(e)},e.parseFragment=function(e,t,n){return "string"==typeof e&&(n=t,t=e,e=null),new kn(n).parseFragment(t,e)},Object.defineProperty(e,"__esModule",{value:!0}),e}({});const parse=e.parse;const parseFragment=e.parseFragment;

const docParser = new WeakMap();
function parseDocumentUtil(ownerDocument, html) {
  const doc = parse(html.trim(), getParser(ownerDocument));
  doc.documentElement = doc.firstElementChild;
  doc.head = doc.documentElement.firstElementChild;
  doc.body = doc.head.nextElementSibling;
  return doc;
}
function parseFragmentUtil(ownerDocument, html) {
  if (typeof html === 'string') {
    html = html.trim();
  }
  else {
    html = '';
  }
  const frag = parseFragment(html, getParser(ownerDocument));
  return frag;
}
function getParser(ownerDocument) {
  let parseOptions = docParser.get(ownerDocument);
  if (parseOptions != null) {
    return parseOptions;
  }
  const treeAdapter = {
    createDocument() {
      const doc = ownerDocument.createElement("#document" /* DOCUMENT_NODE */);
      doc['x-mode'] = 'no-quirks';
      return doc;
    },
    setNodeSourceCodeLocation(node, location) {
      node.sourceCodeLocation = location;
    },
    getNodeSourceCodeLocation(node) {
      return node.sourceCodeLocation;
    },
    createDocumentFragment() {
      return ownerDocument.createDocumentFragment();
    },
    createElement(tagName, namespaceURI, attrs) {
      const elm = ownerDocument.createElementNS(namespaceURI, tagName);
      for (let i = 0; i < attrs.length; i++) {
        const attr = attrs[i];
        if (attr.namespace == null || attr.namespace === 'http://www.w3.org/1999/xhtml') {
          elm.setAttribute(attr.name, attr.value);
        }
        else {
          elm.setAttributeNS(attr.namespace, attr.name, attr.value);
        }
      }
      return elm;
    },
    createCommentNode(data) {
      return ownerDocument.createComment(data);
    },
    appendChild(parentNode, newNode) {
      parentNode.appendChild(newNode);
    },
    insertBefore(parentNode, newNode, referenceNode) {
      parentNode.insertBefore(newNode, referenceNode);
    },
    setTemplateContent(templateElement, contentElement) {
      templateElement.content = contentElement;
    },
    getTemplateContent(templateElement) {
      return templateElement.content;
    },
    setDocumentType(doc, name, publicId, systemId) {
      let doctypeNode = doc.childNodes.find((n) => n.nodeType === 10 /* DOCUMENT_TYPE_NODE */);
      if (doctypeNode == null) {
        doctypeNode = ownerDocument.createDocumentTypeNode();
        doc.insertBefore(doctypeNode, doc.firstChild);
      }
      doctypeNode.nodeValue = '!DOCTYPE';
      doctypeNode['x-name'] = name;
      doctypeNode['x-publicId'] = publicId;
      doctypeNode['x-systemId'] = systemId;
    },
    setDocumentMode(doc, mode) {
      doc['x-mode'] = mode;
    },
    getDocumentMode(doc) {
      return doc['x-mode'];
    },
    detachNode(node) {
      node.remove();
    },
    insertText(parentNode, text) {
      const lastChild = parentNode.lastChild;
      if (lastChild != null && lastChild.nodeType === 3 /* TEXT_NODE */) {
        lastChild.nodeValue += text;
      }
      else {
        parentNode.appendChild(ownerDocument.createTextNode(text));
      }
    },
    insertTextBefore(parentNode, text, referenceNode) {
      const prevNode = parentNode.childNodes[parentNode.childNodes.indexOf(referenceNode) - 1];
      if (prevNode != null && prevNode.nodeType === 3 /* TEXT_NODE */) {
        prevNode.nodeValue += text;
      }
      else {
        parentNode.insertBefore(ownerDocument.createTextNode(text), referenceNode);
      }
    },
    adoptAttributes(recipient, attrs) {
      for (let i = 0; i < attrs.length; i++) {
        const attr = attrs[i];
        if (recipient.hasAttributeNS(attr.namespace, attr.name) === false) {
          recipient.setAttributeNS(attr.namespace, attr.name, attr.value);
        }
      }
    },
    getFirstChild(node) {
      return node.childNodes[0];
    },
    getChildNodes(node) {
      return node.childNodes;
    },
    getParentNode(node) {
      return node.parentNode;
    },
    getAttrList(element) {
      const attrs = element.attributes.__items.map((attr) => {
        return {
          name: attr.name,
          value: attr.value,
          namespace: attr.namespaceURI,
          prefix: null,
        };
      });
      return attrs;
    },
    getTagName(element) {
      if (element.namespaceURI === 'http://www.w3.org/1999/xhtml') {
        return element.nodeName.toLowerCase();
      }
      else {
        return element.nodeName;
      }
    },
    getNamespaceURI(element) {
      return element.namespaceURI;
    },
    getTextNodeContent(textNode) {
      return textNode.nodeValue;
    },
    getCommentNodeContent(commentNode) {
      return commentNode.nodeValue;
    },
    getDocumentTypeNodeName(doctypeNode) {
      return doctypeNode['x-name'];
    },
    getDocumentTypeNodePublicId(doctypeNode) {
      return doctypeNode['x-publicId'];
    },
    getDocumentTypeNodeSystemId(doctypeNode) {
      return doctypeNode['x-systemId'];
    },
    isTextNode(node) {
      return node.nodeType === 3 /* TEXT_NODE */;
    },
    isCommentNode(node) {
      return node.nodeType === 8 /* COMMENT_NODE */;
    },
    isDocumentTypeNode(node) {
      return node.nodeType === 10 /* DOCUMENT_TYPE_NODE */;
    },
    isElementNode(node) {
      return node.nodeType === 1 /* ELEMENT_NODE */;
    },
  };
  parseOptions = {
    treeAdapter: treeAdapter,
  };
  docParser.set(ownerDocument, parseOptions);
  return parseOptions;
}

class MockNode {
  constructor(ownerDocument, nodeType, nodeName, nodeValue) {
    this.ownerDocument = ownerDocument;
    this.nodeType = nodeType;
    this.nodeName = nodeName;
    this._nodeValue = nodeValue;
    this.parentNode = null;
    this.childNodes = [];
  }
  appendChild(newNode) {
    if (newNode.nodeType === 11 /* DOCUMENT_FRAGMENT_NODE */) {
      const nodes = newNode.childNodes.slice();
      for (const child of nodes) {
        this.appendChild(child);
      }
    }
    else {
      newNode.remove();
      newNode.parentNode = this;
      this.childNodes.push(newNode);
      connectNode(this.ownerDocument, newNode);
    }
    return newNode;
  }
  append(...items) {
    items.forEach((item) => {
      const isNode = typeof item === 'object' && item !== null && 'nodeType' in item;
      this.appendChild(isNode ? item : this.ownerDocument.createTextNode(String(item)));
    });
  }
  prepend(...items) {
    const firstChild = this.firstChild;
    items.forEach((item) => {
      const isNode = typeof item === 'object' && item !== null && 'nodeType' in item;
      this.insertBefore(isNode ? item : this.ownerDocument.createTextNode(String(item)), firstChild);
    });
  }
  cloneNode(deep) {
    throw new Error(`invalid node type to clone: ${this.nodeType}, deep: ${deep}`);
  }
  compareDocumentPosition(_other) {
    // unimplemented
    // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition
    return -1;
  }
  get firstChild() {
    return this.childNodes[0] || null;
  }
  insertBefore(newNode, referenceNode) {
    if (newNode.nodeType === 11 /* DOCUMENT_FRAGMENT_NODE */) {
      for (let i = 0, ii = newNode.childNodes.length; i < ii; i++) {
        insertBefore(this, newNode.childNodes[i], referenceNode);
      }
    }
    else {
      insertBefore(this, newNode, referenceNode);
    }
    return newNode;
  }
  get isConnected() {
    let node = this;
    while (node != null) {
      if (node.nodeType === 9 /* DOCUMENT_NODE */) {
        return true;
      }
      node = node.parentNode;
      if (node != null && node.nodeType === 11 /* DOCUMENT_FRAGMENT_NODE */) {
        node = node.host;
      }
    }
    return false;
  }
  isSameNode(node) {
    return this === node;
  }
  get lastChild() {
    return this.childNodes[this.childNodes.length - 1] || null;
  }
  get nextSibling() {
    if (this.parentNode != null) {
      const index = this.parentNode.childNodes.indexOf(this) + 1;
      return this.parentNode.childNodes[index] || null;
    }
    return null;
  }
  get nodeValue() {
    return this._nodeValue;
  }
  set nodeValue(value) {
    this._nodeValue = value;
  }
  get parentElement() {
    return this.parentNode || null;
  }
  set parentElement(value) {
    this.parentNode = value;
  }
  get previousSibling() {
    if (this.parentNode != null) {
      const index = this.parentNode.childNodes.indexOf(this) - 1;
      return this.parentNode.childNodes[index] || null;
    }
    return null;
  }
  contains(otherNode) {
    return this.childNodes.includes(otherNode);
  }
  removeChild(childNode) {
    const index = this.childNodes.indexOf(childNode);
    if (index > -1) {
      this.childNodes.splice(index, 1);
      if (this.nodeType === 1 /* ELEMENT_NODE */) {
        const wasConnected = this.isConnected;
        childNode.parentNode = null;
        if (wasConnected === true) {
          disconnectNode(childNode);
        }
      }
      else {
        childNode.parentNode = null;
      }
    }
    else {
      throw new Error(`node not found within childNodes during removeChild`);
    }
    return childNode;
  }
  remove() {
    if (this.parentNode != null) {
      this.parentNode.removeChild(this);
    }
  }
  replaceChild(newChild, oldChild) {
    if (oldChild.parentNode === this) {
      this.insertBefore(newChild, oldChild);
      oldChild.remove();
      return newChild;
    }
    return null;
  }
  get textContent() {
    return this._nodeValue;
  }
  set textContent(value) {
    this._nodeValue = String(value);
  }
}
MockNode.ELEMENT_NODE = 1;
MockNode.TEXT_NODE = 3;
MockNode.PROCESSING_INSTRUCTION_NODE = 7;
MockNode.COMMENT_NODE = 8;
MockNode.DOCUMENT_NODE = 9;
MockNode.DOCUMENT_TYPE_NODE = 10;
MockNode.DOCUMENT_FRAGMENT_NODE = 11;
class MockNodeList {
  constructor(ownerDocument, childNodes, length) {
    this.ownerDocument = ownerDocument;
    this.childNodes = childNodes;
    this.length = length;
  }
}
class MockElement extends MockNode {
  constructor(ownerDocument, nodeName) {
    super(ownerDocument, 1 /* ELEMENT_NODE */, typeof nodeName === 'string' ? nodeName : null, null);
    this.namespaceURI = null;
  }
  addEventListener(type, handler) {
    addEventListener(this, type, handler);
  }
  attachShadow(_opts) {
    const shadowRoot = this.ownerDocument.createDocumentFragment();
    this.shadowRoot = shadowRoot;
    return shadowRoot;
  }
  get shadowRoot() {
    return this.__shadowRoot || null;
  }
  set shadowRoot(shadowRoot) {
    if (shadowRoot != null) {
      shadowRoot.host = this;
      this.__shadowRoot = shadowRoot;
    }
    else {
      delete this.__shadowRoot;
    }
  }
  get attributes() {
    if (this.__attributeMap == null) {
      this.__attributeMap = createAttributeProxy(false);
    }
    return this.__attributeMap;
  }
  set attributes(attrs) {
    this.__attributeMap = attrs;
  }
  get children() {
    return this.childNodes.filter((n) => n.nodeType === 1 /* ELEMENT_NODE */);
  }
  get childElementCount() {
    return this.childNodes.filter((n) => n.nodeType === 1 /* ELEMENT_NODE */).length;
  }
  get className() {
    return this.getAttributeNS(null, 'class') || '';
  }
  set className(value) {
    this.setAttributeNS(null, 'class', value);
  }
  get classList() {
    return new MockClassList(this);
  }
  click() {
    dispatchEvent(this, new MockEvent('click', { bubbles: true, cancelable: true, composed: true }));
  }
  cloneNode(_deep) {
    // implemented on MockElement.prototype from within element.ts
    return null;
  }
  closest(selector) {
    let elm = this;
    while (elm != null) {
      if (elm.matches(selector)) {
        return elm;
      }
      elm = elm.parentNode;
    }
    return null;
  }
  get dataset() {
    return dataset(this);
  }
  get dir() {
    return this.getAttributeNS(null, 'dir') || '';
  }
  set dir(value) {
    this.setAttributeNS(null, 'dir', value);
  }
  dispatchEvent(ev) {
    return dispatchEvent(this, ev);
  }
  get firstElementChild() {
    return this.children[0] || null;
  }
  getAttribute(attrName) {
    if (attrName === 'style') {
      if (this.__style != null && this.__style.length > 0) {
        return this.style.cssText;
      }
      return null;
    }
    const attr = this.attributes.getNamedItem(attrName);
    if (attr != null) {
      return attr.value;
    }
    return null;
  }
  getAttributeNS(namespaceURI, attrName) {
    const attr = this.attributes.getNamedItemNS(namespaceURI, attrName);
    if (attr != null) {
      return attr.value;
    }
    return null;
  }
  getBoundingClientRect() {
    return { bottom: 0, height: 0, left: 0, right: 0, top: 0, width: 0, x: 0, y: 0 };
  }
  getRootNode(opts) {
    const isComposed = opts != null && opts.composed === true;
    let node = this;
    while (node.parentNode != null) {
      node = node.parentNode;
      if (isComposed === true && node.parentNode == null && node.host != null) {
        node = node.host;
      }
    }
    return node;
  }
  get draggable() {
    return this.getAttributeNS(null, 'draggable') === 'true';
  }
  set draggable(value) {
    this.setAttributeNS(null, 'draggable', value);
  }
  hasChildNodes() {
    return this.childNodes.length > 0;
  }
  get id() {
    return this.getAttributeNS(null, 'id') || '';
  }
  set id(value) {
    this.setAttributeNS(null, 'id', value);
  }
  get innerHTML() {
    if (this.childNodes.length === 0) {
      return '';
    }
    return serializeNodeToHtml(this, {
      newLines: false,
      indentSpaces: 0,
    });
  }
  set innerHTML(html) {
    if (NON_ESCAPABLE_CONTENT.has(this.nodeName) === true) {
      setTextContent(this, html);
    }
    else {
      for (let i = this.childNodes.length - 1; i >= 0; i--) {
        this.removeChild(this.childNodes[i]);
      }
      if (typeof html === 'string') {
        const frag = parseFragmentUtil(this.ownerDocument, html);
        while (frag.childNodes.length > 0) {
          this.appendChild(frag.childNodes[0]);
        }
      }
    }
  }
  get innerText() {
    const text = [];
    getTextContent(this.childNodes, text);
    return text.join('');
  }
  set innerText(value) {
    setTextContent(this, value);
  }
  insertAdjacentElement(position, elm) {
    if (position === 'beforebegin') {
      insertBefore(this.parentNode, elm, this);
    }
    else if (position === 'afterbegin') {
      this.prepend(elm);
    }
    else if (position === 'beforeend') {
      this.appendChild(elm);
    }
    else if (position === 'afterend') {
      insertBefore(this.parentNode, elm, this.nextSibling);
    }
    return elm;
  }
  insertAdjacentHTML(position, html) {
    const frag = parseFragmentUtil(this.ownerDocument, html);
    if (position === 'beforebegin') {
      while (frag.childNodes.length > 0) {
        insertBefore(this.parentNode, frag.childNodes[0], this);
      }
    }
    else if (position === 'afterbegin') {
      while (frag.childNodes.length > 0) {
        this.prepend(frag.childNodes[frag.childNodes.length - 1]);
      }
    }
    else if (position === 'beforeend') {
      while (frag.childNodes.length > 0) {
        this.appendChild(frag.childNodes[0]);
      }
    }
    else if (position === 'afterend') {
      while (frag.childNodes.length > 0) {
        insertBefore(this.parentNode, frag.childNodes[frag.childNodes.length - 1], this.nextSibling);
      }
    }
  }
  insertAdjacentText(position, text) {
    const elm = this.ownerDocument.createTextNode(text);
    if (position === 'beforebegin') {
      insertBefore(this.parentNode, elm, this);
    }
    else if (position === 'afterbegin') {
      this.prepend(elm);
    }
    else if (position === 'beforeend') {
      this.appendChild(elm);
    }
    else if (position === 'afterend') {
      insertBefore(this.parentNode, elm, this.nextSibling);
    }
  }
  hasAttribute(attrName) {
    if (attrName === 'style') {
      return this.__style != null && this.__style.length > 0;
    }
    return this.getAttribute(attrName) !== null;
  }
  hasAttributeNS(namespaceURI, name) {
    return this.getAttributeNS(namespaceURI, name) !== null;
  }
  get hidden() {
    return this.hasAttributeNS(null, 'hidden');
  }
  set hidden(isHidden) {
    if (isHidden === true) {
      this.setAttributeNS(null, 'hidden', '');
    }
    else {
      this.removeAttributeNS(null, 'hidden');
    }
  }
  get lang() {
    return this.getAttributeNS(null, 'lang') || '';
  }
  set lang(value) {
    this.setAttributeNS(null, 'lang', value);
  }
  get lastElementChild() {
    const children = this.children;
    return children[children.length - 1] || null;
  }
  matches(selector) {
    return matches(selector, this);
  }
  get nextElementSibling() {
    const parentElement = this.parentElement;
    if (parentElement != null &&
      (parentElement.nodeType === 1 /* ELEMENT_NODE */ ||
        parentElement.nodeType === 11 /* DOCUMENT_FRAGMENT_NODE */ ||
        parentElement.nodeType === 9 /* DOCUMENT_NODE */)) {
      const children = parentElement.children;
      const index = children.indexOf(this) + 1;
      return parentElement.children[index] || null;
    }
    return null;
  }
  get outerHTML() {
    return serializeNodeToHtml(this, {
      newLines: false,
      outerHtml: true,
      indentSpaces: 0,
    });
  }
  get previousElementSibling() {
    const parentElement = this.parentElement;
    if (parentElement != null &&
      (parentElement.nodeType === 1 /* ELEMENT_NODE */ ||
        parentElement.nodeType === 11 /* DOCUMENT_FRAGMENT_NODE */ ||
        parentElement.nodeType === 9 /* DOCUMENT_NODE */)) {
      const children = parentElement.children;
      const index = children.indexOf(this) - 1;
      return parentElement.children[index] || null;
    }
    return null;
  }
  getElementsByClassName(classNames) {
    const classes = classNames
      .trim()
      .split(' ')
      .filter((c) => c.length > 0);
    const results = [];
    getElementsByClassName(this, classes, results);
    return results;
  }
  getElementsByTagName(tagName) {
    const results = [];
    getElementsByTagName(this, tagName.toLowerCase(), results);
    return results;
  }
  querySelector(selector) {
    return selectOne(selector, this);
  }
  querySelectorAll(selector) {
    return selectAll(selector, this);
  }
  removeAttribute(attrName) {
    if (attrName === 'style') {
      delete this.__style;
    }
    else {
      const attr = this.attributes.getNamedItem(attrName);
      if (attr != null) {
        this.attributes.removeNamedItemNS(attr);
        if (checkAttributeChanged(this) === true) {
          attributeChanged(this, attrName, attr.value, null);
        }
      }
    }
  }
  removeAttributeNS(namespaceURI, attrName) {
    const attr = this.attributes.getNamedItemNS(namespaceURI, attrName);
    if (attr != null) {
      this.attributes.removeNamedItemNS(attr);
      if (checkAttributeChanged(this) === true) {
        attributeChanged(this, attrName, attr.value, null);
      }
    }
  }
  removeEventListener(type, handler) {
    removeEventListener(this, type, handler);
  }
  setAttribute(attrName, value) {
    if (attrName === 'style') {
      this.style = value;
    }
    else {
      const attributes = this.attributes;
      let attr = attributes.getNamedItem(attrName);
      const checkAttrChanged = checkAttributeChanged(this);
      if (attr != null) {
        if (checkAttrChanged === true) {
          const oldValue = attr.value;
          attr.value = value;
          if (oldValue !== attr.value) {
            attributeChanged(this, attr.name, oldValue, attr.value);
          }
        }
        else {
          attr.value = value;
        }
      }
      else {
        if (attributes.caseInsensitive) {
          attrName = attrName.toLowerCase();
        }
        attr = new MockAttr(attrName, value);
        attributes.__items.push(attr);
        if (checkAttrChanged === true) {
          attributeChanged(this, attrName, null, attr.value);
        }
      }
    }
  }
  setAttributeNS(namespaceURI, attrName, value) {
    const attributes = this.attributes;
    let attr = attributes.getNamedItemNS(namespaceURI, attrName);
    const checkAttrChanged = checkAttributeChanged(this);
    if (attr != null) {
      if (checkAttrChanged === true) {
        const oldValue = attr.value;
        attr.value = value;
        if (oldValue !== attr.value) {
          attributeChanged(this, attr.name, oldValue, attr.value);
        }
      }
      else {
        attr.value = value;
      }
    }
    else {
      attr = new MockAttr(attrName, value, namespaceURI);
      attributes.__items.push(attr);
      if (checkAttrChanged === true) {
        attributeChanged(this, attrName, null, attr.value);
      }
    }
  }
  get style() {
    if (this.__style == null) {
      this.__style = createCSSStyleDeclaration();
    }
    return this.__style;
  }
  set style(val) {
    if (typeof val === 'string') {
      if (this.__style == null) {
        this.__style = createCSSStyleDeclaration();
      }
      this.__style.cssText = val;
    }
    else {
      this.__style = val;
    }
  }
  get tabIndex() {
    return parseInt(this.getAttributeNS(null, 'tabindex') || '-1', 10);
  }
  set tabIndex(value) {
    this.setAttributeNS(null, 'tabindex', value);
  }
  get tagName() {
    return this.nodeName;
  }
  set tagName(value) {
    this.nodeName = value;
  }
  get textContent() {
    const text = [];
    getTextContent(this.childNodes, text);
    return text.join('');
  }
  set textContent(value) {
    setTextContent(this, value);
  }
  get title() {
    return this.getAttributeNS(null, 'title') || '';
  }
  set title(value) {
    this.setAttributeNS(null, 'title', value);
  }
  onanimationstart() {
    /**/
  }
  onanimationend() {
    /**/
  }
  onanimationiteration() {
    /**/
  }
  onabort() {
    /**/
  }
  onauxclick() {
    /**/
  }
  onbeforecopy() {
    /**/
  }
  onbeforecut() {
    /**/
  }
  onbeforepaste() {
    /**/
  }
  onblur() {
    /**/
  }
  oncancel() {
    /**/
  }
  oncanplay() {
    /**/
  }
  oncanplaythrough() {
    /**/
  }
  onchange() {
    /**/
  }
  onclick() {
    /**/
  }
  onclose() {
    /**/
  }
  oncontextmenu() {
    /**/
  }
  oncopy() {
    /**/
  }
  oncuechange() {
    /**/
  }
  oncut() {
    /**/
  }
  ondblclick() {
    /**/
  }
  ondrag() {
    /**/
  }
  ondragend() {
    /**/
  }
  ondragenter() {
    /**/
  }
  ondragleave() {
    /**/
  }
  ondragover() {
    /**/
  }
  ondragstart() {
    /**/
  }
  ondrop() {
    /**/
  }
  ondurationchange() {
    /**/
  }
  onemptied() {
    /**/
  }
  onended() {
    /**/
  }
  onerror() {
    /**/
  }
  onfocus() {
    /**/
  }
  onfocusin() {
    /**/
  }
  onfocusout() {
    /**/
  }
  onformdata() {
    /**/
  }
  onfullscreenchange() {
    /**/
  }
  onfullscreenerror() {
    /**/
  }
  ongotpointercapture() {
    /**/
  }
  oninput() {
    /**/
  }
  oninvalid() {
    /**/
  }
  onkeydown() {
    /**/
  }
  onkeypress() {
    /**/
  }
  onkeyup() {
    /**/
  }
  onload() {
    /**/
  }
  onloadeddata() {
    /**/
  }
  onloadedmetadata() {
    /**/
  }
  onloadstart() {
    /**/
  }
  onlostpointercapture() {
    /**/
  }
  onmousedown() {
    /**/
  }
  onmouseenter() {
    /**/
  }
  onmouseleave() {
    /**/
  }
  onmousemove() {
    /**/
  }
  onmouseout() {
    /**/
  }
  onmouseover() {
    /**/
  }
  onmouseup() {
    /**/
  }
  onmousewheel() {
    /**/
  }
  onpaste() {
    /**/
  }
  onpause() {
    /**/
  }
  onplay() {
    /**/
  }
  onplaying() {
    /**/
  }
  onpointercancel() {
    /**/
  }
  onpointerdown() {
    /**/
  }
  onpointerenter() {
    /**/
  }
  onpointerleave() {
    /**/
  }
  onpointermove() {
    /**/
  }
  onpointerout() {
    /**/
  }
  onpointerover() {
    /**/
  }
  onpointerup() {
    /**/
  }
  onprogress() {
    /**/
  }
  onratechange() {
    /**/
  }
  onreset() {
    /**/
  }
  onresize() {
    /**/
  }
  onscroll() {
    /**/
  }
  onsearch() {
    /**/
  }
  onseeked() {
    /**/
  }
  onseeking() {
    /**/
  }
  onselect() {
    /**/
  }
  onselectstart() {
    /**/
  }
  onstalled() {
    /**/
  }
  onsubmit() {
    /**/
  }
  onsuspend() {
    /**/
  }
  ontimeupdate() {
    /**/
  }
  ontoggle() {
    /**/
  }
  onvolumechange() {
    /**/
  }
  onwaiting() {
    /**/
  }
  onwebkitfullscreenchange() {
    /**/
  }
  onwebkitfullscreenerror() {
    /**/
  }
  onwheel() {
    /**/
  }
  toString(opts) {
    return serializeNodeToHtml(this, opts);
  }
}
function getElementsByClassName(elm, classNames, foundElms) {
  const children = elm.children;
  for (let i = 0, ii = children.length; i < ii; i++) {
    const childElm = children[i];
    for (let j = 0, jj = classNames.length; j < jj; j++) {
      if (childElm.classList.contains(classNames[j])) {
        foundElms.push(childElm);
      }
    }
    getElementsByClassName(childElm, classNames, foundElms);
  }
}
function getElementsByTagName(elm, tagName, foundElms) {
  const children = elm.children;
  for (let i = 0, ii = children.length; i < ii; i++) {
    const childElm = children[i];
    if (tagName === '*' || childElm.nodeName.toLowerCase() === tagName) {
      foundElms.push(childElm);
    }
    getElementsByTagName(childElm, tagName, foundElms);
  }
}
function resetElement(elm) {
  resetEventListeners(elm);
  delete elm.__attributeMap;
  delete elm.__shadowRoot;
  delete elm.__style;
}
function insertBefore(parentNode, newNode, referenceNode) {
  if (newNode !== referenceNode) {
    newNode.remove();
    newNode.parentNode = parentNode;
    newNode.ownerDocument = parentNode.ownerDocument;
    if (referenceNode != null) {
      const index = parentNode.childNodes.indexOf(referenceNode);
      if (index > -1) {
        parentNode.childNodes.splice(index, 0, newNode);
      }
      else {
        throw new Error(`referenceNode not found in parentNode.childNodes`);
      }
    }
    else {
      parentNode.childNodes.push(newNode);
    }
    connectNode(parentNode.ownerDocument, newNode);
  }
  return newNode;
}
class MockHTMLElement extends MockElement {
  constructor(ownerDocument, nodeName) {
    super(ownerDocument, typeof nodeName === 'string' ? nodeName.toUpperCase() : null);
    this.namespaceURI = 'http://www.w3.org/1999/xhtml';
  }
  get tagName() {
    return this.nodeName;
  }
  set tagName(value) {
    this.nodeName = value;
  }
  get attributes() {
    if (this.__attributeMap == null) {
      this.__attributeMap = createAttributeProxy(true);
    }
    return this.__attributeMap;
  }
  set attributes(attrs) {
    this.__attributeMap = attrs;
  }
}
class MockTextNode extends MockNode {
  constructor(ownerDocument, text) {
    super(ownerDocument, 3 /* TEXT_NODE */, "#text" /* TEXT_NODE */, text);
  }
  cloneNode(_deep) {
    return new MockTextNode(null, this.nodeValue);
  }
  get textContent() {
    return this.nodeValue;
  }
  set textContent(text) {
    this.nodeValue = text;
  }
  get data() {
    return this.nodeValue;
  }
  set data(text) {
    this.nodeValue = text;
  }
  get wholeText() {
    if (this.parentNode != null) {
      const text = [];
      for (let i = 0, ii = this.parentNode.childNodes.length; i < ii; i++) {
        const childNode = this.parentNode.childNodes[i];
        if (childNode.nodeType === 3 /* TEXT_NODE */) {
          text.push(childNode.nodeValue);
        }
      }
      return text.join('');
    }
    return this.nodeValue;
  }
}
function getTextContent(childNodes, text) {
  for (let i = 0, ii = childNodes.length; i < ii; i++) {
    const childNode = childNodes[i];
    if (childNode.nodeType === 3 /* TEXT_NODE */) {
      text.push(childNode.nodeValue);
    }
    else if (childNode.nodeType === 1 /* ELEMENT_NODE */) {
      getTextContent(childNode.childNodes, text);
    }
  }
}
function setTextContent(elm, text) {
  for (let i = elm.childNodes.length - 1; i >= 0; i--) {
    elm.removeChild(elm.childNodes[i]);
  }
  const textNode = new MockTextNode(elm.ownerDocument, text);
  elm.appendChild(textNode);
}

class MockComment extends MockNode {
  constructor(ownerDocument, data) {
    super(ownerDocument, 8 /* COMMENT_NODE */, "#comment" /* COMMENT_NODE */, data);
  }
  cloneNode(_deep) {
    return new MockComment(null, this.nodeValue);
  }
  get textContent() {
    return this.nodeValue;
  }
  set textContent(text) {
    this.nodeValue = text;
  }
}

class MockDocumentFragment extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, null);
    this.nodeName = "#document-fragment" /* DOCUMENT_FRAGMENT_NODE */;
    this.nodeType = 11 /* DOCUMENT_FRAGMENT_NODE */;
  }
  getElementById(id) {
    return getElementById(this, id);
  }
  cloneNode(deep) {
    const cloned = new MockDocumentFragment(null);
    if (deep) {
      for (let i = 0, ii = this.childNodes.length; i < ii; i++) {
        const childNode = this.childNodes[i];
        if (childNode.nodeType === 1 /* ELEMENT_NODE */ ||
          childNode.nodeType === 3 /* TEXT_NODE */ ||
          childNode.nodeType === 8 /* COMMENT_NODE */) {
          const clonedChildNode = this.childNodes[i].cloneNode(true);
          cloned.appendChild(clonedChildNode);
        }
      }
    }
    return cloned;
  }
}

class MockDocumentTypeNode extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, '!DOCTYPE');
    this.nodeType = 10 /* DOCUMENT_TYPE_NODE */;
    this.setAttribute('html', '');
  }
}

class MockCSSRule {
  constructor(parentStyleSheet) {
    this.parentStyleSheet = parentStyleSheet;
    this.cssText = '';
    this.type = 0;
  }
}
class MockCSSStyleSheet {
  constructor(ownerNode) {
    this.type = 'text/css';
    this.parentStyleSheet = null;
    this.cssRules = [];
    this.ownerNode = ownerNode;
  }
  get rules() {
    return this.cssRules;
  }
  set rules(rules) {
    this.cssRules = rules;
  }
  deleteRule(index) {
    if (index >= 0 && index < this.cssRules.length) {
      this.cssRules.splice(index, 1);
      updateStyleTextNode(this.ownerNode);
    }
  }
  insertRule(rule, index = 0) {
    if (typeof index !== 'number') {
      index = 0;
    }
    if (index < 0) {
      index = 0;
    }
    if (index > this.cssRules.length) {
      index = this.cssRules.length;
    }
    const cssRule = new MockCSSRule(this);
    cssRule.cssText = rule;
    this.cssRules.splice(index, 0, cssRule);
    updateStyleTextNode(this.ownerNode);
    return index;
  }
}
function getStyleElementText(styleElm) {
  const output = [];
  for (let i = 0; i < styleElm.childNodes.length; i++) {
    output.push(styleElm.childNodes[i].nodeValue);
  }
  return output.join('');
}
function setStyleElementText(styleElm, text) {
  // keeping the innerHTML and the sheet.cssRules connected
  // is not technically correct, but since we're doing
  // SSR we'll need to turn any assigned cssRules into
  // real text, not just properties that aren't rendered
  const sheet = styleElm.sheet;
  sheet.cssRules.length = 0;
  sheet.insertRule(text);
  updateStyleTextNode(styleElm);
}
function updateStyleTextNode(styleElm) {
  const childNodeLen = styleElm.childNodes.length;
  if (childNodeLen > 1) {
    for (let i = childNodeLen - 1; i >= 1; i--) {
      styleElm.removeChild(styleElm.childNodes[i]);
    }
  }
  else if (childNodeLen < 1) {
    styleElm.appendChild(styleElm.ownerDocument.createTextNode(''));
  }
  const textNode = styleElm.childNodes[0];
  textNode.nodeValue = styleElm.sheet.cssRules.map((r) => r.cssText).join('\n');
}

function createElement(ownerDocument, tagName) {
  if (typeof tagName !== 'string' || tagName === '' || !/^[a-z0-9-_:]+$/i.test(tagName)) {
    throw new Error(`The tag name provided (${tagName}) is not a valid name.`);
  }
  tagName = tagName.toLowerCase();
  switch (tagName) {
    case 'a':
      return new MockAnchorElement(ownerDocument);
    case 'base':
      return new MockBaseElement(ownerDocument);
    case 'button':
      return new MockButtonElement(ownerDocument);
    case 'canvas':
      return new MockCanvasElement(ownerDocument);
    case 'form':
      return new MockFormElement(ownerDocument);
    case 'img':
      return new MockImageElement(ownerDocument);
    case 'input':
      return new MockInputElement(ownerDocument);
    case 'link':
      return new MockLinkElement(ownerDocument);
    case 'meta':
      return new MockMetaElement(ownerDocument);
    case 'script':
      return new MockScriptElement(ownerDocument);
    case 'style':
      return new MockStyleElement(ownerDocument);
    case 'template':
      return new MockTemplateElement(ownerDocument);
    case 'title':
      return new MockTitleElement(ownerDocument);
  }
  if (ownerDocument != null && tagName.includes('-')) {
    const win = ownerDocument.defaultView;
    if (win != null && win.customElements != null) {
      return createCustomElement(win.customElements, ownerDocument, tagName);
    }
  }
  return new MockHTMLElement(ownerDocument, tagName);
}
function createElementNS(ownerDocument, namespaceURI, tagName) {
  if (namespaceURI === 'http://www.w3.org/1999/xhtml') {
    return createElement(ownerDocument, tagName);
  }
  else if (namespaceURI === 'http://www.w3.org/2000/svg') {
    return new MockSVGElement(ownerDocument, tagName);
  }
  else {
    return new MockElement(ownerDocument, tagName);
  }
}
class MockAnchorElement extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, 'a');
  }
  get href() {
    return fullUrl(this, 'href');
  }
  set href(value) {
    this.setAttribute('href', value);
  }
}
class MockButtonElement extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, 'button');
  }
}
patchPropAttributes(MockButtonElement.prototype, {
  type: String,
}, {
  type: 'submit',
});
class MockImageElement extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, 'img');
  }
  get draggable() {
    return this.getAttributeNS(null, 'draggable') !== 'false';
  }
  set draggable(value) {
    this.setAttributeNS(null, 'draggable', value);
  }
  get src() {
    return fullUrl(this, 'src');
  }
  set src(value) {
    this.setAttribute('src', value);
  }
}
patchPropAttributes(MockImageElement.prototype, {
  height: Number,
  width: Number,
});
class MockInputElement extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, 'input');
  }
  get list() {
    const listId = this.getAttribute('list');
    if (listId) {
      return this.ownerDocument.getElementById(listId);
    }
    return null;
  }
}
patchPropAttributes(MockInputElement.prototype, {
  accept: String,
  autocomplete: String,
  autofocus: Boolean,
  capture: String,
  checked: Boolean,
  disabled: Boolean,
  form: String,
  formaction: String,
  formenctype: String,
  formmethod: String,
  formnovalidate: String,
  formtarget: String,
  height: Number,
  inputmode: String,
  max: String,
  maxLength: Number,
  min: String,
  minLength: Number,
  multiple: Boolean,
  name: String,
  pattern: String,
  placeholder: String,
  required: Boolean,
  readOnly: Boolean,
  size: Number,
  spellCheck: Boolean,
  src: String,
  step: String,
  type: String,
  value: String,
  width: Number,
}, {
  type: 'text',
});
class MockFormElement extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, 'form');
  }
}
patchPropAttributes(MockFormElement.prototype, {
  name: String,
});
class MockLinkElement extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, 'link');
  }
  get href() {
    return fullUrl(this, 'href');
  }
  set href(value) {
    this.setAttribute('href', value);
  }
}
patchPropAttributes(MockLinkElement.prototype, {
  crossorigin: String,
  media: String,
  rel: String,
  type: String,
});
class MockMetaElement extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, 'meta');
  }
}
patchPropAttributes(MockMetaElement.prototype, {
  charset: String,
  content: String,
  name: String,
});
class MockScriptElement extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, 'script');
  }
  get src() {
    return fullUrl(this, 'src');
  }
  set src(value) {
    this.setAttribute('src', value);
  }
}
patchPropAttributes(MockScriptElement.prototype, {
  type: String,
});
class MockStyleElement extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, 'style');
    this.sheet = new MockCSSStyleSheet(this);
  }
  get innerHTML() {
    return getStyleElementText(this);
  }
  set innerHTML(value) {
    setStyleElementText(this, value);
  }
  get innerText() {
    return getStyleElementText(this);
  }
  set innerText(value) {
    setStyleElementText(this, value);
  }
  get textContent() {
    return getStyleElementText(this);
  }
  set textContent(value) {
    setStyleElementText(this, value);
  }
}
class MockSVGElement extends MockElement {
  // SVGElement properties and methods
  get ownerSVGElement() {
    return null;
  }
  get viewportElement() {
    return null;
  }
  focus() {
    /**/
  }
  onunload() {
    /**/
  }
  // SVGGeometryElement properties and methods
  get pathLength() {
    return 0;
  }
  isPointInFill(_pt) {
    return false;
  }
  isPointInStroke(_pt) {
    return false;
  }
  getTotalLength() {
    return 0;
  }
}
class MockBaseElement extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, 'base');
  }
  get href() {
    return fullUrl(this, 'href');
  }
  set href(value) {
    this.setAttribute('href', value);
  }
}
class MockTemplateElement extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, 'template');
    this.content = new MockDocumentFragment(ownerDocument);
  }
  get innerHTML() {
    return this.content.innerHTML;
  }
  set innerHTML(html) {
    this.content.innerHTML = html;
  }
  cloneNode(deep) {
    const cloned = new MockTemplateElement(null);
    cloned.attributes = cloneAttributes(this.attributes);
    const styleCssText = this.getAttribute('style');
    if (styleCssText != null && styleCssText.length > 0) {
      cloned.setAttribute('style', styleCssText);
    }
    cloned.content = this.content.cloneNode(deep);
    if (deep) {
      for (let i = 0, ii = this.childNodes.length; i < ii; i++) {
        const clonedChildNode = this.childNodes[i].cloneNode(true);
        cloned.appendChild(clonedChildNode);
      }
    }
    return cloned;
  }
}
class MockTitleElement extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, 'title');
  }
  get text() {
    return this.textContent;
  }
  set text(value) {
    this.textContent = value;
  }
}
class MockCanvasElement extends MockHTMLElement {
  constructor(ownerDocument) {
    super(ownerDocument, 'canvas');
  }
  getContext() {
    return {
      fillRect() {
        return;
      },
      clearRect() { },
      getImageData: function (_, __, w, h) {
        return {
          data: new Array(w * h * 4),
        };
      },
      putImageData() { },
      createImageData: function () {
        return [];
      },
      setTransform() { },
      drawImage() { },
      save() { },
      fillText() { },
      restore() { },
      beginPath() { },
      moveTo() { },
      lineTo() { },
      closePath() { },
      stroke() { },
      translate() { },
      scale() { },
      rotate() { },
      arc() { },
      fill() { },
      measureText() {
        return { width: 0 };
      },
      transform() { },
      rect() { },
      clip() { },
    };
  }
}
function fullUrl(elm, attrName) {
  const val = elm.getAttribute(attrName) || '';
  if (elm.ownerDocument != null) {
    const win = elm.ownerDocument.defaultView;
    if (win != null) {
      const loc = win.location;
      if (loc != null) {
        try {
          const url = new URL(val, loc.href);
          return url.href;
        }
        catch (e) { }
      }
    }
  }
  return val.replace(/\'|\"/g, '').trim();
}
function patchPropAttributes(prototype, attrs, defaults = {}) {
  Object.keys(attrs).forEach((propName) => {
    const attr = attrs[propName];
    const defaultValue = defaults[propName];
    if (attr === Boolean) {
      Object.defineProperty(prototype, propName, {
        get() {
          return this.hasAttribute(propName);
        },
        set(value) {
          if (value) {
            this.setAttribute(propName, '');
          }
          else {
            this.removeAttribute(propName);
          }
        },
      });
    }
    else if (attr === Number) {
      Object.defineProperty(prototype, propName, {
        get() {
          const value = this.getAttribute(propName);
          return value ? parseInt(value, 10) : defaultValue === undefined ? 0 : defaultValue;
        },
        set(value) {
          this.setAttribute(propName, value);
        },
      });
    }
    else {
      Object.defineProperty(prototype, propName, {
        get() {
          return this.hasAttribute(propName) ? this.getAttribute(propName) : defaultValue || '';
        },
        set(value) {
          this.setAttribute(propName, value);
        },
      });
    }
  });
}
MockElement.prototype.cloneNode = function (deep) {
  // because we're creating elements, which extending specific HTML base classes there
  // is a MockElement circular reference that bundling has trouble dealing with so
  // the fix is to add cloneNode() to MockElement's prototype after the HTML classes
  const cloned = createElement(this.ownerDocument, this.nodeName);
  cloned.attributes = cloneAttributes(this.attributes);
  const styleCssText = this.getAttribute('style');
  if (styleCssText != null && styleCssText.length > 0) {
    cloned.setAttribute('style', styleCssText);
  }
  if (deep) {
    for (let i = 0, ii = this.childNodes.length; i < ii; i++) {
      const clonedChildNode = this.childNodes[i].cloneNode(true);
      cloned.appendChild(clonedChildNode);
    }
  }
  return cloned;
};

let sharedDocument;
function parseHtmlToDocument(html, ownerDocument = null) {
  if (ownerDocument == null) {
    if (sharedDocument == null) {
      sharedDocument = new MockDocument();
    }
    ownerDocument = sharedDocument;
  }
  return parseDocumentUtil(ownerDocument, html);
}
function parseHtmlToFragment(html, ownerDocument = null) {
  if (ownerDocument == null) {
    if (sharedDocument == null) {
      sharedDocument = new MockDocument();
    }
    ownerDocument = sharedDocument;
  }
  return parseFragmentUtil(ownerDocument, html);
}

class MockHeaders {
  constructor(init) {
    this._values = [];
    if (typeof init === 'object') {
      if (typeof init[Symbol.iterator] === 'function') {
        const kvs = [];
        for (const kv of init) {
          if (typeof kv[Symbol.iterator] === 'function') {
            kvs.push([...kv]);
          }
        }
        for (const kv of kvs) {
          this.append(kv[0], kv[1]);
        }
      }
      else {
        for (const key in init) {
          this.append(key, init[key]);
        }
      }
    }
  }
  append(key, value) {
    this._values.push([key, value + '']);
  }
  delete(key) {
    key = key.toLowerCase();
    for (let i = this._values.length - 1; i >= 0; i--) {
      if (this._values[i][0].toLowerCase() === key) {
        this._values.splice(i, 1);
      }
    }
  }
  entries() {
    const entries = [];
    for (const kv of this.keys()) {
      entries.push([kv, this.get(kv)]);
    }
    let index = -1;
    return {
      next() {
        index++;
        return {
          value: entries[index],
          done: !entries[index],
        };
      },
      [Symbol.iterator]() {
        return this;
      },
    };
  }
  forEach(cb) {
    for (const kv of this.entries()) {
      cb(kv[1], kv[0]);
    }
  }
  get(key) {
    const rtn = [];
    key = key.toLowerCase();
    for (const kv of this._values) {
      if (kv[0].toLowerCase() === key) {
        rtn.push(kv[1]);
      }
    }
    return rtn.length > 0 ? rtn.join(', ') : null;
  }
  has(key) {
    key = key.toLowerCase();
    for (const kv of this._values) {
      if (kv[0].toLowerCase() === key) {
        return true;
      }
    }
    return false;
  }
  keys() {
    const keys = [];
    for (const kv of this._values) {
      const key = kv[0].toLowerCase();
      if (!keys.includes(key)) {
        keys.push(key);
      }
    }
    let index = -1;
    return {
      next() {
        index++;
        return {
          value: keys[index],
          done: !keys[index],
        };
      },
      [Symbol.iterator]() {
        return this;
      },
    };
  }
  set(key, value) {
    for (const kv of this._values) {
      if (kv[0].toLowerCase() === key.toLowerCase()) {
        kv[1] = value + '';
        return;
      }
    }
    this.append(key, value);
  }
  values() {
    const values = this._values;
    let index = -1;
    return {
      next() {
        index++;
        const done = !values[index];
        return {
          value: done ? undefined : values[index][1],
          done,
        };
      },
      [Symbol.iterator]() {
        return this;
      },
    };
  }
  [Symbol.iterator]() {
    return this.entries();
  }
}

class MockRequest {
  constructor(input, init = {}) {
    this._method = 'GET';
    this._url = '/';
    this.bodyUsed = false;
    this.cache = 'default';
    this.credentials = 'same-origin';
    this.integrity = '';
    this.keepalive = false;
    this.mode = 'cors';
    this.redirect = 'follow';
    this.referrer = 'about:client';
    this.referrerPolicy = '';
    if (typeof input === 'string') {
      this.url = input;
    }
    else if (input) {
      Object.assign(this, input);
      this.headers = new MockHeaders(input.headers);
    }
    Object.assign(this, init);
    if (init.headers) {
      this.headers = new MockHeaders(init.headers);
    }
    if (!this.headers) {
      this.headers = new MockHeaders();
    }
  }
  get url() {
    if (typeof this._url === 'string') {
      return new URL(this._url, location.href).href;
    }
    return new URL('/', location.href).href;
  }
  set url(value) {
    this._url = value;
  }
  get method() {
    if (typeof this._method === 'string') {
      return this._method.toUpperCase();
    }
    return 'GET';
  }
  set method(value) {
    this._method = value;
  }
  clone() {
    const clone = { ...this };
    clone.headers = new MockHeaders(this.headers);
    return new MockRequest(clone);
  }
}
class MockResponse {
  constructor(body, init = {}) {
    this.ok = true;
    this.status = 200;
    this.statusText = '';
    this.type = 'default';
    this.url = '';
    this._body = body;
    if (init) {
      Object.assign(this, init);
    }
    this.headers = new MockHeaders(init.headers);
  }
  async json() {
    return JSON.parse(this._body);
  }
  async text() {
    return this._body;
  }
  clone() {
    const initClone = { ...this };
    initClone.headers = new MockHeaders(this.headers);
    return new MockResponse(this._body, initClone);
  }
}

function setupGlobal(gbl) {
  if (gbl.window == null) {
    const win = (gbl.window = new MockWindow());
    WINDOW_FUNCTIONS.forEach((fnName) => {
      if (!(fnName in gbl)) {
        gbl[fnName] = win[fnName].bind(win);
      }
    });
    WINDOW_PROPS.forEach((propName) => {
      if (!(propName in gbl)) {
        Object.defineProperty(gbl, propName, {
          get() {
            return win[propName];
          },
          set(val) {
            win[propName] = val;
          },
          configurable: true,
          enumerable: true,
        });
      }
    });
    GLOBAL_CONSTRUCTORS.forEach(([cstrName]) => {
      gbl[cstrName] = win[cstrName];
    });
  }
  return gbl.window;
}
function teardownGlobal(gbl) {
  const win = gbl.window;
  if (win && typeof win.close === 'function') {
    win.close();
  }
}
function patchWindow(winToBePatched) {
  const mockWin = new MockWindow(false);
  WINDOW_FUNCTIONS.forEach((fnName) => {
    if (typeof winToBePatched[fnName] !== 'function') {
      winToBePatched[fnName] = mockWin[fnName].bind(mockWin);
    }
  });
  WINDOW_PROPS.forEach((propName) => {
    if (winToBePatched === undefined) {
      Object.defineProperty(winToBePatched, propName, {
        get() {
          return mockWin[propName];
        },
        set(val) {
          mockWin[propName] = val;
        },
        configurable: true,
        enumerable: true,
      });
    }
  });
}
function addGlobalsToWindowPrototype(mockWinPrototype) {
  GLOBAL_CONSTRUCTORS.forEach(([cstrName, Cstr]) => {
    Object.defineProperty(mockWinPrototype, cstrName, {
      get() {
        return this['__' + cstrName] || Cstr;
      },
      set(cstr) {
        this['__' + cstrName] = cstr;
      },
      configurable: true,
      enumerable: true,
    });
  });
}
const WINDOW_FUNCTIONS = [
  'addEventListener',
  'alert',
  'blur',
  'cancelAnimationFrame',
  'cancelIdleCallback',
  'clearInterval',
  'clearTimeout',
  'close',
  'confirm',
  'dispatchEvent',
  'focus',
  'getComputedStyle',
  'matchMedia',
  'open',
  'prompt',
  'removeEventListener',
  'requestAnimationFrame',
  'requestIdleCallback',
  'URL',
];
const WINDOW_PROPS = [
  'customElements',
  'devicePixelRatio',
  'document',
  'history',
  'innerHeight',
  'innerWidth',
  'localStorage',
  'location',
  'navigator',
  'pageXOffset',
  'pageYOffset',
  'performance',
  'screenLeft',
  'screenTop',
  'screenX',
  'screenY',
  'scrollX',
  'scrollY',
  'sessionStorage',
  'CSS',
  'CustomEvent',
  'Event',
  'Element',
  'HTMLElement',
  'Node',
  'NodeList',
  'KeyboardEvent',
  'MouseEvent',
];
const GLOBAL_CONSTRUCTORS = [
  ['CustomEvent', MockCustomEvent],
  ['Event', MockEvent],
  ['Headers', MockHeaders],
  ['KeyboardEvent', MockKeyboardEvent],
  ['MouseEvent', MockMouseEvent],
  ['Request', MockRequest],
  ['Response', MockResponse],
  ['HTMLAnchorElement', MockAnchorElement],
  ['HTMLBaseElement', MockBaseElement],
  ['HTMLButtonElement', MockButtonElement],
  ['HTMLCanvasElement', MockCanvasElement],
  ['HTMLFormElement', MockFormElement],
  ['HTMLImageElement', MockImageElement],
  ['HTMLInputElement', MockInputElement],
  ['HTMLLinkElement', MockLinkElement],
  ['HTMLMetaElement', MockMetaElement],
  ['HTMLScriptElement', MockScriptElement],
  ['HTMLStyleElement', MockStyleElement],
  ['HTMLTemplateElement', MockTemplateElement],
  ['HTMLTitleElement', MockTitleElement],
];

const consoleNoop = () => {
  /**/
};
function createConsole() {
  return {
    debug: consoleNoop,
    error: consoleNoop,
    info: consoleNoop,
    log: consoleNoop,
    warn: consoleNoop,
    dir: consoleNoop,
    dirxml: consoleNoop,
    table: consoleNoop,
    trace: consoleNoop,
    group: consoleNoop,
    groupCollapsed: consoleNoop,
    groupEnd: consoleNoop,
    clear: consoleNoop,
    count: consoleNoop,
    countReset: consoleNoop,
    assert: consoleNoop,
    profile: consoleNoop,
    profileEnd: consoleNoop,
    time: consoleNoop,
    timeLog: consoleNoop,
    timeEnd: consoleNoop,
    timeStamp: consoleNoop,
    context: consoleNoop,
    memory: consoleNoop,
  };
}

class MockHistory {
  constructor() {
    this.items = [];
  }
  get length() {
    return this.items.length;
  }
  back() {
    this.go(-1);
  }
  forward() {
    this.go(1);
  }
  go(_value) {
    //
  }
  pushState(_state, _title, _url) {
    //
  }
  replaceState(_state, _title, _url) {
    //
  }
}

class MockIntersectionObserver {
  constructor() {
    /**/
  }
  disconnect() {
    /**/
  }
  observe() {
    /**/
  }
  takeRecords() {
    return [];
  }
  unobserve() {
    /**/
  }
}

class MockLocation {
  constructor() {
    this.ancestorOrigins = null;
    this.protocol = '';
    this.host = '';
    this.hostname = '';
    this.port = '';
    this.pathname = '';
    this.search = '';
    this.hash = '';
    this.username = '';
    this.password = '';
    this.origin = '';
    this._href = '';
  }
  get href() {
    return this._href;
  }
  set href(value) {
    const url = new URL(value, 'http://mockdoc.stenciljs.com');
    this._href = url.href;
    this.protocol = url.protocol;
    this.host = url.host;
    this.hostname = url.hostname;
    this.port = url.port;
    this.pathname = url.pathname;
    this.search = url.search;
    this.hash = url.hash;
    this.username = url.username;
    this.password = url.password;
    this.origin = url.origin;
  }
  assign(_url) {
    //
  }
  reload(_forcedReload) {
    //
  }
  replace(_url) {
    //
  }
  toString() {
    return this.href;
  }
}

class MockNavigator {
  constructor() {
    this.appCodeName = 'MockNavigator';
    this.appName = 'MockNavigator';
    this.appVersion = 'MockNavigator';
    this.platform = 'MockNavigator';
    this.userAgent = 'MockNavigator';
  }
}

/**
 * https://developer.mozilla.org/en-US/docs/Web/API/Performance
 */
class MockPerformance {
  constructor() {
    this.timeOrigin = Date.now();
  }
  addEventListener() {
    //
  }
  clearMarks() {
    //
  }
  clearMeasures() {
    //
  }
  clearResourceTimings() {
    //
  }
  dispatchEvent() {
    return true;
  }
  getEntries() {
    return [];
  }
  getEntriesByName() {
    return [];
  }
  getEntriesByType() {
    return [];
  }
  mark() {
    //
  }
  measure() {
    //
  }
  get navigation() {
    return {};
  }
  now() {
    return Date.now() - this.timeOrigin;
  }
  get onresourcetimingbufferfull() {
    return null;
  }
  removeEventListener() {
    //
  }
  setResourceTimingBufferSize() {
    //
  }
  get timing() {
    return {};
  }
  toJSON() {
    //
  }
}
function resetPerformance(perf) {
  if (perf != null) {
    try {
      perf.timeOrigin = Date.now();
    }
    catch (e) { }
  }
}

class MockStorage {
  constructor() {
    this.items = new Map();
  }
  key(_value) {
    //
  }
  getItem(key) {
    key = String(key);
    if (this.items.has(key)) {
      return this.items.get(key);
    }
    return null;
  }
  setItem(key, value) {
    if (value == null) {
      value = 'null';
    }
    this.items.set(String(key), String(value));
  }
  removeItem(key) {
    this.items.delete(String(key));
  }
  clear() {
    this.items.clear();
  }
}

const nativeClearInterval = clearInterval;
const nativeClearTimeout = clearTimeout;
const nativeSetInterval = setInterval;
const nativeSetTimeout = setTimeout;
const nativeURL = URL;
class MockWindow {
  constructor(html = null) {
    if (html !== false) {
      this.document = new MockDocument(html, this);
    }
    else {
      this.document = null;
    }
    this.performance = new MockPerformance();
    this.customElements = new MockCustomElementRegistry(this);
    this.console = createConsole();
    resetWindowDefaults(this);
    resetWindowDimensions(this);
  }
  addEventListener(type, handler) {
    addEventListener(this, type, handler);
  }
  alert(msg) {
    if (this.console) {
      this.console.debug(msg);
    }
    else {
      console.debug(msg);
    }
  }
  blur() {
    /**/
  }
  cancelAnimationFrame(id) {
    this.__clearTimeout(id);
  }
  cancelIdleCallback(id) {
    this.__clearTimeout(id);
  }
  get CharacterData() {
    if (this.__charDataCstr == null) {
      const ownerDocument = this.document;
      this.__charDataCstr = class extends MockNode {
        constructor() {
          super(ownerDocument, 0, 'test', '');
          throw new Error('Illegal constructor: cannot construct CharacterData');
        }
      };
    }
    return this.__charDataCstr;
  }
  set CharacterData(charDataCstr) {
    this.__charDataCstr = charDataCstr;
  }
  clearInterval(id) {
    this.__clearInterval(id);
  }
  clearTimeout(id) {
    this.__clearTimeout(id);
  }
  close() {
    resetWindow(this);
  }
  confirm() {
    return false;
  }
  get CSS() {
    return {
      supports: () => true,
    };
  }
  get Document() {
    if (this.__docCstr == null) {
      const win = this;
      this.__docCstr = class extends MockDocument {
        constructor() {
          super(false, win);
          throw new Error('Illegal constructor: cannot construct Document');
        }
      };
    }
    return this.__docCstr;
  }
  set Document(docCstr) {
    this.__docCstr = docCstr;
  }
  get DocumentFragment() {
    if (this.__docFragCstr == null) {
      const ownerDocument = this.document;
      this.__docFragCstr = class extends MockDocumentFragment {
        constructor() {
          super(ownerDocument);
          throw new Error('Illegal constructor: cannot construct DocumentFragment');
        }
      };
    }
    return this.__docFragCstr;
  }
  set DocumentFragment(docFragCstr) {
    this.__docFragCstr = docFragCstr;
  }
  get DocumentType() {
    if (this.__docTypeCstr == null) {
      const ownerDocument = this.document;
      this.__docTypeCstr = class extends MockNode {
        constructor() {
          super(ownerDocument, 0, 'test', '');
          throw new Error('Illegal constructor: cannot construct DocumentType');
        }
      };
    }
    return this.__docTypeCstr;
  }
  set DocumentType(docTypeCstr) {
    this.__docTypeCstr = docTypeCstr;
  }
  get DOMTokenList() {
    if (this.__domTokenListCstr == null) {
      this.__domTokenListCstr = class MockDOMTokenList {
      };
    }
    return this.__domTokenListCstr;
  }
  set DOMTokenList(domTokenListCstr) {
    this.__domTokenListCstr = domTokenListCstr;
  }
  dispatchEvent(ev) {
    return dispatchEvent(this, ev);
  }
  get Element() {
    if (this.__elementCstr == null) {
      const ownerDocument = this.document;
      this.__elementCstr = class extends MockElement {
        constructor() {
          super(ownerDocument, '');
          throw new Error('Illegal constructor: cannot construct Element');
        }
      };
    }
    return this.__elementCstr;
  }
  fetch(input, init) {
    if (typeof fetch === 'function') {
      return fetch(input, init);
    }
    throw new Error(`fetch() not implemented`);
  }
  focus() {
    /**/
  }
  getComputedStyle(_) {
    return {
      cssText: '',
      length: 0,
      parentRule: null,
      getPropertyPriority() {
        return null;
      },
      getPropertyValue() {
        return '';
      },
      item() {
        return null;
      },
      removeProperty() {
        return null;
      },
      setProperty() {
        return null;
      },
    };
  }
  get globalThis() {
    return this;
  }
  get history() {
    if (this.__history == null) {
      this.__history = new MockHistory();
    }
    return this.__history;
  }
  set history(hsty) {
    this.__history = hsty;
  }
  get JSON() {
    return JSON;
  }
  get HTMLElement() {
    if (this.__htmlElementCstr == null) {
      const ownerDocument = this.document;
      this.__htmlElementCstr = class extends MockHTMLElement {
        constructor() {
          super(ownerDocument, '');
          const observedAttributes = this.constructor.observedAttributes;
          if (Array.isArray(observedAttributes) && typeof this.attributeChangedCallback === 'function') {
            observedAttributes.forEach((attrName) => {
              const attrValue = this.getAttribute(attrName);
              if (attrValue != null) {
                this.attributeChangedCallback(attrName, null, attrValue);
              }
            });
          }
        }
      };
    }
    return this.__htmlElementCstr;
  }
  set HTMLElement(htmlElementCstr) {
    this.__htmlElementCstr = htmlElementCstr;
  }
  get IntersectionObserver() {
    return MockIntersectionObserver;
  }
  get localStorage() {
    if (this.__localStorage == null) {
      this.__localStorage = new MockStorage();
    }
    return this.__localStorage;
  }
  set localStorage(locStorage) {
    this.__localStorage = locStorage;
  }
  get location() {
    if (this.__location == null) {
      this.__location = new MockLocation();
    }
    return this.__location;
  }
  set location(val) {
    if (typeof val === 'string') {
      if (this.__location == null) {
        this.__location = new MockLocation();
      }
      this.__location.href = val;
    }
    else {
      this.__location = val;
    }
  }
  matchMedia() {
    return {
      matches: false,
    };
  }
  get Node() {
    if (this.__nodeCstr == null) {
      const ownerDocument = this.document;
      this.__nodeCstr = class extends MockNode {
        constructor() {
          super(ownerDocument, 0, 'test', '');
          throw new Error('Illegal constructor: cannot construct Node');
        }
      };
    }
    return this.__nodeCstr;
  }
  get NodeList() {
    if (this.__nodeListCstr == null) {
      const ownerDocument = this.document;
      this.__nodeListCstr = class extends MockNodeList {
        constructor() {
          super(ownerDocument, [], 0);
          throw new Error('Illegal constructor: cannot construct NodeList');
        }
      };
    }
    return this.__nodeListCstr;
  }
  get navigator() {
    if (this.__navigator == null) {
      this.__navigator = new MockNavigator();
    }
    return this.__navigator;
  }
  set navigator(nav) {
    this.__navigator = nav;
  }
  get parent() {
    return null;
  }
  prompt() {
    return '';
  }
  open() {
    return null;
  }
  get origin() {
    return this.location.origin;
  }
  removeEventListener(type, handler) {
    removeEventListener(this, type, handler);
  }
  requestAnimationFrame(callback) {
    return this.setTimeout(() => {
      callback(Date.now());
    }, 0);
  }
  requestIdleCallback(callback) {
    return this.setTimeout(() => {
      callback({
        didTimeout: false,
        timeRemaining: () => 0,
      });
    }, 0);
  }
  scroll(_x, _y) {
    /**/
  }
  scrollBy(_x, _y) {
    /**/
  }
  scrollTo(_x, _y) {
    /**/
  }
  get self() {
    return this;
  }
  get sessionStorage() {
    if (this.__sessionStorage == null) {
      this.__sessionStorage = new MockStorage();
    }
    return this.__sessionStorage;
  }
  set sessionStorage(locStorage) {
    this.__sessionStorage = locStorage;
  }
  setInterval(callback, ms, ...args) {
    if (this.__timeouts == null) {
      this.__timeouts = new Set();
    }
    ms = Math.min(ms, this.__maxTimeout);
    if (this.__allowInterval) {
      const intervalId = this.__setInterval(() => {
        if (this.__timeouts) {
          this.__timeouts.delete(intervalId);
          try {
            callback(...args);
          }
          catch (e) {
            if (this.console) {
              this.console.error(e);
            }
            else {
              console.error(e);
            }
          }
        }
      }, ms);
      if (this.__timeouts) {
        this.__timeouts.add(intervalId);
      }
      return intervalId;
    }
    const timeoutId = this.__setTimeout(() => {
      if (this.__timeouts) {
        this.__timeouts.delete(timeoutId);
        try {
          callback(...args);
        }
        catch (e) {
          if (this.console) {
            this.console.error(e);
          }
          else {
            console.error(e);
          }
        }
      }
    }, ms);
    if (this.__timeouts) {
      this.__timeouts.add(timeoutId);
    }
    return timeoutId;
  }
  setTimeout(callback, ms, ...args) {
    if (this.__timeouts == null) {
      this.__timeouts = new Set();
    }
    ms = Math.min(ms, this.__maxTimeout);
    const timeoutId = this.__setTimeout(() => {
      if (this.__timeouts) {
        this.__timeouts.delete(timeoutId);
        try {
          callback(...args);
        }
        catch (e) {
          if (this.console) {
            this.console.error(e);
          }
          else {
            console.error(e);
          }
        }
      }
    }, ms);
    if (this.__timeouts) {
      this.__timeouts.add(timeoutId);
    }
    return timeoutId;
  }
  get top() {
    return this;
  }
  get window() {
    return this;
  }
  onanimationstart() {
    /**/
  }
  onanimationend() {
    /**/
  }
  onanimationiteration() {
    /**/
  }
  onabort() {
    /**/
  }
  onauxclick() {
    /**/
  }
  onbeforecopy() {
    /**/
  }
  onbeforecut() {
    /**/
  }
  onbeforepaste() {
    /**/
  }
  onblur() {
    /**/
  }
  oncancel() {
    /**/
  }
  oncanplay() {
    /**/
  }
  oncanplaythrough() {
    /**/
  }
  onchange() {
    /**/
  }
  onclick() {
    /**/
  }
  onclose() {
    /**/
  }
  oncontextmenu() {
    /**/
  }
  oncopy() {
    /**/
  }
  oncuechange() {
    /**/
  }
  oncut() {
    /**/
  }
  ondblclick() {
    /**/
  }
  ondrag() {
    /**/
  }
  ondragend() {
    /**/
  }
  ondragenter() {
    /**/
  }
  ondragleave() {
    /**/
  }
  ondragover() {
    /**/
  }
  ondragstart() {
    /**/
  }
  ondrop() {
    /**/
  }
  ondurationchange() {
    /**/
  }
  onemptied() {
    /**/
  }
  onended() {
    /**/
  }
  onerror() {
    /**/
  }
  onfocus() {
    /**/
  }
  onfocusin() {
    /**/
  }
  onfocusout() {
    /**/
  }
  onformdata() {
    /**/
  }
  onfullscreenchange() {
    /**/
  }
  onfullscreenerror() {
    /**/
  }
  ongotpointercapture() {
    /**/
  }
  oninput() {
    /**/
  }
  oninvalid() {
    /**/
  }
  onkeydown() {
    /**/
  }
  onkeypress() {
    /**/
  }
  onkeyup() {
    /**/
  }
  onload() {
    /**/
  }
  onloadeddata() {
    /**/
  }
  onloadedmetadata() {
    /**/
  }
  onloadstart() {
    /**/
  }
  onlostpointercapture() {
    /**/
  }
  onmousedown() {
    /**/
  }
  onmouseenter() {
    /**/
  }
  onmouseleave() {
    /**/
  }
  onmousemove() {
    /**/
  }
  onmouseout() {
    /**/
  }
  onmouseover() {
    /**/
  }
  onmouseup() {
    /**/
  }
  onmousewheel() {
    /**/
  }
  onpaste() {
    /**/
  }
  onpause() {
    /**/
  }
  onplay() {
    /**/
  }
  onplaying() {
    /**/
  }
  onpointercancel() {
    /**/
  }
  onpointerdown() {
    /**/
  }
  onpointerenter() {
    /**/
  }
  onpointerleave() {
    /**/
  }
  onpointermove() {
    /**/
  }
  onpointerout() {
    /**/
  }
  onpointerover() {
    /**/
  }
  onpointerup() {
    /**/
  }
  onprogress() {
    /**/
  }
  onratechange() {
    /**/
  }
  onreset() {
    /**/
  }
  onresize() {
    /**/
  }
  onscroll() {
    /**/
  }
  onsearch() {
    /**/
  }
  onseeked() {
    /**/
  }
  onseeking() {
    /**/
  }
  onselect() {
    /**/
  }
  onselectstart() {
    /**/
  }
  onstalled() {
    /**/
  }
  onsubmit() {
    /**/
  }
  onsuspend() {
    /**/
  }
  ontimeupdate() {
    /**/
  }
  ontoggle() {
    /**/
  }
  onvolumechange() {
    /**/
  }
  onwaiting() {
    /**/
  }
  onwebkitfullscreenchange() {
    /**/
  }
  onwebkitfullscreenerror() {
    /**/
  }
  onwheel() {
    /**/
  }
}
addGlobalsToWindowPrototype(MockWindow.prototype);
function resetWindowDefaults(win) {
  win.__clearInterval = nativeClearInterval;
  win.__clearTimeout = nativeClearTimeout;
  win.__setInterval = nativeSetInterval;
  win.__setTimeout = nativeSetTimeout;
  win.__maxTimeout = 30000;
  win.__allowInterval = true;
  win.URL = nativeURL;
}
function cloneWindow(srcWin, opts = {}) {
  if (srcWin == null) {
    return null;
  }
  const clonedWin = new MockWindow(false);
  if (!opts.customElementProxy) {
    srcWin.customElements = null;
  }
  if (srcWin.document != null) {
    const clonedDoc = new MockDocument(false, clonedWin);
    clonedWin.document = clonedDoc;
    clonedDoc.documentElement = srcWin.document.documentElement.cloneNode(true);
  }
  else {
    clonedWin.document = new MockDocument(null, clonedWin);
  }
  return clonedWin;
}
function cloneDocument(srcDoc) {
  if (srcDoc == null) {
    return null;
  }
  const dstWin = cloneWindow(srcDoc.defaultView);
  return dstWin.document;
}
/**
 * Constrain setTimeout() to 1ms, but still async. Also
 * only allow setInterval() to fire once, also constrained to 1ms.
 */
function constrainTimeouts(win) {
  win.__allowInterval = false;
  win.__maxTimeout = 0;
}
function resetWindow(win) {
  if (win != null) {
    if (win.__timeouts) {
      win.__timeouts.forEach((timeoutId) => {
        nativeClearInterval(timeoutId);
        nativeClearTimeout(timeoutId);
      });
      win.__timeouts.clear();
    }
    if (win.customElements && win.customElements.clear) {
      win.customElements.clear();
    }
    resetDocument(win.document);
    resetPerformance(win.performance);
    for (const key in win) {
      if (win.hasOwnProperty(key) && key !== 'document' && key !== 'performance' && key !== 'customElements') {
        delete win[key];
      }
    }
    resetWindowDefaults(win);
    resetWindowDimensions(win);
    resetEventListeners(win);
    if (win.document != null) {
      try {
        win.document.defaultView = win;
      }
      catch (e) { }
    }
    // ensure we don't hold onto nodeFetch values
    win.fetch = null;
    win.Headers = null;
    win.Request = null;
    win.Response = null;
    win.FetchError = null;
  }
}
function resetWindowDimensions(win) {
  try {
    win.devicePixelRatio = 1;
    win.innerHeight = 768;
    win.innerWidth = 1366;
    win.pageXOffset = 0;
    win.pageYOffset = 0;
    win.screenLeft = 0;
    win.screenTop = 0;
    win.screenX = 0;
    win.screenY = 0;
    win.scrollX = 0;
    win.scrollY = 0;
    win.screen = {
      availHeight: win.innerHeight,
      availLeft: 0,
      availTop: 0,
      availWidth: win.innerWidth,
      colorDepth: 24,
      height: win.innerHeight,
      keepAwake: false,
      orientation: {
        angle: 0,
        type: 'portrait-primary',
      },
      pixelDepth: 24,
      width: win.innerWidth,
    };
  }
  catch (e) { }
}

class MockDocument extends MockHTMLElement {
  constructor(html = null, win = null) {
    super(null, null);
    this.nodeName = "#document" /* DOCUMENT_NODE */;
    this.nodeType = 9 /* DOCUMENT_NODE */;
    this.defaultView = win;
    this.cookie = '';
    this.referrer = '';
    this.appendChild(this.createDocumentTypeNode());
    if (typeof html === 'string') {
      const parsedDoc = parseDocumentUtil(this, html);
      const documentElement = parsedDoc.children.find((elm) => elm.nodeName === 'HTML');
      if (documentElement != null) {
        this.appendChild(documentElement);
        setOwnerDocument(documentElement, this);
      }
    }
    else if (html !== false) {
      const documentElement = new MockHTMLElement(this, 'html');
      this.appendChild(documentElement);
      documentElement.appendChild(new MockHTMLElement(this, 'head'));
      documentElement.appendChild(new MockHTMLElement(this, 'body'));
    }
  }
  get dir() {
    return this.documentElement.dir;
  }
  set dir(value) {
    this.documentElement.dir = value;
  }
  get location() {
    if (this.defaultView != null) {
      return this.defaultView.location;
    }
    return null;
  }
  set location(val) {
    if (this.defaultView != null) {
      this.defaultView.location = val;
    }
  }
  get baseURI() {
    const baseNode = this.head.childNodes.find((node) => node.nodeName === 'BASE');
    if (baseNode) {
      return baseNode.href;
    }
    return this.URL;
  }
  get URL() {
    return this.location.href;
  }
  get styleSheets() {
    return this.querySelectorAll('style');
  }
  get scripts() {
    return this.querySelectorAll('script');
  }
  get forms() {
    return this.querySelectorAll('form');
  }
  get images() {
    return this.querySelectorAll('img');
  }
  get scrollingElement() {
    return this.documentElement;
  }
  get documentElement() {
    for (let i = this.childNodes.length - 1; i >= 0; i--) {
      if (this.childNodes[i].nodeName === 'HTML') {
        return this.childNodes[i];
      }
    }
    const documentElement = new MockHTMLElement(this, 'html');
    this.appendChild(documentElement);
    return documentElement;
  }
  set documentElement(documentElement) {
    for (let i = this.childNodes.length - 1; i >= 0; i--) {
      if (this.childNodes[i].nodeType !== 10 /* DOCUMENT_TYPE_NODE */) {
        this.childNodes[i].remove();
      }
    }
    if (documentElement != null) {
      this.appendChild(documentElement);
      setOwnerDocument(documentElement, this);
    }
  }
  get head() {
    const documentElement = this.documentElement;
    for (let i = 0; i < documentElement.childNodes.length; i++) {
      if (documentElement.childNodes[i].nodeName === 'HEAD') {
        return documentElement.childNodes[i];
      }
    }
    const head = new MockHTMLElement(this, 'head');
    documentElement.insertBefore(head, documentElement.firstChild);
    return head;
  }
  set head(head) {
    const documentElement = this.documentElement;
    for (let i = documentElement.childNodes.length - 1; i >= 0; i--) {
      if (documentElement.childNodes[i].nodeName === 'HEAD') {
        documentElement.childNodes[i].remove();
      }
    }
    if (head != null) {
      documentElement.insertBefore(head, documentElement.firstChild);
      setOwnerDocument(head, this);
    }
  }
  get body() {
    const documentElement = this.documentElement;
    for (let i = documentElement.childNodes.length - 1; i >= 0; i--) {
      if (documentElement.childNodes[i].nodeName === 'BODY') {
        return documentElement.childNodes[i];
      }
    }
    const body = new MockHTMLElement(this, 'body');
    documentElement.appendChild(body);
    return body;
  }
  set body(body) {
    const documentElement = this.documentElement;
    for (let i = documentElement.childNodes.length - 1; i >= 0; i--) {
      if (documentElement.childNodes[i].nodeName === 'BODY') {
        documentElement.childNodes[i].remove();
      }
    }
    if (body != null) {
      documentElement.appendChild(body);
      setOwnerDocument(body, this);
    }
  }
  appendChild(newNode) {
    newNode.remove();
    newNode.parentNode = this;
    this.childNodes.push(newNode);
    return newNode;
  }
  createComment(data) {
    return new MockComment(this, data);
  }
  createAttribute(attrName) {
    return new MockAttr(attrName.toLowerCase(), '');
  }
  createAttributeNS(namespaceURI, attrName) {
    return new MockAttr(attrName, '', namespaceURI);
  }
  createElement(tagName) {
    if (tagName === "#document" /* DOCUMENT_NODE */) {
      const doc = new MockDocument(false);
      doc.nodeName = tagName;
      doc.parentNode = null;
      return doc;
    }
    return createElement(this, tagName);
  }
  createElementNS(namespaceURI, tagName) {
    const elmNs = createElementNS(this, namespaceURI, tagName);
    elmNs.namespaceURI = namespaceURI;
    return elmNs;
  }
  createTextNode(text) {
    return new MockTextNode(this, text);
  }
  createDocumentFragment() {
    return new MockDocumentFragment(this);
  }
  createDocumentTypeNode() {
    return new MockDocumentTypeNode(this);
  }
  getElementById(id) {
    return getElementById(this, id);
  }
  getElementsByName(elmName) {
    return getElementsByName(this, elmName.toLowerCase());
  }
  get title() {
    const title = this.head.childNodes.find((elm) => elm.nodeName === 'TITLE');
    if (title != null && typeof title.textContent === 'string') {
      return title.textContent.trim();
    }
    return '';
  }
  set title(value) {
    const head = this.head;
    let title = head.childNodes.find((elm) => elm.nodeName === 'TITLE');
    if (title == null) {
      title = this.createElement('title');
      head.appendChild(title);
    }
    title.textContent = value;
  }
}
function createDocument(html = null) {
  return new MockWindow(html).document;
}
function createFragment(html) {
  return parseHtmlToFragment(html, null);
}
function resetDocument(doc) {
  if (doc != null) {
    resetEventListeners(doc);
    const documentElement = doc.documentElement;
    if (documentElement != null) {
      resetElement(documentElement);
      for (let i = 0, ii = documentElement.childNodes.length; i < ii; i++) {
        const childNode = documentElement.childNodes[i];
        resetElement(childNode);
        childNode.childNodes.length = 0;
      }
    }
    for (const key in doc) {
      if (doc.hasOwnProperty(key) && !DOC_KEY_KEEPERS.has(key)) {
        delete doc[key];
      }
    }
    try {
      doc.nodeName = "#document" /* DOCUMENT_NODE */;
    }
    catch (e) { }
    try {
      doc.nodeType = 9 /* DOCUMENT_NODE */;
    }
    catch (e) { }
    try {
      doc.cookie = '';
    }
    catch (e) { }
    try {
      doc.referrer = '';
    }
    catch (e) { }
  }
}
const DOC_KEY_KEEPERS = new Set([
  'nodeName',
  'nodeType',
  'nodeValue',
  'ownerDocument',
  'parentNode',
  'childNodes',
  '_shadowRoot',
]);
function getElementById(elm, id) {
  const children = elm.children;
  for (let i = 0, ii = children.length; i < ii; i++) {
    const childElm = children[i];
    if (childElm.id === id) {
      return childElm;
    }
    const childElmFound = getElementById(childElm, id);
    if (childElmFound != null) {
      return childElmFound;
    }
  }
  return null;
}
function getElementsByName(elm, elmName, foundElms = []) {
  const children = elm.children;
  for (let i = 0, ii = children.length; i < ii; i++) {
    const childElm = children[i];
    if (childElm.name && childElm.name.toLowerCase() === elmName) {
      foundElms.push(childElm);
    }
    getElementsByName(childElm, elmName, foundElms);
  }
  return foundElms;
}
function setOwnerDocument(elm, ownerDocument) {
  for (let i = 0, ii = elm.childNodes.length; i < ii; i++) {
    elm.childNodes[i].ownerDocument = ownerDocument;
    if (elm.childNodes[i].nodeType === 1 /* ELEMENT_NODE */) {
      setOwnerDocument(elm.childNodes[i], ownerDocument);
    }
  }
}

function hydrateFactory($stencilWindow, $stencilHydrateOpts, $stencilHydrateResults, $stencilAfterHydrate, $stencilHydrateResolve) {
  var globalThis = $stencilWindow;
  var self = $stencilWindow;
  var top = $stencilWindow;
  var parent = $stencilWindow;

  var addEventListener = $stencilWindow.addEventListener.bind($stencilWindow);
  var alert = $stencilWindow.alert.bind($stencilWindow);
  var blur = $stencilWindow.blur.bind($stencilWindow);
  var cancelAnimationFrame = $stencilWindow.cancelAnimationFrame.bind($stencilWindow);
  var cancelIdleCallback = $stencilWindow.cancelIdleCallback.bind($stencilWindow);
  var clearInterval = $stencilWindow.clearInterval.bind($stencilWindow);
  var clearTimeout = $stencilWindow.clearTimeout.bind($stencilWindow);
  var close = () => {};
  var confirm = $stencilWindow.confirm.bind($stencilWindow);
  var dispatchEvent = $stencilWindow.dispatchEvent.bind($stencilWindow);
  var focus = $stencilWindow.focus.bind($stencilWindow);
  var getComputedStyle = $stencilWindow.getComputedStyle.bind($stencilWindow);
  var matchMedia = $stencilWindow.matchMedia.bind($stencilWindow);
  var open = $stencilWindow.open.bind($stencilWindow);
  var prompt = $stencilWindow.prompt.bind($stencilWindow);
  var removeEventListener = $stencilWindow.removeEventListener.bind($stencilWindow);
  var requestAnimationFrame = $stencilWindow.requestAnimationFrame.bind($stencilWindow);
  var requestIdleCallback = $stencilWindow.requestIdleCallback.bind($stencilWindow);
  var setInterval = $stencilWindow.setInterval.bind($stencilWindow);
  var setTimeout = $stencilWindow.setTimeout.bind($stencilWindow);

  var CharacterData = $stencilWindow.CharacterData;
  var CSS = $stencilWindow.CSS;
  var CustomEvent = $stencilWindow.CustomEvent;
  var Document = $stencilWindow.Document;
  var DocumentFragment = $stencilWindow.DocumentFragment;
  var DocumentType = $stencilWindow.DocumentType;
  var DOMTokenList = $stencilWindow.DOMTokenList;
  var Element = $stencilWindow.Element;
  var Event = $stencilWindow.Event;
  var HTMLAnchorElement = $stencilWindow.HTMLAnchorElement;
  var HTMLBaseElement = $stencilWindow.HTMLBaseElement;
  var HTMLButtonElement = $stencilWindow.HTMLButtonElement;
  var HTMLCanvasElement = $stencilWindow.HTMLCanvasElement;
  var HTMLElement = $stencilWindow.HTMLElement;
  var HTMLFormElement = $stencilWindow.HTMLFormElement;
  var HTMLImageElement = $stencilWindow.HTMLImageElement;
  var HTMLInputElement = $stencilWindow.HTMLInputElement;
  var HTMLLinkElement = $stencilWindow.HTMLLinkElement;
  var HTMLMetaElement = $stencilWindow.HTMLMetaElement;
  var HTMLScriptElement = $stencilWindow.HTMLScriptElement;
  var HTMLStyleElement = $stencilWindow.HTMLStyleElement;
  var HTMLTemplateElement = $stencilWindow.HTMLTemplateElement;
  var HTMLTitleElement = $stencilWindow.HTMLTitleElement;
  var IntersectionObserver = $stencilWindow.IntersectionObserver;
  var KeyboardEvent = $stencilWindow.KeyboardEvent;
  var MouseEvent = $stencilWindow.MouseEvent;
  var Node = $stencilWindow.Node;
  var NodeList = $stencilWindow.NodeList;
  var URL = $stencilWindow.URL;

  var console = $stencilWindow.console;
  var customElements = $stencilWindow.customElements;
  var history = $stencilWindow.history;
  var localStorage = $stencilWindow.localStorage;
  var location = $stencilWindow.location;
  var navigator = $stencilWindow.navigator;
  var performance = $stencilWindow.performance;
  var sessionStorage = $stencilWindow.sessionStorage;

  var devicePixelRatio = $stencilWindow.devicePixelRatio;
  var innerHeight = $stencilWindow.innerHeight;
  var innerWidth = $stencilWindow.innerWidth;
  var origin = $stencilWindow.origin;
  var pageXOffset = $stencilWindow.pageXOffset;
  var pageYOffset = $stencilWindow.pageYOffset;
  var screen = $stencilWindow.screen;
  var screenLeft = $stencilWindow.screenLeft;
  var screenTop = $stencilWindow.screenTop;
  var screenX = $stencilWindow.screenX;
  var screenY = $stencilWindow.screenY;
  var scrollX = $stencilWindow.scrollX;
  var scrollY = $stencilWindow.scrollY;
  var exports = {};

  var fetch, FetchError, Headers, Request, Response;

  if (typeof $stencilWindow.fetch === 'function') {
  fetch = $stencilWindow.fetch;
  } else {
  fetch = $stencilWindow.fetch = function() { throw new Error('fetch() is not implemented'); };
  }

  if (typeof $stencilWindow.FetchError === 'function') {
  FetchError = $stencilWindow.FetchError;
  } else {
  FetchError = $stencilWindow.FetchError = class FetchError { constructor() { throw new Error('FetchError is not implemented'); } };
  }

  if (typeof $stencilWindow.Headers === 'function') {
  Headers = $stencilWindow.Headers;
  } else {
  Headers = $stencilWindow.Headers = class Headers { constructor() { throw new Error('Headers is not implemented'); } };
  }

  if (typeof $stencilWindow.Request === 'function') {
  Request = $stencilWindow.Request;
  } else {
  Request = $stencilWindow.Request = class Request { constructor() { throw new Error('Request is not implemented'); } };
  }

  if (typeof $stencilWindow.Response === 'function') {
  Response = $stencilWindow.Response;
  } else {
  Response = $stencilWindow.Response = class Response { constructor() { throw new Error('Response is not implemented'); } };
  }

  function hydrateAppClosure($stencilWindow) {
  const window = $stencilWindow;
  const document = $stencilWindow.document;
  /*hydrateAppClosure start*/


function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () {
            return e[k];
          }
        });
      }
    });
  }
  n['default'] = e;
  return Object.freeze(n);
}

const NAMESPACE = 'scale-components';
const BUILD = /* scale-components */ { allRenderFn: true, appendChildSlotFix: false, asyncLoading: true, attachStyles: true, cloneNodeFix: false, cmpDidLoad: true, cmpDidRender: true, cmpDidUnload: false, cmpDidUpdate: true, cmpShouldUpdate: false, cmpWillLoad: true, cmpWillRender: true, cmpWillUpdate: true, connectedCallback: true, constructableCSS: false, cssAnnotations: true, cssVarShim: false, devTools: false, disconnectedCallback: true, dynamicImportShim: false, element: false, event: true, hasRenderFn: true, hostListener: true, hostListenerTarget: true, hostListenerTargetBody: false, hostListenerTargetDocument: true, hostListenerTargetParent: false, hostListenerTargetWindow: true, hotModuleReplacement: false, hydrateClientSide: true, hydrateServerSide: true, hydratedAttribute: false, hydratedClass: true, isDebug: false, isDev: false, isTesting: false, lazyLoad: true, lifecycle: true, lifecycleDOMEvents: false, member: true, method: true, mode: false, observeAttribute: true, profile: false, prop: true, propBoolean: true, propMutable: true, propNumber: true, propString: true, reflect: true, safari10: false, scoped: false, scriptDataOpts: false, shadowDelegatesFocus: false, shadowDom: true, shadowDomShim: true, slot: true, slotChildNodesFix: false, slotRelocation: true, state: true, style: true, svg: true, taskQueue: true, updatable: true, vdomAttribute: true, vdomClass: true, vdomFunctional: true, vdomKey: true, vdomListener: true, vdomPropOrAttr: true, vdomRef: true, vdomRender: true, vdomStyle: true, vdomText: true, vdomXlink: true, watchCallback: true };

/**
 * @license
 * Scale https://github.com/telekom/scale
 *
 * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
if (typeof window !== 'undefined' &&
  typeof window.Audio !== 'undefined' &&
  typeof require !== 'undefined') {
  // tslint:disable-next-line:no-var-requires
  require('web-animations-js');
}

function componentOnReady() {
 return getHostRef$1(this).$onReadyPromise$;
}

function forceUpdate() {}

function hydrateApp(e, t, o, n, s) {
 function l() {
  if (global.clearTimeout(p), i.clear(), r.clear(), !h) {
   h = !0;
   try {
    t.clientHydrateAnnotations && insertVdomAnnotations(e.document, t.staticComponents), 
    e.dispatchEvent(new e.Event("DOMContentLoaded")), e.document.createElement = c, 
    e.document.createElementNS = $;
   } catch (e) {
    renderCatchError(t, o, e);
   }
  }
  n(e, t, o, s);
 }
 function a(e) {
  renderCatchError(t, o, e), l();
 }
 const r = new Set, i = new Set, d = new Set, c = e.document.createElement, $ = e.document.createElementNS, m = Promise.resolve();
 let p, h = !1;
 try {
  function u() {
   return g(this);
  }
  function f(e) {
   if (isValidComponent(e, t) && !getHostRef$1(e)) {
    const t = loadModule$1({
     $tagName$: e.nodeName.toLowerCase(),
     $flags$: null
    });
    null != t && null != t.cmpMeta && (i.add(e), e.connectedCallback = u, registerHost$1(e, t.cmpMeta), 
    function o(e, t) {
     if ("function" != typeof e.componentOnReady && (e.componentOnReady = componentOnReady), 
     "function" != typeof e.forceUpdate && (e.forceUpdate = forceUpdate), 1 & t.$flags$ && (e.shadowRoot = e), 
     null != t.$members$) {
      const o = getHostRef$1(e);
      Object.entries(t.$members$).forEach((([n, s]) => {
       const l = s[0];
       if (31 & l) {
        const a = s[1] || n, r = e.getAttribute(a);
        if (null != r) {
         const e = parsePropertyValue$1(r, l);
         o.$instanceValues$.set(n, e);
        }
        const i = e[n];
        void 0 !== i && (o.$instanceValues$.set(n, i), delete e[n]), Object.defineProperty(e, n, {
         get() {
          return getValue$1(this, n);
         },
         set(e) {
          setValue$1(this, n, e, t);
         },
         configurable: !0,
         enumerable: !0
        });
       } else 64 & l && Object.defineProperty(e, n, {
        value() {
         const e = getHostRef$1(this), t = arguments;
         return e.$onInstancePromise$.then((() => e.$lazyInstance$[n].apply(e.$lazyInstance$, t))).catch(consoleError$1);
        }
       });
      }));
     }
    }(e, t.cmpMeta));
   }
  }
  function g(n) {
   return i.delete(n), isValidComponent(n, t) && o.hydratedCount < t.maxHydrateCount && !r.has(n) && shouldHydrate(n) ? (r.add(n), 
   async function s(e, t, o, n, l) {
    o = o.toLowerCase();
    const a = loadModule$1({
     $tagName$: o,
     $flags$: null
    });
    if (null != a && null != a.cmpMeta) {
     l.add(n);
     try {
      connectedCallback$1(n), await n.componentOnReady(), t.hydratedCount++;
      const e = getHostRef$1(n), s = e.$modeName$ ? e.$modeName$ : "$";
      t.components.some((e => e.tag === o && e.mode === s)) || t.components.push({
       tag: o,
       mode: s,
       count: 0,
       depth: -1
      });
     } catch (t) {
      e.console.error(t);
     }
     l.delete(n);
    }
   }(e, o, n.nodeName, n, d)) : m;
  }
  e.document.createElement = function t(o) {
   const n = c.call(e.document, o);
   return f(n), n;
  }, e.document.createElementNS = function t(o, n) {
   const s = $.call(e.document, o, n);
   return f(s), s;
  }, p = global.setTimeout((function L() {
   a(`Hydrate exceeded timeout${function e(t) {
    return Array.from(t).map(waitingOnElementMsg);
   }(d)}`);
  }), t.timeout), plt$1.$resourcesUrl$ = new URL(t.resourcesUrl || "./", doc$1.baseURI).href, 
  function e(t) {
   if (null != t && 1 === t.nodeType) {
    f(t);
    const o = t.children;
    for (let t = 0, n = o.length; t < n; t++) e(o[t]);
   }
  }(e.document.body), function e() {
   const t = Array.from(i).filter((e => e.parentElement));
   return t.length > 0 ? Promise.all(t.map(g)).then(e) : m;
  }().then(l).catch(a);
 } catch (e) {
  a(e);
 }
}

function isValidComponent(e, t) {
 if (null != e && 1 === e.nodeType) {
  const o = e.nodeName;
  if ("string" == typeof o && o.includes("-")) return !t.excludeComponents.includes(o.toLowerCase());
 }
 return !1;
}

function shouldHydrate(e) {
 if (9 === e.nodeType) return !0;
 if (NO_HYDRATE_TAGS.has(e.nodeName)) return !1;
 if (e.hasAttribute("no-prerender")) return !1;
 const t = e.parentNode;
 return null == t || shouldHydrate(t);
}

function renderCatchError(e, t, o) {
 const n = {
  level: "error",
  type: "build",
  header: "Hydrate Error",
  messageText: "",
  relFilePath: null,
  absFilePath: null,
  lines: []
 };
 if (e.url) try {
  const t = new URL(e.url);
  "/" !== t.pathname && (n.header += ": " + t.pathname);
 } catch (e) {}
 null != o && (null != o.stack ? n.messageText = o.stack.toString() : null != o.message ? n.messageText = o.message.toString() : n.messageText = o.toString()), 
 t.diagnostics.push(n);
}

function printTag(e) {
 let t = `<${e.nodeName.toLowerCase()}`;
 if (Array.isArray(e.attributes)) for (let o = 0; o < e.attributes.length; o++) {
  const n = e.attributes[o];
  t += ` ${n.name}`, "" !== n.value && (t += `="${n.value}"`);
 }
 return t += ">", t;
}

function waitingOnElementMsg(e) {
 let t = "";
 if (e) {
  const o = [];
  t = " - waiting on:";
  let n = e;
  for (;n && 9 !== n.nodeType && "BODY" !== n.nodeName; ) o.unshift(printTag(n)), 
  n = n.parentElement;
  let s = "";
  for (const e of o) s += "  ", t += `\n${s}${e}`;
 }
 return t;
}

const addHostEventListeners$1 = (e, t, o, n) => {
 o && (o.map((([o, n, s]) => {
  const l = getHostListenerTarget$1(e, o) , a = hostListenerProxy$1(t, s), r = hostListenerOpts$1(o);
  plt$1.ael(l, n, a, r), (t.$rmListeners$ = t.$rmListeners$ || []).push((() => plt$1.rel(l, n, a, r)));
 })));
}, hostListenerProxy$1 = (e, t) => o => {
 try {
  256 & e.$flags$ ? e.$lazyInstance$[t](o) : (e.$queuedListeners$ = e.$queuedListeners$ || []).push([ t, o ]) ;
 } catch (e) {
  consoleError$1(e);
 }
}, getHostListenerTarget$1 = (e, t) => 4 & t ? doc$1 : 8 & t ? win$1 : e, hostListenerOpts$1 = e => 0 != (2 & e), XLINK_NS$1 = "http://www.w3.org/1999/xlink";

const createTime$1 = (e, t = "") => {
 return () => {};
}, rootAppliedStyles$1 = new WeakMap, registerStyle$1 = (e, t, o) => {
 let n = styles$1.get(e);
 n = t, styles$1.set(e, n);
}, addStyle$1 = (e, t, o, n) => {
 let s = getScopeId$1(t), l = styles$1.get(s);
 if (e = 11 === e.nodeType ? e : doc$1, l) if ("string" == typeof l) {
  e = e.head || e;
  let o, a = rootAppliedStyles$1.get(e);
  if (a || rootAppliedStyles$1.set(e, a = new Set), !a.has(s)) {
   if (e.host && (o = e.querySelector(`[sty-id="${s}"]`))) o.innerHTML = l; else {
    o = doc$1.createElement("style"), o.innerHTML = l;
    o.setAttribute("sty-id", s), 
    e.insertBefore(o, e.querySelector("link"));
   }
   a && a.add(s);
  }
 }
 return s;
}, attachStyles$1 = e => {
 const t = e.$cmpMeta$, o = e.$hostElement$, n = t.$flags$, s = createTime$1("attachStyles", t.$tagName$), l = addStyle$1(o.getRootNode(), t);
 10 & n && (o["s-sc"] = l, 
 o.classList.add(l + "-h"), BUILD.scoped  ), 
 s();
}, getScopeId$1 = (e, t) => "sc-" + (e.$tagName$), EMPTY_OBJ$1 = {}, isComplexType$1 = e => "object" == (e = typeof e) || "function" === e, isPromise = e => !!e && ("object" == typeof e || "function" == typeof e) && "function" == typeof e.then, h$1 = (e, t, ...o) => {
 let n = null, s = null, l = null, a = !1, r = !1, i = [];
 const d = t => {
  for (let o = 0; o < t.length; o++) n = t[o], Array.isArray(n) ? d(n) : null != n && "boolean" != typeof n && ((a = "function" != typeof e && !isComplexType$1(n)) ? n = String(n) : BUILD.isDev  , 
  a && r ? i[i.length - 1].$text$ += n : i.push(a ? newVNode$1(null, n) : n), r = a);
 };
 if (d(o), t && (t.key && (s = t.key), 
 t.name && (l = t.name), BUILD.vdomClass)) {
  const e = t.className || t.class;
  e && (t.class = "object" != typeof e ? e : Object.keys(e).filter((t => e[t])).join(" "));
 }
 if ("function" == typeof e) return e(null === t ? {} : t, i, vdomFnUtils$1);
 const c = newVNode$1(e, null);
 return c.$attrs$ = t, i.length > 0 && (c.$children$ = i), (c.$key$ = s), 
 (c.$name$ = l), c;
}, newVNode$1 = (e, t) => {
 const o = {
  $flags$: 0,
  $tag$: e,
  $text$: t,
  $elm$: null,
  $children$: null
 };
 return (o.$attrs$ = null), (o.$key$ = null), 
 (o.$name$ = null), o;
}, Host$1 = {}, isHost$1 = e => e && e.$tag$ === Host$1, vdomFnUtils$1 = {
 forEach: (e, t) => e.map(convertToPublic$1).forEach(t),
 map: (e, t) => e.map(convertToPublic$1).map(t).map(convertToPrivate$1)
}, convertToPublic$1 = e => ({
 vattrs: e.$attrs$,
 vchildren: e.$children$,
 vkey: e.$key$,
 vname: e.$name$,
 vtag: e.$tag$,
 vtext: e.$text$
}), convertToPrivate$1 = e => {
 if ("function" == typeof e.vtag) {
  const t = {
   ...e.vattrs
  };
  return e.vkey && (t.key = e.vkey), e.vname && (t.name = e.vname), h$1(e.vtag, t, ...e.vchildren || []);
 }
 const t = newVNode$1(e.vtag, e.vtext);
 return t.$attrs$ = e.vattrs, t.$children$ = e.vchildren, t.$key$ = e.vkey, t.$name$ = e.vname, 
 t;
}, setAccessor$1 = (e, t, o, n, s, l) => {
 if (o !== n) {
  let a = isMemberInElement$1(e, t), r = t.toLowerCase();
  if ("class" === t) {
   const t = e.classList, s = parseClassList$1(o), l = parseClassList$1(n);
   t.remove(...s.filter((e => e && !l.includes(e)))), t.add(...l.filter((e => e && !s.includes(e))));
  } else if ("style" === t) {
   for (const t in o) n && null != n[t] || (e.style[t] = "");
   for (const t in n) o && n[t] === o[t] || (e.style[t] = n[t]);
  } else if ("key" === t) ; else if ("ref" === t) n && n(e); else if ((a ) || "o" !== t[0] || "n" !== t[1]) {
   {
    const i = isComplexType$1(n);
    if ((a || i && null !== n) && !s) try {
     if (e.tagName.includes("-")) e[t] = n; else {
      let s = null == n ? "" : n;
      "list" === t ? a = !1 : null != o && e[t] == s || (e[t] = s);
     }
    } catch (e) {}
    let d = !1;
    r !== (r = r.replace(/^xlink\:?/, "")) && (t = r, d = !0), null == n || !1 === n ? !1 === n && "" !== e.getAttribute(t) || (d ? e.removeAttributeNS(XLINK_NS$1, t) : e.removeAttribute(t)) : (!a || 4 & l || s) && !i && (n = !0 === n ? "" : n, 
    d ? e.setAttributeNS(XLINK_NS$1, t, n) : e.setAttribute(t, n));
   }
  } else t = "-" === t[2] ? t.slice(3) : isMemberInElement$1(win$1, r) ? r.slice(2) : r[2] + t.slice(3), 
  o && plt$1.rel(e, t, o, !1), n && plt$1.ael(e, t, n, !1);
 }
}, parseClassListRegex$1 = /\s/, parseClassList$1 = e => e ? e.split(parseClassListRegex$1) : [], updateElement$1 = (e, t, o, n) => {
 const s = 11 === t.$elm$.nodeType && t.$elm$.host ? t.$elm$.host : t.$elm$, l = e && e.$attrs$ || EMPTY_OBJ$1, a = t.$attrs$ || EMPTY_OBJ$1;
 for (n in l) n in a || setAccessor$1(s, n, l[n], void 0, o, t.$flags$);
 for (n in a) setAccessor$1(s, n, l[n], a[n], o, t.$flags$);
};

let scopeId$1, contentRef$1, hostTagName$1, useNativeShadowDom$1 = !1, checkSlotFallbackVisibility$1 = !1, checkSlotRelocate$1 = !1, isSvgMode$1 = !1;

const createElm$1 = (e, t, o, n) => {
 let s, l, a, r = t.$children$[o], i = 0;
 if (!useNativeShadowDom$1 && (checkSlotRelocate$1 = !0, "slot" === r.$tag$ && (scopeId$1 && n.classList.add(scopeId$1 + "-s"), 
 r.$flags$ |= r.$children$ ? 2 : 1)), null !== r.$text$) s = r.$elm$ = doc$1.createTextNode(r.$text$); else if (1 & r.$flags$) s = r.$elm$ = slotReferenceDebugNode$1(r) ; else {
  if (!isSvgMode$1 && (isSvgMode$1 = "svg" === r.$tag$), s = r.$elm$ = doc$1.createElementNS(isSvgMode$1 ? "http://www.w3.org/2000/svg" : "http://www.w3.org/1999/xhtml", 2 & r.$flags$ ? "slot-fb" : r.$tag$) , 
  isSvgMode$1 && "foreignObject" === r.$tag$ && (isSvgMode$1 = !1), updateElement$1(null, r, isSvgMode$1), 
  null != scopeId$1 && s["s-si"] !== scopeId$1 && s.classList.add(s["s-si"] = scopeId$1), 
  r.$children$) for (i = 0; i < r.$children$.length; ++i) l = createElm$1(e, r, i, s), 
  l && s.appendChild(l);
  ("svg" === r.$tag$ ? isSvgMode$1 = !1 : "foreignObject" === s.tagName && (isSvgMode$1 = !0));
 }
 return (s["s-hn"] = hostTagName$1, 3 & r.$flags$ && (s["s-sr"] = !0, 
 s["s-cr"] = contentRef$1, s["s-sn"] = r.$name$ || "", a = e && e.$children$ && e.$children$[o], 
 a && a.$tag$ === r.$tag$ && e.$elm$ && putBackInOriginalLocation$1(e.$elm$, !1))), 
 s;
}, putBackInOriginalLocation$1 = (e, t) => {
 plt$1.$flags$ |= 1;
 const o = e.childNodes;
 for (let e = o.length - 1; e >= 0; e--) {
  const n = o[e];
  n["s-hn"] !== hostTagName$1 && n["s-ol"] && (parentReferenceNode$1(n).insertBefore(n, referenceNode$1(n)), 
  n["s-ol"].remove(), n["s-ol"] = void 0, checkSlotRelocate$1 = !0), t && putBackInOriginalLocation$1(n, t);
 }
 plt$1.$flags$ &= -2;
}, addVnodes$1 = (e, t, o, n, s, l) => {
 let a, r = e["s-cr"] && e["s-cr"].parentNode || e;
 for (r.shadowRoot && r.tagName === hostTagName$1 && (r = r.shadowRoot); s <= l; ++s) n[s] && (a = createElm$1(null, o, s, e), 
 a && (n[s].$elm$ = a, r.insertBefore(a, referenceNode$1(t) )));
}, removeVnodes$1 = (e, t, o, n, s) => {
 for (;t <= o; ++t) (n = e[t]) && (s = n.$elm$, callNodeRefs$1(n), (checkSlotFallbackVisibility$1 = !0, 
 s["s-ol"] ? s["s-ol"].remove() : putBackInOriginalLocation$1(s, !0)), s.remove());
}, isSameVnode$1 = (e, t) => e.$tag$ === t.$tag$ && ("slot" === e.$tag$ ? e.$name$ === t.$name$ : e.$key$ === t.$key$), referenceNode$1 = e => e && e["s-ol"] || e, parentReferenceNode$1 = e => (e["s-ol"] ? e["s-ol"] : e).parentNode, patch$1 = (e, t) => {
 const o = t.$elm$ = e.$elm$, n = e.$children$, s = t.$children$, l = t.$tag$, a = t.$text$;
 let r;
 null !== a ? (r = o["s-cr"]) ? r.parentNode.textContent = a : e.$text$ !== a && (o.data = a) : ((isSvgMode$1 = "svg" === l || "foreignObject" !== l && isSvgMode$1), 
 ("slot" === l || updateElement$1(e, t, isSvgMode$1)), 
 null !== n && null !== s ? ((e, t, o, n) => {
  let s, l, a = 0, r = 0, i = 0, d = 0, c = t.length - 1, $ = t[0], m = t[c], p = n.length - 1, h = n[0], u = n[p];
  for (;a <= c && r <= p; ) if (null == $) $ = t[++a]; else if (null == m) m = t[--c]; else if (null == h) h = n[++r]; else if (null == u) u = n[--p]; else if (isSameVnode$1($, h)) patch$1($, h), 
  $ = t[++a], h = n[++r]; else if (isSameVnode$1(m, u)) patch$1(m, u), m = t[--c], u = n[--p]; else if (isSameVnode$1($, u)) "slot" !== $.$tag$ && "slot" !== u.$tag$ || putBackInOriginalLocation$1($.$elm$.parentNode, !1), 
  patch$1($, u), e.insertBefore($.$elm$, m.$elm$.nextSibling), $ = t[++a], u = n[--p]; else if (isSameVnode$1(m, h)) "slot" !== $.$tag$ && "slot" !== u.$tag$ || putBackInOriginalLocation$1(m.$elm$.parentNode, !1), 
  patch$1(m, h), e.insertBefore(m.$elm$, $.$elm$), m = t[--c], h = n[++r]; else {
   if (i = -1, BUILD.vdomKey) for (d = a; d <= c; ++d) if (t[d] && null !== t[d].$key$ && t[d].$key$ === h.$key$) {
    i = d;
    break;
   }
   i >= 0 ? (l = t[i], l.$tag$ !== h.$tag$ ? s = createElm$1(t && t[r], o, i, e) : (patch$1(l, h), 
   t[i] = void 0, s = l.$elm$), h = n[++r]) : (s = createElm$1(t && t[r], o, r, e), h = n[++r]), 
   s && (parentReferenceNode$1($.$elm$).insertBefore(s, referenceNode$1($.$elm$)) );
  }
  a > c ? addVnodes$1(e, null == n[p + 1] ? null : n[p + 1].$elm$, o, n, r, p) : r > p && removeVnodes$1(t, a, c);
 })(o, n, t, s) : null !== s ? (null !== e.$text$ && (o.textContent = ""), 
 addVnodes$1(o, null, t, s, 0, s.length - 1)) : null !== n && removeVnodes$1(n, 0, n.length - 1), 
 isSvgMode$1 && "svg" === l && (isSvgMode$1 = !1));
}, updateFallbackSlotVisibility$1 = e => {
 let t, o, n, s, l, a, r = e.childNodes;
 for (o = 0, n = r.length; o < n; o++) if (t = r[o], 1 === t.nodeType) {
  if (t["s-sr"]) for (l = t["s-sn"], t.hidden = !1, s = 0; s < n; s++) if (a = r[s].nodeType, 
  r[s]["s-hn"] !== t["s-hn"] || "" !== l) {
   if (1 === a && l === r[s].getAttribute("slot")) {
    t.hidden = !0;
    break;
   }
  } else if (1 === a || 3 === a && "" !== r[s].textContent.trim()) {
   t.hidden = !0;
   break;
  }
  updateFallbackSlotVisibility$1(t);
 }
}, relocateNodes$1 = [], relocateSlotContent$1 = e => {
 let t, o, n, s, l, a, r = 0, i = e.childNodes, d = i.length;
 for (;r < d; r++) {
  if (t = i[r], t["s-sr"] && (o = t["s-cr"]) && o.parentNode) for (n = o.parentNode.childNodes, 
  s = t["s-sn"], a = n.length - 1; a >= 0; a--) o = n[a], o["s-cn"] || o["s-nr"] || o["s-hn"] === t["s-hn"] || (isNodeLocatedInSlot$1(o, s) ? (l = relocateNodes$1.find((e => e.$nodeToRelocate$ === o)), 
  checkSlotFallbackVisibility$1 = !0, o["s-sn"] = o["s-sn"] || s, l ? l.$slotRefNode$ = t : relocateNodes$1.push({
   $slotRefNode$: t,
   $nodeToRelocate$: o
  }), o["s-sr"] && relocateNodes$1.map((e => {
   isNodeLocatedInSlot$1(e.$nodeToRelocate$, o["s-sn"]) && (l = relocateNodes$1.find((e => e.$nodeToRelocate$ === o)), 
   l && !e.$slotRefNode$ && (e.$slotRefNode$ = l.$slotRefNode$));
  }))) : relocateNodes$1.some((e => e.$nodeToRelocate$ === o)) || relocateNodes$1.push({
   $nodeToRelocate$: o
  }));
  1 === t.nodeType && relocateSlotContent$1(t);
 }
}, isNodeLocatedInSlot$1 = (e, t) => 1 === e.nodeType ? null === e.getAttribute("slot") && "" === t || e.getAttribute("slot") === t : e["s-sn"] === t || "" === t, callNodeRefs$1 = e => {
 (e.$attrs$ && e.$attrs$.ref && e.$attrs$.ref(null), e.$children$ && e.$children$.map(callNodeRefs$1));
}, renderVdom$1 = (e, t) => {
 const o = e.$hostElement$, n = e.$cmpMeta$, s = e.$vnode$ || newVNode$1(null, null), l = isHost$1(t) ? t : h$1(null, null, t);
 if (hostTagName$1 = o.tagName, BUILD.isDev  ) ;
 if (n.$attrsToReflect$ && (l.$attrs$ = l.$attrs$ || {}, n.$attrsToReflect$.map((([e, t]) => l.$attrs$[t] = o[e]))), 
 l.$tag$ = null, l.$flags$ |= 4, e.$vnode$ = l, l.$elm$ = s.$elm$ = o.shadowRoot || o, 
 (scopeId$1 = o["s-sc"]), (contentRef$1 = o["s-cr"], 
 useNativeShadowDom$1 = supportsShadow$1, checkSlotFallbackVisibility$1 = !1), patch$1(s, l), 
 BUILD.slotRelocation) {
  if (plt$1.$flags$ |= 1, checkSlotRelocate$1) {
   let e, t, o, n, s, a;
   relocateSlotContent$1(l.$elm$);
   let r = 0;
   for (;r < relocateNodes$1.length; r++) e = relocateNodes$1[r], t = e.$nodeToRelocate$, 
   t["s-ol"] || (o = originalLocationDebugNode$1(t) , 
   o["s-nr"] = t, t.parentNode.insertBefore(t["s-ol"] = o, t));
   for (r = 0; r < relocateNodes$1.length; r++) if (e = relocateNodes$1[r], t = e.$nodeToRelocate$, 
   e.$slotRefNode$) {
    for (n = e.$slotRefNode$.parentNode, s = e.$slotRefNode$.nextSibling, o = t["s-ol"]; o = o.previousSibling; ) if (a = o["s-nr"], 
    a && a["s-sn"] === t["s-sn"] && n === a.parentNode && (a = a.nextSibling, !a || !a["s-nr"])) {
     s = a;
     break;
    }
    (!s && n !== t.parentNode || t.nextSibling !== s) && t !== s && (!t["s-hn"] && t["s-ol"] && (t["s-hn"] = t["s-ol"].parentNode.nodeName), 
    n.insertBefore(t, s));
   } else 1 === t.nodeType && (t.hidden = !0);
  }
  checkSlotFallbackVisibility$1 && updateFallbackSlotVisibility$1(l.$elm$), plt$1.$flags$ &= -2, 
  relocateNodes$1.length = 0;
 }
}, slotReferenceDebugNode$1 = e => doc$1.createComment(`<slot${e.$name$ ? ' name="' + e.$name$ + '"' : ""}> (host=${hostTagName$1.toLowerCase()})`), originalLocationDebugNode$1 = e => doc$1.createComment("org-location for " + (e.localName ? `<${e.localName}> (host=${e["s-hn"]})` : `[${e.textContent}]`)), getElement$1 = e => getHostRef$1(e).$hostElement$ , createEvent$1 = (e, t, o) => {
 const n = getElement$1(e);
 return {
  emit: e => (emitEvent$2(n, t, {
   bubbles: !!(4 & o),
   composed: !!(2 & o),
   cancelable: !!(1 & o),
   detail: e
  }))
 };
}, emitEvent$2 = (e, t, o) => {
 const n = plt$1.ce(t, o);
 return e.dispatchEvent(n), n;
}, attachToAncestor$1 = (e, t) => {
 t && !e.$onRenderResolve$ && t["s-p"] && t["s-p"].push(new Promise((t => e.$onRenderResolve$ = t)));
}, scheduleUpdate$1 = (e, t) => {
 if ((e.$flags$ |= 16), 4 & e.$flags$) return void (e.$flags$ |= 512);
 attachToAncestor$1(e, e.$ancestorComponent$);
 const o = () => dispatchHooks$1(e, t);
 return writeTask$1(o) ;
}, dispatchHooks$1 = (e, t) => {
 const n = createTime$1("scheduleUpdate", e.$cmpMeta$.$tagName$), s = e.$lazyInstance$ ;
 let l;
 return t ? ((e.$flags$ |= 256, e.$queuedListeners$ && (e.$queuedListeners$.map((([e, t]) => safeCall$1(s, e, t))), 
 e.$queuedListeners$ = null)), (l = safeCall$1(s, "componentWillLoad"))) : ((l = safeCall$1(s, "componentWillUpdate"))), (l = then$1(l, (() => safeCall$1(s, "componentWillRender")))), 
 n(), then$1(l, (() => updateComponent$1(e, s, t)));
}, updateComponent$1 = async (e, t, o) => {
 const n = e.$hostElement$, s = createTime$1("update", e.$cmpMeta$.$tagName$), l = n["s-rc"];
 o && attachStyles$1(e);
 const a = createTime$1("render", e.$cmpMeta$.$tagName$);
 if (await callRender$1(e, t) , 
 BUILD.hydrateServerSide) try {
  serverSideConnected$1(n), o && (1 & e.$cmpMeta$.$flags$ ? n["s-en"] = "" : 2 & e.$cmpMeta$.$flags$ && (n["s-en"] = "c"));
 } catch (e) {
  consoleError$1(e, n);
 }
 if (l && (l.map((e => e())), n["s-rc"] = void 0), a(), s(), 
 BUILD.asyncLoading) {
  const t = n["s-p"], o = () => postUpdateComponent$1(e);
  0 === t.length ? o() : (Promise.all(t).then(o), e.$flags$ |= 4, t.length = 0);
 }
};

const callRender$1 = (e, t, o) => {
 try {
  if (t = t.render(), (e.$flags$ &= -17), 
  (e.$flags$ |= 2), BUILD.hasRenderFn ) {
   return Promise.resolve(t).then((t => renderVdom$1(e, t)));
  }
 } catch (t) {
  consoleError$1(t, e.$hostElement$);
 }
 return null;
}, postUpdateComponent$1 = e => {
 const t = e.$cmpMeta$.$tagName$, o = e.$hostElement$, n = createTime$1("postUpdate", t), s = e.$lazyInstance$ , l = e.$ancestorComponent$;
 (safeCall$1(s, "componentDidRender"), 
 BUILD.isDev ), 64 & e.$flags$ ? ((safeCall$1(s, "componentDidUpdate"), 
 BUILD.isDev ), n()) : (e.$flags$ |= 64, addHydratedFlag$1(o), 
 (safeCall$1(s, "componentDidLoad"), 
 BUILD.isDev ), n(), (e.$onReadyResolve$(o), l || appDidLoad$1())), e.$onInstanceResolve$(o), (e.$onRenderResolve$ && (e.$onRenderResolve$(), 
 e.$onRenderResolve$ = void 0), 512 & e.$flags$ && nextTick$1((() => scheduleUpdate$1(e, !1))), 
 e.$flags$ &= -517);
}, appDidLoad$1 = e => {
 addHydratedFlag$1(doc$1.documentElement), nextTick$1((() => emitEvent$2(win$1, "appload", {
  detail: {
   namespace: NAMESPACE
  }
 }))), BUILD.profile  ;
}, safeCall$1 = (e, t, o) => {
 if (e && e[t]) try {
  return e[t](o);
 } catch (e) {
  consoleError$1(e);
 }
}, then$1 = (e, t) => e && e.then ? e.then(t) : t(), addHydratedFlag$1 = e => e.classList.add("hydrated") , serverSideConnected$1 = e => {
 const t = e.children;
 if (null != t) for (let e = 0, o = t.length; e < o; e++) {
  const o = t[e];
  "function" == typeof o.connectedCallback && o.connectedCallback(), serverSideConnected$1(o);
 }
}, clientHydrate$1 = (e, t, o, n, s, l, a) => {
 let r, i, d, c;
 if (1 === l.nodeType) {
  for (r = l.getAttribute("c-id"), r && (i = r.split("."), i[0] !== a && "0" !== i[0] || (d = {
   $flags$: 0,
   $hostId$: i[0],
   $nodeId$: i[1],
   $depth$: i[2],
   $index$: i[3],
   $tag$: l.tagName.toLowerCase(),
   $elm$: l,
   $attrs$: null,
   $children$: null,
   $key$: null,
   $name$: null,
   $text$: null
  }, t.push(d), l.removeAttribute("c-id"), e.$children$ || (e.$children$ = []), e.$children$[d.$index$] = d, 
  e = d, n && "0" === d.$depth$ && (n[d.$index$] = d.$elm$))), c = l.childNodes.length - 1; c >= 0; c--) clientHydrate$1(e, t, o, n, s, l.childNodes[c], a);
  if (l.shadowRoot) for (c = l.shadowRoot.childNodes.length - 1; c >= 0; c--) clientHydrate$1(e, t, o, n, s, l.shadowRoot.childNodes[c], a);
 } else if (8 === l.nodeType) i = l.nodeValue.split("."), i[1] !== a && "0" !== i[1] || (r = i[0], 
 d = {
  $flags$: 0,
  $hostId$: i[1],
  $nodeId$: i[2],
  $depth$: i[3],
  $index$: i[4],
  $elm$: l,
  $attrs$: null,
  $children$: null,
  $key$: null,
  $name$: null,
  $tag$: null,
  $text$: null
 }, "t" === r ? (d.$elm$ = l.nextSibling, d.$elm$ && 3 === d.$elm$.nodeType && (d.$text$ = d.$elm$.textContent, 
 t.push(d), l.remove(), e.$children$ || (e.$children$ = []), e.$children$[d.$index$] = d, 
 n && "0" === d.$depth$ && (n[d.$index$] = d.$elm$))) : d.$hostId$ === a && ("s" === r ? (d.$tag$ = "slot", 
 i[5] ? l["s-sn"] = d.$name$ = i[5] : l["s-sn"] = "", l["s-sr"] = !0, n && (d.$elm$ = doc$1.createElement(d.$tag$), 
 d.$name$ && d.$elm$.setAttribute("name", d.$name$), l.parentNode.insertBefore(d.$elm$, l), 
 l.remove(), "0" === d.$depth$ && (n[d.$index$] = d.$elm$)), o.push(d), e.$children$ || (e.$children$ = []), 
 e.$children$[d.$index$] = d) : "r" === r && (n ? l.remove() : (s["s-cr"] = l, 
 l["s-cn"] = !0)))); else if (e && "style" === e.$tag$) {
  const t = newVNode$1(null, l.textContent);
  t.$elm$ = l, t.$index$ = "0", e.$children$ = [ t ];
 }
}, initializeDocumentHydrate$1 = (e, t) => {
 if (1 === e.nodeType) {
  let o = 0;
  for (;o < e.childNodes.length; o++) initializeDocumentHydrate$1(e.childNodes[o], t);
  if (e.shadowRoot) for (o = 0; o < e.shadowRoot.childNodes.length; o++) initializeDocumentHydrate$1(e.shadowRoot.childNodes[o], t);
 } else if (8 === e.nodeType) {
  const o = e.nodeValue.split(".");
  "o" === o[0] && (t.set(o[1] + "." + o[2], e), e.nodeValue = "", e["s-en"] = o[3]);
 }
}, parsePropertyValue$1 = (e, t) => null == e || isComplexType$1(e) ? e : 4 & t ? "false" !== e && ("" === e || !!e) : 2 & t ? parseFloat(e) : 1 & t ? String(e) : e, getValue$1 = (e, t) => getHostRef$1(e).$instanceValues$.get(t), setValue$1 = (e, t, o, n) => {
 const s = getHostRef$1(e), l = s.$hostElement$ , a = s.$instanceValues$.get(t), r = s.$flags$, i = s.$lazyInstance$ ;
 if (o = parsePropertyValue$1(o, n.$members$[t][0]), !(8 & r && void 0 !== a || o === a) && (s.$instanceValues$.set(t, o), 
 i)) {
  if (n.$watchers$ && 128 & r) {
   const e = n.$watchers$[t];
   e && e.map((e => {
    try {
     i[e](o, a, t);
    } catch (e) {
     consoleError$1(e, l);
    }
   }));
  }
  if (2 == (18 & r)) {
   scheduleUpdate$1(s, !1);
  }
 }
}, proxyComponent$1 = (e, t, o) => {
 if (t.$members$) {
  e.watchers && (t.$watchers$ = e.watchers);
  const n = Object.entries(t.$members$), s = e.prototype;
  if (n.map((([e, [n]]) => {
   (31 & n || (2 & o) && 32 & n) ? Object.defineProperty(s, e, {
    get() {
     return getValue$1(this, e);
    },
    set(s) {
     setValue$1(this, e, s, t);
    },
    configurable: !0,
    enumerable: !0
   }) : 1 & o && 64 & n && Object.defineProperty(s, e, {
    value(...t) {
     const o = getHostRef$1(this);
     return o.$onInstancePromise$.then((() => o.$lazyInstance$[e](...t)));
    }
   });
  })), (1 & o)) {
   const o = new Map;
   s.attributeChangedCallback = function(e, t, n) {
    plt$1.jmp((() => {
     const t = o.get(e);
     this.hasOwnProperty(t) && (n = this[t], delete this[t]), this[t] = (null !== n || "boolean" != typeof this[t]) && n;
    }));
   }, e.observedAttributes = n.filter((([e, t]) => 15 & t[0])).map((([e, n]) => {
    const s = n[1] || e;
    return o.set(s, e), 512 & n[0] && t.$attrsToReflect$.push([ e, s ]), 
    s;
   }));
  }
 }
 return e;
}, initializeComponent$1 = async (e, t, o, n, s) => {
 if (0 == (32 & t.$flags$)) {
  {
   if (t.$flags$ |= 32, (s = loadModule$1(o)).then) {
    const e = (() => {});
    s = await s, e();
   }
   !s.isProxied && ((o.$watchers$ = s.watchers), 
   proxyComponent$1(s, o, 2), s.isProxied = !0);
   const e = createTime$1("createInstance", o.$tagName$);
   (t.$flags$ |= 8);
   try {
    new s(t);
   } catch (e) {
    consoleError$1(e);
   }
   (t.$flags$ &= -9), (t.$flags$ |= 128), e(), 
   fireConnectedCallback$1(t.$lazyInstance$);
  }
  if (s.style) {
   let n = s.style;
   const l = getScopeId$1(o);
   if (!styles$1.has(l)) {
    const e = createTime$1("registerStyles", o.$tagName$);
    registerStyle$1(l, n), e();
   }
  }
 }
 const r = t.$ancestorComponent$, i = () => scheduleUpdate$1(t, !0);
 r && r["s-rc"] ? r["s-rc"].push(i) : i();
}, fireConnectedCallback$1 = e => {
 safeCall$1(e, "connectedCallback");
}, connectedCallback$1 = e => {
 if (0 == (1 & plt$1.$flags$)) {
  const t = getHostRef$1(e), o = t.$cmpMeta$, n = createTime$1("connectedCallback", o.$tagName$);
  if (1 & t.$flags$) addHostEventListeners$1(e, t, o.$listeners$), fireConnectedCallback$1(t.$lazyInstance$); else {
   let n;
   if (t.$flags$ |= 1, (n = e.getAttribute("s-id"), n)) {
    ((e, t, o, n) => {
     const s = createTime$1("hydrateClient", t), l = e.shadowRoot, a = [], r = l ? [] : null, i = n.$vnode$ = newVNode$1(t, null);
     plt$1.$orgLocNodes$ || initializeDocumentHydrate$1(doc$1.body, plt$1.$orgLocNodes$ = new Map), 
     e["s-id"] = o, e.removeAttribute("s-id"), clientHydrate$1(i, a, [], r, e, e, o), a.map((e => {
      const o = e.$hostId$ + "." + e.$nodeId$, n = plt$1.$orgLocNodes$.get(o), s = e.$elm$;
      n && supportsShadow$1 && "" === n["s-en"] && n.parentNode.insertBefore(s, n.nextSibling), 
      l || (s["s-hn"] = t, n && (s["s-ol"] = n, s["s-ol"]["s-nr"] = s)), plt$1.$orgLocNodes$.delete(o);
     })), l && r.map((e => {
      e && l.appendChild(e);
     })), s();
    })(e, o.$tagName$, n, t);
   }
   if (!n && (BUILD.hydrateServerSide ) && setContentReference$1(e), 
   BUILD.asyncLoading) {
    let o = e;
    for (;o = o.parentNode || o.host; ) if (1 === o.nodeType && o.hasAttribute("s-id") && o["s-p"] || o["s-p"]) {
     attachToAncestor$1(t, t.$ancestorComponent$ = o);
     break;
    }
   }
   initializeComponent$1(e, t, o);
  }
  n();
 }
}, setContentReference$1 = e => {
 const t = e["s-cr"] = doc$1.createComment("");
 t["s-cn"] = !0, e.insertBefore(t, e.firstChild);
}, insertVdomAnnotations = (e, t) => {
 if (null != e) {
  const o = {
   hostIds: 0,
   rootLevelIds: 0,
   staticComponents: new Set(t)
  }, n = [];
  parseVNodeAnnotations(e, e.body, o, n), n.forEach((t => {
   if (null != t) {
    const n = t["s-nr"];
    let s = n["s-host-id"], l = n["s-node-id"], a = `${s}.${l}`;
    if (null == s) if (s = 0, o.rootLevelIds++, l = o.rootLevelIds, a = `${s}.${l}`, 
    1 === n.nodeType) n.setAttribute("c-id", a); else if (3 === n.nodeType) {
     if (0 === s && "" === n.nodeValue.trim()) return void t.remove();
     const o = e.createComment(a);
     o.nodeValue = `t.${a}`, n.parentNode.insertBefore(o, n);
    }
    let r = `o.${a}`;
    const i = t.parentElement;
    i && ("" === i["s-en"] ? r += "." : "c" === i["s-en"] && (r += ".c")), t.nodeValue = r;
   }
  }));
 }
}, parseVNodeAnnotations = (e, t, o, n) => {
 null != t && (null != t["s-nr"] && n.push(t), 1 === t.nodeType && t.childNodes.forEach((t => {
  const s = getHostRef$1(t);
  if (null != s && !o.staticComponents.has(t.nodeName.toLowerCase())) {
   const n = {
    nodeIds: 0
   };
   insertVNodeAnnotations(e, t, s.$vnode$, o, n);
  }
  parseVNodeAnnotations(e, t, o, n);
 })));
}, insertVNodeAnnotations = (e, t, o, n, s) => {
 if (null != o) {
  const l = ++n.hostIds;
  if (t.setAttribute("s-id", l), null != t["s-cr"] && (t["s-cr"].nodeValue = `r.${l}`), 
  null != o.$children$) {
   const t = 0;
   o.$children$.forEach(((o, n) => {
    insertChildVNodeAnnotations(e, o, s, l, t, n);
   }));
  }
  if (t && o && o.$elm$ && !t.hasAttribute("c-id")) {
   const e = t.parentElement;
   if (e && e.childNodes) {
    const n = Array.from(e.childNodes), s = n.find((e => 8 === e.nodeType && e["s-sr"]));
    if (s) {
     const e = n.indexOf(t) - 1;
     o.$elm$.setAttribute("c-id", `${s["s-host-id"]}.${s["s-node-id"]}.0.${e}`);
    }
   }
  }
 }
}, insertChildVNodeAnnotations = (e, t, o, n, s, l) => {
 const a = t.$elm$;
 if (null == a) return;
 const r = o.nodeIds++, i = `${n}.${r}.${s}.${l}`;
 if (a["s-host-id"] = n, a["s-node-id"] = r, 1 === a.nodeType) a.setAttribute("c-id", i); else if (3 === a.nodeType) {
  const t = a.parentNode, o = t.nodeName;
  if ("STYLE" !== o && "SCRIPT" !== o) {
   const o = `t.${i}`, n = e.createComment(o);
   t.insertBefore(n, a);
  }
 } else if (8 === a.nodeType && a["s-sr"]) {
  const e = `s.${i}.${a["s-sn"] || ""}`;
  a.nodeValue = e;
 }
 if (null != t.$children$) {
  const l = s + 1;
  t.$children$.forEach(((t, s) => {
   insertChildVNodeAnnotations(e, t, o, n, l, s);
  }));
 }
}, NO_HYDRATE_TAGS = new Set([ "CODE", "HEAD", "IFRAME", "INPUT", "OBJECT", "OUTPUT", "NOSCRIPT", "PRE", "SCRIPT", "SELECT", "STYLE", "TEMPLATE", "TEXTAREA" ]), hAsync = (e, t, ...o) => {
 if (Array.isArray(o) && o.length > 0) {
  const n = o.flat(1 / 0);
  return n.some(isPromise) ? Promise.all(n).then((o => h$1(e, t, ...o))).catch((o => h$1(e, t))) : h$1(e, t, ...o);
 }
 return h$1(e, t);
};

const cmpModules$1 = new Map, getModule = e => {
 if ("string" == typeof e) {
  e = e.toLowerCase();
  const t = cmpModules$1.get(e);
  if (null != t) return t[e];
 }
 return null;
}, loadModule$1 = (e, t, o) => getModule(e.$tagName$), isMemberInElement$1 = (e, t) => {
 if (null != e) {
  if (t in e) return !0;
  const o = getModule(e.nodeName);
  if (null != o) {
   const e = o;
   if (null != e && null != e.cmpMeta && null != e.cmpMeta.$members$) return t in e.cmpMeta.$members$;
  }
 }
 return !1;
}, registerComponents = e => {
 for (const t of e) {
  const e = t.cmpMeta.$tagName$;
  cmpModules$1.set(e, {
   [e]: t
  });
 }
}, win$1 = window, doc$1 = win$1.document, writeTask$1 = e => {
 process.nextTick((() => {
  try {
   e();
  } catch (e) {
   consoleError$1(e);
  }
 }));
}, resolved = Promise.resolve(), nextTick$1 = e => resolved.then(e), defaultConsoleError = e => {
 null != e && console.error(e.stack || e.message || e);
}, consoleError$1 = (e, t) => (defaultConsoleError)(e, t), plt$1 = {
 $flags$: 0,
 $resourcesUrl$: "",
 jmp: e => e(),
 raf: e => requestAnimationFrame(e),
 ael: (e, t, o, n) => e.addEventListener(t, o, n),
 rel: (e, t, o, n) => e.removeEventListener(t, o, n),
 ce: (e, t) => new win$1.CustomEvent(e, t)
}, supportsShadow$1 = !1, hostRefs$1 = new WeakMap, getHostRef$1 = e => hostRefs$1.get(e), registerInstance = (e, t) => hostRefs$1.set(t.$lazyInstance$ = e, t), registerHost$1 = (e, t) => {
 const o = {
  $flags$: 0,
  $cmpMeta$: t,
  $hostElement$: e,
  $instanceValues$: new Map,
  $renderCount$: 0
 };
 return o.$onInstancePromise$ = new Promise((e => o.$onInstanceResolve$ = e)), o.$onReadyPromise$ = new Promise((e => o.$onReadyResolve$ = e)), 
 e["s-p"] = [], e["s-rc"] = [], addHostEventListeners$1(e, o, t.$listeners$), hostRefs$1.set(e, o);
}, styles$1 = new Map;

function createCommonjsModule(fn, basedir, module) {
	return module = {
		path: basedir,
		exports: {},
		require: function (path, base) {
			return commonjsRequire();
		}
	}, fn(module, module.exports), module.exports;
}

function commonjsRequire () {
	throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
}

var classnames = createCommonjsModule(function (module) {
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/* global define */

(function () {

	var hasOwn = {}.hasOwnProperty;

	function classNames () {
		var classes = [];

		for (var i = 0; i < arguments.length; i++) {
			var arg = arguments[i];
			if (!arg) continue;

			var argType = typeof arg;

			if (argType === 'string' || argType === 'number') {
				classes.push(arg);
			} else if (Array.isArray(arg) && arg.length) {
				var inner = classNames.apply(null, arg);
				if (inner) {
					classes.push(inner);
				}
			} else if (argType === 'object') {
				for (var key in arg) {
					if (hasOwn.call(arg, key) && arg[key]) {
						classes.push(key);
					}
				}
			}
		}

		return classes.join(' ');
	}

	if (module.exports) {
		classNames.default = classNames;
		module.exports = classNames;
	} else {
		window.classNames = classNames;
	}
}());
});

class Accordion {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** If `true`, only one scale-collapsible within the accordion can be open at a time */
    this.dependent = false;
    /** If `true`, scale-collapsibles within the accordion will all be open initially, unless this is dependant */
    this.expanded = false;
    /** Heading level for scale-collapsible descendants */
    this.headingLevel = null;
  }
  /**
   * Handle `dependent`
   */
  collapsibleHandler(event) {
    event.stopPropagation();
    const { expanded } = event.detail;
    if (!this.dependent || expanded === false) {
      return;
    }
    this.getCollapsibleChildren().forEach((child) => {
      if (child !== event.target && child.hasAttribute('expanded')) {
        child.expanded = false;
      }
    });
  }
  headingLevelChanged(newValue) {
    this.propagatePropsToChildren(newValue);
  }
  connectedCallback() {
    /**
     * Handle `expanded`
     */
    if (!this.dependent) {
      this.getCollapsibleChildren().forEach((child) => {
        child.expanded = this.expanded;
      });
    }
  }
  componentDidLoad() {
    if (this.headingLevel !== null) {
      this.propagatePropsToChildren(this.headingLevel);
    }
  }
  getCollapsibleChildren() {
    return Array.from(this.el.querySelectorAll('scale-collapsible'));
  }
  propagatePropsToChildren(headingLevel) {
    this.getCollapsibleChildren().forEach((item) => {
      item.headingLevel = headingLevel;
    });
  }
  render() {
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync("div", { class: this.getCssClassMap(), part: "base" }, hAsync("slot", null))));
  }
  getCssClassMap() {
    return classnames('accordion');
  }
  get el() { return getElement$1(this); }
  static get watchers() { return {
    "headingLevel": ["headingLevelChanged"]
  }; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-accordion",
    "$members$": {
      "styles": [1],
      "dependent": [4],
      "expanded": [4],
      "headingLevel": [2, "heading-level"]
    },
    "$listeners$": [[0, "scale-expand", "collapsibleHandler"]],
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const iconCss$3b = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionAdd {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M19.5 10.75h-6.25V4.5a1.25 1.25 0 00-2.5 0v6.25H4.5a1.25 1.25 0 000 2.5h6.25v6.25a1.25 1.25 0 102.5 0v-6.25h6.25a1.25 1.25 0 100-2.5z" }))) : (hAsync("g", null, hAsync("path", { d: "M19.5 11.25h-6.75V4.5c0-.4-.35-.75-.75-.75s-.75.35-.75.75v6.75H4.5c-.4 0-.75.35-.75.75s.35.75.75.75h6.75v6.75c0 .4.35.75.75.75s.75-.35.75-.75v-6.75h6.75c.4 0 .75-.35.75-.75s-.35-.75-.75-.75z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3b; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-add",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$3a = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionAddCard {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M17.5 11a6.5 6.5 0 110 13 6.5 6.5 0 010-13zm0 1.5a5 5 0 100 10 5 5 0 000-10zm0 1.75a.75.75 0 01.75.75v1.75H20a.75.75 0 010 1.5h-1.75V20a.75.75 0 11-1.5 0v-1.75H15a.75.75 0 110-1.5h1.75V15a.75.75 0 01.75-.75zM21 8.5v1.815a8 8 0 00-3.5-.815 8 8 0 00-7.74 6H4a3 3 0 01-3-3v-4h20zM18 2a3 3 0 013 3v1H1V5a3 3 0 013-3z" }))) : (hAsync("g", null, hAsync("path", { d: "M17 11c3.6 0 6.5 2.9 6.5 6.5S20.6 24 17 24s-6.5-2.9-6.5-6.5S13.4 11 17 11zm0 3.25c-.4 0-.75.35-.75.75v1.75H14.5c-.4 0-.75.35-.75.75s.35.75.75.75h1.75V20c0 .4.35.75.75.75s.75-.35.75-.75v-1.75h1.75c.4 0 .75-.35.75-.75s-.35-.75-.75-.75h-1.75V15c0-.4-.35-.75-.75-.75zM17.5 2c1.65 0 3 1.35 3 3v5.3c-.5-.25-1-.4-1.5-.55V8.5H2v4c0 .85.65 1.5 1.5 1.5h6.3c-.25.5-.4 1-.55 1.5H3.5c-1.65 0-3-1.35-3-3V5c0-1.65 1.35-3 3-3zm0 1.5h-14C2.65 3.5 2 4.15 2 5v1h17V5c0-.85-.65-1.5-1.5-1.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3a; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-add-card",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$39 = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionAutoLogin {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 1.515a1 1 0 01.925.62l1.66 4.045 4.38.32a1 1 0 01.61 1.78l-3.355 2.835 1.05 4.265a1 1 0 01-1.5 1.085l-3-1.845v8.095a.75.75 0 01-1.5 0V14.6l-3 1.845a1 1 0 01-1.5-1.085l1.05-4.265L4.465 8.26a1 1 0 01.57-1.76l4.38-.3 1.66-4.065a1 1 0 01.925-.62zm8.443 10.19l2.492.81-.464 1.426-2.491-.81zm-16.885-.003l.464 1.426-2.492.81-.464-1.426zM18.007.205l1.213.881-1.54 2.12-1.213-.882 1.54-2.12zM5.999.195l1.546 2.122-1.215.885L4.784 1.08z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 .75c.7 0 1.35.45 1.6 1.1l1.5 3.65 3.9.25c.75.05 1.35.5 1.55 1.2s0 1.45-.55 1.9l-3 2.55.95 3.8c.2.7-.05 1.45-.65 1.85s-1.35.4-1.95.05l-2.6-1.6v7.2c0 .4-.35.75-.75.75s-.75-.35-.75-.75v-7.2l-2.6 1.6c-.6.4-1.35.35-1.95-.05-.55-.45-.8-1.15-.65-1.85L7 11.4 4 8.85c-.55-.5-.8-1.2-.55-1.9S4.3 5.8 5 5.75l3.9-.25 1.5-3.65c.25-.65.9-1.1 1.6-1.1zm0 1.55h-.1c-.082.004-.158.025-.2.15l-1.85 4.5L5 7.3c-.15 0-.2.1-.2.15s0 .15.1.25l3.7 3.15-1.15 4.7c-.05.1.05.2.1.25s.2.1.3 0L12 13.25l4.1 2.55c.15.1.25.05.3 0s.15-.1.05-.25l-1.15-4.7L19 7.7c.15-.1.1-.2.1-.25s-.05-.15-.2-.15l-4.85-.35-1.85-4.5c-.05-.15-.15-.15-.25-.15zm8.427 9.404l2.473.804-.463 1.426-2.473-.803zm-16.88-.019l.464 1.427-2.473.803-.463-1.426 2.473-.804zM5.99.213l1.528 2.104-1.214.881-1.528-2.103zM17.998.205l1.214.882-1.529 2.103-1.213-.882z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$39; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-auto-login",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$38 = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionBackspace {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M20.5 3.5h-12L1 12l7.5 8.5h12a3 3 0 003-3v-11a3 3 0 00-3-3zm-2 10.925a.745.745 0 010 1.075.75.75 0 01-1.06 0L15 13.06l-2.425 2.44a.75.75 0 01-1.075 0 .745.745 0 010-1.06L13.94 12 11.5 9.575A.76.76 0 0112.575 8.5L15 10.94l2.425-2.44A.76.76 0 0118.5 9.575L16.06 12l2.44 2.425z" }))) : (hAsync("g", null, hAsync("path", { d: "M20 3.5c1.65 0 3 1.35 3 3v11c0 1.65-1.35 3-3 3H8L.5 12 8 3.5zM20 5H8.7l-6.2 7 6.2 7H20c.85 0 1.5-.65 1.5-1.5v-11c0-.85-.65-1.5-1.5-1.5zm-8.95 3.5c.3-.3.75-.3 1.05 0l2.4 2.45 2.45-2.45c.3-.3.75-.3 1.05 0s.3.8-.05 1.1l-2.4 2.4 2.35 2.4c.3.3.3.75 0 1.05s-.75.3-1.05 0l-2.4-2.4-2.4 2.4c-.3.3-.75.3-1.05 0s-.3-.75 0-1.05l2.45-2.45-2.4-2.4c-.3-.3-.3-.75 0-1.05z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$38; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-backspace",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$37 = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionChangelog {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M2 15.5l3.44 2.25L2 20v-4.5zm19.25 1a1.25 1.25 0 110 2.5h-13a1.25 1.25 0 110-2.5zM2 9.5l3.44 2.25L2 14V9.5zm19.25 1a1.25 1.25 0 110 2.5h-13a1.25 1.25 0 010-2.5zM2 3.5l3.44 2.25L2 8V3.5zm19.25 1a1.25 1.25 0 110 2.5h-13a1.25 1.25 0 110-2.5z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M2 15.5l3.45 2.25L2 20v-4.5zM21.25 17c.4 0 .75.35.75.75s-.35.75-.75.75H7.5V17zM2 9.5l3.45 2.25L2 14V9.5zM21.25 11c.4 0 .75.35.75.75s-.35.75-.75.75H7.5V11zM2 3.5l3.45 2.25L2 8V3.5zM21.25 5c.4 0 .75.35.75.75s-.35.75-.75.75H7.5V5z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$37; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-changelog",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$36 = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionCircleAdd {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M12 1C5.925 1 1 5.925 1 12s4.925 11 11 11 11-4.925 11-11A11 11 0 0012 1zm5 11.75h-4.25V17a.75.75 0 11-1.5 0v-4.25H7a.75.75 0 110-1.5h4.25V7a.75.75 0 111.5 0v4.25H17a.75.75 0 110 1.5z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M12 1c6.1 0 11 4.9 11 11s-4.9 11-11 11S1 18.1 1 12 5.9 1 12 1zm0 1.5c-5.25 0-9.5 4.25-9.5 9.5s4.25 9.5 9.5 9.5 9.5-4.25 9.5-9.5-4.25-9.5-9.5-9.5zm0 3.75c.4 0 .75.35.75.75v4.25H17c.4 0 .75.35.75.75s-.35.75-.75.75h-4.25V17c0 .4-.35.75-.75.75s-.75-.35-.75-.75v-4.25H7c-.4 0-.75-.35-.75-.75s.35-.75.75-.75h4.25V7c0-.4.35-.75.75-.75z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$36; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-circle-add",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$35 = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionCircleClose {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M12 1C5.925 1 1 5.925 1 12s4.925 11 11 11 11-4.925 11-11A11 11 0 0012 1zm4.065 14a.745.745 0 010 1.06.75.75 0 01-1.06 0l-3-3-3 3a.755.755 0 01-.53.22.75.75 0 01-.54-1.28l3-3-3-3A.753.753 0 019 7.935l3 3 3-3A.753.753 0 0116.065 9l-3 3 3 3z" }))) : (hAsync("g", null, hAsync("path", { d: "M12 1c6.1 0 11 4.9 11 11s-4.9 11-11 11S1 18.1 1 12 5.9 1 12 1zm0 1.5c-5.25 0-9.5 4.25-9.5 9.5s4.25 9.5 9.5 9.5 9.5-4.25 9.5-9.5-4.25-9.5-9.5-9.5zM7.95 7.95c.3-.3.75-.3 1.05 0l3 3 3-3c.3-.3.75-.3 1.05 0s.3.75 0 1.05l-3 3 3 3c.3.3.3.75 0 1.05s-.75.3-1.05 0l-3-3-3 3c-.3.3-.75.3-1.05 0s-.3-.75 0-1.05l3-3-3-3c-.3-.3-.3-.75 0-1.05z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$35; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-circle-close",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$34 = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionClose {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M13.77 12l4.415-4.42a1.25 1.25 0 10-1.765-1.765L12 10.23 7.58 5.815A1.25 1.25 0 105.815 7.58L10.23 12l-4.415 4.42a1.245 1.245 0 000 1.765c.232.237.549.37.88.37.332 0 .65-.134.885-.37L12 13.77l4.42 4.415c.234.236.553.37.885.37.331 0 .648-.133.88-.37a1.245 1.245 0 000-1.765L13.77 12z" }))) : (hAsync("g", null, hAsync("path", { d: "M13.05 12l4.75-4.75c.3-.3.3-.75 0-1.05s-.75-.3-1.05 0L12 10.95 7.25 6.2c-.3-.3-.75-.3-1.05 0s-.3.75 0 1.05L10.95 12 6.2 16.75c-.3.3-.3.75 0 1.05s.75.3 1.05 0L12 13.05l4.75 4.75c.3.3.75.3 1.05 0s.3-.75 0-1.05z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$34; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-close",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$33 = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionCopyPaste {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M17 7v12.5a3 3 0 01-3 3H4.5a3 3 0 01-3-3V7H17zm5.5-5.5V14a3 3 0 01-3 3h-1v-1.5h1A1.5 1.5 0 0021 14V3H8.5v2.5H7v-4h15.5z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M17 7v12.5c0 1.655-1.345 3-3 3H4.5c-1.655 0-3-1.345-3-3V7H17zm-1.5 1.5H3v11c0 .825.675 1.5 1.5 1.5H14c.825 0 1.5-.675 1.5-1.5v-11zm7-7V14c0 1.655-1.345 3-3 3h-1v-1.5h1c.825 0 1.5-.675 1.5-1.5V3H8.5v2.5H7v-4h15.5z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$33; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-copy-paste",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$32 = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionCutPaste {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M8.5 21v1.5H6V21h2.5zM3 19.5A1.5 1.5 0 004.5 21v1.5a3 3 0 01-3-3zm14 0a3 3 0 01-3 3V21a1.5 1.5 0 001.5-1.5zM12.5 21v1.5H10V21h2.5zm4.5-5.5V18h-1.5v-2.5H17zm-14 0V18H1.5v-2.5H3zm19.5-14V14a3 3 0 01-3 3h-1V5.5H7v-4h15.5zm-5.5 10V14h-1.5v-2.5H17zm-14 0V14H1.5v-2.5H3zM17 7v3h-1.5V8.5H14V7h3zM4.5 7v1.5H3V10H1.5V7h3zm8 0v1.5H10V7h2.5zm-4 0v1.5H6V7h2.5z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M8.5 21v1.5H6V21h2.5zM3 19.5c0 .825.675 1.5 1.5 1.5v1.5c-1.655 0-3-1.345-3-3zm14 0c0 1.655-1.345 3-3 3V21c.825 0 1.5-.675 1.5-1.5zM12.5 21v1.5H10V21h2.5zM3 15.5V18H1.5v-2.5H3zm14 0V18h-1.5v-2.5H17zm5.5-14V14c0 1.655-1.345 3-3 3h-1v-1.5h1c.825 0 1.5-.675 1.5-1.5V3H8.5v2.5H7v-4h15.5zM3 11.5V14H1.5v-2.5H3zm14 0V14h-1.5v-2.5H17zM17 7v3h-1.5V8.5H14V7h3zM4.5 7v1.5H3V10H1.5V7h3zm8 0v1.5H10V7h2.5zm-4 0v1.5H6V7h2.5z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$32; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-cut-paste",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$31 = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionDisabledMicrophone {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M5.25 9.5a.75.75 0 01.75.75V12a6 6 0 008.34 5.525l1.125 1.12a7.5 7.5 0 01-2.715.815v4.04h-1.5v-4.04A7.5 7.5 0 014.5 12v-1.75a.75.75 0 01.75-.75zM2.863 2.863a.75.75 0 011.042-.018l17.25 17.25a.745.745 0 010 1.06.75.75 0 01-1.06 0L2.845 3.905a.75.75 0 01.018-1.042zM7.5 10.68l5.66 5.665A4.67 4.67 0 0112 16.5 4.5 4.5 0 017.5 12v-1.32zM18.75 9.5a.75.75 0 01.75.75V12a7.435 7.435 0 01-.88 3.465L17.5 14.34A6 6 0 0018 12v-1.75a.75.75 0 01.75-.75zM12.104.539l.212.01A4.5 4.5 0 0116.5 5v7a4.67 4.67 0 01-.155 1.16L7.55 4.37A4.5 4.5 0 0112.316.549z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M5.25 9.5c.4 0 .75.35.75.75V12c0 3.3 2.7 6 6 6 .85 0 1.6-.15 2.35-.5l1.1 1.15c-.8.4-1.75.7-2.7.8v4.05h-1.5v-4.05C7.45 19.1 4.5 15.9 4.5 12v-1.75c0-.4.35-.75.75-.75zm-2.4-6.65c.3-.3.75-.3 1.05 0L21.15 20.1c.3.3.3.75 0 1.05-.3.3-.75.3-1.05 0L2.85 3.9c-.3-.3-.3-.75 0-1.05zM7.5 10.7L9 12.2c.1 1.5 1.3 2.7 2.8 2.8l1.35 1.35c-.35.1-.75.15-1.15.15-2.5 0-4.5-2-4.5-4.5v-1.3zm11.25-1.2c.4 0 .75.35.75.75V12c0 1.25-.3 2.45-.9 3.45l-1.1-1.1c.35-.75.5-1.5.5-2.35v-1.75c0-.4.35-.75.75-.75zM12 .5c2.5 0 4.5 2 4.5 4.5v7c0 .4-.05.8-.15 1.15L15 11.8V5c0-1.65-1.35-3-3-3S9 3.35 9 5v.8L7.55 4.35C7.85 2.2 9.75.5 12 .5z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$31; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-disabled-microphone",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$30 = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionDownload {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M21.25 20.185a1.065 1.065 0 010 2.13H2.75a1.065 1.065 0 110-2.13zM12 1.5c.69 0 1.25.56 1.25 1.25V9.5h3.33l-4.58 7-4.58-7h3.33V2.75c0-.69.56-1.25 1.25-1.25z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M21.25 20.5c.4 0 .75.35.75.75s-.35.75-.75.75H2.75c-.4 0-.75-.35-.75-.75s.35-.75.75-.75zM12 2c.4 0 .75.35.75.75V9.5h3.85l-4.6 7-4.6-7h3.85V2.75c0-.4.35-.75.75-.75z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$30; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-download",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2$ = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionDragAndDrop {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M15.5 8.5V21a3 3 0 01-3 3H3a3 3 0 01-3-3V8.5h15.5zM5.27 11.66v6.385l1.415-1.73.895 2.125.92-.39-.905-2.12 2.225.19-4.55-4.46zM19.5 14v1.5H17V14h2.5zm4.5-1.5a3 3 0 01-3 3V14a1.5 1.5 0 001.5-1.5zm0-4V11h-1.5V8.5H24zm0-4V7h-1.5V4.5H24zm-14 0V7H8.5V4.5H10zM21 0a3 3 0 013 3h-1.5A1.5 1.5 0 0021 1.5zm-9.5 0v1.5A1.5 1.5 0 0010 3H8.5a3 3 0 013-3zm4 0v1.5H13V0h2.5zm4 0v1.5H17V0h2.5z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M15.5 8.5V21c0 1.655-1.345 3-3 3H3c-1.655 0-3-1.345-3-3V8.5h15.5zM14 10H1.5v11c0 .825.675 1.5 1.5 1.5h9.5c.825 0 1.5-.675 1.5-1.5V10zm-8.5 2.255l3.645 3.555-1.66-.14 1.005 2.38-.92.39-1.005-2.385-1.055 1.29-.01-5.09zM24 12.5c0 1.655-1.345 3-3 3V14c.825 0 1.5-.675 1.5-1.5zM19.5 14v1.5H17V14h2.5zM24 8.5V11h-1.5V8.5H24zm-14-4V7H8.5V4.5H10zm14 0V7h-1.5V4.5H24zM11.5 0v1.5c-.825 0-1.5.675-1.5 1.5H8.5c0-1.655 1.345-3 3-3zM21 0c1.655 0 3 1.345 3 3h-1.5c0-.825-.675-1.5-1.5-1.5zm-1.5 0v1.5H17V0h2.5zm-4 0v1.5H13V0h2.5z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2$; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-drag-and-drop",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2_ = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionEdit {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M21.25 19.5a.75.75 0 010 1.5H8.045l1.05-1.5zM3.355 17.15l3.14 2.205L3 20.995l.35-3.84zM15.46 1.29v.02a1.915 1.915 0 011.57 3L7.355 18.125l-3.14-2.2 9.67-13.815a1.92 1.92 0 011.575-.82z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M21.25 19.5c.4 0 .75.35.75.75s-.35.75-.75.75H8.05l1.05-1.5zm-17.9-2.35l3.15 2.2L3 21zM13.9 2.1c.55-.8 1.8-1.05 2.65-.45l.136.1c.783.625.932 1.745.364 2.55l-9.7 13.8-3.15-2.2z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2_; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-edit",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2Z = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionFastForward {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M12 1C5.925 1 1 5.925 1 12s4.925 11 11 11 11-4.925 11-11A11 11 0 0012 1zm.5 15v-3.6L7 16V8l5.5 3.6V8l6.11 4-6.11 4z" }))) : (hAsync("g", null, hAsync("path", { d: "M12 1c6.075 0 11 4.925 11 11s-4.925 11-11 11S1 18.075 1 12 5.925 1 12 1zm0 1.5c-5.24 0-9.5 4.26-9.5 9.5s4.26 9.5 9.5 9.5 9.5-4.26 9.5-9.5-4.26-9.5-9.5-9.5zm.5 5.5l6.11 4-6.11 4v-3.6L7 16V8l5.5 3.6z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2Z; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-fast-forward",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2Y = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionFavorite {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M13 2.41l2.45 6 6.5.475a1.06 1.06 0 01.55 1.88l-4.96 4.19 1.55 6.31a1.065 1.065 0 01-1.59 1.155L12 19l-5.5 3.42a1.065 1.065 0 01-1.59-1.155l1.55-6.31-4.96-4.19a1.06 1.06 0 01.61-1.87l6.5-.475 2.45-6A1.065 1.065 0 0113 2.41z" }))) : (hAsync("g", null, hAsync("path", { d: "M23.55 9.4c-.25-.7-.85-1.2-1.6-1.25l-6-.45-2.25-5.55C13.4 1.45 12.75 1 12 1s-1.4.45-1.7 1.15L8 7.75 2 8.2c-.75.05-1.35.55-1.6 1.25s0 1.45.55 1.95l4.6 3.9-1.4 5.8c-.15.7.1 1.45.7 1.9.3.25.7.35 1.05.35s.65-.1.95-.25L12 19.9l5.1 3.2c.65.4 1.4.35 2-.05.6-.45.85-1.2.7-1.9l-1.45-5.85 4.6-3.9c.6-.55.85-1.3.6-2zm-1.5.8l-5.3 4.5 1.65 6.75c.05.2-.05.3-.1.35s-.2.1-.35 0L12 18.1l-5.9 3.65c-.15.1-.3.05-.35 0s-.15-.15-.1-.35l1.65-6.75-5.3-4.5c-.15-.1-.1-.25-.1-.35 0-.05.1-.2.25-.2l6.95-.5 2.65-6.45c.05-.15.15-.15.25-.15s.2.05.3.2l2.65 6.45 6.95.5c.2 0 .25.15.25.2 0 .1 0 .25-.1.35z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2Y; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-favorite",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2X = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionFilter {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M12.25 16.5a2.75 2.75 0 110 5.5 2.75 2.75 0 010-5.5zM8.19 18a4.205 4.205 0 000 2.5H2V18zM22 18v2.5h-5.685a4.295 4.295 0 000-2.5H22zM4.75 9.5a2.75 2.75 0 110 5.5 2.75 2.75 0 010-5.5zM22 11v2.5H8.815a4.295 4.295 0 000-2.5H22zm-7.25-8.5a2.75 2.75 0 110 5.5 2.75 2.75 0 010-5.5zM10.69 4a4.135 4.135 0 00-.19 1.25c-.001.424.063.846.19 1.25H2V4zM22 4v2.5h-3.185a4.315 4.315 0 000-2.5H22z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M12.25 16.5a2.75 2.75 0 110 5.5 2.75 2.75 0 010-5.5zm-4.18 2c-.045.245-.07.495-.07.75s.025.505.07.75H2v-1.5zm13.93 0V20h-5.57c.045-.245.07-.495.07-.75s-.025-.505-.07-.75H22zm-17.25-9a2.75 2.75 0 110 5.5 2.75 2.75 0 010-5.5zm17.25 2V13H8.93c.045-.245.07-.495.07-.75s-.025-.505-.07-.75H22zm-7.25-9a2.75 2.75 0 110 5.5 2.75 2.75 0 010-5.5zm-4.18 2c-.045.245-.07.495-.07.75s.025.505.07.75H2V4.5zM22 4.5V6h-3.07c.045-.245.07-.495.07-.75s-.025-.505-.07-.75H22z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2X; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-filter",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2W = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionForward {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M22.75 6.75L16 2.33V5.5h-1.84a8.67 8.67 0 00-8.66 8.66v4.09a1.25 1.25 0 102.5 0v-4.09A6.17 6.17 0 0114.16 8H16v3.17z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M20.75 7.75L14 3.33V7h-1.84C7.66 7 4 10.66 4 15.16v4.09a.749.749 0 101.5 0v-4.09a6.664 6.664 0 016.66-6.66H14v3.67z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2W; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-forward",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2V = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionFullScreen {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M9.5 12.735a1.25 1.25 0 011.765 1.765L7.5 18.29l2.43 2.45L1.5 22.5l1.76-8.45 2.45 2.45zM22.5 1.5l-1.76 8.45-2.45-2.45-3.785 3.77c-.49.487-1.28.487-1.77 0a1.26 1.26 0 010-1.77l3.785-3.79-2.45-2.45z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M10.22 12.72a.745.745 0 011.06 0 .745.745 0 010 1.06l-4.155 4.155L9.93 20.74 1.5 22.5l1.76-8.43 2.805 2.805zM22.5 1.5l-1.76 8.43-2.805-2.805-4.155 4.155a.754.754 0 01-.53.22.754.754 0 01-.53-.22.745.745 0 010-1.06l4.155-4.155L14.07 3.26z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2V; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-full-screen",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2U = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionHidePassword {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M1.988 1.988A.75.75 0 013.03 1.97l17.25 17.25a.745.745 0 010 1.06.75.75 0 01-1.06 0L1.97 3.03a.75.75 0 01.018-1.042zM4.705 7.89l2.95 2.95A4.67 4.67 0 007.5 12a4.5 4.5 0 004.5 4.5 4.67 4.67 0 001.16-.155l2.285 2.28c-1.1.419-2.268.63-3.445.625-5.25 0-8.25-3.875-10.75-7.25a30.11 30.11 0 013.455-4.11zM12 4.75c5.25 0 8.25 3.875 10.75 7.25a30.11 30.11 0 01-3.455 4.11l-2.95-2.95c.1-.379.152-.768.155-1.16A4.5 4.5 0 0012 7.5a4.67 4.67 0 00-1.16.155l-2.285-2.28A9.562 9.562 0 0112 4.75zm-3 7.44l2.8 2.8a3 3 0 01-2.8-2.8zm3.2-3.18a3 3 0 012.8 2.8z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M2.85 2.85c.3-.3.75-.3 1.05 0L21.15 20.1c.3.3.3.75 0 1.05-.3.3-.75.3-1.05 0L2.85 3.9c-.3-.3-.3-.75 0-1.05zm1.35 4.5L5.25 8.4c-1.1 1.05-2.1 2.3-3.05 3.6 2.55 3.5 5.3 6.5 9.8 6.5 1.05 0 2-.15 2.85-.45L16 19.2c-1.2.5-2.5.8-4 .8-5.8 0-9.15-4.55-11.35-7.55L.3 12l.35-.45c.95-1.3 2.1-2.85 3.55-4.2zM12 4c5.8 0 9.15 4.55 11.35 7.55l.35.45-.35.45c-.95 1.3-2.1 2.85-3.55 4.2l-1.05-1.05c1.1-1.05 2.1-2.3 3.05-3.6-2.55-3.5-5.3-6.5-9.8-6.5-1.05 0-2 .15-2.85.45L8 4.8c1.2-.5 2.5-.8 4-.8zm-4.35 6.85l5.5 5.5c-.35.1-.75.15-1.15.15-2.5 0-4.5-2-4.5-4.5 0-.4.05-.8.15-1.15zM12 7.5c2.5 0 4.5 2 4.5 4.5 0 .4-.05.8-.15 1.15l-5.5-5.5c.35-.1.75-.15 1.15-.15z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2U; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-hide-password",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2T = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionIndeterminate {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("rect", { xmlns: "http://www.w3.org/2000/svg", width: "16", height: "2", rx: "0.75", "fill-rule": "evenodd", x: "4", y: "11.25" }))) : (hAsync("g", null, hAsync("rect", { xmlns: "http://www.w3.org/2000/svg", width: "16", height: "2", rx: "0.75", "fill-rule": "evenodd", x: "4", y: "11.25" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2T; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-indeterminate",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2S = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionInstall {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M7.745 14l3 4.57a1.5 1.5 0 002.5 0l3-4.57H23.5v5a3 3 0 01-3 3h-17a3 3 0 01-3-3v-5h7.245zM19 17h-2v2h2v-2zM12 .5c.69 0 1.25.56 1.25 1.25V11h3.17L12 17.75 7.58 11h3.17V1.75c0-.69.56-1.25 1.25-1.25z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M7.755 14l.98 1.5H2V19c0 .825.675 1.5 1.5 1.5h17c.825 0 1.5-.675 1.5-1.5v-3.5h-6.735l.98-1.5H23.5v5c0 1.655-1.345 3-3 3h-17c-1.655 0-3-1.345-3-3v-5h7.255zM19 17v2h-2v-2h2zM12 1c.415 0 .75.335.75.75V11h3.67L12 17.75 7.58 11h3.67V1.75c0-.415.335-.75.75-.75z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2S; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-install",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2R = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionLink {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M12.225 8.37a5.75 5.75 0 011.895 9.39l-3.711 3.711a5.75 5.75 0 01-7.954-8.306L5.99 9.65a5.71 5.71 0 011.31-1 6.845 6.845 0 00-.105 1.155c0 .638.092 1.273.27 1.885L4.22 14.93a3.255 3.255 0 004.6 4.6l3.535-3.535a3.26 3.26 0 000-4.6l-.124-.133a2.23 2.23 0 01-.006-2.892zm1.19-6.165a5.75 5.75 0 018.13 0 5.75 5.75 0 010 8.075l-3.535 3.535a5.66 5.66 0 01-1.305 1c.03-.15.07-.325.07-.5a6.72 6.72 0 00-.245-2.5l3.25-3.245a3.255 3.255 0 10-4.6-4.6l-3.535 3.535a3.26 3.26 0 000 4.6l.124.134a2.25 2.25 0 01.016 2.896A5.64 5.64 0 019.88 13.87a5.745 5.745 0 010-8.13z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M11.94 8.8c.665.255 1.29.645 1.82 1.18a5.245 5.245 0 010 7.425l-3.535 3.535a5.215 5.215 0 01-3.71 1.535c-1.34 0-2.685-.51-3.71-1.535a5.26 5.26 0 010-7.425L6.34 9.98c.27-.275.565-.505.875-.705-.015.175-.025.35-.025.525 0 .45.045.89.13 1.32l-3.455 3.455a3.76 3.76 0 000 5.305 3.76 3.76 0 005.305 0l3.535-3.535a3.755 3.755 0 000-5.305 3.857 3.857 0 00-.935-.68c-.05-.18-.08-.365-.08-.555 0-.355.095-.695.25-1.005zm1.825-6.24a5.26 5.26 0 017.425 0 5.242 5.242 0 01-.01 7.425l-3.535 3.535c-.27.275-.565.505-.875.705.05-.62.01-1.235-.11-1.835l3.465-3.465a3.76 3.76 0 000-5.305 3.736 3.736 0 00-2.65-1.095c-.96 0-1.92.365-2.65 1.095L11.29 7.155c-.71.705-1.1 1.65-1.1 2.65s.39 1.94 1.1 2.65c.28.28.595.505.93.68.065.25.1.505.075.77-.02.22-.085.5-.23.795a5.188 5.188 0 01-1.835-1.185 5.2 5.2 0 01-1.54-3.71c0-1.4.55-2.72 1.54-3.71z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2R; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-link",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2Q = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionLogout {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M13.25 2.75v7.5h-6a1.5 1.5 0 000 3h6v7.5h-7.5a3 3 0 01-3-3v-12a3 3 0 013-3zm3.25 4.58l6.75 4.42-6.75 4.42V12.5H7.25a.75.75 0 110-1.5h9.25z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M14 2v5h-1.5V3.5H5.75c-1.25 0-2.25 1-2.25 2.25v12C3.5 19 4.5 20 5.75 20h6.75v-3.5H14v5H5.75C3.7 21.5 2 19.8 2 17.75v-12C2 3.7 3.7 2 5.75 2H14zm2.5 5.35l6.75 4.4-6.75 4.4V12.5H7.25c-.4 0-.75-.35-.75-.75s.35-.75.75-.75h9.25V7.35z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2Q; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-logout",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2P = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionLoop {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M8.013 6.612h5.211v2.302l5.388-3.526-5.388-3.527v2.302H8.033A7.998 7.998 0 00.029 11.29a7.807 7.807 0 001.582 5.451 1.22 1.22 0 001.66.28c.269-.188.446-.48.49-.804a1.234 1.234 0 00-.24-.98A5.358 5.358 0 012.45 12a5.554 5.554 0 015.564-5.388zM21.9 7.26a1.224 1.224 0 00-1.656-.27 1.176 1.176 0 00-.49.804 1.24 1.24 0 00.24.98A5.358 5.358 0 0121.061 12a5.554 5.554 0 01-5.564 5.388h-5.211v-2.302l-5.388 3.526 5.388 3.527v-2.302h5.192a7.998 7.998 0 008.003-7.127 7.807 7.807 0 00-1.582-5.451z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M20.945 7.3a.747.747 0 011.015.165 7.442 7.442 0 011.51 5.215c-.35 3.9-3.755 6.82-7.67 6.82h-5.3v2.85L5 18.75l5.5-3.6V18h5.32c3.295 0 6.175-2.695 6.18-5.99 0-1.36-.45-2.62-1.215-3.625-.265-.35-.2-.84.16-1.085zM13.5 1.65l5.5 3.6-5.5 3.6V6H8.18C4.885 6 2.005 8.695 2 11.99c0 1.36.45 2.62 1.215 3.625.265.35.2.84-.16 1.085a.747.747 0 01-1.015-.165A7.45 7.45 0 01.53 11.32C.88 7.42 4.285 4.5 8.2 4.5h5.3V1.65z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2P; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-loop",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2O = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionMenu {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M14.335 16.055a1.25 1.25 0 010 2.5H4.75a1.25 1.25 0 110-2.5zM19.25 10.5a1.25 1.25 0 110 2.5H4.75a1.25 1.25 0 010-2.5zm0-5.5a1.25 1.25 0 110 2.5H4.75a1.25 1.25 0 110-2.5z" }))) : (hAsync("g", null, hAsync("path", { d: "M14.75 16.5c.4 0 .75.35.75.75s-.35.75-.75.75H4.25c-.4 0-.75-.35-.75-.75s.35-.75.75-.75zm5-5.5c.4 0 .75.35.75.75s-.35.75-.75.75H4.25c-.4 0-.75-.35-.75-.75s.35-.75.75-.75zm0-5.5c.4 0 .75.35.75.75s-.35.75-.75.75H4.25c-.4 0-.75-.35-.75-.75s.35-.75.75-.75z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2O; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-menu",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2N = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionMicrophone {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M18.75 9.5a.75.75 0 01.75.75V12a7.5 7.5 0 01-6.75 7.46v4.04h-1.5v-4.04A7.5 7.5 0 014.5 12v-1.75a.75.75 0 111.5 0V12a6 6 0 0012 0v-1.75a.75.75 0 01.75-.75zM12 .5l.212.005A4.5 4.5 0 0116.5 5v7a4.5 4.5 0 01-4.5 4.5l-.212-.005A4.5 4.5 0 017.5 12V5A4.5 4.5 0 0112 .5z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M18.75 9.5c.4 0 .75.35.75.75V12c0 3.9-2.95 7.1-6.75 7.45v4.05h-1.5v-4.05C7.45 19.1 4.5 15.9 4.5 12v-1.75c0-.4.35-.75.75-.75s.75.35.75.75V12c0 3.3 2.7 6 6 6s6-2.7 6-6v-1.75c0-.4.35-.75.75-.75zM12 .5c2.5 0 4.5 2 4.5 4.5v7c0 2.5-2 4.5-4.5 4.5s-4.5-2-4.5-4.5V5c0-2.5 2-4.5 4.5-4.5zM12 2c-1.65 0-3 1.35-3 3v7c0 1.65 1.35 3 3 3s3-1.35 3-3V5c0-1.65-1.35-3-3-3z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2N; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-microphone",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2M = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionMinimizeScreen {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M11.245 12.755l-1.76 8.43-2.45-2.45L2.88 22.89a1.252 1.252 0 11-1.77-1.77l4.155-4.155-2.45-2.465zM22.005.743c.332 0 .65.132.885.367a1.25 1.25 0 010 1.785L18.735 7.05l2.45 2.45-8.43 1.745 1.745-8.43 2.465 2.45L21.12 1.11a1.25 1.25 0 01.885-.367z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M11.245 12.755l-1.76 8.43L6.68 18.38l-4.155 4.155a.754.754 0 01-.53.22.754.754 0 01-.53-.22.745.745 0 010-1.06L5.62 17.32l-2.805-2.805zm10.23-11.29a.745.745 0 011.06 0 .745.745 0 010 1.06L18.38 6.68l2.805 2.805-8.43 1.76 1.76-8.43L17.32 5.62z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2M; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-minimize-screen",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2L = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionMore {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M12 9.5a2.5 2.5 0 110 5 2.5 2.5 0 010-5zm7 0a2.5 2.5 0 110 5 2.5 2.5 0 010-5zm-14 0a2.5 2.5 0 110 5 2.5 2.5 0 010-5z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M12 10.5a1.5 1.5 0 110 3 1.5 1.5 0 010-3zm7 0a1.5 1.5 0 110 3 1.5 1.5 0 010-3zm-14 0a1.5 1.5 0 110 3 1.5 1.5 0 010-3z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2L; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-more",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2K = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionMove {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M23.5 12L18 8.4v2.35h-4.75V6h2.35L12 .5 8.4 6h2.35v4.75H6V8.4L.5 12 6 15.6v-2.35h4.75V18H8.4l3.6 5.5 3.6-5.5h-2.35v-4.75H18v2.35z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M23.5 12L18 8.4v2.85h-5.25V6h2.85L12 .5 8.4 6h2.85v5.25H6V8.4L.5 12 6 15.6v-2.85h5.25V18H8.4l3.6 5.5 3.6-5.5h-2.85v-5.25H18v2.85z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2K; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-move",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2J = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionMute {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M4.76 3.349c.2 0 .39.08.53.221l15.74 15.74a.745.745 0 010 1.06.75.75 0 01-1.06 0L4.23 4.63a.755.755 0 010-1.06.745.745 0 01.53-.221zM5.87 8.39L16 18.5v2h-2l-4.5-4H8a3 3 0 01-3-3v-3a2.97 2.97 0 01.87-2.11zM16 3.5v8.655l-5.525-5.52L14 3.5h2z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M4.23 3.57a.745.745 0 011.06 0l15.74 15.74a.745.745 0 010 1.06.754.754 0 01-.53.22.754.754 0 01-.53-.22L4.23 4.63a.75.75 0 010-1.06zm1.64 4.82l1.06 1.06c-.265.27-.43.64-.43 1.05v3c0 .825.675 1.5 1.5 1.5h2.07l4.43 3.94v-1.92l1.5 1.5v1.98h-2l-4.5-4H8c-1.655 0-3-1.345-3-3v-3c0-.825.33-1.57.87-2.11zM16 3.5v8.655l-1.5-1.5V5.06l-2.96 2.635-1.065-1.06L14 3.5h2z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2J; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-mute",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2I = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionNotification {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M21.25 17.25a9.755 9.755 0 01-2.82-6l-.16-1.75a6.3 6.3 0 00-5.05-5.63 1.5 1.5 0 10-2.44 0A6.3 6.3 0 005.73 9.5l-.16 1.755a9.755 9.755 0 01-2.82 6v2.5h5.5a2.095 2.095 0 000 .25 3.75 3.75 0 007.5 0 2.095 2.095 0 000-.25h5.5V17.25zm-7 2.75a2.25 2.25 0 11-4.5 0c.003-.084.012-.167.025-.25h4.45c.013.083.022.166.025.25z" }))) : (hAsync("g", null, hAsync("path", { d: "M22 16.95c-2.35-2.35-2.7-4.65-2.8-5.8L19 9.4c-.25-3.15-2.55-5.6-5.5-6.25V3c0-.85-.65-1.5-1.5-1.5s-1.5.65-1.5 1.5v.15C7.55 3.8 5.25 6.25 5 9.4l-.15 1.75c-.15 1.1-.5 3.4-2.85 5.8v3.55h7.05C9.3 21.9 10.5 23 12 23s2.7-1.1 2.95-2.5H22zM20.5 19h-17v-1.45c1.6-1.7 2.6-3.9 2.8-6.25l.15-1.75C6.75 6.65 9.1 4.5 12 4.5s5.25 2.15 5.5 5.05l.15 1.75c.2 2.35 1.2 4.55 2.8 6.25V19z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2I; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-notification",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2H = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionPause {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 1C5.925 1 1 5.925 1 12s4.925 11 11 11 11-4.925 11-11A11 11 0 0012 1zm-1 15H9V8h2zm4 0h-2V8h2z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 1c6.075 0 11 4.925 11 11s-4.925 11-11 11S1 18.075 1 12 5.925 1 12 1zm0 1.5c-5.24 0-9.5 4.26-9.5 9.5s4.26 9.5 9.5 9.5 9.5-4.26 9.5-9.5-4.26-9.5-9.5-9.5zM11 8v8H9V8zm4 0v8h-2V8z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2H; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-pause",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2G = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionPin {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M13.065 6.11L18 11.06l-3.5 3.5a7 7 0 01-1.79 6.755l-.355.355-4.42-4.42-5.83 5.815A.755.755 0 011.04 22l5.835-5.81-4.42-4.42.355-.355A7 7 0 019.565 9.61l3.5-3.5zm1.536-4.646a2.25 2.25 0 012.174.581L22.08 7.35a2.245 2.245 0 010 3.18l-.146.134a2.25 2.25 0 01-3.039-.134l-5.3-5.3a2.25 2.25 0 011.006-3.766z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M22.08 7.35l-5.305-5.305a2.242 2.242 0 00-3.18 0c-.88.88-.88 2.305 0 3.18l.175.175-4.205 4.205a6.988 6.988 0 00-1.815-.24c-1.79 0-3.575.68-4.94 2.045l-.355.355 4.42 4.42L1.04 22.02a.745.745 0 000 1.06c.145.145.34.22.53.22s.385-.075.53-.22l5.835-5.83 4.42 4.42.355-.355a6.984 6.984 0 001.805-6.755l4.205-4.205.175.175a2.242 2.242 0 003.18 0 2.24 2.24 0 00.005-3.18zm-9.235 6.76l.225.835a5.535 5.535 0 01-.775 4.535l-7.65-7.65a5.446 5.446 0 013.11-.96c.485 0 .965.065 1.43.185l.835.225 4.815-4.815 2.83 2.83-4.82 4.815zm8.175-4.64a.752.752 0 01-1.06 0l-5.305-5.305a.754.754 0 010-1.06.752.752 0 011.06 0L21.02 8.41a.752.752 0 010 1.06z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2G; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-pin",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2F = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionPlay {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 1C5.925 1 1 5.925 1 12s4.925 11 11 11 11-4.925 11-11A11 11 0 0012 1zM9.5 16.5v-9l6.875 4.5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 1c6.075 0 11 4.925 11 11s-4.925 11-11 11S1 18.075 1 12 5.925 1 12 1zm0 1.5c-5.24 0-9.5 4.26-9.5 9.5s4.26 9.5 9.5 9.5 9.5-4.26 9.5-9.5-4.26-9.5-9.5-9.5zm-2.5 5l6.875 4.5L9.5 16.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2F; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-play",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2E = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionPopUpWindow {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M23.5 10v9a3 3 0 01-3 3h-9a3 3 0 01-3-3v-9h15zM22 13H10v6a1.5 1.5 0 001.5 1.5h9A1.5 1.5 0 0022 19v-6zM18.5 2v6.5H7v9H3.5a3 3 0 01-3-3V2h18zm-16 .875a.625.625 0 100 1.25.625.625 0 000-1.25zm2 0a.625.625 0 100 1.25.625.625 0 000-1.25zm2 0a.625.625 0 100 1.25.625.625 0 000-1.25z" }))) : (hAsync("g", null, hAsync("path", { d: "M23.5 10v9c0 1.65-1.35 3-3 3h-9c-1.65 0-3-1.35-3-3v-9zM22 13H10v6c0 .85.65 1.5 1.5 1.5h9c.85 0 1.5-.65 1.5-1.5zM18.5 2v6.5H17V5H2v9.5c0 .85.65 1.5 1.5 1.5H7v1.5H3.5c-1.65 0-3-1.35-3-3V2zm-12 .9c-.35 0-.6.25-.6.6s.25.65.6.65.6-.35.6-.65-.25-.6-.6-.6zm-2 0c-.35 0-.6.25-.6.6s.25.65.6.65.6-.35.6-.65-.25-.6-.6-.6zm-2 0c-.35 0-.6.25-.6.6s.25.65.6.65.6-.35.6-.65-.25-.6-.6-.6z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2E; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-pop-up-window",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2D = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionPrint {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M18.5 13.5V22h-13v-8.5h13zM17 15H7v5.5h10V15zm1.5-13v4h5v9.5a3 3 0 01-3 3H20V12H4v6.5h-.5a3 3 0 01-3-3V6h5V2h13zm1 7a1 1 0 100 2 1 1 0 000-2zM17 3.5H7V6h10V3.5z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M18.5 13.5V22h-13v-8.5h13zM17 15H7v5.5h10V15zm1.5-13v4h5v9.5c0 1.655-1.345 3-3 3H20V17h.5c.825 0 1.5-.675 1.5-1.5v-8H2v8c0 .825.675 1.5 1.5 1.5H4v1.5h-.5c-1.655 0-3-1.345-3-3V6h5V2h13zm1 7a1 1 0 110 2 1 1 0 010-2zM17 3.5H7V6h10V3.5z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2D; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-print",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2C = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionRandom {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M2.674 4.163c1.949.003 3.78.93 4.937 2.498l6.858 9.257a3.678 3.678 0 002.938 1.47h.715v-2.302l5.388 3.526-5.388 3.527v-2.302h-.715a6.147 6.147 0 01-4.937-2.498L5.613 8.082a3.678 3.678 0 00-2.939-1.47h-.98a1.224 1.224 0 010-2.449zm5.246 8.66l1.528 2.057-1.837 2.478a6.147 6.147 0 01-4.922 2.479h-.98a1.224 1.224 0 110-2.45h.98a3.678 3.678 0 002.939-1.469l2.292-3.095zM18.122 1.86l5.388 3.527-5.388 3.526V6.612h-.73a3.678 3.678 0 00-2.938 1.47L12.2 11.177 10.673 9.12l1.836-2.478a6.147 6.147 0 014.898-2.479h.715V1.861z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M2.23 4.5c1.815 0 3.54.87 4.625 2.33l7 9.45A4.277 4.277 0 0017.27 18H18v-2.85l5.5 3.6-5.5 3.6V19.5h-.735c-1.815 0-3.54-.87-4.62-2.33l-7-9.45A4.277 4.277 0 002.23 6h-.98a.749.749 0 110-1.5zm5.65 8.76l.935 1.26-1.965 2.65a5.766 5.766 0 01-4.62 2.33h-.98a.749.749 0 110-1.5h.98a4.27 4.27 0 003.415-1.72l2.235-3.02zM18 1.65l5.5 3.6-5.5 3.6V6h-.73c-1.34 0-2.615.645-3.415 1.72l-2.235 3.02-.935-1.26 1.965-2.65a5.766 5.766 0 014.62-2.33H18V1.65z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2C; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-random",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2B = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionRefresh {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M14.191 1.677l.119.013A10.635 10.635 0 0122.565 12a10.615 10.615 0 01-4.065 8.335l1.39 2.165h-6.675l2.68-6.13 1.42 2.175a8.435 8.435 0 00-3.47-14.78 1.065 1.065 0 01.465-2.075zM10.785 1.5l-2.68 6.13L6.68 5.45a8.44 8.44 0 003.475 14.785h-.02a1.065 1.065 0 01-.235 2.1 1.245 1.245 0 01-.23-.025A10.56 10.56 0 015.5 3.665L4.11 1.5h6.675z" }))) : (hAsync("g", null, hAsync("path", { d: "M13.35 2.55c.1-.4.5-.65.9-.55 4.65 1.05 8 5.25 8 10 0 3.15-1.5 6.15-4 8.1l1.6 2.4H13.2l2.7-6.15 1.6 2.45c2-1.65 3.25-4.15 3.25-6.8 0-4.05-2.9-7.65-6.85-8.55-.4-.1-.65-.5-.55-.9zM10.8 1.5L8.1 7.65 6.5 5.2c-2 1.6-3.25 4.1-3.25 6.8 0 4.05 2.9 7.65 6.85 8.55A.745.745 0 119.75 22c-4.65-1.05-8-5.25-8-10 0-3.2 1.5-6.15 3.95-8.1L4.1 1.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2B; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-refresh",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2A = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionRemove {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M21.5 3.5H16v-3H8v3H2.5a.75.75 0 000 1.5h1.79l.845 15.62a2.25 2.25 0 002.245 2.13h9.24a2.25 2.25 0 002.245-2.13L19.71 5h1.79a.75.75 0 100-1.5zm-12.25 15a.75.75 0 11-1.5 0v-10a.75.75 0 111.5 0v10zm3.5 0a.75.75 0 11-1.5 0v-10a.75.75 0 111.5 0v10zm1.75-15h-5V2h5v1.5zm1.75 15a.75.75 0 11-1.5 0v-10a.75.75 0 011.5 0v10z" }))) : (hAsync("g", null, hAsync("path", { d: "M16 .5v3h5.5c.4 0 .75.35.75.75S21.9 5 21.5 5h-1.05l-.8 15.65c-.1 1.6-1.4 2.85-3 2.85H7.4c-1.6 0-2.9-1.25-3-2.85L3.55 5H2.5c-.4 0-.75-.35-.75-.75s.35-.75.75-.75H8v-3zM18.95 5H5.05l.85 15.6c.05.8.7 1.4 1.5 1.4h9.2c.8 0 1.45-.6 1.5-1.4zM12 7.75c.4 0 .75.35.75.75v10c0 .4-.35.75-.75.75s-.75-.35-.75-.75v-10c0-.4.35-.75.75-.75zm3.5 0c.4 0 .75.35.75.75v10c0 .4-.35.75-.75.75s-.75-.35-.75-.75v-10c0-.4.35-.75.75-.75zm-7 0c.4 0 .75.35.75.75v10c0 .4-.35.75-.75.75s-.75-.35-.75-.75v-10c0-.4.35-.75.75-.75zm6-5.75h-5v1.5h5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2A; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-remove",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2z = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionRestart {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M19.67 3.43A11.5 11.5 0 00.56 10.81a11.575 11.575 0 004.27 10.16L3.5 23h6.675L7.5 16.87l-1.3 2A8.97 8.97 0 016 5.29a9 9 0 117.5 15.57 1.24 1.24 0 00-1 1.23 1.25 1.25 0 001.255 1.255c.07.005.14.005.21 0A11.5 11.5 0 0019.67 3.43z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M10.745 1.07c-5.09.565-9.175 4.695-9.69 9.79-.395 3.915 1.275 7.46 4.04 9.695l-1.59 2.435 6.675-.015-2.68-6.11-1.575 2.415A9.454 9.454 0 012.5 12c0-5.6 4.865-10.08 10.59-9.44 4.455.5 8.01 4.175 8.375 8.645.41 5.035-3.135 9.34-7.865 10.15-.35.06-.6.375-.6.735 0 .465.42.825.88.745C19.06 21.94 23 17.435 23 12 23 5.51 17.385.335 10.745 1.07z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2z; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-restart",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2y = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionSearch {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M10 4.125A5.88 5.88 0 0115.875 10a5.8 5.8 0 01-1.13 3.445l-.545.755-.755.545A5.8 5.8 0 0110 15.875a5.875 5.875 0 010-11.75M10 2a8 8 0 104.7 14.465l4.915 4.92c.49.487 1.28.487 1.77 0a1.26 1.26 0 000-1.77l-4.92-4.915A8 8 0 0010 2z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M21.4 19.6l-4.9-4.9a8.02 8.02 0 001.55-4.7c0-4.4-3.6-8-8-8S2 5.6 2 10s3.6 8 8 8c1.75 0 3.4-.55 4.7-1.55l4.9 4.9c.5.5 1.3.5 1.75 0 .5-.45.5-1.25.05-1.75zM3.5 10c0-3.6 2.9-6.5 6.5-6.5s6.5 2.9 6.5 6.5-2.9 6.5-6.5 6.5-6.5-2.9-6.5-6.5z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2y; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-search",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2x = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionShoppingCart {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M5.878 20.082a1.96 1.96 0 110 3.918 1.96 1.96 0 010-3.918zm14.693 0a1.96 1.96 0 110 3.918 1.96 1.96 0 010-3.918zM.943.537a.74.74 0 01.57.012l2.224.955a2.939 2.939 0 011.73 2.17h16.819l-.808 8.414a2.209 2.209 0 01-2.053 1.994l-12.891.832.127 1.386a1.47 1.47 0 001.47 1.333h13.175a.735.735 0 110 1.47H8.14a2.939 2.939 0 01-2.938-2.665L4.046 4.065a1.47 1.47 0 00-.902-1.17l-2.223-.98a.74.74 0 01-.387-.98.74.74 0 01.409-.398z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M5.5 20a2 2 0 110 4 2 2 0 010-4zm15 0a2 2 0 110 4 2 2 0 010-4zM.06.455A.755.755 0 011.045.06l2.27.975c.68.29 1.21.82 1.52 1.465h18.24l-.895 9.41a2.987 2.987 0 01-2.795 2.71l-13.145.85.065.67c.075.775.715 1.36 1.495 1.36h13.45a.749.749 0 110 1.5H7.8a2.98 2.98 0 01-2.985-2.715L3.63 3.655a1.505 1.505 0 00-.905-1.24L.455 1.44A.75.75 0 01.06.455zM21.43 4H5.17l.935 9.975 13.185-.85c.74-.05 1.325-.62 1.395-1.355L21.43 4z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2x; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-shopping-cart",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2w = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionShowPassword {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M12 4.75c5.25 0 8.275 3.875 10.75 7.25-2.475 3.375-5.5 7.25-10.75 7.25S3.75 15.375 1.25 12C3.725 8.625 6.75 4.75 12 4.75zM12 7a5 5 0 100 10 5 5 0 000-10zm0 1.5a3.5 3.5 0 110 7 3.5 3.5 0 010-7z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M12 4c5.8 0 9.15 4.55 11.35 7.55l.35.45-.35.45C21.15 15.45 17.8 20 12 20S2.85 15.45.65 12.45L.3 12l.35-.45C2.85 8.55 6.2 4 12 4zm0 1.5c-4.5 0-7.25 3-9.8 6.5 2.55 3.5 5.3 6.5 9.8 6.5 4.5 0 7.25-3 9.8-6.5-2.55-3.5-5.3-6.5-9.8-6.5zM12 7c2.75 0 5 2.25 5 5s-2.25 5-5 5-5-2.25-5-5 2.25-5 5-5zm0 1.5c-1.95 0-3.5 1.55-3.5 3.5s1.55 3.5 3.5 3.5 3.5-1.55 3.5-3.5-1.55-3.5-3.5-3.5z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2w; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-show-password",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2v = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionSort {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M17.25 3.5c.69 0 1.25.56 1.25 1.25V14h3.17l-4.42 6.75L12.83 14H16V4.75c0-.69.56-1.25 1.25-1.25zm-10.5-.25L11.17 10H8v9.25a1.25 1.25 0 11-2.5 0V10H2.33l4.42-6.75z" }))) : (hAsync("g", null, hAsync("path", { d: "M17.25 4c.4 0 .75.35.75.75V14h3.65l-4.4 6.75-4.4-6.75h3.65V4.75c0-.4.35-.75.75-.75zm-10.5-.75l4.4 6.75H7.5v9.25c0 .4-.35.75-.75.75S6 19.65 6 19.25V10H2.35z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2v; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-sort",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2u = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionSoundOn {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M13 3.5v17h-2l-4.5-4H5a3 3 0 01-3-3v-3a3 3 0 013-3h1.5l4.5-4zm6.7.8c4.252 4.253 4.252 11.147 0 15.4l-1.06-1.06a9.39 9.39 0 000-13.28zm-2.665 2.665l.025.025a7.12 7.12 0 010 10.07L16 16a5.625 5.625 0 000-7.975z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M13 3.5v17h-2l-4.5-4H5c-1.655 0-3-1.345-3-3v-3c0-1.655 1.345-3 3-3h1.5l4.5-4h2zm6.7.8a10.8 10.8 0 013.19 7.7 10.8 10.8 0 01-3.19 7.7l-1.06-1.06A9.322 9.322 0 0021.39 12c0-2.51-.975-4.865-2.75-6.64zm-8.2.76L7.07 9H5c-.825 0-1.5.675-1.5 1.5v3c0 .825.675 1.5 1.5 1.5h2.07l4.43 3.94V5.06zm5.535 1.905A7.068 7.068 0 0119.12 12c0 1.905-.74 3.69-2.085 5.035l-1.06-1.06A5.59 5.59 0 0017.62 12a5.582 5.582 0 00-1.645-3.975z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2u; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-sound-on",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2t = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionStreamOn {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M1.75 18a1.25 1.25 0 110 2.5 1.25 1.25 0 010-2.5zm0-3.5a4.755 4.755 0 014.75 4.75c-.003.422-.06.842-.17 1.25H4.75A3.25 3.25 0 00.5 16.25v-1.58c.408-.11.828-.167 1.25-.17zm0-3.5A8.26 8.26 0 0110 19.25c-.007.42-.047.837-.12 1.25h-1.5c.078-.412.118-.83.12-1.25a6.76 6.76 0 00-6.75-6.75 6.88 6.88 0 00-1.25.105v-1.5c.414-.065.831-.1 1.25-.105zM20.5 3.5a3 3 0 013 3v11a3 3 0 01-3 3h-9.09a9.37 9.37 0 00.09-1.25A9.75 9.75 0 001.75 9.5a9.37 9.37 0 00-1.25.09V6.5a3 3 0 013-3z" }))) : (hAsync("g", null, hAsync("path", { d: "M1.75 11C6.3 11 10 14.7 10 19.25c0 .45-.05.85-.1 1.25H8.4c.05-.4.1-.8.1-1.25 0-3.7-3.05-6.75-6.75-6.75-.45 0-.85.05-1.25.1v-1.5c.4-.05.8-.1 1.25-.1zm0 3.5c2.6 0 4.75 2.15 4.75 4.75 0 .45-.05.85-.15 1.25h-1.6c.15-.4.25-.8.25-1.25C5 17.45 3.55 16 1.75 16c-.45 0-.85.1-1.25.25v-1.6c.4-.1.8-.15 1.25-.15zm0 3.5a1.25 1.25 0 110 2.5 1.25 1.25 0 010-2.5zM20.5 3.5c1.65 0 3 1.35 3 3v11c0 1.65-1.35 3-3 3h-9.1c.15-.85.1-1.15.1-1.5h9c.85 0 1.5-.65 1.5-1.5v-11c0-.85-.65-1.5-1.5-1.5h-17C2.7 5 2 5.65 2 6.5v3s-.45-.05-1.5.1V6.5c0-1.65 1.35-3 3-3z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2t; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-stream-on",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2s = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionSuccess {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M9 20.215L1.695 12.91a1.25 1.25 0 011.765-1.77L9 16.68l12-12a1.25 1.25 0 011.765 1.765z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M22.4 5.05c-.3-.3-.75-.3-1.05 0L9 17.4l-5.9-5.9c-.3-.3-.75-.3-1.05 0s-.3.75 0 1.05L9 19.5 22.4 6.1c.3-.3.3-.75 0-1.05z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2s; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-success",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2r = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionThumbsDown {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M20.79 11a2.255 2.255 0 00-.715-2.935 2.315 2.315 0 00-1.115-2.91c.29-1.43-1.095-2.38-2.71-2.38h-3.22A8.87 8.87 0 008.5 4a5.635 5.635 0 01-2 .645V4H2v11.5h4.5v-2.61c1.93.55 3.125 2.765 4.17 5.135.765 1.73.94 2.11 1.305 2.825a1.535 1.535 0 002.895-.955c-.13-1-.5-4-.5-4a1 1 0 011-1.14h3.625C21 14.75 22.05 12.315 20.79 11zM5 14H3.5V5.5H5V14z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M21.655 10.87c.37-1.07.105-2.195-.72-3.055.245-1.125-.215-2.315-1.185-3.06a2.427 2.427 0 00-.555-1.53c-.625-.765-1.725-1.22-2.94-1.22L13.03 2h-.015c-2.46 0-4.135.93-4.845 1.33-.185.05-.745.67-3.615.67H2v11.5h4.5v-1.825c1.395.53 2.43 2.26 3.485 4.655.765 1.725.95 2.125 1.32 2.86.425.835 1.19 1.31 2.025 1.31.225 0 .45-.035.675-.105 1.1-.34 1.76-1.41 1.605-2.6l-.525-4.01a.251.251 0 01.25-.285h3.625a3.088 3.088 0 002.87-1.895c.405-.935.33-1.945-.175-2.735zm-1.205 2.14c-.205.48-.705.99-1.49.99h-3.625c-.51 0-.99.22-1.32.605-.335.385-.48.89-.41 1.385l.525 4c.075.57-.255.88-.56.975-.14.04-.62.14-.92-.455-.36-.71-.53-1.075-1.285-2.79-1.095-2.46-2.455-5.07-4.865-5.61V5.4c1.555-.2 2.325-.73 2.4-.76.665-.37 2.045-1.145 4.115-1.145h.01l3.225.005c.76 0 1.445.26 1.785.675.325.395.215.705.085 1.35.555.305.945.475 1.215 1.02.335.67.095 1.1-.18 1.735.54.425.97.715 1.12 1.31.135.525-.045.84-.4 1.515.22.225 1.04.835.575 1.905z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2r; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-thumbs-down",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2q = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionThumbsUp {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M18.96 9.25h-3.625a1 1 0 01-1-1.14s.395-3 .5-4A1.535 1.535 0 0012 3.15c-.365.715-.54 1.095-1.305 2.825-1.045 2.37-2.24 4.595-4.17 5.145v-.62H2V22h4.5v-2.64a5.5 5.5 0 012 .64 8.87 8.87 0 004.555 1.265h3.195c1.615 0 3-.95 2.71-2.38a2.315 2.315 0 001.115-2.91A2.255 2.255 0 0020.79 13c1.26-1.315.21-3.75-1.83-3.75zM5 20.5H3.5V12H5v8.5z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M21.655 13.13c.505-.79.58-1.8.175-2.735-.51-1.17-1.605-1.895-2.87-1.895h-3.625a.25.25 0 01-.245-.295l.525-4c.155-1.19-.505-2.26-1.605-2.6-1.08-.335-2.165.15-2.7 1.21-.375.735-.56 1.135-1.32 2.86-1.28 2.9-2.525 4.83-4.425 4.83H2v11.5h4.5V20.12c.565.09 1.115.245 1.61.52 1 .555 2.575 1.36 4.905 1.36h.015l3.22-.005c1.215 0 2.315-.45 2.945-1.215.36-.44.55-.98.555-1.535.97-.74 1.425-1.935 1.185-3.06.825-.86 1.09-1.985.72-3.055zM20.3 14.315c-.11.62-.545.935-1.145 1.405.27.62.455.93.27 1.51-.12.37-.24.655-1.31 1.245.125.62.245.95-.085 1.355-.335.415-1.02.67-1.78.67l-3.22.005h-.01c-1.62 0-2.85-.435-4.175-1.18-.755-.42-1.545-.625-2.34-.725v-6.71c2.41-.545 3.77-3.15 4.855-5.615.755-1.71.925-2.075 1.285-2.79.3-.595.78-.495.92-.455.305.095.635.405.56.975L13.605 8c-.15 1.055.665 2 1.735 2h3.625c.785 0 1.285.51 1.495.99.51 1.18-.47 1.71-.57 1.91.285.56.505.895.41 1.415z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2q; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-thumbs-up",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2p = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionTilesAdd {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M10.5 13.5V22H4a2 2 0 01-2-2v-6.5h8.5zm7.25 0a.75.75 0 01.75.75V17h2.75a.75.75 0 010 1.5H18.5v2.75a.75.75 0 11-1.5 0V18.5h-2.75a.75.75 0 110-1.5H17v-2.75a.75.75 0 01.75-.75zM10.5 2v8.5H2V4a2 2 0 012-2h6.5zM20 2a2 2 0 012 2v6.5h-8.5V2z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M10.5 13.5V22H4c-1.1 0-2-.9-2-2v-6.5h8.5zm7.25 0c.4 0 .75.35.75.75V17h2.75c.4 0 .75.35.75.75s-.35.75-.75.75H18.5v2.75c0 .4-.35.75-.75.75s-.75-.35-.75-.75V18.5h-2.75c-.4 0-.75-.35-.75-.75s.35-.75.75-.75H17v-2.75c0-.4.35-.75.75-.75zM9 15H3.5v5c0 .3.2.5.5.5h5V15zm1.5-13v8.5H2V4c0-1.1.9-2 2-2h6.5zM20 2c1.1 0 2 .9 2 2v6.5h-8.5V2zM9 3.5H4c-.3 0-.5.2-.5.5v5H9V3.5zm11 0h-5V9h5.5V4c0-.3-.2-.5-.5-.5z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2p; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-tiles-add",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2o = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionUpload {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M21.25 20.185a1.065 1.065 0 010 2.13H2.75a1.065 1.065 0 110-2.13zM12 2l4.58 7h-3.33v6.75a1.25 1.25 0 11-2.5 0V9H7.42L12 2z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M21.25 20.5c.4 0 .75.35.75.75s-.35.75-.75.75H2.75c-.4 0-.75-.35-.75-.75s.35-.75.75-.75zM12 2l4.6 7h-3.85v6.75c0 .4-.35.75-.75.75s-.75-.35-.75-.75V9H7.4L12 2z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2o; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-upload",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2n = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionVolumeDown {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M13 3.5v17h-2l-4.5-4H5a3 3 0 01-3-3v-3a3 3 0 013-3h1.5l4.5-4h2zm9 7.75a.75.75 0 110 1.5h-6a.75.75 0 010-1.5z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M13 3.5v17h-2l-4.5-4H5c-1.655 0-3-1.345-3-3v-3c0-1.655 1.345-3 3-3h1.5l4.5-4h2zm-1.5 1.56L7.07 9H5c-.825 0-1.5.675-1.5 1.5v3c0 .825.675 1.5 1.5 1.5h2.07l4.43 3.94V5.06zM22 11.25a.749.749 0 110 1.5h-6a.749.749 0 110-1.5z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2n; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-volume-down",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2m = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionVolumeUp {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M13 3.5v17h-2l-4.5-4H5a3 3 0 01-3-3v-3a3 3 0 013-3h1.5l4.5-4h2zm6 4.75a.75.75 0 01.75.75v2.25H22a.75.75 0 110 1.5h-2.25V15a.75.75 0 11-1.5 0v-2.25H16a.75.75 0 010-1.5h2.25V9a.75.75 0 01.75-.75z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M13 3.5v17h-2l-4.5-4H5c-1.655 0-3-1.345-3-3v-3c0-1.655 1.345-3 3-3h1.5l4.5-4h2zm-1.5 1.56L7.07 9H5c-.825 0-1.5.675-1.5 1.5v3c0 .825.675 1.5 1.5 1.5h2.07l4.43 3.94V5.06zM19 8.25c.415 0 .75.335.75.75v2.25H22a.749.749 0 110 1.5h-2.25V15a.749.749 0 11-1.5 0v-2.25H16a.749.749 0 110-1.5h2.25V9c0-.415.335-.75.75-.75z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2m; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-volume-up",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2l = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionZoomIn {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M21.385 19.615l-4.92-4.915a8 8 0 10-1.765 1.765l4.915 4.92c.49.487 1.28.487 1.77 0a1.26 1.26 0 000-1.77zM10.75 13a.75.75 0 11-1.5 0v-2.25H7a.75.75 0 110-1.5h2.25V7a.75.75 0 011.5 0v2.25H13a.75.75 0 110 1.5h-2.25V13z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M10 2c4.42 0 8 3.58 8 8 0 1.76-.575 3.38-1.535 4.695l4.92 4.92c.485.49.485 1.28.005 1.77a1.245 1.245 0 01-.885.365c-.32 0-.64-.12-.885-.365l-4.92-4.92A7.961 7.961 0 0110 18c-4.42 0-8-3.58-8-8s3.58-8 8-8zm0 1.5A6.506 6.506 0 003.5 10c0 3.585 2.915 6.5 6.5 6.5s6.5-2.915 6.5-6.5-2.915-6.5-6.5-6.5zm0 2.75c.415 0 .75.335.75.75v2.25H13a.749.749 0 110 1.5h-2.25V13a.749.749 0 11-1.5 0v-2.25H7a.749.749 0 110-1.5h2.25V7c0-.415.335-.75.75-.75z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2l; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-zoom-in",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2k = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ActionZoomOut {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M21.385 19.615l-4.92-4.915a8 8 0 10-1.765 1.765l4.915 4.92c.49.487 1.28.487 1.77 0a1.26 1.26 0 000-1.77zM13 10.75H7a.75.75 0 110-1.5h6a.75.75 0 110 1.5z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M10 2c4.42 0 8 3.58 8 8 0 1.76-.575 3.38-1.535 4.695l4.92 4.92c.485.49.485 1.28.005 1.77a1.245 1.245 0 01-.885.365c-.32 0-.64-.12-.885-.365l-4.92-4.92A7.961 7.961 0 0110 18c-4.42 0-8-3.58-8-8s3.58-8 8-8zm0 1.5A6.506 6.506 0 003.5 10c0 3.585 2.915 6.5 6.5 6.5s6.5-2.915 6.5-6.5-2.915-6.5-6.5-6.5zm3 5.75a.749.749 0 110 1.5H7a.749.749 0 110-1.5z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2k; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-action-zoom-out",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

/**
 * @license
 * Scale https://github.com/telekom/scale
 *
 * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
const tagTypes = {
  beta: 'β',
  WIP: '🛠 WIP',
  deprecated: '😵 Deprecation notice',
};
const defaultMessages = {
  beta: 'This component is currently in beta status. Some things may be refactored. Watch the change log for now.',
  WIP: `This component is currently under development and is prone to change. Please wait for its release.\nIt will be available in Storybook once it's finished and documented.`,
  deprecated: `This component is deprecated.`,
};
function statusNote({ tag = 'WIP', extraMessage = null, message = null, source = null, type = 'info', }) {
  // tslint:disable-next-line
  const dipatchMessage = console[type];
  dipatchMessage(`%c scale – ${tagTypes[tag]} `, 'background: #E20074; color: #FFF; border-radius: 4px', `\n\n${message ? message : defaultMessages[tag]} ${extraMessage ? '\n' + extraMessage : ''}
    `, source !== null ? '\nsource:' : '', 
  // typeof source === 'object' ? '\n' : `\nsource: ${source}`,
  typeof source === 'object' ? source : `${source}`, source !== null ? '\n\n' : '');
}

const alertCss = "/*!@.alert*/.alert.sc-scale-alert{box-sizing:border-box;background:#eee;color:#333;width:100%;padding:1rem;text-align:left;position:relative;display:flex;justify-content:space-between}/*!@.alert__body*/.alert__body.sc-scale-alert{display:flex}/*!@.alert__headline*/.alert__headline.sc-scale-alert{font-size:var(--type-size-3, 1rem);color:white;margin:0}/*!@.alert__icon*/.alert__icon.sc-scale-alert{display:flex;align-items:center;justify-content:center;background:none;height:24px;width:24px;margin:0 0.5rem 0 0;border-radius:var(--scl-radius-8)}/*!@.alert__close*/.alert__close.sc-scale-alert{height:16px;opacity:0.5;cursor:pointer}/*!@.alert__close:hover*/.alert__close.sc-scale-alert:hover{opacity:1}/*!@.alert--variant-primary*/.alert--variant-primary.sc-scale-alert{background:blue;color:#fff}/*!@.alert--variant-secondary*/.alert--variant-secondary.sc-scale-alert{background:#eee;color:#333}/*!@.alert--variant-variant-warning*/.alert--variant-variant-warning.sc-scale-alert{background:orange;color:#fff}/*!@.alert--variant-danger*/.alert--variant-danger.sc-scale-alert{background:red;color:#fff}/*!@.alert--variant-success*/.alert--variant-success.sc-scale-alert{background:green;color:#fff}/*!@.alert--variant-info*/.alert--variant-info.sc-scale-alert{background:lightblue;color:#fff}";

class Alert {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) Alert size */
    this.size = '';
    /** (optional) Alert variant */
    this.variant = '';
    /** (optional) Alert timeout */
    this.timeout = false;
    /** (optional) Alert icon */
    this.icon = '';
    this.defaultTimeout = 2000;
    this.close = () => {
      this.opened = false;
    };
    this.onCloseAlertWithTimeout = () => {
      if (this.timeout !== false) {
        if (typeof this.timeout === 'number') {
          setTimeout(this.close, this.timeout);
        }
        else {
          setTimeout(this.close, this.defaultTimeout);
        }
      }
      else {
        return null;
      }
    };
  }
  componentWillLoad() {
    this.hasSlotClose = !!this.hostElement.querySelector('[slot="close"]');
  }
  connectedCallback() {
    statusNote({ source: this.hostElement, type: 'warn' });
  }
  /** Alert method: open() */
  async open() {
    this.opened = true;
  }
  render() {
    this.onCloseAlertWithTimeout();
    if (!this.opened) {
      return null;
    }
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync("div", { class: this.getCssClassMap() }, hAsync("div", { class: "alert__body" }, hAsync("div", { class: "alert__icon" }, this.icon), hAsync("div", { class: "alert__content" }, hAsync("div", { class: "alert__headline" }, this.headline), hAsync("slot", null))), hAsync("a", { class: "alert__close", onClick: this.close }, this.hasSlotClose ? (hAsync("div", { class: "alert__close-icon" }, hAsync("slot", { name: "close" }))) : ('x')))));
  }
  getCssClassMap() {
    return classnames('alert', this.size && `alert--size-${this.size}`, this.variant && `alert--variant-${this.variant}`);
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return alertCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-alert",
    "$members$": {
      "size": [1],
      "variant": [1],
      "headline": [513],
      "opened": [516],
      "timeout": [8],
      "icon": [1],
      "styles": [1],
      "open": [64]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["headline", "headline"], ["opened", "opened"]]
  }; }
}

const iconCss$2j = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class AlertCompliance {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M10.97 14H8a.75.75 0 110-1.5h4.06a7.865 7.865 0 011.89-1.5H8a.75.75 0 110-1.5h8a.74.74 0 01.725.575A7.535 7.535 0 0121 10.72V1H3v19a3 3 0 003 3h6.06a7.725 7.725 0 01-1.09-9zM8 6.5h8A.75.75 0 1116 8H8a.75.75 0 010-1.5zm12.895 9.035a.745.745 0 00-1.06 0L17 18.355l-1.41-1.41A.75.75 0 0014.545 18L17 20.5l3.88-3.88a.755.755 0 00.015-1.085zM17.75 11.5a6.25 6.25 0 100 12.5 6.25 6.25 0 000-12.5zm0 11a4.75 4.75 0 110-9.5 4.75 4.75 0 010 9.5z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M17.75 11.5c3.45 0 6.25 2.8 6.25 6.25S21.2 24 17.75 24s-6.25-2.8-6.25-6.25 2.8-6.25 6.25-6.25zM21 1v9.72a7.586 7.586 0 00-1.5-.515V2.5h-15V20c0 .825.675 1.5 1.5 1.5h4.97c.3.545.67 1.045 1.09 1.5H6c-1.655 0-3-1.345-3-3V1h18zm-.105 14.535a.745.745 0 00-1.06 0l-2.82 2.82-1.41-1.41a.745.745 0 00-1.06 0 .745.745 0 000 1.06l2.47 2.47 3.88-3.88a.754.754 0 000-1.06zM12.06 12.5a7.67 7.67 0 00-1.09 1.5H8a.749.749 0 110-1.5zm3.94-3a.74.74 0 01.725.575c-.995.13-1.935.45-2.775.925H8a.749.749 0 110-1.5zm0-3A.749.749 0 1116 8H8a.749.749 0 110-1.5z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2j; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-alert-compliance",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2i = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class AlertError {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 1C5.925 1 1 5.925 1 12s4.925 11 11 11 11-4.925 11-11A11 11 0 0012 1zm-1 5.75h2v6.5h-2zm1 10.5a1.25 1.25 0 110-2.5 1.25 1.25 0 010 2.5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M12 1c6.1 0 11 4.9 11 11s-4.9 11-11 11S1 18.1 1 12 5.9 1 12 1zm0 1.5c-5.25 0-9.5 4.25-9.5 9.5s4.25 9.5 9.5 9.5 9.5-4.25 9.5-9.5-4.25-9.5-9.5-9.5zM12 15a1.25 1.25 0 110 2.5 1.25 1.25 0 010-2.5zm1-8v6.5h-2V7h2z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2i; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-alert-error",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2h = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class AlertHelp {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 1C5.925 1 1 5.925 1 12s4.925 11 11 11 11-4.925 11-11A11 11 0 0012 1zm1.25 16.235h-2.31v-2.31h2.31zm-.18-3.705v.21h-1.965v-.5c0-1.95 2.145-2.115 2.145-3.39a.935.935 0 00-1-1c-.615 0-1 .39-1.065 1.155h-2.03a2.95 2.95 0 013.09-3c1.695 0 3.03 1.11 3.03 2.775 0 2.145-2.205 2.445-2.205 3.75z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 1c6.1 0 11 4.9 11 11s-4.9 11-11 11S1 18.1 1 12 5.95 1 12 1zm0 1.5c-5.25 0-9.5 4.25-9.5 9.5s4.25 9.5 9.5 9.5 9.5-4.25 9.5-9.5-4.25-9.5-9.5-9.5zm1.25 12.4v2.3h-2.3v-2.3zm-1-7.9c1.7 0 3 1.1 2.95 2.8 0 2.15-2.2 2.45-2.2 3.75v.2h-1.95v-.5c0-1.95 2.15-2.15 2.15-3.4 0-.65-.4-1-1-1s-1 .4-1.05 1.15h-2c.05-1.6 1.15-3 3.1-3z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2h; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-alert-help",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2g = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class AlertImprintDataprivacy {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M12 1.75l-8.75 2v7.4c0 5.386 3.571 10.12 8.75 11.6a12.065 12.065 0 008.75-11.6v-7.4l-8.75-2zm0 4.75A2.425 2.425 0 0114.5 9c0 1.5-1.055 3-2.5 3s-2.5-1.47-2.5-3A2.425 2.425 0 0112 6.5zm-4.5 9l.16-.865A2 2 0 019.625 13h1L12 14.395 13.395 13h1a2 2 0 011.965 1.635l.14.865h-9z" }))) : (hAsync("g", null, hAsync("path", { d: "M12 1l9.5 2.15v8c0 2.85-.95 5.55-2.6 7.75-2.6 3.4-5.85 4.35-6.9 4.65-4.2-1.2-6.25-3.8-6.7-4.4-1.75-2.25-2.8-5.05-2.8-8v-8zm0 1.5L4 4.35v6.8c0 4.95 3.3 9.35 8 10.8 4.7-1.45 8-5.85 8-10.8v-6.8zM10.6 13l1.4 1.4 1.4-1.4h1c.95 0 1.75.7 1.95 1.65l.15.85h-9l.15-.85C7.8 13.7 8.65 13 9.6 13zM12 6.5c1.4 0 2.5 1 2.5 2.5 0 1.55-1.05 3-2.5 3s-2.5-1.5-2.5-3 1.1-2.5 2.5-2.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2g; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-alert-imprint-dataprivacy",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2f = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class AlertInformation {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M12 1C5.925 1 1 5.925 1 12s4.925 11 11 11 11-4.925 11-11A11 11 0 0012 1zm1 16h-2v-6.5h2V17zm-1-8a1.25 1.25 0 110-2.5A1.25 1.25 0 0112 9z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M12 1c6.1 0 11 4.9 11 11s-4.9 11-11 11S1 18.1 1 12 5.9 1 12 1zm0 1.5c-5.25 0-9.5 4.25-9.5 9.5s4.25 9.5 9.5 9.5 9.5-4.25 9.5-9.5-4.25-9.5-9.5-9.5zm1 8V17h-2v-6.5h2zm-1-4A1.25 1.25 0 1112 9a1.25 1.25 0 010-2.5z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2f; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-alert-information",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2e = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class AlertLegal {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M23.72 14.865L20.525 2H13v-.75a1 1 0 10-2 0V2H3.5L.28 14.865.25 15v.12c0 1.26.965 3.645 4.625 3.645s4.625-2.4 4.625-3.66V15L6.71 3.75H11V19.5H8.5A2.5 2.5 0 006 22h12a2.5 2.5 0 00-2.5-2.5H13V3.75h4.29l-2.76 11.115a1 1 0 00-.03.24c0 1.26.965 3.645 4.625 3.645s4.625-2.385 4.625-3.645a1 1 0 00-.03-.24zM7.445 15h-5.14l2.57-10.345L7.445 15zm9.11 0l2.57-10.345L21.695 15h-5.14z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M23.48 14.925L20.27 2h-7.52v-.75a.749.749 0 10-1.5 0V2H3.73L.52 14.925a.736.736 0 00-.02.18c0 1.175.915 3.395 4.375 3.395s4.375-2.22 4.375-3.395c0-.06-.005-.12-.02-.18L6.39 3.5h4.86v16H8.5c-.345 0-.675.07-.975.195-.6.255-1.075.73-1.33 1.33-.125.3-.195.63-.195.975h12c0-.345-.07-.675-.195-.975a2.508 2.508 0 00-1.33-1.33c-.3-.125-.63-.195-.975-.195h-2.75v-16h4.86l-2.835 11.425a.736.736 0 00-.02.18c0 1.175.915 3.395 4.375 3.395s4.37-2.22 4.37-3.395c0-.06-.005-.12-.02-.18zM4.875 3.62L7.7 15H2.05L4.875 3.62zM16.3 15l2.825-11.38L21.95 15H16.3z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2e; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-alert-legal",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2d = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class AlertSecurity {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 1.75l-8.75 2v7.4c0 5.386 3.571 10.12 8.75 11.6a12.065 12.065 0 008.75-11.6v-7.4zm4.295 8.28l-5.03 5.03-3.135-3.135a.75.75 0 111.06-1.06l2.075 2.075 3.97-3.97a.75.75 0 011.06 1.06z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 1l9.5 2.1v8c0 3.05-1.1 5.95-3 8.2-2.2 2.7-4.8 3.7-6.5 4.2-.8-.2-3.65-1-6.15-3.75-2.1-2.3-3.35-5.35-3.35-8.6v-8zm0 1.5L4 4.35v6.8c0 4.95 3.3 9.35 8 10.8 4.7-1.45 8-5.85 8-10.8v-6.8zm3.3 6.45c.3-.3.75-.3 1.05 0s.3.75 0 1.05l-5.05 5.05-3.15-3.15c-.3-.3-.3-.75 0-1.05s.75-.3 1.05 0l2.15 2.05z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2d; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-alert-security",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2c = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class AlertWarning {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M23.075 18L14.6 3.32a3 3 0 00-5.2 0L.925 18a3 3 0 002.6 4.5H20.5a3 3 0 002.575-4.5zM11 8.25h2v6.5h-2v-6.5zm1 10.5a1.25 1.25 0 110-2.5 1.25 1.25 0 010 2.5z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M11.95 1.8c1 0 2 .5 2.6 1.5l8.5 14.7c1.2 2-.25 4.5-2.55 4.5H3.55C1.25 22.5-.2 20 .95 18l8.4-14.7c.6-1 1.6-1.5 2.6-1.5zm.105 1.5h-.11a1.44 1.44 0 00-1.245.75l-8.5 14.7c-.4.7-.15 1.25 0 1.5s.5.75 1.3.75h17c.75 0 1.15-.5 1.25-.75.15-.25.4-.8.05-1.5l-8.5-14.7c-.4-.7-1.05-.75-1.3-.75zM12 16.5a1.25 1.25 0 110 2.5 1.25 1.25 0 010-2.5zm1-8V15h-2V8.5h2z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2c; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-alert-warning",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

/**
 * @license
 * Scale https://github.com/telekom/scale
 *
 * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
/**
 * Conditionally render markup for an icon based on data.
 *
 * @param value when a string, will be used as the `name` attribute in a `<scale-icon>`,
 *              when a function it should return a string of HTML
 * @param customContainerClass a custom class for the wrapper of the HTML returned by `value`
 */
const renderIcon = (value, customContainerClass) => {
  if (typeof value === 'function') {
    return hAsync("span", { innerHTML: value(), class: customContainerClass });
  }
  if (typeof value === 'string') {
    return hAsync("scale-icon", { name: value });
  }
  const Tag = value.tag;
  return hAsync(Tag, Object.assign({}, value.attributes));
};

const appFooterCss = "/*!@:host*/.sc-scale-app-footer-h{--background:var(--scl-color-black);--color:var(--scl-color-white);--spacing-top:var(--scl-spacing-32);--spacing-bottom:var(--scl-spacing-24);--spacing-x:var(--scl-spacing-24);--background-container:var(--scl-color-background-standard, #fff);--radius:var(--scl-radius-12);--max-width:inherit;--border-top-minimal:var(--scl-spacing-1) solid var(--scl-color-grey-20);--color-minimal:var(--scl-color-grey-60);--background-minimal:var(--scl-color-background-standard);--spacing-angular:var(--scl-spacing-24);--spacing-minimal:var(--scl-spacing-24);--background-mask:var(--scl-color-background-standard, #fff);--radius-mask:0 0 var(--scl-radius-12) var(--scl-radius-12);--height-logo:var(--scl-spacing-24);--font-size-copyright:var(--scl-font-size-14);--color-link-standard:var(--scl-color-white);--color-link-minimal:var(--scl-color-grey-60);--font-size-navigation-standard:var(--scl-font-size-14);--font-family-navigation-standard:var(--scl-font-family-sans);--font-weight-navigation-standard:var(--scl-font-weight-extrabold);--font-weight-navigation-minimal:var(--scl-font-weight-medium);--spacing-navigation-standard:var(--scl-spacing-8);--color-navigation-standard-hover:var(--scl-color-white);--color-navigation-minimal-hover:var(--scl-color-primary-hover);--color-navigation-active-focus:var(--scl-color-primary-active);--box-shadow-navigation-focus:0 0 0 var(--scl-spacing-2)\n    var(--scl-color-primary);--border-color-standard-hover:var(--scl-color-white)}/*!@.footer*/.footer.sc-scale-app-footer{width:100%;background:var(--background);color:var(--color);padding:var(--spacing-top) var(--spacing-x) var(--spacing-bottom)\n    var(--spacing-x);position:relative;bottom:0;box-sizing:border-box}/*!@.footer-container*/.footer-container.sc-scale-app-footer{background:var(--background-container)}/*!@.footer--variant-angular .footer*/.footer--variant-angular.sc-scale-app-footer .footer.sc-scale-app-footer{padding:var(--spacing-angular)}/*!@.footer--variant-minimal .footer*/.footer--variant-minimal.sc-scale-app-footer .footer.sc-scale-app-footer{border-top:var(--border-top-minimal);color:var(--color-minimal);background:var(--background-minimal);padding:var(--spacing-minimal)}/*!@.footer-mask*/.footer-mask.sc-scale-app-footer{position:relative;z-index:1;height:var(--scl-radius-12);top:var(--scl-radius-12);background:var(--background-mask);border-radius:var(--radius-mask)}/*!@.footer--variant-angular .footer-mask,\n.footer--variant-minimal .footer-mask*/.footer--variant-angular.sc-scale-app-footer .footer-mask.sc-scale-app-footer,.footer--variant-minimal.sc-scale-app-footer .footer-mask.sc-scale-app-footer{display:none}/*!@.footer-branding .logo svg*/.footer-branding.sc-scale-app-footer .logo.sc-scale-app-footer svg.sc-scale-app-footer{width:auto;height:var(--height-logo)}/*!@.footer-copyright*/.footer-copyright.sc-scale-app-footer{font-size:var(--font-size-copyright)}/*!@.footer-navigation a*/.footer-navigation.sc-scale-app-footer a.sc-scale-app-footer{color:var(--color-link-standard);text-decoration:none}/*!@.footer--variant-minimal .footer-navigation a*/.footer--variant-minimal.sc-scale-app-footer .footer-navigation.sc-scale-app-footer a.sc-scale-app-footer{color:var(--color-link-minimal)}/*!@.footer-navigation ul*/.footer-navigation.sc-scale-app-footer ul.sc-scale-app-footer{margin:0;padding:0;list-style:none;font-size:var(--font-size-navigation-standard);font-family:var(--font-family-navigation-standard);font-weight:var(--font-weight-navigation-standard)}/*!@.footer--variant-minimal .footer-navigation ul*/.footer--variant-minimal.sc-scale-app-footer .footer-navigation.sc-scale-app-footer ul.sc-scale-app-footer{font-weight:var(--font-weight-navigation-minimal)}/*!@.footer-navigation li a*/.footer-navigation.sc-scale-app-footer li.sc-scale-app-footer a.sc-scale-app-footer{display:flex;align-items:center;padding:var(--spacing-navigation-standard);margin:calc(-1 * var(--spacing-navigation-standard)) 0}/*!@.footer-navigation li span*/.footer-navigation.sc-scale-app-footer li.sc-scale-app-footer span.sc-scale-app-footer{padding:var(--scl-spacing-4) 0}/*!@.footer-navigation li a:hover*/.footer-navigation.sc-scale-app-footer li.sc-scale-app-footer a.sc-scale-app-footer:hover{color:var(--color-navigation-standard-hover)}/*!@.footer--variant-minimal .footer-navigation li a:hover*/.footer--variant-minimal.sc-scale-app-footer .footer-navigation.sc-scale-app-footer li.sc-scale-app-footer a.sc-scale-app-footer:hover{color:var(--scl-color-primary-hover)}/*!@.footer--variant-minimal .footer-navigation li a:hover span*/.footer--variant-minimal.sc-scale-app-footer .footer-navigation.sc-scale-app-footer li.sc-scale-app-footer a.sc-scale-app-footer:hover span.sc-scale-app-footer{border-bottom:1px solid transparent;margin-bottom:-1px}/*!@.footer--variant-angular .footer-navigation li a:hover span,\n.footer--variant-standard .footer-navigation li a:hover span*/.footer--variant-angular.sc-scale-app-footer .footer-navigation.sc-scale-app-footer li.sc-scale-app-footer a.sc-scale-app-footer:hover span.sc-scale-app-footer,.footer--variant-standard.sc-scale-app-footer .footer-navigation.sc-scale-app-footer li.sc-scale-app-footer a.sc-scale-app-footer:hover span.sc-scale-app-footer{border-bottom:1px solid var(--border-color-standard-hover);margin-bottom:-1px}/*!@.footer-navigation li a:active*/.footer-navigation.sc-scale-app-footer li.sc-scale-app-footer a.sc-scale-app-footer:active{color:var(--color-navigation-active-focus, #cb0068)}/*!@.footer--variant-minimal .footer-navigation li a:active span*/.footer--variant-minimal.sc-scale-app-footer .footer-navigation.sc-scale-app-footer li.sc-scale-app-footer a.sc-scale-app-footer:active span.sc-scale-app-footer{border-bottom:1px solid transparent;margin-bottom:-1px}/*!@.footer--variant-angular .footer-navigation li a:active span,\n.footer--variant-standard .footer-navigation li a:active span*/.footer--variant-angular.sc-scale-app-footer .footer-navigation.sc-scale-app-footer li.sc-scale-app-footer a.sc-scale-app-footer:active span.sc-scale-app-footer,.footer--variant-standard.sc-scale-app-footer .footer-navigation.sc-scale-app-footer li.sc-scale-app-footer a.sc-scale-app-footer:active span.sc-scale-app-footer{border-bottom:1px solid var(--color-navigation-active-focus);margin-bottom:-1px}/*!@.footer-navigation li a:active:focus*/.footer-navigation.sc-scale-app-footer li.sc-scale-app-footer a.sc-scale-app-footer:active:focus{color:var(--color-navigation-active-focus);box-shadow:none}/*!@.footer-navigation li a:focus*/.footer-navigation.sc-scale-app-footer li.sc-scale-app-footer a.sc-scale-app-footer:focus{outline:none;box-shadow:var(--box-shadow-navigation-focus);border-radius:var(--radius)}/*!@.footer-navigation svg*/.footer-navigation.sc-scale-app-footer svg.sc-scale-app-footer{width:auto;height:var(--scl-spacing-16);margin-right:var(--scl-spacing-8)}/*!@.footer--variant-minimal .footer-copyright*/.footer--variant-minimal.sc-scale-app-footer .footer-copyright.sc-scale-app-footer{justify-content:flex-start}/*!@.footer--variant-minimal .footer-branding*/.footer--variant-minimal.sc-scale-app-footer .footer-branding.sc-scale-app-footer{display:none}/*!@.footer--variant-minimal .footer-content*/.footer--variant-minimal.sc-scale-app-footer .footer-content.sc-scale-app-footer{grid-template-areas:'copyright navigation navigation'}@media (max-width: 639px){/*!@.footer-branding*/.footer-branding.sc-scale-app-footer{margin-bottom:var(--scl-spacing-24)}/*!@.footer-copyright*/.footer-copyright.sc-scale-app-footer{margin-bottom:var(--scl-spacing-16)}/*!@.footer-navigation ul*/.footer-navigation.sc-scale-app-footer ul.sc-scale-app-footer{line-height:var(--scl-spacing-32)}/*!@.footer-navigation li a*/.footer-navigation.sc-scale-app-footer li.sc-scale-app-footer a.sc-scale-app-footer{padding:var(--scl-spacing-4);margin:calc(-1 * var(--scl-spacing-8)) calc(-1 * var(--scl-spacing-4))}}@media (min-width: 640px){/*!@.footer-branding*/.footer-branding.sc-scale-app-footer{grid-area:branding;width:100%;display:flex;align-items:center;justify-content:flex-start}/*!@.footer-copyright*/.footer-copyright.sc-scale-app-footer{grid-area:copyright;width:100%;display:flex;align-items:center;justify-content:center}/*!@.footer-navigation*/.footer-navigation.sc-scale-app-footer{grid-area:navigation;width:100%;display:flex;align-items:center;justify-content:flex-end}/*!@.footer-navigation ul*/.footer-navigation.sc-scale-app-footer ul.sc-scale-app-footer{display:flex;align-items:center}}@media (min-width: 640px) and (max-width: 1295px){/*!@.footer-content*/.footer-content.sc-scale-app-footer{display:grid;grid-template-columns:repeat(auto-fit, minmax(0, 1fr));grid-template-areas:'branding ....... .......'\n      'copyright navigation navigation'}/*!@.footer-branding*/.footer-branding.sc-scale-app-footer{margin-bottom:var(--scl-spacing-24)}/*!@.footer-copyright*/.footer-copyright.sc-scale-app-footer{justify-content:flex-start}}@media (min-width: 1296px){/*!@.footer-content*/.footer-content.sc-scale-app-footer{display:grid;grid-template-columns:minmax(0, 1fr) minmax(0, 1fr) minmax(0, 1fr);grid-template-areas:'branding copyright navigation'}}@media (min-width: 1552px){/*!@.footer-content*/.footer-content.sc-scale-app-footer{margin:0 auto;max-width:var(--max-width)}}";

const readData$1 = (data) => {
  let parsedData;
  try {
    parsedData = JSON.parse(data);
  }
  catch (error) {
    parsedData = data;
  }
  return parsedData;
};
class AppFooter {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.footerNavigation = [];
    this.variant = 'standard';
    this.copyright = '© Deutsche Telekom AG';
  }
  componentWillLoad() {
    this.hasSlotLogo = !!this.hostElement.querySelector('[slot="logo"]');
    this.hasSlotNavigation = !!this.hostElement.querySelector('[slot="navigation"]');
  }
  render() {
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync("div", { class: this.getCssClassMap() }, hAsync("div", { class: "footer-mask" }), hAsync("footer", { class: "footer" }, hAsync("div", { class: "footer-content" }, hAsync("div", { class: "footer-branding" }, this.hasSlotLogo ? (hAsync("slot", { name: "logo" })) : (hAsync("app-logo", { claim: true, claimLang: this.claimLang }))), hAsync("div", { class: "footer-copyright" }, this.copyright), hAsync("nav", { "aria-label": "bottom", class: "footer-navigation" }, this.hasSlotNavigation ? (hAsync("slot", { name: "navigation" })) : (hAsync("ul", null, readData$1(this.footerNavigation).map((item) => (hAsync("li", { class: "footer-navigation__item" }, hAsync("a", { class: "footer-navigation__item-link", href: item.href || 'javascript:void(0);', onClick: (event) => {
        if (typeof item.onClick === 'function') {
          item.onClick(event);
        }
      } }, item.icon &&
      renderIcon({
        tag: `scale-icon-${item.icon}`,
        attributes: {
          class: 'footer-navigation__item-link',
        },
      }), hAsync("span", null, item.name)))))))))))));
  }
  getCssClassMap() {
    return classnames('footer-container', this.variant && `footer--variant-${this.variant}`);
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return appFooterCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-app-footer",
    "$members$": {
      "claimLang": [1, "claim-lang"],
      "footerNavigation": [8, "footer-navigation"],
      "variant": [1],
      "copyright": [1],
      "styles": [1]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const appNavigationUserMenuCss = "/*!@:host*/.sc-app-navigation-user-menu-h{--border-width-divider:var(--scl-spacing-1);--color-divider:var(--scl-color-grey-20);--color-menu-item-hover:var(--scl-color-primary-hover);--color-menu-item-active:var(--scl-color-primary-active);--box-shadow-focus:0 0 0 var(--scl-spacing-2) var(--scl-color-focus)}/*!@.app-navigation-user-menu*/.app-navigation-user-menu.sc-app-navigation-user-menu{width:100%;position:relative;min-width:260px}/*!@.app-navigation-user-menu__divider*/.app-navigation-user-menu__divider.sc-app-navigation-user-menu{margin:var(--scl-spacing-16) 0;border:0;border-top:var(--border-width-divider) solid var(--color-divider)}@media (min-width: 1024px){/*!@.app-navigation-user-menu__user-info*/.app-navigation-user-menu__user-info.sc-app-navigation-user-menu{margin:var(--scl-spacing-12) var(--scl-spacing-24) 0 var(--scl-spacing-24)}}@media (max-width: 1023px){/*!@.app-navigation-user-menu__user-info*/.app-navigation-user-menu__user-info.sc-app-navigation-user-menu{margin:var(--scl-spacing-24) var(--scl-spacing-16) 0 var(--scl-spacing-16)}}/*!@.app-navigation-user-menu__user-info--name*/.app-navigation-user-menu__user-info--name.sc-app-navigation-user-menu{font-size:var(--scl-font-variant-heading-5-size);line-height:var(--scl-font-variant-heading-5-line-height);font-weight:var(--scl-font-variant-heading-5-weight);margin-bottom:var(--scl-spacing-4)}/*!@.app-navigation-user-menu__user-info--email*/.app-navigation-user-menu__user-info--email.sc-app-navigation-user-menu{color:var(--scl-color-text-additional)}/*!@.app-navigation-user-menu__item*/.app-navigation-user-menu__item.sc-app-navigation-user-menu{display:flex;font-size:var(--scl-font-variant-heading-6-size);line-height:var(--scl-font-variant-heading-6-line-height);font-weight:var(--scl-font-variant-heading-6-weight);padding:var(--scl-spacing-8) var(--scl-spacing-16);border-radius:var(--scl-spacing-2);color:var(--scl-color-text-standard);text-decoration:none}@media (min-width: 1024px){/*!@.app-navigation-user-menu__item*/.app-navigation-user-menu__item.sc-app-navigation-user-menu{padding:var(--scl-spacing-8) var(--scl-spacing-24)}}/*!@.app-navigation-user-menu__item:hover*/.app-navigation-user-menu__item.sc-app-navigation-user-menu:hover{color:var(--color-menu-item-hover)}/*!@.app-navigation-user-menu__item:active*/.app-navigation-user-menu__item.sc-app-navigation-user-menu:active{color:var(--color-menu-item-active)}/*!@.app-navigation-user-menu__item:focus*/.app-navigation-user-menu__item.sc-app-navigation-user-menu:focus{outline:none;box-shadow:var(--box-shadow-focus)}/*!@.app-navigation-user-menu__item--icon-prefix*/.app-navigation-user-menu__item--icon-prefix.sc-app-navigation-user-menu{margin-right:var(--scl-spacing-8)}/*!@.app-navigation-user-menu__item--icon-suffix*/.app-navigation-user-menu__item--icon-suffix.sc-app-navigation-user-menu{margin-left:var(--scl-spacing-8)}/*!@.app-navigation-user-menu__button*/.app-navigation-user-menu__button.sc-app-navigation-user-menu{padding:var(--scl-spacing-8) var(--scl-spacing-16)}@media (min-width: 1024px){/*!@.app-navigation-user-menu__button*/.app-navigation-user-menu__button.sc-app-navigation-user-menu{padding:var(--scl-spacing-8) var(--scl-spacing-24)}}@media (min-width: 1024px){/*!@.app-navigation-user-menu*/.app-navigation-user-menu.sc-app-navigation-user-menu{padding-bottom:var(--scl-spacing-4)}}";

class AppNavigationUserMenu {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.closeMenu = createEvent$1(this, "closeMenu", 7);
  }
  handleKeydown(event) {
    if ('Escape' === event.key) {
      this.hide();
    }
  }
  render() {
    return (hAsync(Host$1, null, hAsync("div", { class: "app-navigation-user-menu" }, this.navigation.map((item) => {
      if (item.type === 'divider') {
        return (hAsync("hr", { class: "app-navigation-user-menu__divider", part: "rule-horizontal" }));
      }
      if (item.type === 'userInfo') {
        return (hAsync("div", { class: "app-navigation-user-menu__user-info" }, hAsync("div", { class: "app-navigation-user-menu__user-info--name scl-font-variant-heading-4" }, item.name), hAsync("div", { class: "app-navigation-user-menu__user-info--email" }, item.email)));
      }
      if (item.type === 'item') {
        return (hAsync("a", { href: item.href || 'javascript:void(0);', tabindex: 0, class: "app-navigation-user-menu__item", onClick: (e) => {
            if (item.onClick) {
              item.onClick(e);
            }
            this.hide();
          } }, item.icon &&
          (!item.iconPosition || item.iconPosition === 'prefix')
          ? renderIcon({
            tag: `scale-icon-${item.icon}`,
            attributes: {
              class: `app-navigation-user-menu__item--icon-prefix`,
            },
          })
          : null, item.name, item.icon && item.iconPosition === 'suffix'
          ? renderIcon({
            tag: `scale-icon-${item.icon}`,
            attributes: {
              class: `app-navigation-user-menu__item--icon-suffix`,
            },
          })
          : null));
      }
      if (item.type === 'button') {
        return (hAsync("scale-button", { class: "app-navigation-user-menu__button", onClick: (e) => {
            if (item.onClick) {
              item.onClick(e);
            }
            this.hide();
          }, href: item.href, variant: item.variant || 'primary' }, item.icon &&
          (!item.iconPosition || item.iconPosition === 'prefix')
          ? renderIcon({
            tag: `scale-icon-${item.icon}`,
            attributes: {},
          })
          : null, item.name, item.icon && item.iconPosition === 'suffix'
          ? renderIcon({
            tag: `scale-icon-${item.icon}`,
            attributes: {},
          })
          : null));
      }
    }))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return appNavigationUserMenuCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "app-navigation-user-menu",
    "$members$": {
      "hide": [16],
      "navigation": [8]
    },
    "$listeners$": [[8, "keydown", "handleKeydown"]],
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const breadcrumbCss = "/*!@:host*/.sc-scale-breadcrumb-h{--spacing-left:calc(-1 * var(--scl-spacing-8));--font-size-list-item:var(--scl-font-size-14);--color-separator:var(--scl-color-grey-60);--spacing-y-item:var(--scl-spacing-4);--spacing-x-item:var(--scl-spacing-8);--color-link:var(--scl-color-grey-60);--radius-link:var(--scl-radius-8);--color-link-hover:var(--scl-color-primary-hover);--color-link-active:var(--scl-color-primary-active);--box-shadow-link-focus:0 0 0 var(--scl-spacing-2) var(--scl-color-focus);--color-current:var(--scl-color-text-standard)}/*!@.breadcrumb*/.breadcrumb.sc-scale-breadcrumb{margin-left:var(--spacing-left)}/*!@.breadcrumb__list*/.breadcrumb__list.sc-scale-breadcrumb{display:flex;list-style:none;margin-top:0;padding-left:0;margin-bottom:0}/*!@.breadcrumb__list-item*/.breadcrumb__list-item.sc-scale-breadcrumb{display:inline-flex;font-size:var(--font-size-list-item);align-items:center}/*!@.breadcrumb__separator*/.breadcrumb__separator.sc-scale-breadcrumb{display:flex;color:var(--color-separator)}/*!@.breadcrumb__item,\n.breadcrumb__link*/.breadcrumb__item.sc-scale-breadcrumb,.breadcrumb__link.sc-scale-breadcrumb{padding:var(--spacing-y-item) var(--spacing-x-item)}/*!@.breadcrumb__link*/.breadcrumb__link.sc-scale-breadcrumb{text-decoration:none;color:var(--color-link);border-radius:var(--radius-link)}/*!@.breadcrumb__link:hover*/.breadcrumb__link.sc-scale-breadcrumb:hover{color:var(--color-link-hover)}/*!@.breadcrumb__link:active*/.breadcrumb__link.sc-scale-breadcrumb:active{color:var(--color-link-active)}/*!@.breadcrumb__link:focus*/.breadcrumb__link.sc-scale-breadcrumb:focus{outline:none;box-shadow:var(--box-shadow-link-focus)}/*!@.breadcrumb__current*/.breadcrumb__current.sc-scale-breadcrumb{color:var(--color-current)}";

/*
  @see https://www.w3.org/TR/wai-aria-practices/examples/breadcrumb/index.html
*/
class Breadcrumb {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.linksArray = [];
    this.separatorSlot = null;
  }
  componentWillLoad() {
    if (this.linksArray.length === 0) {
      this.setLinksArray();
    }
    this.separatorSlot = this.hostElement.querySelector('[slot="separator"]');
  }
  componentDidLoad() {
    const observer = new MutationObserver(() => {
      this.setLinksArray();
    });
    observer.observe(this.hostElement, {
      attributes: false,
      childList: true,
      subtree: true,
    });
    this.mo = observer;
  }
  disconnectedCallback() {
    if (this.mo) {
      this.mo.disconnect();
    }
  }
  setLinksArray() {
    this.linksArray = Array.from(this.hostElement.children).filter((element) => element.slot === '');
  }
  render() {
    const isLast = (index) => index === this.linksArray.length - 1;
    // Set aria-current="page" to the last item if it's a link
    const getCurrentAttr = (index) => isLast(index) === true ? { 'aria-current': 'page' } : undefined;
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync("nav", { "aria-label": "Breadcrumb", class: this.getCssClassMap(), part: "base" }, hAsync("ol", { class: "breadcrumb__list", part: "list" }, this.linksArray.map((element, index) => {
      const separator = this.separatorSlot != null ? (hAsync("span", { class: "breadcrumb__separator", part: "separator", innerHTML: this.separatorSlot.innerHTML })) : (hAsync("span", { class: "breadcrumb__separator", part: "separator" }, this.separator || (hAsync("scale-icon-navigation-right", { size: 12 }))));
      return (hAsync("li", { class: "breadcrumb__list-item", part: "list-item" }, element.href ? (hAsync("a", Object.assign({ href: element.href, class: classnames(isLast(index) && 'breadcrumb__current', 'breadcrumb__link'), part: classnames(isLast(index) && 'current', 'link') }, getCurrentAttr(index)), element.textContent)) : (hAsync("span", { class: classnames(isLast(index) && 'breadcrumb__current', 'breadcrumb__item'), part: classnames(isLast(index) && 'current', 'item') }, element.textContent)), isLast(index) ? null : separator));
    })))));
  }
  getCssClassMap() {
    return classnames('breadcrumb');
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return breadcrumbCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-breadcrumb",
    "$members$": {
      "separator": [1],
      "styles": [1],
      "linksArray": [32],
      "separatorSlot": [32]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

/**
 * @license
 * Scale https://github.com/telekom/scale
 *
 * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
const hasShadowDom = (el) => {
  return !!el.shadowRoot && !!el.attachShadow;
};
// eg isPseudoClassSupported(':focus-visible') // true for chrome, false for safari
const isPseudoClassSupported = (pseudoClass) => {
  // Get the document stylesheet1
  let ss = document.styleSheets[0];
  // Create a stylesheet if one doesn't exist
  if (!ss) {
    const el = document.createElement('style');
    document.head.appendChild(el);
    ss = document.styleSheets[0];
    document.head.removeChild(el);
  }
  // Test the pseudo-class by trying to style with it
  function testPseudo() {
    try {
      if (!/^:/.test(pseudoClass)) {
        pseudoClass = ':' + pseudoClass;
      }
      ss.insertRule('html' + pseudoClass + '{}', 0);
      ss.deleteRule(0);
      return true;
    }
    catch (e) {
      return false;
    }
  }
  // Run the test
  return testPseudo();
};
/**
 * Call `emit` on component events twice.
 * One for the legacy camel-cased event, one for the new kebab-cased.
 * e.g. for the event `scaleChange` it will do `instance.scaleChange.emit()` and `instance.scaleChangeLegacy.emit()`.
 * It expects both `scaleChange` and `scaleChangeLegacy` event-decorated properties to exist on the component.
 *
 * @param instance {ComponentInterface} - The component instance, aka `this`
 * @param eventKey {string} - The event property, e.g. `scaleChange`
 * @param detail {any} - The custom event `detail`
 * @returns {CustomEvent[]} - The events emitted
 */
function emitEvent$1(instance, eventKey, detail) {
  const legacyKey = eventKey + 'Legacy';
  const emitted = [];
  if (typeof instance[legacyKey] !== 'undefined') {
    // Emit legacy camel case event, e.g. `scaleClose`
    emitted.push(instance[legacyKey].emit(detail));
  }
  // Emit now-standard kebab-case event, e.g. `scale-close`
  emitted.push(instance[eventKey].emit(detail));
  // Return both
  return emitted;
}
function isClickOutside(event, host) {
  let target = event.target;
  const hasShadow = target.shadowRoot != null;
  const composedPath = hasShadow ? event.composedPath() : [];
  do {
    if (target === host) {
      return false;
    }
    if (hasShadow) {
      // @ts-ignore
      target = composedPath.shift();
    }
    else {
      target = target.parentNode;
    }
  } while (target);
  return true;
}

const buttonCss = "/*!@:host*/.sc-scale-button-h{--width:auto;--spacing-x:var(--scl-spacing-24);--spacing-x-icon-only:var(--scl-spacing-8);--min-height:var(--scl-spacing-40);--radius:var(--scl-radius-8);--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);--box-shadow-focus:0 0 0 var(--scl-spacing-2) var(--scl-color-focus);--font-weight:var(--scl-font-weight-bold);--font-size:var(--scl-font-size-16);--line-height:var(--scl-font-line-height-150);--spacing-icon-x:var(--scl-spacing-8);--vertical-align:middle;--font-size-small:var(--scl-font-size-12);--line-height-small:var(--scl-font-line-height-133);--min-height-small:var(--scl-spacing-32);--radius-primary:var(--radius);--background-primary:var(--scl-color-primary);--background-primary-hover:var(--scl-color-primary-hover);--background-primary-active:var(--scl-color-primary-active);--background-primary-disabled:var(--scl-color-background-disabled);--color-primary:var(--scl-color-white);--color-primary-disabled:var(--scl-color-grey-40);--radius-secondary:var(--radius);--border-width-secondary:var(--scl-spacing-1);--background-secondary:transparent;--color-secondary:var(--scl-color-text-standard);--color-secondary-hover:var(--scl-color-primary-hover);--color-secondary-active:var(--scl-color-primary-active);--color-secondary-disabled:var(--scl-color-background-disabled);--radius-ghost:var(--radius);--border-width-ghost:var(--scl-spacing-1);--spacing-x-ghost:var(--scl-spacing-8);--color-ghost:var(--scl-color-primary);--color-ghost-hover:var(--scl-color-primary-hover);--color-ghost-active:var(--scl-color-primary-active);--color-ghost-disabled:var(--scl-color-text-disabled)}/*!@.button*/.button.sc-scale-button{box-sizing:border-box;display:inline-flex;align-items:center;position:relative;border:0;outline:none;cursor:pointer;user-select:none;font-family:inherit;word-spacing:inherit;letter-spacing:inherit;justify-content:center;text-decoration:none;font-weight:var(--font-weight);font-size:var(--font-size);line-height:var(--line-height);min-height:var(--min-height);width:var(--width);padding-left:var(--spacing-x);padding-right:var(--spacing-x);vertical-align:var(--vertical-align);transition:var(--transition)}/*!@.button:not(.button--disabled):focus*/.button.sc-scale-button:not(.button--disabled):focus{box-shadow:var(--box-shadow-focus)}/*!@.button.button--icon-before ::slotted(*)*/.button.button--icon-before .sc-scale-button-s>*{margin-right:var(--spacing-icon-x)}/*!@.button.button--icon-after ::slotted(*)*/.button.button--icon-after .sc-scale-button-s>*{margin-left:var(--spacing-icon-x)}/*!@.button:after*/.button.sc-scale-button:after{top:0;left:0;width:100%;border:var(--scl-spacing-1) solid transparent;height:100%;content:'';display:block;position:absolute;box-sizing:border-box;pointer-events:none;border-radius:var(--radius)}/*!@.button--size-small*/.button--size-small.sc-scale-button{font-size:var(--font-size-small);line-height:var(--line-height-small);min-height:var(--min-height-small)}/*!@.button--icon-only*/.button--icon-only.sc-scale-button{padding-left:var(--spacing-x-icon-only);padding-right:var(--spacing-x-icon-only)}/*!@.button--disabled*/.button--disabled.sc-scale-button{cursor:not-allowed}/*!@.button--variant-primary*/.button--variant-primary.sc-scale-button{text-align:center;border-radius:var(--radius);background:var(--background-primary);color:var(--color-primary)}/*!@.button--variant-primary:not(.button--disabled):hover*/.button--variant-primary.sc-scale-button:not(.button--disabled):hover{background:var(--background-primary-hover)}/*!@.button--variant-primary:not(.button--disabled):active*/.button--variant-primary.sc-scale-button:not(.button--disabled):active{background:var(--background-primary-active)}/*!@.button--disabled.button--variant-primary*/.button--disabled.button--variant-primary.sc-scale-button{background:var(--background-primary-disabled);color:var(--color-primary-disabled)}/*!@.button--variant-secondary*/.button--variant-secondary.sc-scale-button{background:var(--background-secondary);text-align:center;border-radius:var(--radius-secondary);border:var(--border-width-secondary) solid currentColor;color:var(--color-secondary)}/*!@.button--variant-secondary:not(.button--disabled):hover*/.button--variant-secondary.sc-scale-button:not(.button--disabled):hover{color:var(--color-secondary-hover)}/*!@.button--variant-secondary:not(.button--disabled):active*/.button--variant-secondary.sc-scale-button:not(.button--disabled):active{color:var(--color-secondary-active)}/*!@.button--disabled.button--variant-secondary*/.button--disabled.button--variant-secondary.sc-scale-button{color:var(--color-secondary-disabled)}/*!@.button--variant-ghost*/.button--variant-ghost.sc-scale-button{background:transparent;text-align:center;border-radius:var(--radius-ghost);border:var(--border-width-ghost) solid transparent;color:var(--color-ghost);padding-left:var(--spacing-x-ghost);padding-right:var(--spacing-x-ghost)}/*!@.button--variant-ghost:not(.button--disabled):hover*/.button--variant-ghost.sc-scale-button:not(.button--disabled):hover{color:var(--color-ghost-hover)}/*!@.button--variant-ghost:not(.button--disabled):active*/.button--variant-ghost.sc-scale-button:not(.button--disabled):active{color:var(--color-ghost-active)}/*!@.button--disabled.button--variant-ghost*/.button--disabled.button--variant-ghost.sc-scale-button{color:var(--color-ghost-disabled)}";

class Button {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The size of the button */
    this.size = 'large';
    /** (optional) Button variant */
    this.variant = 'primary';
    /** (optional) If `true`, the button is disabled */
    this.disabled = false;
    /** (optional) Set to `true` when the button contains only an icon */
    this.iconOnly = false;
    /** (optional) Icon position related to the label */
    this.iconPosition = 'before';
    /** (optional) The target attribute for the <a> tag */
    this.target = '_self';
    /**
     * Hack to make the button behave has expected when inside forms.
     * @see https://github.com/ionic-team/ionic-framework/blob/master/core/src/components/button/button.tsx#L155-L175
     */
    this.handleClick = (ev) => {
      // No need to check for `disabled` because disabled buttons won't emit clicks
      if (hasShadowDom(this.hostElement)) {
        const form = this.hostElement.closest('form');
        if (form) {
          ev.preventDefault();
          const fakeButton = document.createElement('button');
          if (this.type) {
            fakeButton.type = this.type;
          }
          fakeButton.style.display = 'none';
          form.appendChild(fakeButton);
          fakeButton.click();
          fakeButton.remove();
        }
      }
    };
  }
  /**
   * Prevent clicks from being emitted from the host
   * when the component is `disabled`.
   */
  handleHostClick(event) {
    if (this.disabled === true) {
      event.stopImmediatePropagation();
    }
  }
  async setFocus() {
    this.focusableElement.focus();
  }
  connectedCallback() {
    this.setIconPositionProp();
  }
  /**
   * Detect whether the last node is an element (not text).
   * If so, it's probably an icon, so we set `iconPosition` to `after`.
   */
  setIconPositionProp() {
    const nodes = Array.from(this.hostElement.childNodes).filter((node) => {
      // ignore empty text nodes, which are probably due to formatting
      return !(node.nodeType === 3 && node.nodeValue.trim() === '');
    });
    if (!this.iconOnly &&
      nodes &&
      nodes.length &&
      nodes[nodes.length - 1] &&
      nodes[nodes.length - 1].nodeName.substr(0, 10) === 'SCALE-ICON') {
      this.iconPosition = 'after';
    }
  }
  render() {
    const basePart = classnames('base', this.variant && `variant-${this.variant}`, this.iconOnly && 'icon-only', !this.iconOnly && this.iconPosition, this.disabled && 'disabled');
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), this.href ? (hAsync("a", { ref: (el) => (this.focusableElement = el), class: this.getCssClassMap(), href: this.href, download: this.download, target: this.target, rel: this.target === '_blank' ? 'noopener noreferrer' : undefined, part: basePart, tabIndex: this.innerTabindex }, hAsync("slot", null))) : (hAsync("button", { ref: (el) => (this.focusableElement = el), class: this.getCssClassMap(), onClick: this.handleClick, disabled: this.disabled, type: this.type, part: basePart, tabIndex: this.innerTabindex }, hAsync("slot", null)))));
  }
  getCssClassMap() {
    return classnames('button', this.size && `button--size-${this.size}`, this.variant && `button--variant-${this.variant}`, this.iconOnly && `button--icon-only`, !this.iconOnly &&
      this.iconPosition &&
      `button--icon-${this.iconPosition}`, this.disabled && !this.href && `button--disabled`);
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return buttonCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-button",
    "$members$": {
      "size": [1],
      "variant": [1],
      "disabled": [4],
      "type": [1],
      "iconOnly": [4, "icon-only"],
      "iconPosition": [513, "icon-position"],
      "href": [1],
      "target": [1],
      "styles": [1],
      "download": [1],
      "innerTabindex": [2, "inner-tabindex"],
      "setFocus": [64]
    },
    "$listeners$": [[2, "click", "handleHostClick"]],
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["iconPosition", "icon-position"]]
  }; }
}

const calloutCss = "/*!@:host*/.sc-scale-callout-h{--inner-width-small:var(--scl-spacing-80);--inner-height-small:var(--scl-spacing-80);--inner-width-large:126.5px;--inner-height-large:96px;--width-small:120px;--height-small:120px;--height-large:160px;--width-large:160px;--color-blue:var(--scl-color-blue-60);--color-white:var(--scl-color-white);--color-black:var(--scl-color-black);--color-primary:var(--scl-color-primary);--font-family:var(--scl-font-family-sans);--font-size:calc(var(--scl-font-size-20) * 3);--font-size-prefix:var(--scl-font-size-20)}/*!@.callout*/.callout.sc-scale-callout{display:flex;justify-content:center;align-items:center;border-radius:100%;background:var(--color-primary);font-family:var(--font-family);color:var(--color-white);text-align:center}/*!@.callout.callout--color-primary*/.callout.callout--color-primary.sc-scale-callout{background:var(--color-primary)}/*!@.callout.callout--color-white*/.callout.callout--color-white.sc-scale-callout{background:var(--color-white);color:var(--color-black)}/*!@.callout.callout--color-blue*/.callout.callout--color-blue.sc-scale-callout{background:var(--color-blue)}/*!@.callout.callout--color-black*/.callout.callout--color-black.sc-scale-callout{background:var(--color-black)}/*!@.callout.callout--size-large*/.callout.callout--size-large.sc-scale-callout{width:var(--width-large);height:var(--height-large)}/*!@.callout.callout--size-small*/.callout.callout--size-small.sc-scale-callout{width:var(--width-small);height:var(--height-small)}/*!@.callout.callout--size-large .callout__inner*/.callout.callout--size-large.sc-scale-callout .callout__inner.sc-scale-callout{width:var(--inner-width-large);height:var(--inner-height-large)}/*!@.callout.callout--size-small .callout__inner*/.callout.callout--size-small.sc-scale-callout .callout__inner.sc-scale-callout{width:var(--inner-width-small);height:var(--inner-height-small)}/*!@.callout__inner*/.callout__inner.sc-scale-callout{transform:rotateZ(var(--rotation));overflow:hidden}/*!@.callout__prefix*/.callout__prefix.sc-scale-callout{font-size:var(--font-size-prefix);font-weight:400}/*!@.callout__text*/.callout__text.sc-scale-callout{font-size:var(--font-size);font-weight:700}/*!@.callout__sup*/.callout__sup.sc-scale-callout{font-size:30px;cursor:help}/*!@.callout.callout--size-large.callout--asterisk .callout__prefix*/.callout.callout--size-large.callout--asterisk.sc-scale-callout .callout__prefix.sc-scale-callout{margin-bottom:10px}/*!@.callout.callout--size-small .callout__prefix*/.callout.callout--size-small.sc-scale-callout .callout__prefix.sc-scale-callout{margin-bottom:10px}";

class Callout {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) Variant size of the callout itself */
    this.size = 'large';
    /** (optional) Variant rotation of the callout/circle */
    this.rotation = 0;
  }
  connectedCallback() {
    statusNote({ source: this.hostElement, tag: 'beta' });
  }
  displayStyle() {
    return `:host {
      --rotation: ${this.rotation}deg;
    }`;
  }
  render() {
    return (hAsync(Host$1, null, hAsync("style", null, this.displayStyle()), hAsync("div", { part: this.getBasePartMap(), class: this.getCssClassMap() }, hAsync("div", { part: "inner", class: "callout__inner" }, hAsync("div", { class: "callout__prefix" }, hAsync("slot", { name: "prefix" })), hAsync("div", { class: "callout__text" }, hAsync("span", null, hAsync("slot", null)), this.asterisk && (hAsync("sup", { title: this.asterisk, class: "callout__sup" }, "*")))))));
  }
  getBasePartMap() {
    return this.getCssOrBasePartMap('basePart');
  }
  getCssClassMap() {
    return this.getCssOrBasePartMap('css');
  }
  getCssOrBasePartMap(mode) {
    const name = 'callout';
    const prefix = mode === 'basePart' ? '' : `${name}--`;
    return classnames(name, this.variant && `${prefix}color-${this.variant}`, this.size && `${prefix}size-${this.size}`, this.asterisk && `${prefix}asterisk`);
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return calloutCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-callout",
    "$members$": {
      "size": [1025],
      "variant": [1025],
      "rotation": [1026],
      "asterisk": [1025]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const cardCss = "/*!@:host*/.sc-scale-card-h{--background:var(--scl-color-background-standard);--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);--radius:var(--scl-radius-12);--box-shadow:var(--scl-shadow-level-1);--box-shadow-hover:var(--scl-shadow-level-1-hover);--box-shadow-focus:0 0 0 var(--scl-spacing-2) var(--scl-color-focus);--box-shadow-active:var(--scl-shadow-level-1-active);--spacing-body:var(--scl-spacing-24);--spacing-body-slotted:0;--spacing-body-slotted-interactive:0}/*!@.card-border*/.card-border.sc-scale-card{border:1px solid transparent}/*!@.card*/.card.sc-scale-card{width:100%;overflow:hidden;box-sizing:border-box;background:var(--background);transition:var(--transition);border-radius:var(--radius);box-shadow:var(--box-shadow)}/*!@.card__body*/.card__body.sc-scale-card{padding:var(--spacing-body)}/*!@.card__body ::slotted(*)*/.card__body .sc-scale-card-s>*{margin:var(--spacing-body-slotted)}/*!@.card--interactive*/.card--interactive.sc-scale-card{color:inherit;cursor:pointer;display:block;outline:none;text-decoration:none}/*!@.card--interactive:hover*/.card--interactive.sc-scale-card:hover{box-shadow:var(--box-shadow-hover)}/*!@.card--interactive:focus*/.card--interactive.sc-scale-card:focus{box-shadow:var(--scl-shadow-level-1-hover), var(--box-shadow-focus)}/*!@.card--interactive:active*/.card--interactive.sc-scale-card:active{border:none;box-shadow:var(--box-shadow-active)}/*!@.card--interactive .card__body ::slotted(*)*/.card--interactive .card__body .sc-scale-card-s>*{margin:var(--spacing-body-slotted-interactive)}";

class Card {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) Link card */
    this.to = '';
    /** (optional) Label of the card */
    this.label = '';
    /** (optional) Link card target */
    this.target = '_self';
    /** (optional) Link card rel */
    this.rel = '';
  }
  render() {
    const Tag = !!this.to ? 'a' : 'div';
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync("div", { class: "card-border", part: "border" }, hAsync(Tag, Object.assign({ class: this.getCssClassMap(), part: classnames('base', !!this.to && 'interactive'), onClick: this.clickCard }, (!this.to ? { role: 'group' } : {}), (!!this.to ? { href: this.to } : {}), (!!this.target ? { target: this.target } : {}), (!!this.rel ? { rel: this.rel } : {}), (!!this.label ? { ['aria-label']: this.label } : {})), hAsync("div", { class: "card__body", part: "body" }, hAsync("slot", null))))));
  }
  getCssClassMap() {
    return classnames('card', !!this.to && 'card--interactive');
  }
  static get style() { return cardCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-card",
    "$members$": {
      "to": [1],
      "label": [1],
      "target": [1],
      "rel": [1],
      "styles": [1],
      "clickCard": [8, "click-card"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const carouselCss = "/*!@.carousel*/.carousel.sc-scale-carousel{width:400px;height:300px;position:relative}/*!@.carousel__container*/.carousel__container.sc-scale-carousel{width:100%;height:100%;margin:0;display:flex;padding:0;overflow:hidden;position:relative;box-sizing:border-box;align-items:center}/*!@.carousel__slide*/.carousel__slide.sc-scale-carousel{height:100%;position:relative;min-width:100%;transition:all 0.3s ease-in-out}/*!@.carousel__arrow*/.carousel__arrow.sc-scale-carousel{top:50%;color:#fff;width:24px;border:none;cursor:pointer;height:24px;display:flex;outline:none;z-index:99;position:absolute;transform:translateY(-50%);background:rgba(31, 45, 61, 0.11);align-items:center;border-radius:50%;justify-content:center}/*!@.carousel__arrow--left*/.carousel__arrow--left.sc-scale-carousel{left:12px}/*!@.carousel__arrow--right*/.carousel__arrow--right.sc-scale-carousel{right:12px}/*!@.carousel__indicators*/.carousel__indicators.sc-scale-carousel{left:50%;bottom:12px;margin:0;display:inline-flex;padding:0;z-index:2;position:absolute;transform:translateX(-50%);list-style:none}/*!@.carousel__indicator*/.carousel__indicator.sc-scale-carousel{width:30px;border:none;cursor:pointer;height:4px;margin:0 6px;display:block;opacity:0.5;outline:none;padding:0;background:#fff;transition:0.3s}/*!@.carousel__indicator--active*/.carousel__indicator--active.sc-scale-carousel{opacity:1}/*!@.carousel--vertical .carousel__container*/.carousel--vertical.sc-scale-carousel .carousel__container.sc-scale-carousel{flex-direction:column}/*!@.carousel--vertical .carousel__arrow*/.carousel--vertical.sc-scale-carousel .carousel__arrow.sc-scale-carousel{display:none}/*!@.carousel--vertical .carousel__indicators*/.carousel--vertical.sc-scale-carousel .carousel__indicators.sc-scale-carousel{top:50%;left:unset;right:12px;bottom:0;display:flex;transform:translateY(-50%);flex-direction:column}/*!@.carousel--vertical .carousel__indicator*/.carousel--vertical.sc-scale-carousel .carousel__indicator.sc-scale-carousel{width:4px;height:30px;margin:6px 0}";

class Carousel {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) carousel display direction */
    this.vertical = false;
    this.slidesArray = [];
    this.value = 0;
    this.handleSlideChange = (direction) => {
      const val = this.value;
      if (direction === 'prev') {
        val === 0
          ? (this.value = -100 * (this.slidesArray.length - 1))
          : (this.value = val + 100);
      }
      if (direction === 'next') {
        val === -100 * (this.slidesArray.length - 1)
          ? (this.value = 0)
          : (this.value = val - 100);
      }
    };
    this.setActiveSlide = (index) => {
      this.value = -100 * index;
    };
    this.setTransformValue = () => {
      if (!!this.vertical) {
        return `translateY(${this.value}%)`;
      }
      return `translateX(${this.value}%)`;
    };
    this.setActiveCssClass = (index) => {
      if (Math.abs(this.value) / 100 === index) {
        return 'carousel__indicator--active';
      }
      return '';
    };
  }
  connectedCallback() {
    statusNote({ source: this.hostElement, type: 'warn' });
  }
  componentWillLoad() {
    if (this.slidesArray.length === 0) {
      const children = this.hostElement.children;
      // tslint:disable-next-line: prefer-for-of
      for (let childIndex = 0; childIndex < children.length; childIndex++) {
        if (children[childIndex].slot === '') {
          // tslint:disable-next-line: prefer-for-of
          for (let slideIndex = 0; slideIndex < children[childIndex].children.length; slideIndex++) {
            const element = children[childIndex].children[slideIndex];
            this.slidesArray.push(element);
          }
        }
      }
    }
  }
  render() {
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync("div", { class: this.getCssClassMap() }, hAsync("div", { class: "carousel__container" }, hAsync("div", { class: "carousel__arrow carousel__arrow--left", onClick: () => this.handleSlideChange('prev') }, hAsync("slot", { name: "arrow-left" })), this.slidesArray.map((element) => (hAsync("div", { class: "carousel__slide", style: { transform: this.setTransformValue() } }, hAsync("div", { innerHTML: element.outerHTML })))), hAsync("div", { class: "carousel__arrow carousel__arrow--right", onClick: () => this.handleSlideChange('next') }, hAsync("slot", { name: "arrow-right" }))), hAsync("ul", { class: "carousel__indicators" }, Array.from(Array(this.slidesArray.length).keys()).map((index) => (hAsync("li", { key: index, class: `carousel__indicator ${this.setActiveCssClass(index)}`, onClick: () => this.setActiveSlide(index) })))))));
  }
  getCssClassMap() {
    return classnames('carousel', this.vertical && `carousel--vertical`);
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return carouselCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-carousel",
    "$members$": {
      "vertical": [4],
      "styles": [1],
      "slidesArray": [32],
      "value": [32]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const chartStackCardCss = ":host{--scl-chart-stack-card-color:var(--scl-color-blue-60)}.chart-stack-card{color:var(--color-text);--scl-chart-stack-card-color:var(--scl-color-blue-60)}.chart-stack-card .header{height:var(--scl-spacing-24);font-size:var(--scl-font-size-24);font-weight:var(--scl-font-weight-extrabold);line-height:var(--scl-font-line-height-114);margin-bottom:var(--scl-spacing-24)}.chart-stack-card .bar{display:flex;justify-content:space-between;margin-bottom:var(--scl-spacing-16)}.chart-stack-card .bar__item{background-color:var(--scl-chart-stack-card-color);height:var(--scl-spacing-32);flex:1}.chart-stack-card .bar__item:first-of-type{border-top-left-radius:var(--scl-radius-4);border-bottom-left-radius:var(--scl-radius-4)}.chart-stack-card .bar__item:last-of-type{border-top-right-radius:var(--scl-radius-4);border-bottom-right-radius:var(--scl-radius-4)}.chart-stack-card .legend{display:flex;flex-direction:column;height:calc(var(--scl-spacing-16) * 10)}.chart-stack-card .spacer{padding:0 var(--scl-spacing-8)}.chart-stack-card .legend .legend__row__item{display:flex;line-height:var(--scl-font-line-height-133)}.chart-stack-card .legend .legend__row{display:flex;justify-content:space-between}.chart-stack-card .legend .legend__row:last-child{padding-bottom:var(--scl-spacing-32)}.chart-stack-card .legend .legend__item{height:10px;width:10px;background-color:var(--scl-chart-stack-card-color);border-radius:100%;align-self:center;margin-right:var(--scl-spacing-4)}.chart-stack-card .legend .legend__label{font-weight:var(--type-weight-bold);font-size:var(--scl-spacing-16);line-height:200%}";

class ChartStackCard {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.readData = (data) => {
      try {
        return Array.isArray(JSON.parse(data)) ? JSON.parse(data) : [];
      }
      catch (error) {
        return Array.isArray(data) ? data : [];
      }
    };
  }
  getOpacity(item, index) {
    return JSON.stringify(index === 0 ? 1 : +item.percentage / 100);
  }
  getCardStyle() {
    return `
      .card:after {
          content: '';
          display: block;
          background: linear-gradient(0deg, white, rgba(255,255,255, 0));
          height: 2rem;
          margin-top: -2rem;
          position: relative;
        }

      .card__body: {
        padding-bottom: 0 !important;
      }
  `;
  }
  connectedCallback() {
    statusNote({ source: this.hostElement, type: 'warn' });
  }
  render() {
    return (hAsync(Host$1, null, hAsync("div", { class: this.getCssClassMap() }, hAsync("scale-card", { styles: this.getCardStyle() }, hAsync("div", { class: "header" }, this.heading), hAsync("div", { class: "bar" }, this.readData(this.data)
      .sort((a, b) => b.percentage - a.percentage)
      .map((item, index) => {
      if (+item.percentage > 0) {
        return (hAsync("div", { class: "bar__item", style: {
            opacity: this.getOpacity(item, index),
            flex: JSON.stringify(+item.percentage),
          } }));
      }
    })), hAsync("div", { class: "legend" }, this.readData(this.data)
      .sort((a, b) => b.percentage - a.percentage)
      .map((item, index) => (hAsync("div", { class: "legend__row" }, hAsync("div", { class: "legend__row__item" }, hAsync("div", { class: "legend__item", style: {
        opacity: this.getOpacity(item, index),
      } }), hAsync("div", { class: "legend__label spacer" }, item.type)), hAsync("div", { class: "legend__row__item" }, hAsync("div", { class: "spacer" }, item.value), hAsync("div", { class: "spacer" }, item.percentage, "%"))))))))));
  }
  getCssClassMap() {
    return classnames('chart-stack-card');
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return chartStackCardCss; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-chart-stack-card",
    "$members$": {
      "data": [1],
      "heading": [1]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const checkboxCss = ":host,scale-checkbox{--spacing-x:var(--scl-spacing-8);--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);--color-text:var(--scl-color-text-standard);--color-error:var(--scl-color-text-error);--color-disabled:var(--scl-color-background-disabled);--color-standard:var(--scl-color-background-standard);--background-disabled:var(--scl-color-white);--color-primary:var(--scl-color-primary, #e20074);--color-focus:var(--scl-color-focus);--color-primary-hover:var(--scl-color-primary-hover, #f90984);--color-primary-active:var(--scl-color-primary-active, #cb0068);--width-control:var(--scl-spacing-16);--height-control:var(--scl-spacing-16);--transition-control:var(--transition);--spacing-control:var(--scl-spacing-2);--spacing-left-control:var(--scl-spacing-4);--radius-control:var(--scl-radius-4);--border-width-control:var(--scl-spacing-1);--transition-helper-text:var(--transition);--spacing-left-helper-text:calc(var(--width-control) + var(--spacing-x));--font-size-helper-text:var(--scl-font-size-12);--font-weight-helper-text:var(--scl-font-weight-bold);--line-height-helper-text:var(--scl-font-line-height-133);--color-helper-text:var(--scl-color-blue-70);--font-weight-label:var(--scl-font-weight-medium);--transition-label:var(--transition);--color-icon-checked-disabled:var(--scl-color-grey-30);--color-icon-checked-active:var(--scl-color-white);--width-icon:var(--scl-spacing-12);--height-icon:var(--scl-spacing-12)}:host,scale-checkbox{display:flex;flex-direction:column}scale-checkbox [part='icon'],scale-checkbox [part='checkbox'],scale-checkbox [part='label'],scale-checkbox [part='helper-text']{transition:var(--transition)}scale-checkbox [part='input'],scale-checkbox.hideLabel [part='label']{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);white-space:nowrap;border-width:0}scale-checkbox [part='checkbox']{display:flex;flex:0 0 auto;justify-content:center;align-items:center;margin:var(--scl-spacing-2) 0;width:var(--width-control);height:var(--height-control);border-radius:var(--radius-control);border:var(--border-width-control) solid currentColor}scale-checkbox [part='label']{font-weight:var(--font-weight-label);margin-left:var(--spacing-x)}scale-checkbox [part='icon']{width:var(--width-icon);height:var(--height-icon);color:var(--color-icon-checked-active)}scale-checkbox [part='icon'] svg{width:100%;height:100%}scale-checkbox [part='icon'] svg rect,scale-checkbox [part='icon'] svg path{stroke:currentColor;stroke-width:0.5px}scale-checkbox [part='container']{align-items:center;display:flex}scale-checkbox [part='helper-text']{font-size:var(--font-size-helper-text);font-weight:var(--font-weight-helper-text);color:var(--color-helper-text);padding-left:calc(\n    var(--width-control) + var(--spacing-x) + var(--border-width-control) * 2\n  )}scale-checkbox.checked [part='checkbox'],scale-checkbox.indeterminate [part='checkbox']{background:var(--color-primary);border-color:var(--color-primary);color:var(--color-icon-checked-active)}scale-checkbox [part='input']:focus~[part='container'] [part='checkbox']{box-shadow:0 0 0 var(--scl-spacing-2) var(--color-focus)}scale-checkbox [part='container']:hover{color:var(--color-primary-hover);cursor:pointer}scale-checkbox.checked [part='container']:hover [part='checkbox'],scale-checkbox.indeterminate [part='container']:hover [part='checkbox']{background:var(--color-primary-hover);border-color:var(--color-primary-hover)}scale-checkbox [part='input']:active~[part='container'],scale-checkbox [part='container']:active{color:var(--color-primary-active)}scale-checkbox [part='input']:active~[part='container'] [part='checkbox'],scale-checkbox.checked [part='container']:active [part='checkbox'],scale-checkbox.indeterminate [part='container']:active [part='checkbox']{background:var(--color-primary-active);border-color:var(--color-primary-active)}scale-checkbox.error [part='helper-text']{color:var(--color-error)}scale-checkbox.error [part='checkbox']{border-color:var(--color-error);box-shadow:0 0 0 var(--scl-spacing-1) var(--color-error)}scale-checkbox.disabled{cursor:not-allowed}scale-checkbox.disabled [part='container'],scale-checkbox.disabled [part='helper-text']{color:var(--color-disabled);pointer-events:none}scale-checkbox.checked.disabled [part='checkbox']{background:var(--color-disabled);border-color:var(--color-disabled)}scale-checkbox.checked.disabled [part='icon']{color:var(--color-icon-checked-disabled)}";

let i$f = 0;
class Checkbox {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.scaleChange = createEvent$1(this, "scale-change", 7);
    this.scaleChangeLegacy = createEvent$1(this, "scaleChange", 7);
    /** (optional) Input label */
    this.label = '';
    /** (optional) Hides the specified label visually */
    this.hideLabel = false;
    /** @deprecated - invalid should replace status */
    this.status = '';
    /** (optional) Input status */
    this.invalid = false;
    /** (optional) Input disabled */
    this.disabled = false;
    /** (optional) Active switch */
    this.checked = false;
    /** (optional) indeterminate */
    this.indeterminate = false;
    /** (optional) Input value */
    this.value = '';
    this.id = i$f++;
    this.handleChange = (ev) => {
      if (this.indeterminate) {
        this.indeterminate = false;
        this.checked = true;
        ev.target.checked = true;
      }
      else {
        this.checked = ev.target.checked;
      }
      const { checked, indeterminate, value, disabled } = this;
      emitEvent$1(this, 'scaleChange', { checked, indeterminate, value, disabled });
    };
  }
  componentDidRender() {
    if (this.status !== '') {
      statusNote({
        tag: 'deprecated',
        message: 'Property "status" is deprecated. Please use the "invalid" property!',
        type: 'warn',
        source: this.host,
      });
    }
  }
  handleDisabledChange() {
    const { checked, indeterminate, value, disabled } = this;
    emitEvent$1(this, 'scaleChange', { checked, indeterminate, value, disabled });
  }
  connectedCallback() {
    if (!this.inputId) {
      this.inputId = 'input-checkbox-' + this.id;
    }
  }
  /* Accessibility: rendering the icon *only* when checked, otherwise is always visible in HCM */
  renderIcon() {
    if (this.indeterminate) {
      return (hAsync("scale-icon-action-indeterminate", { part: "icon", decorative: true }));
    }
    if (this.checked) {
      return (hAsync("scale-icon-action-success", { part: "icon", decorative: true }));
    }
  }
  renderHelperText(text) {
    if (this.helperText && this.helperText !== '') {
      return (hAsync("div", { part: "helper-text", id: text.id, "aria-live": "polite", "aria-relevant": "additions removals" }, text.content));
    }
  }
  render() {
    const helperText = {
      id: this.helperText ? `helper-text-${this.id}` : null,
      content: this.helperText,
    };
    return (hAsync(Host$1, { class: {
        checked: this.checked,
        indeterminate: this.indeterminate,
        disabled: this.disabled,
        error: this.status === 'error' || this.invalid,
        hideLabel: this.hideLabel,
      } }, hAsync("input", { type: "checkbox", part: "input", name: this.name || null, id: this.inputId, value: this.value, checked: this.checked, indeterminate: this.indeterminate, "aria-label": this.ariaLabel, "aria-checked": this.indeterminate ? 'mixed' : false, "aria-invalid": this.status === 'error' || this.invalid, "aria-describedBy": helperText.id, disabled: this.disabled, onChange: this.handleChange }), hAsync("label", { part: "container", htmlFor: this.inputId }, hAsync("div", { part: "checkbox" }, this.renderIcon()), hAsync("div", { part: "label" }, this.label || hAsync("slot", null))), this.renderHelperText(helperText)));
  }
  get host() { return getElement$1(this); }
  static get watchers() { return {
    "disabled": ["handleDisabledChange"]
  }; }
  static get style() { return checkboxCss; }
  static get cmpMeta() { return {
    "$flags$": 4,
    "$tagName$": "scale-checkbox",
    "$members$": {
      "name": [1],
      "label": [1],
      "ariaLabel": [1, "aria-label"],
      "hideLabel": [4, "hide-label"],
      "helperText": [1, "helper-text"],
      "status": [1],
      "invalid": [4],
      "disabled": [516],
      "checked": [1540],
      "indeterminate": [1540],
      "value": [1],
      "inputId": [1025, "input-id"],
      "styles": [1]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["disabled", "disabled"], ["checked", "checked"], ["indeterminate", "indeterminate"]]
  }; }
}

const checkboxGroupCss = ":host,.checkbox-group{--spacing-left-container:var(--scl-spacing-24);--spacing-left-checkbox:var(--scl-spacing-8);--spacing-top-slotted-item:var(--scl-spacing-4)}.checkbox-group{display:inline-flex;flex-direction:column}.checkbox-group [part='fieldset']{display:flex;flex-direction:column;border:0;padding:0;margin:0;margin-left:var(--spacing-left-container)}.checkbox-group legend{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);white-space:nowrap;border-width:0}.checkbox-group scale-checkbox{margin:var(--spacing-top-slotted-item) 0}";

class CheckboxGroup {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) Input label */
    this.label = '';
    /** @deprecated - invalid should replace status */
    this.status = '';
    /** (optional) Input status */
    this.invalid = false;
    /** (optional) Input value */
    this.value = '';
    this.selectText = 'Select all';
    this.unselectText = 'Unselect all';
  }
  handleCheckboxChange(ev) {
    const el = ev.composedPath()[0];
    const { tagName, checked } = el;
    // make sure the event belongs to a scale checkbox
    if (tagName.toLowerCase() === 'scale-checkbox') {
      if (el !== this.groupNode) {
        this.updateParentCheckboxState();
      }
      else {
        this.updateChildrenCheckboxStates(checked);
        this.updateParentCheckboxState();
      }
    }
  }
  componentDidRender() {
    if (this.status !== '') {
      statusNote({
        tag: 'deprecated',
        message: 'Property "status" is deprecated. Please use the "invalid" property!',
        type: 'warn',
        source: this.host,
      });
    }
  }
  getChildNodes() {
    return Array.from(this.host.querySelector('fieldset').querySelectorAll('scale-checkbox'));
  }
  updateChildrenCheckboxStates(checked) {
    const childNodes = this.getChildNodes().filter((node) => !node.disabled);
    childNodes.forEach((node) => {
      if (checked !== undefined) {
        node.checked = checked;
        node.indeterminate = false;
      }
    });
  }
  updateParentCheckboxState() {
    const childNodes = this.getChildNodes();
    const checked = childNodes === null || childNodes === void 0 ? void 0 : childNodes.map((childNode) => childNode.checked);
    const indeterminate = childNodes === null || childNodes === void 0 ? void 0 : childNodes.map((childNode) => childNode.indeterminate);
    const disabled = childNodes === null || childNodes === void 0 ? void 0 : childNodes.map((childNode) => childNode.disabled);
    const allChecked = checked.every(Boolean);
    const someChecked = checked.some(Boolean);
    const someIndeterminate = indeterminate.some(Boolean);
    const allDisabled = disabled.every(Boolean);
    this.checked = allChecked || someChecked;
    this.indeterminate = someIndeterminate || (someChecked && !allChecked);
    this.disabled = allDisabled;
    this.actionText = allChecked ? this.unselectText : this.selectText;
  }
  render() {
    return (hAsync(Host$1, { class: "checkbox-group" }, hAsync("scale-checkbox", { ref: (el) => (this.groupNode = el), name: this.name, label: this.label, ariaLabel: `${this.ariaLabel || this.label} - ${this.actionText}`, helperText: this.helperText, status: this.status, invalid: this.invalid, value: this.value, inputId: this.inputId, checked: this.checked, indeterminate: this.indeterminate, disabled: this.disabled, part: "parent-checkbox" }), hAsync("fieldset", { part: "fieldset" }, hAsync("legend", null, this.ariaLabel || this.label), hAsync("slot", null))));
  }
  componentDidLoad() {
    this.updateParentCheckboxState();
  }
  get host() { return getElement$1(this); }
  static get style() { return checkboxGroupCss; }
  static get cmpMeta() { return {
    "$flags$": 4,
    "$tagName$": "scale-checkbox-group",
    "$members$": {
      "name": [1],
      "label": [1],
      "ariaLabel": [1, "aria-label"],
      "helperText": [1, "helper-text"],
      "status": [1],
      "invalid": [4],
      "value": [1],
      "inputId": [1025, "input-id"],
      "styles": [1],
      "selectText": [1, "select-text"],
      "unselectText": [1, "unselect-text"],
      "checked": [32],
      "indeterminate": [32],
      "disabled": [32]
    },
    "$listeners$": [[0, "scaleChange", "handleCheckboxChange"]],
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const collapsibleCss = "/*!@:host*/.sc-scale-collapsible-h{--spacing-y:var(--scl-spacing-16);--font-size-button:var(--scl-font-size-20);--font-weight-button:var(--scl-font-weight-extrabold);--line-height-button:var(--scl-font-line-height-125);--border-width-button:var(--scl-spacing-2);--radius-button:var(--scl-radius-4);--spacing-left-button:var(--scl-spacing-4);--spacing-left-button-text:var(--scl-spacing-8);--color-button-hover:var(--scl-color-primary-hover);--color-button-active:var(--scl-color-primary-active);--background-button-hover:var(--scl-color-background-light);--border-color-button-focus:var(--scl-color-focus);--spacing-top-icon:calc(var(--scl-spacing-4) + 1px);--spacing-right-content:var(--scl-spacing-48);--spacing-left-content:var(--scl-spacing-32);--spacing-top-content:var(--scl-spacing-16);--spacing-bottom-content:var(--scl-spacing-24)}/*!@.collapsible*/.collapsible.sc-scale-collapsible{position:relative;margin:var(--spacing-y) 0}/*!@.collapsible--expanded:before*/.collapsible--expanded.sc-scale-collapsible:before{top:0;left:0;right:0;width:100%;border:var(--scl-spacing-1) solid transparent;content:'';display:block;position:absolute;pointer-events:none;bottom:calc(-1 * var(--spacing-y))}/*!@.collapsible__heading*/.collapsible__heading.sc-scale-collapsible{margin:0}/*!@.collapsible__button*/.collapsible__button.sc-scale-collapsible{color:currentColor;width:100%;display:flex;text-align:left;align-items:flex-start;padding-top:0;border-color:transparent;border-style:solid;padding-right:0;padding-bottom:0;background-color:transparent;font-size:var(--font-size-button);font-weight:var(--font-weight-button);line-height:var(--line-height-button);border-width:var(--border-width-button);border-radius:var(--radius-button);padding-left:var(--spacing-left-button);font-family:inherit;word-spacing:inherit;letter-spacing:inherit}/*!@.collapsible__button-text*/.collapsible__button-text.sc-scale-collapsible{margin-left:var(--spacing-left-button-text)}/*!@.collapsible__button:hover*/.collapsible__button.sc-scale-collapsible:hover{cursor:pointer;color:var(--color-button-hover);background-color:var(--background-button-hover)}/*!@.collapsible__button:active*/.collapsible__button.sc-scale-collapsible:active{color:var(--color-button-active)}/*!@.collapsible__button:focus*/.collapsible__button.sc-scale-collapsible:focus{outline:none;border-color:var(--border-color-button-focus)}/*!@.collapsible__icon*/.collapsible__icon.sc-scale-collapsible{transform:rotate(0.75turn);flex-shrink:0;margin-top:var(--spacing-top-icon)}/*!@.collapsible__button[aria-expanded='true'] .collapsible__icon*/.collapsible__button[aria-expanded='true'].sc-scale-collapsible .collapsible__icon.sc-scale-collapsible{transform:none}/*!@.collapsible__content*/.collapsible__content.sc-scale-collapsible{padding-right:var(--spacing-right-content);padding-left:var(--spacing-left-content);margin-top:var(--spacing-top-content);margin-bottom:var(--spacing-bottom-content)}";

let i$e = 0;
class Collapsible {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.scaleExpand = createEvent$1(this, "scale-expand", 7);
    this.scaleExpandLegacy = createEvent$1(this, "scaleExpand", 7);
    /** Default aria-level for heading */
    this.headingLevel = 2;
    this.handleClick = () => {
      this.expanded = !this.expanded;
      emitEvent$1(this, 'scaleExpand', { expanded: this.expanded });
    };
  }
  componentWillLoad() {
    const j = i$e++;
    this.headingId = 'collapsable-heading-' + j;
    this.panelId = 'collapsable-panel-' + j;
  }
  componentDidLoad() {
    this.setHeadingFromLightDOM();
  }
  /**
   * @deprecated Safe to remove in 4.0
   * @see https://github.com/telekom/scale/pull/319
   */
  setHeadingFromLightDOM() {
    const lightHeading = this.hostElement.querySelector(':first-child');
    if (lightHeading == null) {
      return;
    }
    // Only proceed if the element is not a heading and has no `slot` attribute
    const isHeading = lightHeading.tagName.charAt(0).toUpperCase() === 'H';
    const hasSlotAttr = lightHeading.hasAttribute('slot');
    if (isHeading && !hasSlotAttr) {
      this.headingElement.innerHTML = lightHeading.innerHTML;
      lightHeading.style.display = 'none';
    }
  }
  render() {
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync("div", { class: this.getCssClassMap(), part: classnames('base', this.expanded && 'expanded') }, hAsync("h2", { "aria-level": this.headingLevel, class: "collapsible__heading", part: "heading" }, hAsync("button", { id: this.headingId, class: "collapsible__button", part: "button", onClick: this.handleClick, "aria-expanded": this.expanded ? 'true' : 'false', "aria-controls": this.panelId }, hAsync("scale-icon-navigation-collapse-down", { size: 16, decorative: true, class: "collapsible__icon", part: classnames('icon', this.expanded && 'expanded') }), hAsync("span", { ref: (el) => (this.headingElement = el), class: "collapsible__button-text", part: "button-text" }, hAsync("slot", { name: "heading" })))), hAsync("div", { id: this.panelId, role: "region", "aria-labelledby": this.headingId, hidden: !this.expanded, class: "collapsible__content", part: "content" }, hAsync("slot", null)))));
  }
  getCssClassMap() {
    return classnames('collapsible', this.expanded && 'collapsible--expanded');
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return collapsibleCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-collapsible",
    "$members$": {
      "expanded": [1540],
      "headingLevel": [2, "heading-level"],
      "styles": [1]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["expanded", "expanded"]]
  }; }
}

const iconCss$2b = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class CommunicationCallIncoming {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M5.5 4.31l2.805 5.045-1.28 1.28a1.5 1.5 0 00-.105 2A29.66 29.66 0 009.035 15l.458.442c.616.583 1.258 1.14 1.922 1.668a1.5 1.5 0 002-.11l1.305-1.275 5 2.805c-.59 5.135-4.67 4.315-6 3.86-2.415-.825-4.965-2.695-7.17-4.905l-.329-.334c-2.065-2.13-3.792-4.542-4.576-6.841C1.19 8.965.37 4.885 5.5 4.31zm16.405-2.966c.2 0 .39.08.53.221a.745.745 0 010 1.06L16.78 8.28l2.19 2.19-6.875 1.435L13.53 5.03l2.19 2.19 5.655-5.655a.745.745 0 01.53-.221z" }))) : (hAsync("g", null, hAsync("path", { d: "M5.9 3.5l3.4 5.95-1.7 1.7c-.25.25-.3.7-.05 1 .45.55 1.15 1.4 2.05 2.3s1.75 1.6 2.3 2.05c.3.25.75.2 1-.05l1.6-1.65 5.95 3.35c-.1 1.15-.35 3.5-2.25 4.7-.8.5-1.7.65-2.5.65-1 0-1.9-.3-2.25-.4-2.3-.8-4.95-2.6-7.45-5.1-2.45-2.5-4.25-5.15-5.1-7.5-.2-.65-.85-2.9.3-4.75C2.45 3.85 4.8 3.6 5.9 3.5zm-.75 1.6c-1.25.2-2.15.7-2.6 1.45-.8 1.25-.3 2.95-.15 3.45.7 2.15 2.4 4.6 4.7 6.9 2.35 2.35 4.8 4.05 6.9 4.75.45.15 2.2.65 3.45-.15.75-.45 1.25-1.35 1.45-2.6l-4.05-2.3-.9.9c-.8.8-2.1.85-3 .15-.6-.45-1.5-1.2-2.45-2.15l-.242-.258A52.645 52.645 0 016.35 13.05c-.75-.9-.65-2.2.15-3l.95-.9zM21.4 1.55c.3-.3.75-.3 1.05 0s.3.8 0 1.05l-5.7 5.65 2.2 2.2-6.9 1.45L13.5 5l2.2 2.2z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2b; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-communication-call-incoming",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2a = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class CommunicationCallOutgoing {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M5.5 4.31l2.805 5.045-1.28 1.28a1.5 1.5 0 00-.105 2A29.66 29.66 0 009.035 15l.458.442c.616.583 1.258 1.14 1.922 1.668a1.5 1.5 0 002-.11l1.305-1.275 5 2.805c-.59 5.135-4.67 4.315-6 3.86-2.415-.825-4.965-2.695-7.17-4.905l-.329-.334c-2.065-2.13-3.792-4.542-4.576-6.841C1.19 8.965.37 4.885 5.5 4.31zm16.905-2.715L20.97 8.47l-2.19-2.19-5.655 5.655a.74.74 0 01-.53.22.725.725 0 01-.53-.22.745.745 0 010-1.06L17.72 5.22l-2.19-2.19z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M5.9 3.5l3.4 5.95-1.7 1.7c-.25.25-.3.7-.05 1 .45.55 1.15 1.4 2.05 2.3s1.75 1.6 2.3 2.05c.3.25.75.2 1-.05l1.6-1.65 5.95 3.35c-.1 1.15-.35 3.5-2.25 4.7-.8.5-1.7.65-2.5.65-1 0-1.9-.3-2.25-.4-2.3-.8-4.95-2.6-7.45-5.1-2.45-2.5-4.25-5.15-5.1-7.5-.2-.65-.85-2.9.3-4.75C2.45 3.85 4.8 3.6 5.9 3.5zm-.75 1.6c-1.25.2-2.15.7-2.6 1.45-.8 1.25-.3 2.95-.15 3.45.7 2.15 2.4 4.6 4.7 6.9 2.35 2.35 4.8 4.05 6.9 4.75.45.15 2.2.65 3.45-.15.75-.45 1.25-1.35 1.45-2.6l-4.05-2.3-.9.9c-.8.8-2.1.85-3 .15-.6-.45-1.5-1.2-2.45-2.15l-.242-.258A52.645 52.645 0 016.35 13.05c-.75-.9-.65-2.2.15-3l.95-.9zm17.3-3.5L21 8.5l-2.2-2.2-5.65 5.65c-.15.15-.35.2-.55.2s-.4-.05-.55-.2c-.3-.3-.3-.75 0-1.05l5.7-5.65-2.2-2.2 6.9-1.45z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2a; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-communication-call-outgoing",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$29 = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class CommunicationChat {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M3.5 8.5V10A1.5 1.5 0 002 11.5v5A1.5 1.5 0 003.5 18H5v2.32l1.88-1.88.44-.44H12a1.5 1.5 0 001.11-.5h.275l.92.92A3 3 0 0112 19.5H7.94l-2.375 2.355A1.21 1.21 0 013.5 21v-1.5a3 3 0 01-3-3v-5a3 3 0 013-3zm19.5-6V13a3 3 0 01-3 3h-.5v1.875a1.5 1.5 0 01-2.565 1.06L14 16H8a3 3 0 01-3-3V2.5h18z" }))) : (hAsync("g", null, hAsync("path", { d: "M3.5 8.5V10c-.85 0-1.5.65-1.5 1.5v5c0 .85.65 1.5 1.5 1.5H5v2.3L7.3 18h5c.45 0 .8-.2 1.1-.5l1.05 1.05c-.55.55-1.3.9-2.15.9H7.95l-2.4 2.4c-.25.25-.55.35-.85.35-.6 0-1.2-.45-1.2-1.2v-1.5c-1.65 0-3-1.35-3-3v-5c0-1.65 1.35-3 3-3zm19.5-6V13c0 1.65-1.35 3-3 3h-.5v1.9c0 .9-.75 1.5-1.5 1.5-.35 0-.75-.15-1.05-.45L14 16H8c-1.65 0-3-1.35-3-3V2.5zM21.5 4h-15v9c0 .85.65 1.5 1.5 1.5h6.65L18 17.85V14.5h2c.85 0 1.5-.65 1.5-1.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$29; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-communication-chat",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$28 = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class CommunicationEmail {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M23.5 6.665V17.5a3 3 0 01-3 3h-17a3 3 0 01-3-3V6.715l8.97 7.61a3.89 3.89 0 005.06 0zm0-3.165v1.19l-9.945 8.49a2.395 2.395 0 01-3.115 0L.5 4.745V3.5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M.5 3.5v14c0 1.65 1.35 3 3 3h17c1.65 0 3-1.35 3-3v-14zM22 5v.95l-8.45 7.25c-.9.75-2.2.75-3.1 0L2 5.95V5zm-1.5 14h-17c-.85 0-1.5-.65-1.5-1.5V7.95l7.45 6.4c.75.65 1.65.95 2.55.95s1.8-.3 2.55-.95L22 7.95v9.55c0 .85-.65 1.5-1.5 1.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$28; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-communication-email",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$27 = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class CommunicationEndCall {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M12 11.225a28.75 28.75 0 013.135.175 1.5 1.5 0 011.335 1.475v1.785l5.46 1.535c3.185-3.975-.24-6.25-1.5-6.86C18.175 8.225 15.09 7.75 12 7.75s-6.175.475-8.445 1.585c-1.245.61-4.67 2.885-1.5 6.86l5.46-1.535v-1.785A1.5 1.5 0 018.85 11.4a28.75 28.75 0 013.15-.175z" }))) : (hAsync("g", null, hAsync("path", { d: "M23.905 12.195c-.465-2.09-2.515-3.235-3.13-3.535C18.585 7.59 15.47 7 12 7s-6.585.59-8.775 1.66c-.615.3-2.66 1.45-3.13 3.535-.315 1.42.15 2.92 1.39 4.47l.31.385 6.485-1.825V12.87c0-.375.285-.69.665-.735.71-.08 1.815-.17 3.055-.17s2.345.095 3.055.17c.38.04.665.355.665.735v2.355l6.485 1.825.31-.385c1.24-1.545 1.705-3.05 1.39-4.47zm-2.265 3.14l-4.42-1.245v-1.215c0-1.145-.86-2.1-2-2.225-2.175-.24-4.26-.24-6.435 0-1.14.125-2 1.08-2 2.225v1.215l-4.42 1.245c-.72-1.025-.99-1.965-.8-2.81.32-1.435 1.86-2.29 2.325-2.515C5.87 9.035 8.755 8.5 12 8.5s6.13.535 8.115 1.505c.465.225 2.005 1.08 2.325 2.515.19.85-.08 1.795-.8 2.815z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$27; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-communication-end-call",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$26 = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class CommunicationFeedback {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M12.26.555A10.36 10.36 0 005 18.305v2.97A1.75 1.75 0 008 22.5l1.6-1.6A10.355 10.355 0 1012.26.555zm4.5 12.94H8.04a.75.75 0 110-1.5h8.72a.75.75 0 110 1.5zm0-3.5H8.04a.75.75 0 010-1.5h8.72a.75.75 0 110 1.5z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M12 1c5.8 0 10.5 4.7 10.45 10.55 0 5.8-4.7 10.5-10.5 10.5-1.05 0-2.1-.15-3.05-.45l-1.45 1.45c-.35.35-.75.5-1.2.5-.9 0-1.75-.7-1.75-1.75v-2.95c-1.85-1.9-3-4.5-3-7.35C1.5 5.7 6.2 1 12 1zm0 1.5c-4.95 0-9 4.05-9 9 0 2.35.9 4.6 2.6 6.3l.45.45v3.55c0 .25.25.25.25.25.05 0 .1-.05.15-.1l2.1-2.1.85.25c.85.25 1.7.4 2.6.4 4.95 0 9-4.05 9-9s-4.05-9-9-9zm4.25 10c.45 0 .75.35.75.75s-.35.75-.75.75h-8.7c-.4 0-.75-.35-.75-.75s.35-.75.75-.75zm0-3.5c.45 0 .75.35.75.75s-.35.75-.75.75h-8.7c-.4 0-.75-.35-.75-.75S7.15 9 7.55 9z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$26; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-communication-feedback",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$25 = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class CommunicationMessage {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M1.5 3.5V16a3 3 0 003 3H6v2.275A1.75 1.75 0 009 22.5l3.5-3.5h7a3 3 0 003-3V3.5h-21zm15 10h-9a.75.75 0 110-1.5h9a.75.75 0 110 1.5zm0-3.5h-9a.75.75 0 010-1.5h9a.75.75 0 110 1.5z" }))) : (hAsync("g", null, hAsync("path", { d: "M22.45 3.5v12.55c0 1.65-1.35 3-3 3h-7l-3.5 3.5c-.35.35-.75.5-1.2.5-.9 0-1.75-.7-1.75-1.75V19H4.5c-1.65 0-3-1.35-3-3V3.5zM21 5H3v11c0 .85.65 1.5 1.5 1.5h3.05v3.8c0 .25.25.25.25.25.05 0 .1-.05.15-.1l3.95-3.95h7.6c.85 0 1.5-.65 1.5-1.5zm-4.5 7c.4 0 .75.35.75.75s-.35.75-.75.75h-9c-.4 0-.75-.35-.75-.75S7.1 12 7.5 12zm0-3.5c.4 0 .75.35.75.75s-.35.75-.75.75h-9c-.4 0-.75-.35-.75-.75s.35-.75.75-.75z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$25; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-communication-message",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$24 = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class CommunicationPhoneNumber {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M10.535 13.5a29.66 29.66 0 01-2.115-2.365 1.5 1.5 0 01.105-2l1.28-1.28L7 2.81c-5.13.575-4.31 4.655-3.855 6 .825 2.42 2.695 4.965 4.905 7.175 2.205 2.21 4.755 4.08 7.17 4.905 1.33.455 5.41 1.275 6-3.86l-5-2.805-1.305 1.275a1.5 1.5 0 01-2 .11 29.805 29.805 0 01-2.38-2.11z" }))) : (hAsync("g", null, hAsync("path", { d: "M16.05 13.3l-1.7 1.7c-.25.25-.7.3-1 .05-.55-.45-1.4-1.15-2.3-2.05S9.45 11.25 9 10.7a.76.76 0 01.05-1l1.7-1.7L7.4 2c-1.1.1-3.45.35-4.7 2.25C1.55 6.1 2.2 8.35 2.4 9c.85 2.35 2.65 5 5.1 7.5 2.5 2.5 5.15 4.3 7.45 5.1.35.1 1.25.4 2.25.4.8 0 1.7-.15 2.5-.65 1.9-1.2 2.15-3.55 2.25-4.7zm2.9 6.7c-1.25.8-3 .3-3.45.15-2.1-.7-4.55-2.4-6.9-4.75-2.3-2.3-4-4.75-4.7-6.9-.15-.5-.65-2.2.15-3.45C4.5 4.3 5.4 3.8 6.65 3.6l2.3 4.05-.95.9c-.8.8-.9 2.1-.15 3 .5.6 1.25 1.5 2.15 2.45.95.95 1.85 1.7 2.45 2.15.9.7 2.2.65 3-.15l.9-.9 4.05 2.3c-.25 1.25-.7 2.15-1.45 2.6z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$24; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-communication-phone-number",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$23 = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class CommunicationRecipient {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M17.75 11.36a5.885 5.885 0 015.89 5.89 5.89 5.89 0 11-5.89-5.89zm0 1.5a4.39 4.39 0 100 8.78 4.39 4.39 0 000-8.78zm1.88 2.345a.755.755 0 011.06 0c.289.29.289.76 0 1.05l-3.62 3.625-2.32-2.32a.755.755 0 010-1.06.745.745 0 011.06 0l1.26 1.265zm-.465-9.445v4.38a7.25 7.25 0 00-8.665 7.11v.035h-8a2.5 2.5 0 01-2.5-2.5V5.88l7.395 6.345a3.35 3.35 0 004.385 0l7.385-6.465zm0-2.645v.655L10.8 11.09a1.86 1.86 0 01-2.43 0L0 3.9v-.785h19.165z" }))) : (hAsync("g", null, hAsync("path", { d: "M17.75 11.5c3.45 0 6.25 2.8 6.25 6.25S21.2 24 17.75 24s-6.25-2.8-6.25-6.25 2.8-6.25 6.25-6.25zm3.1 4.05c-.3-.3-.75-.3-1.05 0l-2.8 2.8-1.4-1.4c-.3-.3-.75-.3-1.05 0s-.3.75 0 1.05L17 20.5l3.9-3.9c.3-.3.25-.75-.05-1.05zM19 3v7.1c-.4-.05-.8-.1-1.25-.1h-.25V7.15l-5.8 4.95c-.65.55-1.4.8-2.2.8s-1.55-.25-2.2-.8L1.5 7.15v7.4c0 .5.45.95 1 .95h7.85c-.15.5-.25 1-.3 1.5H2.5C1.1 17 0 15.9 0 14.55V3zm-1.5 1.5h-16v.7l6.75 5.75c.7.6 1.75.6 2.45 0l6.8-5.75z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$23; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-communication-recipient",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$22 = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class CommunicationVoiceMessage {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M1.5 3.5V16a3 3 0 003 3H6v2.275A1.75 1.75 0 009 22.5l3.5-3.5h7a3 3 0 003-3V3.5h-21zm7 8.75a.75.75 0 11-1.5 0v-2a.75.75 0 111.5 0v2zm3 2a.75.75 0 11-1.5 0v-6a.75.75 0 111.5 0v6zm3-1a.75.75 0 11-1.5 0v-4a.75.75 0 111.5 0v4zm3-1a.75.75 0 11-1.5 0v-2a.75.75 0 011.5 0v2z" }))) : (hAsync("g", null, hAsync("path", { d: "M22.45 3v12.55c0 1.65-1.35 3-3 3h-7l-3.5 3.5c-.35.35-.75.5-1.2.5-.9 0-1.75-.7-1.75-1.75v-2.3H4.5c-1.65 0-3-1.35-3-3V3zM21 4.5H3v11c0 .85.65 1.5 1.5 1.5h3v3.8c0 .2.25.35.45.15L11.9 17h7.6c.85 0 1.5-.65 1.5-1.5zM10.75 7c.4 0 .75.35.75.75v6c0 .4-.35.75-.75.75s-.75-.35-.75-.75v-6c0-.4.35-.75.75-.75zm3 1c.4 0 .75.35.75.75v4c0 .4-.35.75-.75.75s-.75-.35-.75-.75v-4c0-.4.35-.75.75-.75zm-6 1c.4 0 .75.35.75.75v2c0 .4-.35.75-.75.75S7 12.15 7 11.75v-2c0-.4.35-.75.75-.75zm9 0c.4 0 .75.35.75.75v2c0 .4-.35.75-.75.75s-.75-.35-.75-.75v-2c0-.4.35-.75.75-.75z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$22; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-communication-voice-message",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$21 = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentAchievement {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M19 3V1.5H5V3H1.5v5.5a5 5 0 004.145 4.92 7 7 0 004.855 3.915A2.75 2.75 0 017.75 20H7v2.5h10V20h-.75a2.75 2.75 0 01-2.75-2.665 7 7 0 004.85-3.915A5 5 0 0022.5 8.5V3H19zM3 8.5v-4h2v6c.003.406.04.81.11 1.21A3.5 3.5 0 013 8.5zm11.08 3.405L12 10.615l-2.08 1.29.58-2.38-1.87-1.58 2.44-.18L12 5.5l.925 2.265 2.44.18-1.865 1.58.58 2.38zM21 8.5a3.5 3.5 0 01-2.11 3.21c.07-.4.107-.804.11-1.21v-6h2v4z" }))) : (hAsync("g", null, hAsync("path", { d: "M19 1.5V3h3.5v5.5c0 2.45-1.8 4.5-4.15 4.9-.9 1.95-2.7 3.45-4.85 3.9a2.756 2.756 0 002.75 2.65H17v2.5H7v-2.5h.75c1.5 0 2.7-1.15 2.75-2.65-2.15-.45-3.95-1.95-4.85-3.9C3.3 13 1.5 10.95 1.5 8.5V3H5V1.5zM17.5 3h-11v7.5c0 3.05 2.45 5.5 5.5 5.5s5.5-2.45 5.5-5.5zM12 5.5l.9 2.25 2.45.2-1.85 1.6.6 2.35-2.1-1.3-2.1 1.3.6-2.35-1.85-1.6 2.45-.2zm-7-1H3v4c0 1.45.85 2.65 2.1 3.2-.05-.4-.1-.8-.1-1.2zm16 0h-2v6c0 .4-.05.8-.1 1.2 1.25-.55 2.1-1.75 2.1-3.2z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$21; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-achievement",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$20 = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentApplications {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M9 13a2 2 0 012 2v5a2 2 0 01-2 2H4a2 2 0 01-2-2v-5a2 2 0 012-2h5zm11 0a2 2 0 012 2v5a2 2 0 01-2 2h-5a2 2 0 01-2-2v-5a2 2 0 012-2h5zM9 2a2 2 0 012 2v5a2 2 0 01-2 2H4a2 2 0 01-2-2V4a2 2 0 012-2h5zm11 0a2 2 0 012 2v5a2 2 0 01-2 2h-5a2 2 0 01-2-2V4a2 2 0 012-2h5z" }))) : (hAsync("g", null, hAsync("path", { d: "M8 13c1.4 0 2.5 1.1 2.5 2.5v4c0 1.4-1.1 2.5-2.5 2.5H4c-1.4 0-2.5-1.1-2.5-2.5v-4C1.5 14.1 2.6 13 4 13zm11 0c1.4 0 2.5 1.1 2.5 2.5v4c0 1.4-1.1 2.5-2.5 2.5h-4c-1.4 0-2.5-1.1-2.5-2.5v-4c0-1.4 1.1-2.5 2.5-2.5zM8 14.5H4c-.55 0-1 .45-1 1v4c0 .55.45 1 1 1h4c.55 0 1-.45 1-1v-4c0-.55-.45-1-1-1zm11 0h-4c-.55 0-1 .45-1 1v4c0 .55.45 1 1 1h4c.55 0 1-.45 1-1v-4c0-.55-.45-1-1-1zM8 2c1.4 0 2.5 1.1 2.5 2.5v4C10.5 9.9 9.4 11 8 11H4c-1.4 0-2.5-1.1-2.5-2.5v-4C1.5 3.1 2.6 2 4 2zm11 0c1.4 0 2.5 1.1 2.5 2.5v4c0 1.4-1.1 2.5-2.5 2.5h-4c-1.4 0-2.5-1.1-2.5-2.5v-4C12.5 3.1 13.6 2 15 2zM8 3.5H4c-.55 0-1 .45-1 1v4c0 .55.45 1 1 1h4c.55 0 1-.45 1-1v-4c0-.55-.45-1-1-1zm11 0h-4c-.55 0-1 .45-1 1v4c0 .55.45 1 1 1h4c.55 0 1-.45 1-1v-4c0-.55-.45-1-1-1z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$20; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-applications",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1$ = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentBiometric {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M12.225 9.77c2.22 0 3.89.93 4.89 2.685a5.365 5.365 0 003.725 2.465l-.012-.002.092.031a.75.75 0 01.458.726l-.012.106a.75.75 0 01-.826.604 6.885 6.885 0 01-4.76-3.205c-.705-1.27-1.91-1.915-3.575-1.915a4.065 4.065 0 00-4.06 4.06c0 1.375.635 2.24 1.675 3.5a9.365 9.365 0 004.065 2.96.75.75 0 01-.445 1.43 10.885 10.885 0 01-4.775-3.435c-.925-1.145-2-2.45-2-4.45a5.565 5.565 0 015.56-5.56zm.025-3.01a8.245 8.245 0 015.86 2.18 9.41 9.41 0 011.5 1.88 2.5 2.5 0 001.63 1.215v-.01a.755.755 0 01-.17 1.5 4 4 0 01-2.73-1.905 7.935 7.935 0 00-1.285-1.59 6.71 6.71 0 00-4.83-1.77 7.075 7.075 0 00-7.04 7.07 7.155 7.155 0 003.405 6 .75.75 0 11-.805 1.265A8.54 8.54 0 0112.25 6.76zm-.75 6.12a2.58 2.58 0 012.76.92l.335.47c.29.443.625.856 1 1.23a6.97 6.97 0 004.035 2 .76.76 0 11-.235 1.5 8.42 8.42 0 01-4.83-2.42 9.265 9.265 0 01-1.19-1.46c-.11-.155-.21-.3-.305-.425a1.07 1.07 0 00-1.17-.375 1 1 0 00-.68.68c-.11.385-.025.67.475 1.28l.05.06a10.105 10.105 0 005.785 3.705.75.75 0 01-.365 1.455c-4.405-1.115-6.415-3.94-6.665-4.315a2.805 2.805 0 01-.71-2.595 2.5 2.5 0 011.71-1.71zm.48-9.113a11.57 11.57 0 019.175 4.198A.75.75 0 1120 8.92a10.075 10.075 0 00-15.82.35.74.74 0 01-1.035.145A.75.75 0 013 8.365a11.57 11.57 0 018.98-4.598zM12.26.75c2.311 0 4.58.62 6.57 1.795a.75.75 0 11-.75 1.3 11.42 11.42 0 00-11.825.11.73.73 0 01-.385.11.76.76 0 01-.625-.36.75.75 0 01.255-1.03A13.105 13.105 0 0112.26.75z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M12.1 9.95c1.1 0 2.25.4 3.3 1.15.35.25.65.55.9.85.35.4.7.8 1.35 1.2.85.6 1.95 1 3.25 1.35.45.15.65.55.55.95-.1.4-.5.65-.9.55-1.5-.4-2.7-.9-3.7-1.55-.8-.55-1.25-1.05-1.65-1.45-.25-.25-.45-.5-.7-.65-.75-.55-1.6-.85-2.4-.85-.85 0-1.65.3-2.3.85-1.55 1.3-1.75 3.5-.5 5.25.55.75 1.5 1.7 2.45 2.45.7.55 1.5 1.05 2.35 1.5.35.2.5.65.3 1s-.65.5-1 .3c-.95-.45-1.8-1-2.6-1.65-1.1-.8-2.1-1.85-2.75-2.75C6.3 16 6.6 13 8.8 11.15c.95-.75 2.1-1.2 3.3-1.2zm0-2.95c1.45 0 2.9.4 4.25 1.15.95.55 1.5 1.15 2 1.65.75.75 1.3 1.35 3 1.7.4.1.65.5.65.85-.1.4-.5.7-.9.6-2.15-.45-3-1.3-3.8-2.15-.5-.5-.95-.95-1.7-1.4-1.1-.6-2.35-.95-3.5-.95-1.55 0-3.05.55-4.25 1.55-2.75 2.35-3.15 6.25-1 9.3.45.7 1.1 1.4 1.85 2.1.3.25.35.75.05 1.05-.3.3-.75.35-1.05.05-.8-.75-1.5-1.55-2.05-2.3C3 16.55 3.5 11.75 6.9 8.9 8.35 7.7 10.2 7 12.1 7zm-1.35 6.5c.95-.85 2.3-.65 3.25.45.45.55.8.95 1.4 1.4 1.35 1 2.8 1.55 4.35 2 .4.15.65.55.55.95-.15.4-.55.6-.95.5-1.1-.35-2.85-.8-4.75-2.2-.35-.3-.65-.55-1.05-.95-.3-.35-.65-.75-.75-.9-.25-.3-.75-.4-1.1-.1-.3.3-.35.75-.1 1.05.6.75 1.2 1.4 2 2 1.55 1.25 3.35 1.9 4.05 2.15.35.15.6.55.45.95-.15.35-.55.6-.95.45-.75-.25-2.75-1-4.5-2.35-.85-.65-1.65-1.5-2.15-2.15-.85-1.15-.75-2.4.25-3.25zM12.1 4c3.35 0 6.55 1.5 8.85 4.15.25.3.2.8-.1 1.05-.3.25-.8.2-1.05-.1-2-2.3-4.75-3.6-7.65-3.6-2.25 0-4.45.85-6.2 2.3-.6.45-1.1 1-1.55 1.6-.25.3-.75.4-1.05.1-.35-.25-.4-.7-.15-1.05.5-.65 1.1-1.3 1.75-1.85C6.95 4.9 9.5 4 12.1 4zm0-3c2.3 0 4.55.55 6.65 1.65.35.2.5.65.3 1s-.65.5-1 .3C16.2 3 14.2 2.5 12.15 2.5 10.05 2.5 8 3 6.2 4c-.4.15-.85.05-1.05-.35-.2-.35-.05-.8.3-1C7.5 1.55 9.8 1 12.1 1z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1$; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-biometric",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1_ = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentBookmark {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M19.5 3.5v20L12 18.24 4.5 23.5v-20a3 3 0 013-3h9a3 3 0 013 3z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M16.5.5h-9c-1.655 0-3 1.345-3 3v20l7.5-5.26 7.5 5.26v-20c0-1.655-1.345-3-3-3zM18 20.615l-6-4.21-6 4.21V3.5C6 2.675 6.675 2 7.5 2h9c.825 0 1.5.675 1.5 1.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1_; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-bookmark",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1Z = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentCalendar {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M17.5 3.5v-2H16v2H8v-2H6.5v2H2V19a3 3 0 003 3h14a3 3 0 003-3V3.5h-4.5zm-10 14a1 1 0 110-2 1 1 0 010 2zm0-4.5a1 1 0 110-2 1 1 0 010 2zm4.5 4.5a1 1 0 110-2 1 1 0 010 2zm0-4.5a1 1 0 110-2 1 1 0 010 2zm4.5 4.5a1 1 0 110-2 1 1 0 010 2zm0-4.5a1 1 0 110-2 1 1 0 010 2z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M8 1.5v2h8v-2h1.5v2H22V19c0 1.65-1.35 3-3 3H5c-1.65 0-3-1.35-3-3V3.5h4.5v-2H8zM20.5 8h-17v11c0 .85.65 1.5 1.5 1.5h14c.85 0 1.5-.65 1.5-1.5V8zm-13 7.5a1 1 0 110 2 1 1 0 010-2zm4.5 0a1 1 0 110 2 1 1 0 010-2zm4.5 0a1 1 0 110 2 1 1 0 010-2zm-9-4.5a1 1 0 110 2 1 1 0 010-2zm4.5 0a1 1 0 110 2 1 1 0 010-2zm4.5 0a1 1 0 110 2 1 1 0 010-2z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1Z; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-calendar",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1Y = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentClipboard {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M6.545 3a3.32 3.32 0 00-.045.5V7h11V3.5a3.32 3.32 0 00-.045-.5H21v17.5a3 3 0 01-3 3H6a3 3 0 01-3-3V3zM16 16H8a.75.75 0 000 1.5h8a.75.75 0 100-1.5zm0-3.5H8A.75.75 0 108 14h8a.75.75 0 100-1.5zM16 9H8a.75.75 0 000 1.5h8A.75.75 0 1016 9zm-4-9a1.5 1.5 0 011.5 1.5V2h1A1.5 1.5 0 0116 3.5v2H8v-2A1.5 1.5 0 019.5 2h1v-.5A1.5 1.5 0 0112 0z" }))) : (hAsync("g", null, hAsync("path", { d: "M6.661 3.429c-.049.147-.049.342-.049.49v.979H4.653v15.673c0 .833.637 1.47 1.47 1.47h11.755c.832 0 1.469-.637 1.469-1.47V4.898h-1.96v-.98c0-.147 0-.342-.048-.49h3.477v17.143a2.947 2.947 0 01-2.938 2.94H6.122a2.947 2.947 0 01-2.938-2.94V3.43zm9.257 12.734c.392 0 .735.343.735.735a.753.753 0 01-.735.735H8.082a.753.753 0 01-.735-.735c0-.392.343-.735.735-.735zm0-3.428c.392 0 .735.343.735.734a.753.753 0 01-.735.735H8.082a.753.753 0 01-.735-.735c0-.391.343-.734.735-.734zm0-3.429c.392 0 .735.343.735.735a.753.753 0 01-.735.735H8.082a.753.753 0 01-.735-.735c0-.392.343-.735.735-.735zM10.531 1.96c0-.881.832-1.616 1.763-1.47.686.148 1.175.784 1.175 1.52v.44h.98c.833 0 1.47.637 1.47 1.47v1.959H8.081v-1.96c0-.832.636-1.469 1.469-1.469h.98z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1Y; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-clipboard",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1X = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentClock {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M12 1C5.925 1 1 5.925 1 12s4.925 11 11 11 11-4.925 11-11A11 11 0 0012 1zm5.47 14a.75.75 0 01-.66.39.785.785 0 01-.36-.09l-5.2-2.855v-7.71a.75.75 0 111.5 0v6.82l4.42 2.415a.75.75 0 01.3 1.03z" }))) : (hAsync("g", null, hAsync("path", { d: "M12 1c6.1 0 11 4.9 11 11s-4.9 11-11 11S1 18.1 1 12 5.95 1 12 1zm0 1.5c-5.25 0-9.5 4.25-9.5 9.5s4.25 9.5 9.5 9.5 9.5-4.25 9.5-9.5-4.25-9.5-9.5-9.5zM12 4c.4 0 .75.3.75.75v6.8l4.4 2.4c.4.2.5.7.3 1.05-.15.25-.4.4-.65.4-.1 0-.25-.05-.35-.1l-5.2-2.85v-7.7c0-.4.35-.75.75-.75z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1X; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-clock",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1W = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentCreditCard {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M23.5 11v6.5a3 3 0 01-3 3h-17a3 3 0 01-3-3V11h23zm-3-7.5a3 3 0 013 3V8H.5V6.5a3 3 0 013-3z" }))) : (hAsync("g", null, hAsync("path", { d: "M20.5 3.5h-17c-1.655 0-3 1.345-3 3v11c0 1.655 1.345 3 3 3h17c1.655 0 3-1.345 3-3v-11c0-1.655-1.345-3-3-3zm1.5 14c0 .825-.675 1.5-1.5 1.5h-17c-.825 0-1.5-.675-1.5-1.5V11h20zM22 8H2V6.5C2 5.675 2.675 5 3.5 5h17c.825 0 1.5.675 1.5 1.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1W; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-credit-card",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1V = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentDelivery {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("filter", { id: "a" }, hAsync("feColorMatrix", { in: "SourceGraphic", values: "0 0 0 0 0.149020 0 0 0 0 0.149020 0 0 0 0 0.149020 0 0 0 1.000000 0" })), hAsync("g", { fill: "none", "fill-rule": "evenodd", filter: "url(#a)" }, hAsync("path", { d: "M0 0h24v24H0z" }), hAsync("g", { fill: "#000", "fill-rule": "nonzero" }, hAsync("path", { d: "M.5 5h9V1.5h-6zM17 1.5h-6V5h9zM.5 17.5a3 3 0 003 3h6v-14h-9zM17.75 10c.762 0 1.52.113 2.25.335V6.5h-9v7.45A7.745 7.745 0 0117.75 10z" }), hAsync("path", { d: "M17.75 11.5a6.25 6.25 0 100 12.5 6.25 6.25 0 000-12.5zm3.145 5.095L17 20.5 14.545 18a.75.75 0 011.06-1.06L17 18.355l2.82-2.82a.745.745 0 011.06 0c.294.29.3.762.015 1.06z" }))))) : (hAsync("g", null, hAsync("path", { d: "M17.25 11.5c3.45 0 6.25 2.8 6.25 6.25S20.7 24 17.25 24 11 21.2 11 17.75s2.8-6.25 6.25-6.25zm3.1 4.05c-.3-.3-.75-.3-1.05 0l-2.8 2.8-1.4-1.4c-.3-.3-.75-.3-1.05 0s-.3.75 0 1.05l2.45 2.5 3.9-3.9c.3-.3.25-.75-.05-1.05zM16.5 1.5l3 3.5v5.35c-.5-.15-1-.25-1.5-.3V6.5h-7.5v3H9v-3H1.5v11c0 .85.65 1.5 1.5 1.5h6.6c.1.5.2 1 .4 1.5H3c-1.65 0-3-1.35-3-3V5l3-3.5zM15.8 3h-5.3v2h7.05zM9 3H3.7L2 5h7z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1V; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-delivery",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1U = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentDigitalBanking {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M6.73 8.555l.045-.055H.75v4a3 3 0 003 3h3.04a9.08 9.08 0 011-3.46 2.195 2.195 0 01-.62-.335 2.245 2.245 0 01-.44-3.15zm7.11-4.23a11 11 0 016.91 1.035V5a3 3 0 00-3-3h-14a3 3 0 00-3 3v1H9.5a11.525 11.525 0 014.34-1.675zm9.23 10.945a8 8 0 01-3.25-2.115c-1-.945-2.055-1.925-3.81-1.955a4.86 4.86 0 00-3.55 1.425 5.06 5.06 0 00-1.5 3.63c0 3.735 5 6.69 6.77 7.435a.75.75 0 00.58-1.385c-1.83-.775-5.85-3.37-5.85-6.05a3.57 3.57 0 011.04-2.56 3.34 3.34 0 012.475-1c1.175 0 1.86.66 2.81 1.55a9.31 9.31 0 003.83 2.45.75.75 0 10.445-1.43l.01.005zm-.455 2.88c-2.755-.935-3.805-2.055-4.565-2.87-.59-.625-1.14-1.215-2.135-1.28a2.1 2.1 0 00-2.16 1.545c-.755 2.645 4.04 5.56 6.825 6.38a.76.76 0 00.21.03A.75.75 0 0021 20.5c-2.935-.865-6.14-3.36-5.805-4.5a.61.61 0 01.62-.5c.37.025.585.22 1.14.81.82.875 2.045 2.19 5.18 3.26a.75.75 0 00.48-1.42zm-13.5-7.78a8.185 8.185 0 015.215-3.085 8 8 0 015.71 1.13.751.751 0 10.81-1.265 9.455 9.455 0 00-6.765-1.345 9.7 9.7 0 00-6.16 3.655.755.755 0 00.14 1.04.775.775 0 001.055-.13h-.005zm3.675 11.395c-1.135-.89-3.045-2.79-3.045-5.5A6.29 6.29 0 0116 9.935c2.185 0 3.77 1.25 5.5 3.125a.75.75 0 101.11-1c-1.715-1.88-3.7-3.615-6.595-3.615a7.79 7.79 0 00-7.765 7.81c0 2.5 1.285 4.865 3.625 6.69.13.105.293.161.46.16a.75.75 0 00.46-1.34h-.005z" }))) : (hAsync("g", null, hAsync("path", { d: "M16.1 11.2c1.5 0 2.95.7 4 1.95.7.8 1.35 1.45 3.25 2.15.35.15.55.6.5.9-.15.4-.55.6-.95.45-2.15-.8-3.1-1.65-3.85-2.6-.8-.9-1.85-1.4-2.9-1.4-.8 0-1.55.3-2.15.8-1.45 1.25-1.65 3.3-.45 4.95.55.75 1.45 1.65 2.4 2.4.75.6 1.65 1.15 2.55 1.6.4.2.55.65.35 1-.2.4-.65.55-1 .35-1.05-.5-2-1.1-2.85-1.75-1.05-.8-2.05-1.8-2.7-2.7-1.7-2.35-1.4-5.2.7-6.95.85-.75 1.95-1.15 3.1-1.15zM16 8.55c1.65 0 3.2.5 4.55 1.45 1.05.75 1.8 1.7 2.15 2.05.3.3.3.75 0 1.05s-.75.3-1.05 0c-.35-.4-1-1.25-1.95-1.9-1.05-.8-2.35-1.2-3.65-1.2-1.4 0-2.8.5-3.9 1.45-2.6 2.15-2.95 5.8-.95 8.6.45.6 1.05 1.25 1.7 1.9.3.25.35.75.05 1.05s-.75.35-1.05.05c-.75-.7-1.4-1.45-1.9-2.15-2.5-3.45-2-7.95 1.1-10.55 1.35-1.15 3.1-1.8 4.9-1.8zm-1.25 5.9c.95-.85 2.3-.65 3.25.45.45.55.8.95 1.4 1.4s1.6 1.1 3.5 1.75c.4.15.65.7.5 1.05s-.55.6-.95.45c-1.55-.5-2.8-1.1-3.85-1.9-.65-.5-1.25-1.1-1.85-1.85-.25-.35-.75-.45-1.1-.1-.3.25-.35.7-.1 1 .6.75 1.2 1.35 2 2 .85.65 1.9 1.25 2.9 1.65.35.15.55.2.9.35.35.1.5.45.4.85-.15.4-.55.6-.95.5-1.35-.4-2.9-1.25-4.15-2.2-.85-.65-1.65-1.5-2.15-2.15-.85-1.15-.75-2.4.25-3.25zM18 2c1.65 0 3 1.35 3 3v.25c-.5-.2-1.05-.4-1.55-.55-.1-.65-.7-1.2-1.45-1.2H4c-.85 0-1.5.65-1.5 1.5v1h7.35c-.5.35-1 .65-1.45 1.05-.5.4-1 .9-1.45 1.45l.005-.006.014-.013-.019.019H2.5v4c0 .85.65 1.5 1.5 1.5h3.2c-.15.5-.2 1-.25 1.5H4c-1.65 0-3-1.35-3-3V5c0-1.65 1.35-3 3-3zm-1.95 3.7c1.75 0 3.5.45 5.05 1.3.35.2.5.65.3 1s-.65.5-1 .3c-1.35-.7-2.85-1.1-4.35-1.1-2.1 0-4.1.75-5.7 2.1-.4.35-.75.7-1.1 1.1-.25.3-.7.35-1 .05-.35-.25-.35-.75-.1-1.05.35-.45.8-.85 1.25-1.25 1.85-1.6 4.2-2.45 6.65-2.45z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1U; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-digital-banking",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1T = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentDigitalMedia {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M5.355 11.5a8.76 8.76 0 007.895 5h.25v5.835a1.085 1.085 0 01-1.85.77L9.55 21H2.355A1.855 1.855 0 01.5 19.145V11.5zM19.5 10.06l3.995 2.345v1.83l-2.5-.625v6.255c0 2.095-1.59 2.415-2.46 2.345-1.35-.11-2.43-1.055-2.415-2.155s1.12-1.92 2.47-1.83c.313.02.62.091.91.21zM8.524 2.259a7.245 7.245 0 0111.881 6.596l-.145-.085L18 7.445v5.775A7.245 7.245 0 118.524 2.259zM11.5 5.17v5.33l4.615-2.665z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M5.355 11.5c.255.53.56 1.035.91 1.5H2v6.145c0 .195.16.355.355.355h7.815L12 21.33V16.4c.41.06.825.1 1.255.105.085 0 .165-.015.25-.015v5.85a1.081 1.081 0 01-1.85.765L9.55 21H2.355A1.854 1.854 0 01.5 19.145V11.5zM19.5 10.06l4 2.345v1.83l-2.51-.635v6.255c0 2.1-1.59 2.42-2.46 2.35-1.345-.11-2.425-1.055-2.41-2.155.02-1.1 1.12-1.92 2.47-1.83.32.025.63.1.91.21v-8.37zM13.25.5a7.249 7.249 0 017.25 7.25c0 .375-.04.745-.095 1.105l-1.42-.835c.005-.09.015-.18.015-.27C19 4.58 16.42 2 13.25 2S7.5 4.58 7.5 7.75s2.58 5.75 5.75 5.75c1.97 0 3.715-1 4.75-2.515v2.235A7.224 7.224 0 0113.25 15 7.249 7.249 0 016 7.75 7.249 7.249 0 0113.25.5zM11.5 5.17l4.615 2.665L11.5 10.5V5.17z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1T; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-digital-media",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1S = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentDraftFile {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M22.5 3.5v17a3 3 0 01-3 3h-10A3 3 0 016.905 22H19.5a1.5 1.5 0 001.5-1.5V5h-2V3.5h3.5zm-5-3v17a3 3 0 01-3 3h-10a3 3 0 01-3-3V7h4A2.5 2.5 0 008 4.5v-4h9.5zM7 .5v4A1.5 1.5 0 015.5 6h-4L7 .5z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M22.5 3.5v17c0 1.655-1.345 3-3 3h-10A2.998 2.998 0 016.905 22H19.5c.825 0 1.5-.675 1.5-1.5V5h-2V3.5h3.5zm-5-3v17c0 1.655-1.345 3-3 3h-10c-1.655 0-3-1.345-3-3v-12l5-5h11zM16 2H7.5v3c0 .83-.67 1.5-1.5 1.5H3v11c0 .825.675 1.5 1.5 1.5h10c.825 0 1.5-.675 1.5-1.5V2z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1S; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-draft-file",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1R = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentESim {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M20 3a3 3 0 013 3v12a3 3 0 01-3 3h-.5v-2.5h.5a.5.5 0 00.5-.5V6a.5.5 0 00-.5-.5H8.535L3.5 10.535V15H1V9.5L7.5 3zM7.29 14.83a1.775 1.775 0 011.92 1.745H8.065a.705.705 0 00-.775-.65.625.625 0 00-.7.635c0 .405.265.555.59.64l.665.185a1.725 1.725 0 011.385 1.71c0 1.165-.86 1.815-1.955 1.815-1.185 0-1.895-.625-2-1.77H6.44a.785.785 0 00.85.675c.505 0 .755-.285.755-.65 0-.365-.24-.545-.695-.665l-.665-.215a1.615 1.615 0 01-1.295-1.65 1.77 1.77 0 011.9-1.805zm-4.35 1.605c1.095 0 1.81.835 1.79 2.125a2.3 2.3 0 010 .395H2.11c.06.775.38 1 .805 1 .28.03.548-.126.66-.385h1.13a1.695 1.695 0 01-1.79 1.33c-1.12 0-1.875-.82-1.875-2.23 0-1.41.73-2.235 1.9-2.235zm8.3-1.475v5.8h-1.17v-5.8h1.17zm2.17 0l1.73 3.215h.05l1.72-3.215h1.075v5.8H16.82v-3.27h-.05l-1.425 2.55h-.37l-1.42-2.55h-.05v3.27h-1.17v-5.8h1.075zM2.94 17.385c-.405 0-.69.18-.795.745H3.69c-.08-.565-.345-.745-.75-.745z" }))) : (hAsync("g", null, hAsync("path", { d: "M2.95 16.65c1.1 0 1.8.85 1.8 2.15v.4h-2.6c.05.75.35 1 .8 1 .3 0 .55-.15.65-.4h1.15c-.2.85-.9 1.35-1.8 1.35-1.15 0-1.9-.85-1.9-2.25 0-1.45.75-2.25 1.9-2.25zM20 3c1.65 0 3 1.35 3 3v12c0 1.65-1.35 3-3 3h-.5v-1.5h.5c.85 0 1.5-.65 1.5-1.5V6c0-.85-.65-1.5-1.5-1.5H8.1l-5.6 5.6V15H1V9.5L7.5 3zM7.3 15c1.15 0 1.8.7 1.9 1.75H8.05c-.05-.45-.3-.65-.75-.65-.4 0-.7.25-.7.65s.3.55.6.65l.65.2c.85.25 1.4.9 1.4 1.6 0 1.15-.85 1.8-1.95 1.8-1.2 0-1.9-.6-2-1.75h1.15c.1.5.4.7.85.7.5 0 .75-.3.75-.65s-.25-.55-.7-.65l-.65-.2c-.95-.25-1.3-.9-1.3-1.65 0-1.1.8-1.8 1.9-1.8zm3.9.2V21h-1.15v-5.8zm2.2 0l1.75 3.2h.05l1.7-3.2H18V21h-1.2v-3.3h-.05l-1.4 2.6h-.4l-1.4-2.6h-.05V21h-1.15v-5.8zM2.95 17.6c-.4 0-.7.2-.8.75H3.7c-.1-.55-.4-.75-.75-.75z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1R; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-e-sim",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1Q = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentEu {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 3C5.65 3 .5 7.03.5 12s5.15 9 11.5 9 11.5-4.03 11.5-9S18.35 3 12 3zm-1.205 6.935h-2.58v1.41h2.5v1.25h-2.5v1.5h2.58v1.25h-3.93v-6.66h3.93zm6.2 3c.005 1.66-.89 2.565-2.47 2.565s-2.5-.92-2.5-2.59V8.685h1.34v4.06c0 1.04.32 1.5 1.14 1.5s1.14-.44 1.14-1.5v-4.06H17z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12 3c6.35 0 11.5 4.05 11.5 9s-5.15 9-11.5 9S.5 16.95.5 12 5.65 3 12 3zm0 1.5C6.5 4.5 2 7.85 2 12s4.5 7.5 10 7.5 10-3.35 10-7.5-4.5-7.5-10-7.5zm1.35 4.2v4.05c0 1.05.35 1.5 1.15 1.5s1.15-.45 1.15-1.5 0-4.05-.05-4.05h1.35v4.25c0 1.7-.85 2.6-2.45 2.6s-2.5-.9-2.5-2.6V8.7zm-2.55 0v1.25H8.2v1.4h2.5v1.25H8.2v1.5h2.6v1.25H6.85V8.7z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1Q; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-eu",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1P = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentFeatures {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M9.725 3.925l9.695 9.695a2.88 2.88 0 010 4.065L14 23.105a2.885 2.885 0 01-4.07 0L.235 13.41l1.22-8.26 2.66-.395-1.215.18 1.6-.24zm2.835 7.17l-2 1.745-2.465-1.035 1.035 2.46-1.745 2 2.665-.22 1.365 2.275.61-2.605 2.595-.575-2.285-1.385zM9.5.16l12.035 5.375a2.365 2.365 0 011.215 3.12l-1.915 4.28a5.878 5.878 0 00-.335-.38l-.81-.785 1.67-3.725a.865.865 0 00-.435-1.14L9.58 1.84l-1.425.795L4 3.255zm-3.975 7.7a.96.96 0 10-1.36 1.355.96.96 0 001.36-1.355z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M9.7 3.9l9.75 9.75c1.1 1.1 1.1 2.95 0 4.05l-5.4 5.4c-.6.55-1.3.85-2.05.85s-1.5-.3-2.05-.85l-9.7-9.7 1.2-8.25zm-.5 1.6l-6.4 1-.95 6.4 9.2 9.15c.25.25.6.4.95.4s.7-.15.95-.4l5.4-5.45c.55-.5.55-1.4 0-1.95zm3.4 5.55l-.25 2.7 2.3 1.35-2.6.65-.6 2.6-1.4-2.3-2.65.2 1.75-2L8.1 11.8l2.45 1zM9.5.15l12.05 5.4c1.15.5 1.7 1.9 1.2 3.15l-1.9 4.3c-.1-.15-.25-.3-.35-.4l-.8-.8 1.65-3.75c.2-.45 0-.95-.45-1.15L9.55 1.85l-1.4.8-4.15.6zm-5.35 7.7c.4-.35 1-.35 1.35 0s.35 1 0 1.35-1 .35-1.35 0-.35-1 0-1.35z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1P; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-features",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1O = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentFlexibleTariffs {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M7.205 8.69L5.92 10.66l2.685 1.755A10.17 10.17 0 0112 16.08a10.175 10.175 0 013.395-3.66l2.685-1.755-1.285-1.97h6.57l-2.69 6.02-1.285-1.97-2.685 1.755a7.725 7.725 0 00-3.5 6.5v1.275a1.255 1.255 0 01-.205.7V23a1 1 0 01-.275.295H12.7a1.256 1.256 0 01-.62.205H12l-.14-.006a1.255 1.255 0 01-.915-.544.455.455 0 01-.045-.085 1.09 1.09 0 01-.16-.615V21l-.004-.28A7.725 7.725 0 007.24 14.5l-2.685-1.75-1.285 1.97L.635 8.69h6.57zM12 1l3.6 5.5h-2.35v6.25a1.25 1.25 0 01-2.5 0V6.5H8.4L12 1z" }))) : (hAsync("g", null, hAsync("path", { d: "M7.2 8.5l-1.55 2.4 2.7 1.75c1.65 1.1 2.9 2.6 3.65 4.4.7-1.75 2-3.3 3.65-4.4l2.7-1.75-1.55-2.4h6.65l-2.65 6-1.55-2.4-2.7 1.75c-2.35 1.55-3.75 4.1-3.75 6.9v1.45c0 .4-.35.75-.75.75l-.099-.007a.772.772 0 01-.651-.743v-1.45l-.005-.289c-.093-2.686-1.476-5.114-3.745-6.611l-2.7-1.75-1.55 2.4-2.65-6zM12 1l3.6 5.5h-2.85v6.55c0 .4-.35.75-.75.75s-.75-.35-.75-.75V6.5H8.4z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1O; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-flexible-tariffs",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1N = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentHeart {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M20.075 6.915a4.365 4.365 0 00-5.3-1.58c-1.67.69-2.14 1.915-2.775 3.165-.665-1.32-1.155-2.585-2.94-3.235a4.365 4.365 0 00-5.135 1.65 4.37 4.37 0 00.29 5.3l6.635 7.755a1.5 1.5 0 002.3 0l6.635-7.755a4.37 4.37 0 00.29-5.3z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M21.315 6.07a5.857 5.857 0 00-4.85-2.57 5.85 5.85 0 00-2.265.45c-1 .415-1.69.985-2.2 1.605-.55-.67-1.305-1.28-2.425-1.69a5.864 5.864 0 00-6.89 2.205 5.89 5.89 0 00.39 7.12l6.63 7.755a3.017 3.017 0 004.585 0l6.63-7.755a5.883 5.883 0 00.395-7.12zm-1.53 6.145L13.15 19.97c-.3.355-.725.53-1.15.53-.425 0-.85-.175-1.15-.53l-6.635-7.755a4.372 4.372 0 01-.29-5.3A4.319 4.319 0 017.535 5c.52 0 1.035.09 1.525.27 1.785.655 2.275 1.915 2.94 3.235.635-1.255 1.105-2.48 2.775-3.17A4.486 4.486 0 0116.465 5c1.365 0 2.735.625 3.61 1.915 1.11 1.63.99 3.8-.29 5.3z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1N; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-heart",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1M = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentHistory {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M12 1.25a10.75 10.75 0 012.31 21.25 1.255 1.255 0 11-.52-2.455 8.24 8.24 0 10-7-1.675l1.315-2 2.68 6.13H4.11l1.305-2A10.75 10.75 0 0112 1.25zm0 4a.75.75 0 01.75.75v5.55l3.85 2.035A.75.75 0 0116.25 15a.785.785 0 01-.35-.085l-4.65-2.465V6a.75.75 0 01.75-.75z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M12 1.75c5.65 0 10.25 4.6 10.3 10.3 0 4.75-3.4 9-8.05 10h-.15c-.35 0-.65-.25-.75-.6-.1-.4.15-.8.55-.9 3.95-.85 6.85-4.45 6.85-8.55 0-4.8-3.95-8.75-8.75-8.75S3.25 7.2 3.25 12c0 2.65 1.25 5.15 3.25 6.8l1.55-2.4 2.7 6.1H4.1l1.6-2.45C3.25 18.15 1.75 15.2 1.75 12 1.75 6.35 6.35 1.75 12 1.75zm0 3.5c.4 0 .75.35.75.75v5.55l3.85 2.05c.35.2.5.65.3 1-.1.25-.4.4-.65.4-.1 0-.25-.05-.35-.1l-4.65-2.45V6c0-.4.35-.75.75-.75z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1M; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-history",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1L = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentInternational {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("filter", { id: "a" }, hAsync("feColorMatrix", { in: "SourceGraphic", values: "0 0 0 0 0.149020 0 0 0 0 0.149020 0 0 0 0 0.149020 0 0 0 1.000000 0" })), hAsync("g", { fill: "none", "fill-rule": "evenodd", filter: "url(#a)" }, hAsync("path", { d: "M0 0h24v24H0z" }), hAsync("path", { d: "M12 1C5.925 1 1 5.925 1 12s4.925 11 11 11 11-4.925 11-11A11 11 0 0012 1zm8.4 9.75h-1.445a15.205 15.205 0 00-1.185-4.97 8.465 8.465 0 012.63 4.97zM10.75 3.9v6.85H7.56a11.67 11.67 0 011.6-5.185A5.16 5.16 0 0110.75 3.9zm0 9.35v6.85a5.16 5.16 0 01-1.59-1.665 11.67 11.67 0 01-1.6-5.185zm2.5 6.85v-6.85h3.19a11.67 11.67 0 01-1.6 5.185 5.16 5.16 0 01-1.59 1.665zm0-9.35V3.9a5.16 5.16 0 011.59 1.665 11.67 11.67 0 011.6 5.185zm-7-4.97a15.205 15.205 0 00-1.185 4.97h-1.46A8.43 8.43 0 016.23 5.78zm-2.645 7.47h1.44a15.205 15.205 0 001.185 4.97 8.43 8.43 0 01-2.625-4.97zm14.165 4.97a15.205 15.205 0 001.185-4.97H20.4a8.465 8.465 0 01-2.63 4.97z", fill: "#000", "fill-rule": "nonzero" })))) : (hAsync("g", null, hAsync("path", { d: "M12 1C5.95 1 1 5.9 1 12s4.9 11 11 11 11-4.9 11-11S18.1 1 12 1zm9.45 10.25h-2.5c-.15-3-1.05-5.7-2.4-7.55 2.75 1.5 4.65 4.3 4.9 7.55zM11.25 2.6v8.65H6.5c.25-4.4 2.25-8.05 4.75-8.65zm0 10.15v8.65c-2.5-.6-4.5-4.25-4.75-8.65zm1.5 8.65v-8.65h4.75c-.25 4.4-2.25 8.05-4.75 8.65zm0-10.15V2.6c2.5.6 4.5 4.25 4.75 8.65zM7.45 3.7c-1.35 1.85-2.3 4.55-2.4 7.55h-2.5a9.426 9.426 0 014.9-7.55zm-4.9 9.05h2.5c.15 3 1.05 5.7 2.4 7.55a9.426 9.426 0 01-4.9-7.55zM16.6 20.3c1.35-1.85 2.3-4.55 2.4-7.55h2.5a9.66 9.66 0 01-4.9 7.55z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1L; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-international",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1K = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentInternationalSms {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M9.551 5.388c.245 0 .49.039.735.039v6.818c0 .417.179.814.49 1.092v.069h.088a1.41 1.41 0 00.891.309 1.47 1.47 0 00.872-.31h.176v-.127l2.116-2.116c.182.737.302 1.487.358 2.244h.798a6.573 6.573 0 00-.93-2.474l.156-.156h2.528A9.076 9.076 0 119.55 5.388zM8.327 15.492H6.284c.1 1.429.53 2.815 1.254 4.05.22.351.485.67.789.951v-5zm4.496 0h-2.047v5.001c.98-.901 1.836-2.728 2.047-5zm-8.998 0h-.798a6.563 6.563 0 001.415 3.15 12.965 12.965 0 01-.617-3.15zm12.25 0h-.798a12.965 12.965 0 01-.617 3.15 6.563 6.563 0 001.415-3.15zM4.442 10.256a6.563 6.563 0 00-1.415 3.15h.798c.075-1.072.282-2.13.617-3.15zm3.885-1.851c-.98.901-1.837 2.728-2.048 5h2.048zM24 0v9.306h-9.306l-2.939 2.939V0H24zm-9.666 3.063l-.13.003a1.102 1.102 0 00-1.122 1.117.98.98 0 00.804 1.024l.416.122c.28.073.431.176.431.411 0 .236-.176.407-.49.407a.49.49 0 01-.529-.421h-.759a1.127 1.127 0 001.25 1.102A1.107 1.107 0 0015.418 5.7a1.078 1.078 0 00-.872-1.053l-.411-.112c-.201-.054-.368-.147-.368-.397a.392.392 0 01.436-.397.44.44 0 01.49.407h.7a1.097 1.097 0 00-1.19-1.083zm6.966.02a1.19 1.19 0 00-1.17 1.1.98.98 0 00.799 1.024l.416.122c.28.073.431.176.431.411 0 .236-.176.407-.49.407a.49.49 0 01-.524-.421h-.724a1.127 1.127 0 001.249 1.102h.014a1.107 1.107 0 001.23-1.127 1.073 1.073 0 00-.892-1.053l-.416-.112c-.201-.054-.367-.147-.367-.397a.392.392 0 01.435-.397.431.431 0 01.49.407h.72a1.19 1.19 0 00-1.2-1.067zm-4.647.061h-.656v3.6h.725V4.712h.034l.877 1.587h.235l.881-1.587h.035v2.032h.705l.005-3.6h-.666L17.76 5.138h-.034l-1.073-1.994z" }))) : (hAsync("g", null, hAsync("path", { d: "M7.1 5.75c1.55-.35 2.75-.2 2.9-.2V14h3.65l-.15-1.35 1.25-1.25c.2.8.35 1.7.4 2.6H17c-.1-1.1-.45-2.1-.95-3h1.65c.5 1.15.8 2.4.8 3.75 0 5.1-4.15 9.25-9.25 9.25S0 19.85 0 14.75c0-4.35 3-8 7.1-9zm6.5 9.75H10v6.85c1.85-.6 3.4-3.5 3.6-6.85zm-5.1 0H4.9c.2 3.35 1.75 6.25 3.6 6.85zm-5.1 0H1.55c.2 2.4 1.6 4.5 3.55 5.75-.95-1.5-1.6-3.5-1.7-5.75zm13.55 0H15.1c-.15 2.25-.75 4.25-1.7 5.75 1.95-1.25 3.35-3.35 3.55-5.75zM8.5 7.15c-1.85.6-3.4 3.5-3.6 6.85h3.6zm-3.4 1.1C3.15 9.5 1.75 11.6 1.55 14H3.4c.15-2.25.75-4.25 1.7-5.75zM24 0v9.5h-9.5l-3 3V0zm-9.9 3.2c-.7 0-1.2.45-1.2 1.15 0 .45.2.9.8 1.05l.4.1c.3.05.45.15.45.4 0 .2-.2.4-.5.4s-.5-.15-.55-.45h-.8c.1.7.55 1.1 1.3 1.1.7 0 1.25-.4 1.2-1.1 0-.5-.35-.9-.9-1.05l-.4-.1c-.2-.05-.35-.15-.35-.4s.2-.4.45-.4c.3 0 .45.15.5.4h.8c-.05-.65-.45-1.1-1.2-1.1zm7.2 0c-.7 0-1.2.45-1.2 1.15 0 .45.2.9.8 1.05l.4.1c.3.05.45.15.45.4 0 .2-.2.4-.5.4s-.5-.15-.55-.45h-.75c.1.7.55 1.1 1.3 1.1.7 0 1.25-.4 1.2-1.1 0-.5-.35-.9-.9-1.05l-.4-.1c-.2-.05-.35-.15-.35-.4s.2-.4.45-.4c.3 0 .45.15.5.4h.75c-.05-.65-.45-1.1-1.2-1.1zm-4.8 0h-.7v3.65h.75V4.8h.05l.9 1.6h.2l.9-1.6h.05v2.1h.8V3.2h-.7l-1.1 2.05h-.05z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1K; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-international-sms",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1J = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentInterview {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M8 12l1.08 1.055-4.825 5.155a1.085 1.085 0 101.535 1.535l5.15-4.805L12 16l-5.185 4.84a2.57 2.57 0 01-1.765.695 2.595 2.595 0 01-1.21-.315l-2.135 2.135-1.06-1.06 2.135-2.11a2.575 2.575 0 01.38-3zm4.915-8L20 11.085l-5.745 5.73-7.07-7.07zm.635 5.39l-1.08 1.08 1.06 1.06 1.08-1.08zm3.968-7.765a4 4 0 013.807 1.05 4 4 0 01-1.66 6.68l-5-5a4 4 0 012.853-2.73z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M18.5 1.5a4.002 4.002 0 012.825 6.83A3.987 3.987 0 0118.5 9.5h-.105l1.59 1.59-5.73 5.73-1.52-1.52-5.925 5.54a2.569 2.569 0 01-1.765.695c-.42 0-.83-.115-1.21-.315L1.7 23.355l-1.06-1.06 2.135-2.135c-.505-.95-.39-2.15.385-2.975l5.545-5.92-1.52-1.52 5.73-5.735 1.59 1.59a3.97 3.97 0 011.165-2.93A3.998 3.998 0 0118.5 1.5zM9.765 12.325L4.26 18.21c-.4.43-.39 1.095.025 1.51a1.074 1.074 0 001.505.025l5.89-5.505zm3.15-6.19l-3.61 3.61 4.95 4.95 3.61-3.61zm.635 2.195l2.12 2.12-1.06 1.06-.53-.53-1.06 1.065-1.065-1.065 1.065-1.06-.535-.53z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1J; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-interview",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1I = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentKey {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M18.185 2.025L20.13 3.97a2.25 2.25 0 010 3.18l-.35.35h-2.125v2.13h-2.12v2.115L14.28 13a6.25 6.25 0 11-3.535-3.53zM6.166 16.171a1 1 0 101.415 1.413 1 1 0 00-1.415-1.413z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M18.4 1.25l2.5 2.45c1.15 1.15 1.15 3.05 0 4.25l-.55.55h-1.8v2h-2v1.8l-1.15 1.15c.75 2.5.1 5.2-1.75 7.05a7.006 7.006 0 01-4.95 2.05c-2.3 0-4.65-1.2-6.05-3.5-.35-.55-.6-1.15-.75-1.8-.6-2.5.1-4.95 1.8-6.65 1.85-1.85 4.6-2.5 7.05-1.75zm0 2.1l-7.25 7.3-.45-.2c-.65-.3-1.3-.4-2-.4-1.45 0-2.85.55-3.9 1.6s-1.6 2.4-1.6 3.9.55 2.85 1.6 3.9c2.35 2.35 6.3 2.1 8.35-.7 1.1-1.5 1.3-3.55.6-5.3l-.15-.35 1.4-1.4V9h2V7h2.65l.15-.15c.6-.6.6-1.5 0-2.1zM7.1 16.1c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1I; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-key",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1H = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentLock {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M18.5 9.5v-2a6.5 6.5 0 10-13 0v2H3V19a3 3 0 003 3h12a3 3 0 003-3V9.5h-2.5zM13 16.11V18h-2v-1.89a1.5 1.5 0 112 0zm4-6.61H7v-2a5 5 0 0110 0v2z" }))) : (hAsync("g", null, hAsync("path", { d: "M12 1c3.6 0 6.5 2.9 6.5 6.5v2H21V19c0 1.65-1.35 3-3 3H6c-1.65 0-3-1.35-3-3V9.5h2.5v-2C5.5 3.9 8.4 1 12 1zm7.5 10h-15v8c0 .85.65 1.5 1.5 1.5h12c.85 0 1.5-.65 1.5-1.5zM12 13.5c.85 0 1.5.65 1.5 1.5 0 .45-.2.85-.5 1.1V18h-2v-1.9c-.3-.25-.5-.65-.5-1.1 0-.85.65-1.5 1.5-1.5zm0-11c-2.75 0-5 2.25-5 5v2h10v-2c0-2.75-2.25-5-5-5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1H; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-lock",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1G = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentMediaFolder {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M7.5 2.5a3.755 3.755 0 012.74 1.18l.43.46c.216.228.516.358.83.36H23V19a3 3 0 01-3 3H4a3 3 0 01-3-3V2.5zm2 6.89v7.5l5.73-3.75z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M7.5 2.5a3.755 3.755 0 012.74 1.18l.43.46c.216.228.516.358.83.36H23V19a3 3 0 01-3 3H4a3 3 0 01-3-3V2.5zm2 6.89v7.5l5.73-3.75z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1G; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-media-folder",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1F = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentMoneyAt {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M13.545 2.435C7.415 2.435 2.79 7.28 2.79 13.7c0 4.845 3.4 8.36 8.08 8.36a10.26 10.26 0 005.03-1.315l.19-.105-.715-1.815-.25.135a8.605 8.605 0 01-4.235 1.1c-3.5 0-5.96-2.615-5.96-6.36 0-5.28 3.695-9.26 8.57-9.26 3.805 0 6 2.095 6 5.74 0 2.5-1.08 5.125-2.885 5.125a.84.84 0 01-.665-.245 1.5 1.5 0 01-.175-1.17l.905-6.345h-2.14L14.4 8.59a2.845 2.845 0 00-2.535-1.335c-2.875 0-4.43 3.08-4.43 6 0 2.41 1.4 4.03 3.5 4.03a3.32 3.32 0 002.8-1.535c.28.77 1 1.535 2.66 1.535 2.53 0 5.225-2.5 5.225-7.085-.02-4.7-3.18-7.765-8.075-7.765zm.3 9.065c0 1.765-.87 3.64-2.5 3.64-1.435 0-1.65-1.3-1.65-2.07 0-1.785.785-3.71 2.5-3.71 1.495.01 1.65 1.505 1.65 2.14z" }))) : (hAsync("g", null, hAsync("path", { d: "M21.35 10.18c0 3.205-1.725 6.83-4.975 6.83-1.46 0-2.3-.62-2.52-1.725H13.7c-.595 1.04-1.55 1.725-2.785 1.725-1.97 0-3.23-1.525-3.23-3.78 0-2.895 1.525-5.725 4.18-5.725 1.325 0 2.21.71 2.585 1.77h.11l.2-1.48h1.635l-.86 6.06c-.155.995.135 1.7 1.085 1.7 2.055 0 3.14-2.895 3.14-5.375 0-3.76-2.275-5.99-6.235-5.99-5.195 0-8.845 4.265-8.845 9.505 0 4.09 2.785 6.61 6.215 6.61 1.725 0 3.14-.465 4.355-1.13l.53 1.35a10.047 10.047 0 01-4.91 1.285c-4.245 0-7.825-3.075-7.825-8.115 0-6.08 4.375-11.01 10.5-11.01 4.82 0 7.805 2.92 7.805 7.495zm-7.255 1.33c0-1.44-.64-2.39-1.88-2.39-1.77 0-2.765 1.835-2.765 3.96 0 1.37.62 2.32 1.9 2.32 1.73 0 2.745-1.88 2.745-3.89z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1F; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-money-at",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1E = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentMusic {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M7.5 4.89v12.06a4.205 4.205 0 00-1.885-.695c-1.89-.22-3.44.88-3.465 2.455s1.5 3.03 3.385 3.25S9 21.075 9 19.5V8.11l10.5-2.19v8.53a4.205 4.205 0 00-1.885-.695c-1.89-.22-3.44.88-3.465 2.455s1.5 3.03 3.385 3.25S21 18.575 21 17V2.08z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M7.5 4.89v12.06a4.205 4.205 0 00-1.885-.695c-1.89-.215-3.44.885-3.465 2.46-.02 1.575 1.495 3.03 3.385 3.245C7.43 22.175 9 21.075 9 19.5V8.11l10.5-2.19v8.53a4.205 4.205 0 00-1.885-.695c-1.89-.215-3.44.885-3.465 2.46-.02 1.575 1.495 3.03 3.385 3.245C19.43 19.675 21 18.575 21 17V2.08z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1E; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-music",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1D = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentNews {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M22.5 3v15.5a3 3 0 01-3 3h-15a3 3 0 01-3-3V3h21zm-4.75 13h-4a.75.75 0 000 1.5h4a.75.75 0 100-1.5zM11 11H5.5v6.5H11V11zm6.75 2.5h-4a.75.75 0 100 1.5h4a.75.75 0 100-1.5zm0-2.5h-4a.75.75 0 000 1.5h4a.75.75 0 100-1.5zm.75-4h-13v2h13V7z" }))) : (hAsync("g", null, hAsync("path", { d: "M22.5 3v15.5c0 1.65-1.35 3-3 3h-15c-1.65 0-3-1.35-3-3V3zM21 4.5H3v14c0 .85.65 1.5 1.5 1.5h15c.85 0 1.5-.65 1.5-1.5zM17.75 16c.4 0 .75.35.75.75s-.35.75-.75.75h-4c-.4 0-.75-.35-.75-.75s.35-.75.75-.75zM11 11v6.5H5.5V11zm6.75 2.5c.4 0 .75.35.75.75s-.35.75-.75.75h-4c-.4 0-.75-.35-.75-.75s.35-.75.75-.75zm0-2.5c.4 0 .75.35.75.75s-.35.75-.75.75h-4c-.4 0-.75-.35-.75-.75s.35-.75.75-.75zm.75-4v2h-13V7z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1D; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-news",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1C = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentPrepaidActivate {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M17.5 11a6.5 6.5 0 110 13 6.5 6.5 0 010-13zm0 1.5a5 5 0 100 10 5 5 0 000-10zM19 0v9.645a8.205 8.205 0 00-1.5-.145 7.94 7.94 0 00-2.57.43A2.5 2.5 0 0012.5 8h-5A2.5 2.5 0 005 10.5v5A2.5 2.5 0 007.5 18h2.025a7.96 7.96 0 001.36 4H4a3 3 0 01-3-3V6.5L7.5 0H19zm.655 15.215a.751.751 0 011.065 1.06l-4 4-2.55-2.545a.751.751 0 011.065-1.06l1.5 1.5 2.95-2.95zM12.5 9.5a1 1 0 011 1v.08a8 8 0 00-3.93 5.92H7.5a1 1 0 01-1-1v-5a1 1 0 011-1z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M17.75 11.5c3.45 0 6.25 2.8 6.25 6.25S21.2 24 17.75 24s-6.25-2.8-6.25-6.25 2.8-6.25 6.25-6.25zM19 0v10.1c-.4-.05-.8-.1-1.25-.1h-.25V1.5H8.1L2.5 7.1V19c0 .85.65 1.5 1.5 1.5h6.5c.2.55.45 1.05.75 1.5H4c-1.65 0-3-1.35-3-3V6.5L7.5 0H19zm1.85 15.55c-.3-.3-.75-.3-1.05 0l-2.8 2.8-1.4-1.4c-.3-.3-.75-.3-1.05 0-.3.3-.3.75 0 1.05L17 20.5l3.9-3.9c.3-.3.25-.75-.05-1.05zM12.5 8c1.4 0 2.5 1.1 2.5 2.5l-.324.126a6.842 6.842 0 00-1.176.624v-.75c0-.55-.45-1-1-1h-5c-.55 0-1 .45-1 1v5c0 .55.45 1 1 1h2.6c-.05.4-.1.8-.1 1.25V18H7.5C6.1 18 5 16.9 5 15.5v-5C5 9.1 6.1 8 7.5 8z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1C; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-prepaid-activate",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1B = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentPriceTag {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M21.061 2.836l-8.62-1.274L2.346 11.657a2.988 2.988 0 000 4.232l5.643 5.662a2.988 2.988 0 004.256 0l10.07-10.11zm-2.84 4.237a.98.98 0 11-1.36-1.411.98.98 0 011.36 1.41z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12.445 1.535l8.78 1.3 1.295 8.78L12.215 21.92a3.052 3.052 0 01-4.32 0l-5.76-5.76a3.051 3.051 0 010-4.32l10.31-10.305zm.525 1.59L3.195 12.9A1.543 1.543 0 002.74 14c0 .415.16.805.455 1.1l5.765 5.76c.295.295.685.455 1.1.455s.805-.16 1.1-.455l9.77-9.77-1.03-6.935zM17.5 5.5a1 1 0 110 2 1 1 0 010-2z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1B; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-price-tag",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1A = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentRss {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M19 2H5a3 3 0 00-3 3v14a3 3 0 003 3h14a3 3 0 003-3V5a3 3 0 00-3-3zM7.22 18.5a1.725 1.725 0 110-3.45 1.725 1.725 0 010 3.45zm6.085-.5H11.76c.11-.408.167-.828.17-1.25A4.755 4.755 0 007.18 12a4.6 4.6 0 00-1.18.155v-1.54a6.13 6.13 0 011.18-.115 6.26 6.26 0 016.125 7.5zm4.545 0h-1.5a9.37 9.37 0 00.095-1.25A9.26 9.26 0 007.18 7.5 9.23 9.23 0 006 7.585v-1.5c.391-.051.785-.08 1.18-.085 5.935.006 10.744 4.815 10.75 10.75a10.29 10.29 0 01-.08 1.25z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M19 2c1.655 0 3 1.345 3 3v14c0 1.655-1.345 3-3 3H5c-1.655 0-3-1.345-3-3V5c0-1.655 1.345-3 3-3zm0 1.5H5c-.825 0-1.5.675-1.5 1.5v14c0 .825.675 1.5 1.5 1.5h14c.825 0 1.5-.675 1.5-1.5V5c0-.825-.675-1.5-1.5-1.5zM7.22 15.06a1.72 1.72 0 110 3.44 1.72 1.72 0 010-3.44zm-.04-4.56a6.259 6.259 0 016.125 7.5H11.76c.105-.4.17-.815.17-1.25 0-2.62-2.13-4.75-4.75-4.75-.41 0-.8.06-1.18.155v-1.54c.38-.075.775-.115 1.18-.115zm0-4.5c5.93 0 10.75 4.82 10.75 10.75 0 .425-.03.84-.08 1.25h-1.515c.055-.41.095-.825.095-1.25 0-5.1-4.15-9.25-9.25-9.25-.4 0-.79.035-1.18.085V6.07c.39-.045.78-.07 1.18-.07z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1A; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-rss",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1z = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentShop {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M20.25 7.75H16.5V5.5a4.5 4.5 0 10-9 0v2.25H3.75l-.835 12.095A2.25 2.25 0 005.16 22.25h13.68a2.25 2.25 0 002.245-2.405L20.25 7.75zM9 5.5a3 3 0 116 0v2.25H9V5.5zm-.75 6.25a1 1 0 110-2 1 1 0 010 2zm7.5 0a1 1 0 110-2 1 1 0 010 2z" }))) : (hAsync("g", null, hAsync("path", { d: "M12 1c2.5 0 4.5 2 4.5 4.5V7h4.45l.9 12.8c.05.8-.25 1.65-.8 2.25s-1.35.95-2.2.95H5.15c-.85 0-1.65-.35-2.2-.95s-.85-1.4-.8-2.25L3.05 7H7.5V5.5C7.5 3 9.5 1 12 1zm7.55 7.5H4.45l-.8 11.35c-.05.45.1.8.4 1.15s.7.5 1.1.5h13.7c.4 0 .8-.2 1.1-.5.25-.3.4-.7.4-1.1zM8.25 9.75a1 1 0 110 2 1 1 0 010-2zm7.5 0a1 1 0 110 2 1 1 0 010-2zM12 2.5c-1.65 0-3 1.35-3 3V7h6V5.5c0-1.65-1.35-3-3-3z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1z; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-shop",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1y = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentSignal {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M12 10a2 2 0 01.75 3.85V22a.75.75 0 11-1.5 0v-8.15A2 2 0 0112 10zM3.65 3.65l1.5 1.5v.01a9.695 9.695 0 000 13.7l-1.5 1.5c-4.604-4.619-4.604-12.091 0-16.71zm16.705-.005c4.597 4.618 4.597 12.082 0 16.7l-1.5-1.5a9.695 9.695 0 000-13.7zM6.5 6.5L8 8a5.685 5.685 0 000 8.05l-1.5 1.5a7.825 7.825 0 010-11.05zm11.025 0a7.825 7.825 0 01-.025 11L16 16a5.685 5.685 0 00.025-8z" }))) : (hAsync("g", null, hAsync("path", { d: "M11.755 10.04c1.078 0 1.96.882 1.96 1.96 0 .833-.49 1.518-1.225 1.812v7.984a.753.753 0 01-.735.735.753.753 0 01-.735-.735v-7.984A1.922 1.922 0 019.796 12c0-1.078.882-1.96 1.96-1.96zM3.771 4.017L4.85 5.094c-3.82 3.82-3.82 9.992-.049 13.812l-1.029 1.029c-4.408-4.36-4.408-11.51 0-15.919zm15.968 0c4.359 4.408 4.359 11.56 0 15.919l-1.029-1.029c3.82-3.82 3.82-10.04 0-13.861zM6.563 6.808l1.029 1.029A5.813 5.813 0 005.878 12c0 1.567.636 3.037 1.714 4.163l-1.029 1.029A7.34 7.34 0 014.408 12c0-1.96.784-3.82 2.155-5.192zm10.384 0A7.34 7.34 0 0119.102 12a7.34 7.34 0 01-2.155 5.192l-1.029-1.029A5.813 5.813 0 0017.633 12a5.813 5.813 0 00-1.715-4.163z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1y; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-signal",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1x = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentSimCard {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M21 1v19a3 3 0 01-3 3H6a3 3 0 01-3-3V7.5L9.5 1H21zm-6.5 8h-5A2.5 2.5 0 007 11.5v5A2.5 2.5 0 009.5 19h5a2.5 2.5 0 002.5-2.5v-5A2.5 2.5 0 0014.5 9zm-1 1.5a2 2 0 012 2v3a2 2 0 01-2 2h-3a2 2 0 01-2-2v-3a2 2 0 012-2h3z" }))) : (hAsync("g", null, hAsync("path", { d: "M21 1v19c0 1.65-1.35 3-3 3H6c-1.65 0-3-1.35-3-3V7.5L9.5 1zm-1.5 1.5h-9.4L4.5 8.1V20c0 .85.65 1.5 1.5 1.5h12c.85 0 1.5-.65 1.5-1.5zm-5 6.5c1.4 0 2.5 1.1 2.5 2.5v5c0 1.4-1.1 2.5-2.5 2.5h-5C8.1 19 7 17.9 7 16.5v-5C7 10.1 8.1 9 9.5 9zm0 1.5h-5c-.55 0-1 .45-1 1v5c0 .55.45 1 1 1h5c.55 0 1-.45 1-1v-5c0-.55-.45-1-1-1z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1x; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-sim-card",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1w = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentSmile {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M12 1C5.925 1 1 5.925 1 12s4.925 11 11 11 11-4.925 11-11A11 11 0 0012 1zm3.5 6.5a1.5 1.5 0 110 3 1.5 1.5 0 010-3zm-7 0a1.5 1.5 0 110 3 1.5 1.5 0 010-3zm8.77 8.87c-1.305 1.99-3.225 3.13-5.27 3.13-2.045 0-3.965-1.14-5.27-3.13A.757.757 0 018 15.545C9 17.105 10.5 18 12 18s3-.895 4-2.455a.75.75 0 011.255.825h.015z" }))) : (hAsync("g", null, hAsync("path", { d: "M12 1c6.1 0 11 4.9 11 11s-4.9 11-11 11S1 18.1 1 12 5.95 1 12 1zm0 1.5c-5.25 0-9.5 4.25-9.5 9.5s4.25 9.5 9.5 9.5 9.5-4.25 9.5-9.5-4.25-9.5-9.5-9.5zM6.95 15.35c.35-.25.8-.15 1.05.2C9 17.1 10.5 18 12 18s3-.9 4-2.45c.25-.35.7-.45 1.05-.2.35.2.45.65.2 1.05-1.3 2-3.25 3.15-5.25 3.15S8.05 18.4 6.75 16.4c-.25-.35-.15-.8.2-1.05zM8.5 7.5a1.5 1.5 0 110 3 1.5 1.5 0 010-3zm7 0a1.5 1.5 0 110 3 1.5 1.5 0 010-3z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1w; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-smile",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1v = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentTariffs {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M21.061 2.836l-8.62-1.274L2.346 11.657a2.988 2.988 0 000 4.232l5.643 5.662a2.993 2.993 0 004.256 0l10.075-10.11zm-6.343 10.52l-1.087-1.087a1.043 1.043 0 00-.078-1.43c-.46-.46-1.01-.49-1.734-.034l1.112 1.112-.764.764-1.2-1.2-.191.19-.196.202 1.2 1.2-.764.759-1.112-1.097c-.446.715-.422 1.263.039 1.724.38.4 1.006.436 1.43.083l1.087 1.087a2.586 2.586 0 01-3.497-.19c-1.023-1.024-1.033-2.386-.117-3.762l-.49-.466.764-.764.382.382.196-.2.191-.191-.377-.382.774-.75.49.465c1.38-.92 2.733-.92 3.766.113a2.581 2.581 0 01.176 3.473zm3.502-6.283a.98.98 0 11-1.36-1.411.98.98 0 011.36 1.41z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M12.45 1.55l8.75 1.3 1.3 8.75-10.3 10.3c-.6.6-1.4.9-2.15.9s-1.55-.3-2.15-.9l-5.75-5.75c-1.2-1.15-1.2-3.1 0-4.3l10.3-10.3zm.5 1.6L3.2 12.9c-.6.6-.6 1.6 0 2.2l5.75 5.75c.3.3.7.45 1.1.45s.8-.15 1.1-.45l9.8-9.7L19.9 4.2zm-2.2 6.75c1.4-.95 2.75-.95 3.8.15 1 .95 1.1 2.35.2 3.55l-1.1-1.1c.35-.55.3-1.05-.1-1.45-.45-.5-1-.5-1.75-.05l1.15 1.15-.8.8-1.2-1.2-.4.4 1.2 1.2-.8.8L9.8 13c-.45.7-.4 1.3.05 1.75.4.4.9.45 1.45.1l1.1 1.1c-1.2.85-2.6.75-3.55-.2-1-1.05-1.05-2.45-.1-3.85l-.5-.5.8-.8.4.4.4-.4-.4-.4.8-.8zm6.85-4.5c.3 0 .55.1.7.3.4.4.4 1.05 0 1.45-.2.2-.45.3-.7.3s-.5-.1-.7-.3c-.4-.4-.4-1.05 0-1.45.2-.2.45-.3.7-.3z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1v; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-tariffs",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1u = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentTransport {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M6.5 15.5a2.5 2.5 0 110 5 2.5 2.5 0 010-5zm12.5 0a2.5 2.5 0 110 5 2.5 2.5 0 010-5zM6.5 17a1 1 0 100 2 1 1 0 000-2zM19 17a1 1 0 100 2 1 1 0 000-2zM16.25 4.25V7.5h.25l.25-.25h5L23 11c.162.484.247.99.25 1.5v4.75h-.84a3.5 3.5 0 00-6.825 0h-5.67a3.5 3.5 0 00-6.83 0H3A2.245 2.245 0 01.75 15V4.25h15.5zM20.5 9H18v4h3.5v-.5a2.88 2.88 0 00-.145-.95L20.5 9z" }))) : (hAsync("g", null, hAsync("path", { d: "M19 15.5c1.4 0 2.5 1.1 2.5 2.5s-1.1 2.5-2.5 2.5-2.5-1.1-2.5-2.5 1.1-2.5 2.5-2.5zm-12.5 0C7.9 15.5 9 16.6 9 18s-1.1 2.5-2.5 2.5S4 19.4 4 18s1.1-2.5 2.5-2.5zM19 17c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1zM6.5 17c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1zm9.35-.5c-.2.45-.35.95-.35 1.5H10c0-.55-.1-1.05-.35-1.5zM17 3.5v3h4.75c.3 0 .6.2.7.5l1.25 3.75c.2.55.3 1.15.3 1.75V18h-1.5v-5.5c0-.4-.05-.85-.2-1.25L21.2 8H17v6c0 .4-.35.75-.75.75s-.75-.35-.75-.75V5h-14v10c0 .85.65 1.5 1.5 1.5h.35c-.2.45-.35.95-.35 1.5-1.65 0-3-1.35-3-3V3.5zM20.5 9l.85 2.55c.1.3.15.65.15.95v.5H18V9z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1u; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-transport",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1t = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentUnlock {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M7 11V7a5 5 0 0110 0h1.5a6.5 6.5 0 10-13 0v4H3v9.5a3 3 0 003 3h12a3 3 0 003-3V11H7zm6 6.61v1.89h-2v-1.89a1.5 1.5 0 112 0z" }))) : (hAsync("g", null, hAsync("path", { d: "M12 .5c2.3 0 4.45 1.25 5.6 3.2.6 1 .9 2.15.9 3.3H17c0-.9-.25-1.8-.7-2.55C15.4 2.95 13.75 2 12 2 9.25 2 7 4.25 7 7v4h14v9.5c0 1.65-1.35 3-3 3H6c-1.65 0-3-1.35-3-3V11h2.5V7C5.5 3.4 8.4.5 12 .5zm7.5 12h-15v8c0 .85.65 1.5 1.5 1.5h12c.85 0 1.5-.65 1.5-1.5zM12 15c.85 0 1.5.65 1.5 1.5 0 .45-.2.85-.5 1.1v1.9h-2v-1.9c-.3-.25-.5-.65-.5-1.1 0-.85.65-1.5 1.5-1.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1t; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-unlock",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1s = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentVoucher {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M4 3v2h1.5V3h3v2H10V3h3v2h1.5V3h3v2H19V3h3.5v3.5h-2V8h2v3h-2v1.5h2v3h-2V17h2v.5a3 3 0 01-3 3H19v-2h-1.5v2h-3v-2H13v2h-3v-2H8.5v2h-3v-2H4v2h-.5a3 3 0 01-3-3V17h2v-1.5h-2v-3h2V11h-2V8h2V6.5h-2V3H4zm10.295 8.945a2.25 2.25 0 100 4.5 2.25 2.25 0 000-4.5zm.77-4.635H13.43l-5.635 9h1.64l5.63-9zm-.755 5.905a1 1 0 010 1.945.975.975 0 010-1.945zM8.585 7.15a2.25 2.25 0 00-.03 4.5 2.235 2.235 0 002.27-2.245 2.25 2.25 0 00-2.24-2.255zm-.03 1.28a.92.92 0 01.92.975.915.915 0 11-1.825 0 .92.92 0 01.905-.975z" }))) : (hAsync("g", null, hAsync("path", { d: "M2.5 17v.5c0 .85.65 1.5 1.5 1.5h.5v1.5H4c-1.65 0-3-1.35-3-3V17zM18 19v1.5h-3V19zm5-2v.5c0 1.65-1.35 3-3 3h-.5V19h.5c.85 0 1.5-.65 1.5-1.5V17zm-9.5 2v1.5h-3V19zM9 19v1.5H6V19zm5.95-7.1c1.3 0 2.35 1 2.35 2.3s-1.05 2.35-2.35 2.35-2.35-1.05-2.35-2.35 1.05-2.3 2.35-2.3zM15.8 7l-5.9 9.5H8.15L14.1 7zM2.5 12.5v3H1v-3zm20.5 0v3h-1.5v-3zm-8.05.7c-.55 0-.95.45-.95 1s.4 1 .95 1 .95-.4.95-1c0-.55-.4-1-.95-1zm-5.9-6.25c1.3 0 2.35 1.05 2.35 2.35s-1.05 2.3-2.35 2.3-2.35-1-2.35-2.3 1.05-2.35 2.35-2.35zM2.5 8v3H1V8zM23 8v3h-1.5V8zM9 8.25c-.5 0-.9.45-.95 1 0 .55.4 1 .95 1s.95-.45.95-1-.4-1-.95-1zM23 3v3.5h-1.5v-2h-2V3zM4.5 3v1.5h-2v2H1V3zM18 3v1.5h-3V3zM9 3v1.5H6V3zm4.5 0v1.5h-3V3z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1s; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-voucher",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1r = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ContentWallet {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M15.7.225L16.625 3H20.5v2H22v6h-6a2.5 2.5 0 100 5h6v3a3 3 0 01-3 3H5a3 3 0 01-3-3V6a3 3 0 013-3h4.535zM22 12.5v2h-6a1 1 0 110-2zM14.8 2.275L8.745 5h6.965z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M20.5 5V3h-3.9L15.7.25 9.55 3H5C3.35 3 2 4.35 2 6v13c0 1.65 1.35 3 3 3h14c1.65 0 3-1.35 3-3V5h-1.5zm-4.8 0H8.75l6.05-2.75.9 2.75zm4.8 9.5H16c-.55 0-1-.45-1-1s.45-1 1-1h4.5v2zM16 11c-1.4 0-2.5 1.1-2.5 2.5S14.6 16 16 16h4.5v3c0 .85-.65 1.5-1.5 1.5H5c-.85 0-1.5-.65-1.5-1.5V6.5h17V11H16z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1r; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-content-wallet",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

/**
 * @license
 * Scale https://github.com/telekom/scale
 *
 * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
// Expected content: boolean, eg `true`
// Options
// style?: string 'switch' | 'checkbox'
// editable?: boolean = false
const CheckboxCell = {
  defaults: {
    sortBy: 'number',
  },
  getLongestContent({ rows, columnIndex }) {
    // Skip check as content width is always the same
    return rows[0][columnIndex];
  },
  render: ({ field, content, component, rowIndex, columnIndex }) => {
    const { style = 'checkbox', editable = false, label } = field;
    const props = {
      checked: content,
      disabled: !editable,
      label,
    };
    if (editable) {
      props.onScaleChange = (ev) => {
        const { value } = ev.detail;
        // Update rows data
        component.rows[rowIndex][columnIndex] = value;
        // Trigger event
        component.triggerEditEvent(value, rowIndex, columnIndex);
      };
    }
    switch (style) {
      case 'switch':
        return hAsync("scale-switch", Object.assign({}, props));
      default:
        // 'checkbox'
        return hAsync("scale-checkbox", Object.assign({}, props));
    }
  },
};

/**
 * @license
 * Scale https://github.com/telekom/scale
 *
 * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
// Expected: date/time string, eg '10:23:00'
// TODO: see if this is even worth it. It may help with sorting/filtering?
// work out format requirements - as date/time formatting is heavy eg moment.js
// const { inputFormat, outputFormat } = field;
// inputFormat: 'HH:mm:ss', // ['timestamp', '']
// outputFormat: 'HH:mm',
const DateCell = {
  defaults: {
    sortBy: 'text',
  },
  render: ({ content, isAutoWidthCheck }) => {
    let value = content;
    // Render all digits with 8s as they're the widest
    if (isAutoWidthCheck) {
      value = value.replace(/[0-9]/g, '8');
    }
    return hAsync("p", { class: `scl-body` }, value);
  },
};

/**
 * @license
 * Scale https://github.com/telekom/scale
 *
 * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
// Expected content: number, eg 10230.32
// Options
// style?: string 'bar' | 'progress'
// min?: number 0
// max?: number 100
const GraphCell = {
  defaults: {
    sortBy: 'number',
  },
  render: ({ field, content }) => {
    const { style = 'progress', min = 0, max = 100 } = field;
    // Convert content to 0>100 range for progress bar
    const progress = ((content - min) / (max - min)) * 100;
    switch (style) {
      case 'bar':
        return (hAsync("div", { class: `tbody__bar-cell` },
          hAsync("scale-progress-bar", { "aria-hidden": "true", percentage: progress, 
            // showStatus={true}
            mute: true, style: { maxWidth: '200px' }, styles: 
            /* css */ `.progress-bar__outer {
                min-width: 50px;
                max-width: 200px;
              }
              .progress-bar__inner {
                background: var(--scl-color-grey-80) !important;
              }
              ` }),
          hAsync("p", { class: `scl-body` }, content)));
      default:
        // progress
        return (hAsync("scale-progress-bar", { percentage: progress, showStatus: true, mute: true, styles: 
          /* css */ `.progress-bar__outer {
              min-width: 50px;
              max-width: 200px;
            }
            .progress-bar__inner {
                background: var(--scl-color-blue-60) !important;
              }
            ` }));
    }
  },
};

/**
 * @license
 * Scale https://github.com/telekom/scale
 *
 * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
// Expected content: a url string (eg: 'https://sample.com')
const LinkCell = {
  defaults: {
    sortBy: 'text',
  },
  render: ({ content }) => {
    // Remove protocol (http/https)
    const urlNoProtocol = content.replace(/^https?\:\/\//i, '');
    return (hAsync("scale-link", { href: content, target: "_blank" }, urlNoProtocol));
  },
};

/**
 * @license
 * Scale https://github.com/telekom/scale
 *
 * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
// Expected content: HTMLElement
const HTMLCell = {
  defaults: {},
  getLongestContent({ rows, columnIndex }) {
    // Skip check as content width is always the same
    return rows[0][columnIndex];
  },
  render: ({ content, component }) => {
    return (hAsync("scale-button", { variant: "secondary", size: "small", "icon-only": true, "aria-label": `Activate to ${content.isExpanded ? 'collapse' : 'expand'} content`, onClick: () => {
        content.isExpanded = !content.isExpanded;
        component.forceRender++;
      } }, content.isExpanded ? (hAsync("scale-icon-navigation-collapse-up", { size: 14 })) : (hAsync("scale-icon-navigation-collapse-down", { size: 14 }))));
  },
};

/**
 * @license
 * Scale https://github.com/telekom/scale
 *
 * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
// Expected content: number or string, eg `120.0`
// Options
// precision
// decimalSymbol
// groupSymbol
// editable?: boolean = false
const NumberCell = {
  defaults: {
    textAlign: 'right',
    sortBy: 'number',
  },
  render: ({ field, content, component, rowIndex, columnIndex, isAutoWidthCheck, }) => {
    const { precision = Infinity, decimalSymbol = '.', groupSymbol = '', prefix = '', suffix = '', editable = false, label, } = field;
    // Input component doesn't expand with content, so need to return a fake element that simulates width
    if (isAutoWidthCheck && editable) {
      return (hAsync("p", { class: `scl-body`, style: { paddingRight: '26px' } }, content));
    }
    const step = `0.${(String(content).split('.')[1] || '')
      .split('')
      .map(() => '0')}`.replace(/,/g, '');
    if (editable) {
      const props = {
        type: 'number',
        size: 'small',
        step: step.slice(0, step.length - 1) + '1',
        value: String(content),
        styles: /* css */ `.text-field__control {
          text-align: right !important;
        }`,
        label,
      };
      // TODO: use blur to reduce number of changes - but doesn't pass value
      props.onScaleChange = ({ detail }) => {
        const { value } = detail;
        // Update rows data
        component.rows[rowIndex][columnIndex] = value;
        // Trigger event
        component.triggerEditEvent(value, rowIndex, columnIndex);
      };
      return hAsync("scale-text-field", Object.assign({}, props));
    }
    else {
      let value = content;
      // Render all digits with 8s as they're the widest
      if (isAutoWidthCheck) {
        value = Number(value.toString().replace(/[0-9]/g, '8'));
      }
      // Refine to requested decimal precision
      if (precision < 100) {
        value = Number(value).toFixed(precision);
      }
      else {
        value = value.toString();
      }
      // Replace/add requested delimiters
      if (groupSymbol || decimalSymbol !== '.') {
        const parts = value.split('.');
        if (groupSymbol) {
          parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, groupSymbol);
        }
        value = parts.join(decimalSymbol);
      }
      // Add prefix/suffix
      if (prefix || suffix) {
        value = prefix + value + suffix;
      }
      return (hAsync("p", { class: `scl-body`, style: { textAlign: 'right' } }, value));
    }
  },
};

/**
 * @license
 * Scale https://github.com/telekom/scale
 *
 * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
// Expected: string
// Options
// options: string array
// editable?: boolean = false
const SelectCell = {
  defaults: {
    sortBy: 'text',
  },
  render: ({ field, content, component, rowIndex, columnIndex, isAutoWidthCheck, }) => {
    const { options, editable = false, label } = field;
    // Select component doesn't expand with content, so need to return a fake element that simulates width
    if (isAutoWidthCheck) {
      return (hAsync("p", { class: `scl-body`, style: { paddingRight: '56px' } }, content));
    }
    const props = {
      disabled: !editable,
      value: content,
      label,
    };
    if (editable) {
      props.onScaleChange = ({ detail }) => {
        const { value } = detail;
        // Update rows data
        component.rows[rowIndex][columnIndex] = value;
        // Trigger event
        component.triggerEditEvent(value, rowIndex, columnIndex);
      };
    }
    return (hAsync("scale-dropdown", Object.assign({ size: "small" }, props), options.map((option) => {
      return (hAsync("option", { value: option, selected: option === content }, option));
    })));
  },
};

/**
 * @license
 * Scale https://github.com/telekom/scale
 *
 * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
// Expected: comma delimited string (eg 'one, two, three')
const TagsCell = {
  defaults: {
    sortBy: 'text',
  },
  render: ({ content }) => {
    const tags = content.split(',').map((s) => s.trim());
    return (hAsync("ul", { class: `tbody__tag-list` }, tags.map((tag) => (hAsync("li", null,
      hAsync("scale-tag", { size: "small" }, tag))))));
  },
};

/**
 * @license
 * Scale https://github.com/telekom/scale
 *
 * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
// Expected content: unformated string 'this is a string'
// Options
// variant?: string 'body' | 'h6' | 'h5' | etc
// editable?: boolean = false
// iconPrefix?: string eg 'action-download'
// iconSuffix?: string eg 'action-download'
const TextCell = {
  defaults: {
    sortBy: 'text',
  },
  render: ({ field, content, component, rowIndex, columnIndex, isAutoWidthCheck, }) => {
    const { variant = 'body', editable = false, iconPrefix, iconSuffix, label, } = field;
    // Input component doesn't expand with content, so need to return a fake element that simulates width
    if (isAutoWidthCheck && editable) {
      return (hAsync("p", { class: `scl-body`, style: { paddingRight: '26px' } }, content));
    }
    if (editable) {
      const props = {
        type: 'text',
        size: 'small',
        value: content,
        label,
      };
      // TODO: use blur to reduce number of changes - but doesn't pass value
      // TODO: apply variant and iconPrefix/Suffix to editable text
      props.onScaleChange = ({ detail }) => {
        const { value } = detail;
        // Update rows data
        component.rows[rowIndex][columnIndex] = value;
        // Trigger event
        component.triggerEditEvent(value, rowIndex, columnIndex);
      };
      return hAsync("scale-text-field", Object.assign({}, props));
    }
    else {
      let value = content;
      // Add an extra couple of characters for the width check to avoid clipping
      if (isAutoWidthCheck) {
        value += 'w';
      }
      return (hAsync("div", { class: `tbody__text-cell` },
        iconPrefix && (hAsync("span", { class: `tbody__text-cell-prefix` }, hAsync(`scale-icon-${iconPrefix}`))),
        hAsync("p", { class: `scl-${variant}` }, value),
        iconSuffix && (hAsync("span", { class: `tbody__text-cell-suffix` }, hAsync(`scale-icon-${iconSuffix}`)))));
    }
  },
};

/**
 * @license
 * Scale https://github.com/telekom/scale
 *
 * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
var __rest = (undefined && undefined.__rest) || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
    t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
const ActionsCell = {
  defaults: {},
  getLongestContent({ rows, columnIndex }) {
    // Skip check as content width is always the same
    return rows[0][columnIndex];
  },
  render: ({ content }) => {
    return (hAsync("div", { class: `tbody__actions` }, content.map((action) => {
      const { label } = action, props = __rest(action, ["label"]);
      if (typeof label === 'object' && '__html' in label) {
        return (hAsync("scale-button", Object.assign({ innerHTML: label.__html }, props)));
      }
      return hAsync("scale-button", Object.assign({}, props), label);
    })));
  },
};

/**
 * @license
 * Scale https://github.com/telekom/scale
 *
 * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
const CELL_TYPES = {
  checkbox: CheckboxCell,
  date: DateCell,
  graph: GraphCell,
  html: HTMLCell,
  link: LinkCell,
  number: NumberCell,
  select: SelectCell,
  tags: TagsCell,
  text: TextCell,
  actions: ActionsCell,
};
// Fallback if no type set on field
const DEFAULT_CELL_TYPE = 'text';
// Common cell defaults, can be overridden in cell type classes
const CELL_DEFAULTS = {
  maxWidth: Infinity,
  minWidth: 20,
  resizable: true,
  sortable: false,
  sortBy: 'text',
  textAlign: 'left',
  visible: true,
  width: 'auto',
};

const dataGridCss = "/*!@.scl-body*/.scl-body.sc-scale-data-grid{margin:0;line-height:var(--scl-font-variant-body-line-height);font-weight:var(--scl-font-variant-body-weight)}/*!@.scl-label*/.scl-label.sc-scale-data-grid{margin:0;font-size:var(--scl-font-variant-label-size);line-height:var(--scl-font-variant-label-line-height);font-weight:var(--scl-font-variant-label-weight)}/*!@.scl-h1*/.scl-h1.sc-scale-data-grid{margin:0;font-size:var(--scl-font-variant-heading-1-size);line-height:var(--scl-font-variant-heading-1-line-height);font-weight:var(--scl-font-variant-heading-1-weight)}/*!@.scl-h2*/.scl-h2.sc-scale-data-grid{margin:0;font-size:var(--scl-font-variant-heading-2-size);line-height:var(--scl-font-variant-heading-2-line-height);font-weight:var(--scl-font-variant-heading-2-weight)}/*!@.scl-h3*/.scl-h3.sc-scale-data-grid{margin:0;font-size:var(--scl-font-variant-heading-3-size);line-height:var(--scl-font-variant-heading-3-line-height);font-weight:var(--scl-font-variant-heading-3-weight)}/*!@.scl-h4*/.scl-h4.sc-scale-data-grid{margin:0;font-size:var(--scl-font-variant-heading-4-size);line-height:var(--scl-font-variant-heading-4-line-height);font-weight:var(--scl-font-variant-heading-4-weight)}/*!@.scl-h5*/.scl-h5.sc-scale-data-grid{margin:0;font-size:var(--scl-font-variant-heading-5-size);line-height:var(--scl-font-variant-heading-5-line-height);font-weight:var(--scl-font-variant-heading-5-weight)}/*!@.scl-h6*/.scl-h6.sc-scale-data-grid{margin:0;font-size:var(--scl-font-variant-heading-6-size);line-height:var(--scl-font-variant-heading-6-line-height);font-weight:var(--scl-font-variant-heading-6-weight)}/*!@:host*/.sc-scale-data-grid-h{font-family:var(--scl-font-family-sans);font-size:var(--scl-font-size-16);font-weight:var(--scl-font-weight-regular);line-height:var(--scl-font-line-height-150);color:var(--scl-color-black)}/*!@.data-grid input,\n.data-grid select*/.data-grid.sc-scale-data-grid input.sc-scale-data-grid,.data-grid.sc-scale-data-grid select.sc-scale-data-grid{letter-spacing:inherit;font-weight:inherit;font-family:inherit;line-height:inherit}/*!@.data-grid*/.data-grid.sc-scale-data-grid{position:relative;display:block;background:var(--scl-color-white);border-radius:var(--scl-radius-12);border:1px solid var(--scl-color-grey-10);overflow:hidden}/*!@.data-grid--hide-border*/.data-grid--hide-border.sc-scale-data-grid{border:none}/*!@.data-grid__auto-width-check*/.data-grid__auto-width-check.sc-scale-data-grid{opacity:0}/*!@.data-grid__title-block*/.data-grid__title-block.sc-scale-data-grid{display:flex;align-items:center;justify-content:space-between;padding-right:62px;padding-left:var(--scl-spacing-24)}/*!@.data-grid__heading*//*!@.data-grid__settings-menu*/.data-grid__settings-menu.sc-scale-data-grid{position:absolute;top:var(--scl-spacing-16);right:var(--scl-spacing-16)}/*!@.data-grid__scroll-container*/.data-grid__scroll-container.sc-scale-data-grid{overflow:auto;overflow-x:overlay;overflow-y:overlay;ms-overflow-style:-ms-autohiding-scrollbar;scrollbar-gutter:stable}/*!@.data-grid__table*/.data-grid__table.sc-scale-data-grid{border-spacing:0;border-collapse:collapse;overflow:hidden}/*!@.data-grid--hide-menu .data-grid__settings-menu*/.data-grid--hide-menu.sc-scale-data-grid .data-grid__settings-menu.sc-scale-data-grid{display:none}/*!@.data-grid:not(.data-grid--hide-menu) .data-grid__title-block*/.data-grid.sc-scale-data-grid:not(.data-grid--hide-menu) .data-grid__title-block.sc-scale-data-grid{min-height:72px}/*!@.data-grid--hide-menu .data-grid__title-block*/.data-grid--hide-menu.sc-scale-data-grid .data-grid__title-block.sc-scale-data-grid{padding-right:var(--scl-spacing-16)}/*!@.thead*/.thead.sc-scale-data-grid{display:block;white-space:nowrap;border-bottom:1px solid var(--scl-color-grey-10);position:relative;background:#fff;z-index:1}/*!@.thead-sortable*/.thead-sortable.sc-scale-data-grid{cursor:pointer}/*!@.thead-sortable:focus*/.thead-sortable.sc-scale-data-grid:focus{box-shadow:inset 0 0 0 var(--scl-spacing-2) var(--scl-color-focus)}/*!@.thead__cell*/.thead__cell.sc-scale-data-grid{display:inline-flex;align-items:center;height:var(--scl-spacing-32);text-align:left;user-select:none;position:relative;padding:0 var(--scl-spacing-16);color:var(--scl-color-grey)}/*!@.thead__cell--numbered*/.thead__cell--numbered.sc-scale-data-grid{text-align:right;justify-content:flex-end}/*!@.thead__cell--selection*/.thead__cell--selection.sc-scale-data-grid{justify-content:center;text-align:center}/*!@.thead__cell--selection xds-checkbox::part(container)*/.thead__cell--selection.sc-scale-data-grid xds-checkbox.sc-scale-data-grid::part(container){justify-content:center}/*!@.thead__title*//*!@.thead__text*/.thead__text.sc-scale-data-grid{font-size:var(--scl-font-size-12);line-height:var(--scl-font-variant-body-size);position:relative}/*!@.thead__arrow-top,\n.thead__arrow-bottom*/.thead__arrow-top.sc-scale-data-grid,.thead__arrow-bottom.sc-scale-data-grid{position:absolute;display:none;top:4px;left:-12px;border:4px solid transparent}/*!@.thead__arrow-top*/.thead__arrow-top.sc-scale-data-grid{border-top:none;border-bottom:5px solid var(--scl-color-black)}/*!@.thead__arrow-bottom*/.thead__arrow-bottom.sc-scale-data-grid{border-bottom:none;border-top:5px solid var(--scl-color-black)}/*!@.thead__sort-prompt*/.thead__sort-prompt.sc-scale-data-grid{position:absolute;top:0;left:0;width:100%;height:100%;margin:0;background:none;border:0;opacity:1;cursor:pointer}/*!@.thead__divider*/.thead__divider.sc-scale-data-grid{position:absolute;right:calc(-1 * var(--scl-spacing-8));bottom:0px;height:100%;padding:19px var(--scl-spacing-8) 0px;box-sizing:border-box;cursor:col-resize;z-index:1}/*!@.thead__divider-line*/.thead__divider-line.sc-scale-data-grid{pointer-events:none;height:100%;width:1px;background:var(--scl-color-grey-10)}/*!@.thead__cell:first-child*/.thead__cell.sc-scale-data-grid:first-child{padding-left:var(--scl-spacing-24)}/*!@.thead__cell:focus*/.thead__cell.sc-scale-data-grid:focus{outline:none}/*!@.thead__cell[aria-sort='ascending'] .thead__arrow-top*/.thead__cell[aria-sort='ascending'].sc-scale-data-grid .thead__arrow-top.sc-scale-data-grid{display:block}/*!@.thead__cell[aria-sort='descending'] .thead__arrow-bottom*/.thead__cell[aria-sort='descending'].sc-scale-data-grid .thead__arrow-bottom.sc-scale-data-grid{display:block}/*!@.thead__cell[aria-sort]:hover*/.thead__cell[aria-sort].sc-scale-data-grid:hover{color:var(--scl-color-primary-hover)}/*!@.thead__cell[aria-sort='none']:hover .thead__arrow-top*/.thead__cell[aria-sort='none'].sc-scale-data-grid:hover .thead__arrow-top.sc-scale-data-grid{display:block;border-bottom:5px solid var(--scl-color-primary-hover)}/*!@.thead__cell[aria-sort='ascending']:hover .thead__arrow-top*/.thead__cell[aria-sort='ascending'].sc-scale-data-grid:hover .thead__arrow-top.sc-scale-data-grid{border-bottom:5px solid var(--scl-color-primary-hover)}/*!@.thead__cell[aria-sort='descending']:hover .thead__arrow-bottom*/.thead__cell[aria-sort='descending'].sc-scale-data-grid:hover .thead__arrow-bottom.sc-scale-data-grid{border-top:5px solid var(--scl-color-primary-hover)}/*!@.tbody*/.tbody.sc-scale-data-grid{display:block}/*!@.tbody__row*/.tbody__row.sc-scale-data-grid{display:block;white-space:nowrap}/*!@.tbody__mobile-title*/.tbody__mobile-title.sc-scale-data-grid{display:none}/*!@.tbody__mobile-label*/.tbody__mobile-label.sc-scale-data-grid{display:none}/*!@.tbody__cell*/.tbody__cell.sc-scale-data-grid{display:inline-block;margin:8px;padding:8px;overflow:hidden;line-height:32px}/*!@.tbody__cell--numbered*/.tbody__cell--numbered.sc-scale-data-grid{text-align:right}/*!@.tbody__cell--selection*/.tbody__cell--selection.sc-scale-data-grid{justify-content:center;text-align:center}/*!@.tbody__cell--selection scale-checkbox::part(container),\n.tbody__cell--selection scale-checkbox [part='container']*/.tbody__cell--selection.sc-scale-data-grid scale-checkbox.sc-scale-data-grid::part(container),.tbody__cell--selection.sc-scale-data-grid scale-checkbox.sc-scale-data-grid [part='container'].sc-scale-data-grid{justify-content:center}/*!@.tbody__nested*/.tbody__nested.sc-scale-data-grid{white-space:nowrap;padding:0px;margin:0px}/*!@.tbody__nested-cell*/.tbody__nested-cell.sc-scale-data-grid{display:block;padding:var(--scl-spacing-16);margin:0px}/*!@.tbody__cell:first-of-type*/.tbody__cell.sc-scale-data-grid:first-of-type{margin-left:var(--scl-spacing-16)}/*!@.tbody__nested-cell:first-child*/.tbody__nested-cell.sc-scale-data-grid:first-child{margin-left:0px}/*!@.data-grid--shade-alternate .tbody__row:nth-of-type(even),\n.data-grid--shade-alternate .tbody__nested:nth-of-type(even)*/.data-grid--shade-alternate.sc-scale-data-grid .tbody__row.sc-scale-data-grid:nth-of-type(even),.data-grid--shade-alternate.sc-scale-data-grid .tbody__nested.sc-scale-data-grid:nth-of-type(even){background:#f3f3f3}/*!@.data-grid__auto-width-check .tbody__cell*/.data-grid__auto-width-check.sc-scale-data-grid .tbody__cell.sc-scale-data-grid{padding:0}/*!@.tbody__tag-list*/.tbody__tag-list.sc-scale-data-grid{list-style:none;padding:0;margin:0}/*!@.tbody__tag-list li*/.tbody__tag-list.sc-scale-data-grid li.sc-scale-data-grid{display:inline-block;margin-right:8px}/*!@.tbody__tag-list li:last-child*/.tbody__tag-list.sc-scale-data-grid li.sc-scale-data-grid:last-child{margin-right:0}/*!@.data-grid input[type='checkbox']*/.data-grid.sc-scale-data-grid input[type='checkbox'].sc-scale-data-grid{display:block;height:14px;margin:5px 4px}/*!@.tbody__text-cell*/.tbody__text-cell.sc-scale-data-grid{display:flex;align-items:center}/*!@.tbody__text-cell-prefix*/.tbody__text-cell-prefix.sc-scale-data-grid{display:inline-flex;align-items:center;margin-right:0.5em}/*!@.tbody__text-cell-suffix*/.tbody__text-cell-suffix.sc-scale-data-grid{display:inline-flex;align-items:center;margin-left:0.5em}/*!@.tbody__cell p*/.tbody__cell.sc-scale-data-grid p.sc-scale-data-grid{overflow:hidden;text-overflow:ellipsis}/*!@.tbody__cell scale-link*/.tbody__cell.sc-scale-data-grid scale-link.sc-scale-data-grid{overflow:hidden;text-overflow:ellipsis}/*!@.tbody__bar-cell*/.tbody__bar-cell.sc-scale-data-grid{display:inline-flex;width:100%}/*!@.tbody__cell scale-progress-bar*/.tbody__cell.sc-scale-data-grid scale-progress-bar.sc-scale-data-grid{flex-grow:1}/*!@.tbody__actions scale-button*/.tbody__actions.sc-scale-data-grid scale-button.sc-scale-data-grid{margin-right:var(--scl-spacing-8)}/*!@.info*/.info.sc-scale-data-grid{height:54px;position:relative;border-top:1px solid var(--scl-color-grey-20);display:flex;justify-content:center}/*!@.info__selection*/.info__selection.sc-scale-data-grid{position:absolute;bottom:0;line-height:54px;left:var(--scl-spacing-24)}/*!@.data-grid--hide-border:not(.data-grid--mobile) .info__pagination*/.data-grid--hide-border.sc-scale-data-grid:not(.data-grid--mobile) .info__pagination.sc-scale-data-grid{border-bottom:1px solid var(--scl-color-grey-10);border-right:1px solid var(--scl-color-grey-10)}/*!@.data-grid--mobile*/.data-grid--mobile.sc-scale-data-grid{border:none;background:none}/*!@.data-grid--mobile .data-grid__title-block*/.data-grid--mobile.sc-scale-data-grid .data-grid__title-block.sc-scale-data-grid{padding-left:0;padding-right:46px}/*!@.data-grid--hide-menu.data-grid--mobile .data-grid__title-block*/.data-grid--hide-menu.data-grid--mobile.sc-scale-data-grid .data-grid__title-block.sc-scale-data-grid{padding-right:0}/*!@.data-grid--mobile .data-grid__settings-menu*/.data-grid--mobile.sc-scale-data-grid .data-grid__settings-menu.sc-scale-data-grid{right:0}/*!@.data-grid--mobile .data-grid__scroll-container*/.data-grid--mobile.sc-scale-data-grid .data-grid__scroll-container.sc-scale-data-grid{height:auto !important}/*!@.data-grid--mobile .data-grid__table*/.data-grid--mobile.sc-scale-data-grid .data-grid__table.sc-scale-data-grid{display:block;height:auto !important}/*!@.data-grid--mobile .thead*/.data-grid--mobile.sc-scale-data-grid .thead.sc-scale-data-grid{display:none}/*!@.data-grid--mobile .tbody*/.data-grid--mobile.sc-scale-data-grid .tbody.sc-scale-data-grid{display:block}/*!@.data-grid--mobile .tbody__row*/.data-grid--mobile.sc-scale-data-grid .tbody__row.sc-scale-data-grid{display:block;position:relative;white-space:initial;margin:0 0 var(--scl-spacing-8);padding:var(--scl-spacing-24);border-radius:var(--scl-radius-12);background:var(--scl-color-white);border:1px solid var(--scl-color-grey-10)}/*!@.data-grid--mobile .tbody__row:hover*/.data-grid--mobile.sc-scale-data-grid .tbody__row.sc-scale-data-grid:hover{background:var(--scl-color-white)}/*!@.data-grid--mobile .tbody__mobile-title*/.data-grid--mobile.sc-scale-data-grid .tbody__mobile-title.sc-scale-data-grid{display:block;margin-bottom:var(--scl-spacing-8)}/*!@.data-grid--mobile .tbody__mobile-label*/.data-grid--mobile.sc-scale-data-grid .tbody__mobile-label.sc-scale-data-grid{display:block}/*!@.data-grid--mobile .tbody__cell*/.data-grid--mobile.sc-scale-data-grid .tbody__cell.sc-scale-data-grid{display:flex;align-items:center;width:auto !important;padding:5px 0;margin:0;min-height:var(--scl-spacing-24);line-height:var(--scl-spacing-24);overflow:auto;overflow-x:hidden}/*!@.data-grid--mobile .tbody__cell--used-as-mobile-title*/.data-grid--mobile.sc-scale-data-grid .tbody__cell--used-as-mobile-title.sc-scale-data-grid{display:none}/*!@.data-grid--mobile .tbody__mobile-label*/.data-grid--mobile.sc-scale-data-grid .tbody__mobile-label.sc-scale-data-grid{display:block;width:100px;flex-shrink:0;color:var(--scl-color-grey);font-size:var(--scl-font-size-12);font-weight:var(--scl-font-weight-medium)}/*!@.data-grid--mobile .tbody__cell:first-child*/.data-grid--mobile.sc-scale-data-grid .tbody__cell.sc-scale-data-grid:first-child{margin-left:0px}/*!@.data-grid--mobile .tbody__cell--selection*/.data-grid--mobile.sc-scale-data-grid .tbody__cell--selection.sc-scale-data-grid{position:absolute;top:19px;right:12px}/*!@.data-grid--mobile .tbody__cell--numbered*/.data-grid--mobile.sc-scale-data-grid .tbody__cell--numbered.sc-scale-data-grid{position:absolute;top:19px;right:56px}/*!@.data-grid--mobile .tbody__cell scale-text-field,\n.data-grid--mobile .tbody__cell scale-dropdown*/.data-grid--mobile.sc-scale-data-grid .tbody__cell.sc-scale-data-grid scale-text-field.sc-scale-data-grid,.data-grid--mobile.sc-scale-data-grid .tbody__cell.sc-scale-data-grid scale-dropdown.sc-scale-data-grid{width:100%}/*!@.data-grid--mobile .tbody__nested*/.data-grid--mobile.sc-scale-data-grid .tbody__nested.sc-scale-data-grid{width:auto !important}/*!@.data-grid--mobile .tbody__nested-cell*/.data-grid--mobile.sc-scale-data-grid .tbody__nested-cell.sc-scale-data-grid{padding:0;margin-bottom:var(--scl-spacing-8)}/*!@.data-grid--mobile.data-grid--shade-alternate .tbody__row:nth-of-type(even)*/.data-grid--mobile.data-grid--shade-alternate.sc-scale-data-grid .tbody__row.sc-scale-data-grid:nth-of-type(even){background:none}/*!@.data-grid--mobile .info*/.data-grid--mobile.sc-scale-data-grid .info.sc-scale-data-grid{height:auto;border-top:none;text-align:center}/*!@.data-grid--mobile .info__selection*/.data-grid--mobile.sc-scale-data-grid .info__selection.sc-scale-data-grid{position:relative;left:0}/*!@.data-grid--mobile .info__pagination*//*!@.sr-only*/.sr-only.sc-scale-data-grid{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);white-space:nowrap;border-width:0}";

/* Reused Private Variables */
let resizeObserver;
const name$1 = 'data-grid';
/* Component Declaration */
class DataGrid {
  /* 6. Lifecycle Events (call order) */
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.scaleEdit = createEvent$1(this, "scale-edit", 7);
    this.scaleEditLegacy = createEvent$1(this, "scaleEdit", 7);
    this.scaleSort = createEvent$1(this, "scale-sort", 7);
    this.scaleSortLegacy = createEvent$1(this, "scaleSort", 7);
    /* 2. State Variables (alphabetical) */
    /** Used to force render after sorting/selection */
    this.forceRender = 0;
    /** Pagination starting index */
    this.paginationStart = 0;
    /** Table scroll value for frozen header  */
    this.scrollY = 0;
    /** (optional) Freeze header row from scrolling */
    this.freezeHeader = false;
    /** (optional) Heading string */
    this.heading = '';
    /** (optional) Set to true to remove border */
    this.hideBorder = false;
    /** (optional) Set to true to hide header row */
    this.hideHeader = false;
    /** (optional) Set to true to remove info footer block including pagination and selection status */
    this.hideInfo = false;
    /** (optional) Set to true to hide settings menu */
    this.hideMenu = false;
    /** (optional) Set to true to add numbers column */
    this.numbered = false;
    /** (optional) Set number of rows to display per pagination page */
    this.pageSize = Infinity;
    /** (optional) Set to true to add selection column */
    this.selectable = false;
    /** Read-only selection array - populated with raw data from selected rows */
    this.selection = [];
    /** (optional) Shade every second row darker */
    this.shadeAlternate = true;
    /** (optional) Set to falseto hide table, used for nested tables to re-render upon toggle */
    this.visible = true;
    /** Stored active sorting column index, for state removal */
    this.activeSortingIndex = -1;
    /** Track component width to constrict nested content, which is necessary with table layout */
    this.contentWidth = 100;
    /** Flag to know to check for data completeness */
    this.dataNeedsCheck = true;
    /** Flag to know if rendering can commence */
    this.hasData = false;
    /** Flag that is true when width below a certain limit */
    this.isMobile = false;
    /** Flag that enough data supplied to warrant pagination */
    this.isPagination = false;
    /** Flag that is true if any fields are sortable */
    this.isSortable = false;
    /** Track container width to avoid re-calculating column stretching */
    this.lastContainerWidth = 100;
    /** Index of field to use as mobile title, if any */
    this.mobileTitleIndex = -1;
    /** Determine if auto-width parsing needed */
    this.needsAutoWidthParse = false;
    /** Force column resize after render */
    this.needsColumnResize = false;
    /** Auto-calculated number column width */
    this.numberColumnWidth = 0;
    /** Selection column width */
    this.selectionColumnWidth = 22;
    // Bind certain callbacks to scope
    this.onDividerMove = this.onDividerMove.bind(this);
    this.onDividerUp = this.onDividerUp.bind(this);
    this.applyResponsiveClasses = this.applyResponsiveClasses.bind(this);
    this.updateColumnStretching = this.updateColumnStretching.bind(this);
  }
  componentWillLoad() {
    this.fieldsHandler();
    this.rowsHandler();
  }
  componentWillUpdate() { }
  componentDidRender() {
    if (this.needsAutoWidthParse) {
      this.calculateAutoWidths();
    }
    // Wait a frame to avoid warning about possible infinite loop
    setTimeout(() => {
      if (this.needsColumnResize) {
        this.updateColumnStretching();
      }
    });
  }
  componentDidLoad() {
    this.addResizeObserver();
  }
  componentDidUpdate() { }
  disconnectedCallback() {
    this.removeResizeObserver();
  }
  /* 7. Listeners */
  fieldsHandler() {
    this.parseFields();
    this.checkForMobileTitle();
    this.checkForSortableFields();
    this.dataNeedsCheck = true;
  }
  rowsHandler() {
    this.parseRows();
    this.setInitialRowProps();
    this.resetSortingToggle();
    this.dataNeedsCheck = true;
    // Set flag to dirty to redo column width with new data
    this.needsAutoWidthParse = true;
    this.needsColumnResize = true;
  }
  /* 8. Public Methods */
  /* 9. Local Methods */
  parseFields() {
    if (this.fields && typeof this.fields === 'string') {
      this.fields = JSON.parse(this.fields);
    }
  }
  parseRows() {
    if (this.rows && typeof this.rows === 'string') {
      this.rows = JSON.parse(this.rows);
    }
  }
  setInitialRowProps() {
    if (!this.rows || !this.rows.length) {
      return;
    }
    this.rows.forEach((row, i) => {
      // Store indices of original order on rows for resetting sorting
      row.initialIndex = i;
      // Set initial selected flag
      row.selected = false;
    });
    // Determine if pagination will be required
    this.isPagination = this.pageSize < this.rows.length;
  }
  checkHasData() {
    // Need both fields and data content in order to populate
    if (!this.fields) {
      return false;
    }
    for (let i = 0; i < this.fields.length; i++) {
      // Use default type if none set
      if (!this.fields[i].type) {
        this.fields[i].type = DEFAULT_CELL_TYPE;
      }
      if (!CELL_TYPES[this.fields[i].type]) {
        // tslint:disable-next-line: no-console
        console.warn(`Unrecognised field type: "${this.fields[i].type}"`);
        return false;
      }
    }
    if (!this.rows || !this.rows.length) {
      return false;
    }
    for (let i = 0; i < this.rows.length; i++) {
      if (this.rows[i].length !== this.fields.length) {
        // tslint:disable-next-line: no-console
        console.warn(`Unable to render ${this.heading && `"${this.heading}" `}table: row data length not equal to supplied fields.`);
        return false;
      }
    }
    return true;
  }
  checkForMobileTitle() {
    // Reset for new data
    this.mobileTitleIndex = -1;
    if (!this.fields) {
      return;
    }
    this.fields.every(({ mobileTitle }, i) => {
      if (mobileTitle) {
        this.mobileTitleIndex = i;
        return false;
      }
      return true;
    });
  }
  checkForSortableFields() {
    this.isSortable = false;
    if (!this.fields) {
      return;
    }
    this.fields.forEach(({ sortable }) => {
      if (sortable) {
        this.isSortable = true;
      }
    });
  }
  getCssClassMap() {
    return classnames(name$1, !this.isMobile && `${name$1}--desktop`, this.isMobile && `${name$1}--mobile`, this.shadeAlternate && `${name$1}--shade-alternate`, this.freezeHeader && `${name$1}--freeze-header`, this.hideBorder && `${name$1}--hide-border`, this.hideMenu && `${name$1}--hide-menu`);
  }
  polyfillMousePosition(e) {
    // For touch
    if (e.changedTouches && e.changedTouches.length) {
      e.x = e.changedTouches[0].pageX;
      e.y = e.changedTouches[0].pageY;
    }
    // For cross browser support
    if (e.x === undefined) {
      e.x = e.clientX;
      e.y = e.clientY;
    }
  }
  getDefaultLongestContent({ rows, columnIndex }) {
    let maxLength = 0;
    let longestContent;
    rows.forEach((row) => {
      const length = row[columnIndex].toString().length;
      if (length > maxLength) {
        longestContent = row[columnIndex];
        maxLength = length;
      }
    });
    return longestContent;
  }
  // Selection handlers
  toggleSelectAll() {
    if (!this.elToggleSelectAll) {
      return;
    }
    this.rows.forEach((row) => (row.selected = this.elToggleSelectAll.checked));
    this.updateReadableSelection();
    this.forceRender++;
  }
  toggleRowSelect({ target }, rowIndex) {
    this.rows[rowIndex].selected = target.checked;
    this.updateReadableSelection();
    this.forceRender++;
  }
  updateReadableSelection() {
    this.selection.length = 0;
    this.rows.forEach((row) => row.selected && this.selection.push(row));
    // Check header checkbox if any or none are selected
    const selectAll = this.hostElement.shadowRoot.querySelector('.thead__cell--selection scale-checkbox');
    selectAll.checked = !!this.selection.length;
    // selectAll.indeterminate = !!this.selection.length;
  }
  // Sorting handlers
  toggleTableSorting(sortDirection, columnIndex, type) {
    // Remove sorting from previous column index
    if (this.activeSortingIndex > -1 &&
      this.activeSortingIndex !== columnIndex) {
      this.fields[this.activeSortingIndex].sortDirection = 'none';
    }
    // Store new column index
    this.activeSortingIndex = columnIndex;
    const newSortDirection = sortDirection === 'none'
      ? 'ascending'
      : sortDirection === 'ascending'
        ? 'descending'
        : 'none';
    this.fields[columnIndex].sortDirection = newSortDirection;
    this.sortTable(newSortDirection, type, columnIndex);
  }
  sortTable(sortDirection, type, columnIndex) {
    if (sortDirection === 'none') {
      this.rows.sort((a, b) => {
        return a.initialIndex - b.initialIndex;
      });
    }
    else {
      switch ((CELL_TYPES[type] &&
        CELL_TYPES[type].defaults &&
        CELL_TYPES[type].defaults.sortBy) ||
        CELL_DEFAULTS.sortBy) {
        case 'text':
          if (sortDirection === 'ascending') {
            this.rows.sort((a, b) => {
              const textA = a[columnIndex].toLowerCase();
              const textB = b[columnIndex].toLowerCase();
              return textA < textB ? -1 : textA > textB ? 1 : 0;
            });
          }
          else {
            this.rows.sort((a, b) => {
              const textA = a[columnIndex].toLowerCase();
              const textB = b[columnIndex].toLowerCase();
              return textA > textB ? -1 : textA < textB ? 1 : 0;
            });
          }
          break;
        case 'number':
          if (sortDirection === 'ascending') {
            this.rows.sort((a, b) => {
              return Number(a[columnIndex]) - Number(b[columnIndex]);
            });
          }
          else {
            this.rows.sort((a, b) => {
              return Number(b[columnIndex]) - Number(a[columnIndex]);
            });
          }
          break;
      }
    }
    this.forceRender++;
    // Trigger event
    this.triggerSortEvent(sortDirection, type, columnIndex);
  }
  resetSortingToggle() {
    if (this.activeSortingIndex > -1) {
      this.fields[this.activeSortingIndex].sortDirection = 'none';
    }
    this.activeSortingIndex = -1;
  }
  // Column resize handlers
  onDividerDown(e) {
    this.polyfillMousePosition(e);
    // For touch -  Prevent mousedown firing, and native scroll
    e.preventDefault();
    // Store divider elem for use in move and end events
    this.activeDivider = e.target;
    // Store initial value to calculate change
    e.target.downX = e.x;
    // Reset to avoid reapplying previous change
    this.activeDivider.interactiveWidth = 0;
    window.addEventListener('mousemove', this.onDividerMove);
    window.addEventListener('touchmove', this.onDividerMove);
    window.addEventListener('mouseup', this.onDividerUp);
    window.addEventListener('touchend', this.onDividerUp);
  }
  onDividerMove(e) {
    // TODO: calculate width stretchWidth to drop in correct location
    this.polyfillMousePosition(e);
    const { width, min, max } = this.activeDivider.dataset;
    const diff = e.x - this.activeDivider.downX;
    const newWidth = Math.min(Number(max), Math.max(Number(min), Number(width) + diff));
    const adjustedDiff = newWidth - Number(width);
    this.activeDivider.interactiveWidth = newWidth;
    // Give immediate visual feedback
    this.activeDivider.style.transform = `translateX(${adjustedDiff}px)`;
  }
  onDividerUp() {
    const { index } = this.activeDivider.dataset;
    // Store new width on the field data
    if (this.activeDivider.interactiveWidth) {
      this.fields[Number(index)].width = this.activeDivider.interactiveWidth;
    }
    // Reset visual feedback
    this.activeDivider.style.transform = `translateX(0px)`;
    window.removeEventListener('mousemove', this.onDividerMove);
    window.removeEventListener('touchmove', this.onDividerMove);
    window.removeEventListener('mouseup', this.onDividerUp);
    window.removeEventListener('touchend', this.onDividerUp);
    // Update column stretching before rendering
    this.needsColumnResize = true;
    this.updateColumnStretching();
    // Render to apply change
    this.forceRender++;
  }
  // Column visibility toggle handlers
  toggleVisibilityMenu(e) {
    e.preventDefault();
    // TODO: replace this with contextual menu component, when available
    const visibilityToggle = this.hostElement.shadowRoot.querySelector('.visibility-toggle');
    const menu = visibilityToggle.children[1];
    // By default
    if (visibilityToggle.style.display === 'none') {
      visibilityToggle.style.display = 'block';
      menu.style.transform = `translate(${e.clientX}px, ${e.clientY}px)`;
    }
    else {
      visibilityToggle.style.display = 'none';
    }
  }
  toggleColumnVisibility(value, columnIndex) {
    this.fields[columnIndex].visible = value;
    this.forceRender++;
    // Update column stretching
    this.needsColumnResize = true;
    this.updateColumnStretching();
  }
  // Resize handlers
  addResizeObserver() {
    if (!resizeObserver) {
      // @ts-ignore
      resizeObserver = new ResizeObserver((entries) => {
        for (const entry of entries) {
          // Skip if table not visible/attached
          if (entry.target.offsetParent === null) {
            return;
          }
          entry.target.applyResponsiveClasses(entry);
          entry.target.updateColumnStretching();
        }
      });
    }
    this.elMmainContainer = this.hostElement.shadowRoot.querySelector(`.${name$1}`);
    // Add this instance's callbacks, as resizeObserver is reused
    this.elMmainContainer.applyResponsiveClasses = this.applyResponsiveClasses;
    this.elMmainContainer.updateColumnStretching = this.updateColumnStretching;
    resizeObserver.observe(this.elMmainContainer);
  }
  removeResizeObserver() {
    if (this.elMmainContainer) {
      resizeObserver.unobserve(this.elMmainContainer);
    }
  }
  applyResponsiveClasses() {
    // Apply container-scoped media-query-style classes
    const newIsMobile = this.elMmainContainer.offsetWidth <= 500;
    if (this.isMobile !== newIsMobile) {
      this.forceRender++;
    }
    this.isMobile = newIsMobile;
  }
  updateColumnStretching() {
    // NOTE: any styling padding/margin width changes need to be adjusted here as well
    // Ignore auto-width-check content renders
    if (this.needsAutoWidthParse) {
      return;
    }
    const container = this.elMmainContainer;
    // Minus 2 for border
    const containerWidth = container.offsetWidth - 2;
    const hasContainerWidthChanged = this.lastContainerWidth !== containerWidth;
    // If width hasn't changed, don't re-calculate
    if (!hasContainerWidthChanged && !this.needsColumnResize) {
      return;
    }
    this.needsColumnResize = false;
    this.lastContainerWidth = containerWidth;
    // Don't calculate when mobile layout
    if (container.offsetWidth <= 500) {
      return;
    }
    // The theoretical target width - ignoring any previously applied stretching
    const targetContentWidth = (() => {
      let total = 0;
      // Extra margin on first column
      total += 8;
      if (this.numbered) {
        // 32 for padding+margin
        total += this.numberColumnWidth + 32;
        // this.selectionColumnWidth;
      }
      if (this.selectable) {
        // 32 for padding+margin
        total += this.selectionColumnWidth + 32;
        // If both selectable and numbered - adjust for reduced margin between
        if (this.numbered) {
          total -= 16;
        }
      }
      // Add each visible column's target width
      this.fields.forEach(({ visible = true, width }) => {
        if (visible) {
          // 32 for padding+margin
          total += width + 32;
        }
      });
      return total;
    })();
    // Update value passed to nested content to overcome table display layout
    this.contentWidth = Math.max(targetContentWidth, containerWidth);
    const diff = containerWidth - targetContentWidth;
    if (diff <= 0) {
      // content larger than container (scrollbar), remove all stretching
      this.fields.forEach((field) => (field.stretchWidth = 0));
    }
    else {
      // container larger than content (gap to the right), calculate stretching
      // If stretchWeight set, divide value between total to get final weight
      // If stretchWeight unset, share remainder of 1 (if any) between all unset cols
      let totalSetWeight = 0;
      let unsetColsCount = 0;
      this.fields.forEach(({ visible = true, stretchWeight }) => {
        // Disregard invisible columns
        if (!visible) {
          return;
        }
        if (typeof stretchWeight === 'number') {
          totalSetWeight += stretchWeight;
        }
        else {
          unsetColsCount++;
        }
      });
      const remainderWeight = Math.max(0, 1 - totalSetWeight);
      // Set total to be divided against to be above 1 to keep total set/unset weights equal to 1
      totalSetWeight = Math.max(1, totalSetWeight);
      this.fields.forEach((field) => {
        const { visible = true, stretchWeight } = field;
        if (!visible) {
          return;
        }
        // Actual stretch weight, out of a total 1 for all columns
        let weight = 0;
        if (typeof stretchWeight === 'number') {
          weight = stretchWeight / totalSetWeight;
        }
        else if (remainderWeight > 0) {
          weight = remainderWeight / unsetColsCount;
        }
        // Apply stretching with the weight percentage
        field.stretchWidth = diff * weight;
      });
    }
    this.forceRender++;
  }
  // Auto column width handlers
  calculateAutoWidths() {
    let isVisible = false;
    const columns = this.hostElement.shadowRoot.querySelectorAll(`.${name$1}__auto-width-check td`);
    columns.forEach((cell) => {
      // Make sure table is actually rendered (eg not display:none etc)
      if (!isVisible && cell.offsetParent !== null) {
        isVisible = true;
      }
      if (!isVisible) {
        return;
      }
      // Update field width with that of largest content
      this.fields[cell.dataset.columnindex].width = cell.clientWidth;
    });
    if (!isVisible) {
      return;
    }
    // Wrap in setTimeout to avoid warning about forcing render within render callback
    setTimeout(() => {
      this.needsAutoWidthParse = false;
      this.forceRender++;
    });
  }
  // Event triggers
  triggerSortEvent(sortDirection, type, columnIndex) {
    const data = {
      rows: this.rows,
      type,
      sortDirection,
      columnIndex,
    };
    emitEvent$1(this, 'scaleSort', data);
  }
  triggerEditEvent(value, rowIndex, columnIndex) {
    const data = {
      rows: this.rows,
      rowIndex,
      columnIndex,
      value,
    };
    emitEvent$1(this, 'scaleEdit', data);
    // Force render for checkboxes
    this.forceRender++;
  }
  onTableScroll() {
    if (!this.freezeHeader || this.hideHeader) {
      return;
    }
    // Freeze header
    const scrollY = this.elScrollContainer.scrollTop;
    this.elTableHead.style.transform = `translateY(${scrollY}px)`;
  }
  renderSettingsMenu() {
    return (hAsync("scale-menu-flyout", { class: `${name$1}__settings-menu` }, hAsync("scale-button", { slot: "trigger", variant: "secondary", "icon-only": true, "data-sortable": this.isSortable }, hAsync("scale-icon-service-settings", { accessibilityTitle: "Table options" })), hAsync("scale-menu-flyout-list", null, this.isSortable && (hAsync("scale-menu-flyout-item", null, hAsync("scale-icon-action-sort", { slot: "prefix" }), "Sort By", hAsync("scale-menu-flyout-list", { slot: "sublist" }, this.fields.map(({ label, type, sortable, sortDirection = 'none' }, columnIndex) => {
      if (!sortable) {
        return '';
      }
      return (hAsync("scale-menu-flyout-item", { "onScale-select": () => this.toggleTableSorting(sortDirection, columnIndex, type) }, sortDirection === 'ascending' && (hAsync("scale-icon-navigation-collapse-up", { size: 16, slot: "prefix" })), sortDirection === 'descending' && (hAsync("scale-icon-navigation-collapse-down", { size: 16, slot: "prefix" })), sortDirection === 'none' && (hAsync("scale-icon-navigation-collapse-up", { size: 16, slot: "prefix", style: { opacity: '0' } })), label || type));
    })))), hAsync("scale-menu-flyout-item", null, hAsync("scale-icon-action-hide-password", { slot: "prefix" }), "Toggle Visibility", hAsync("scale-menu-flyout-list", { slot: "sublist", "close-on-select": "false" }, this.fields.map(({ label, type, visible = CELL_TYPES[type].defaults.visible !== undefined
      ? CELL_TYPES[type].defaults.visible
      : CELL_DEFAULTS.visible, }, columnIndex) => {
      return (hAsync("scale-menu-flyout-item", { checkable: "checkbox", checked: !!visible, "onScale-select": () => this.toggleColumnVisibility(!visible, columnIndex) }, label || type));
    }))), this.selectable && (hAsync("scale-menu-flyout-item", { "onScale-select": () => {
        this.elToggleSelectAll.checked = !this.elToggleSelectAll
          .checked;
        this.toggleSelectAll();
      } }, hAsync("scale-icon", { slot: "prefix", path: "M20.9328 10.6668C20.5132 10.6668 20.1731 11.0069 20.1731 11.4265V20.3269H1.5194V1.67309H16.5049C16.9245 1.67309 17.2646 1.33292 17.2646 0.913386C17.2646 0.49385 16.9245 0.153687 16.5049 0.153687H0.759699C0.340163 0.153687 0 0.49385 0 0.913386V21.0866C0 21.5062 0.340163 21.8463 0.759699 21.8463H20.9328C21.3523 21.8463 21.6925 21.5062 21.6925 21.0866V11.4265C21.6925 11.0069 21.3524 10.6668 20.9328 10.6668ZM23.7774 0.653387C23.4807 0.356739 22.9997 0.356739 22.703 0.653387L10.3293 13.0272L7.25501 9.9529C6.9583 9.65625 6.47732 9.65625 6.18061 9.9529C5.88396 10.2496 5.88396 10.7306 6.18061 11.0273L9.7921 14.6388C9.94045 14.7871 10.1349 14.8613 10.3293 14.8613C10.5237 14.8613 10.7181 14.7871 10.8665 14.6388L23.7774 1.72778C24.0741 1.43108 24.0741 0.950095 23.7774 0.653387Z" }), "Select / Deselect All")), hAsync("slot", { name: "menu" }))));
  }
  renderTable() {
    if (this.needsAutoWidthParse) {
      return this.renderAutoWidthCheck();
    }
    return (hAsync("div", { ref: (el) => (this.elScrollContainer = el), class: `${name$1}__scroll-container`, style: { height: this.height || 'auto' }, onScroll: () => this.onTableScroll() }, hAsync("table", { class: `${name$1}__table` }, this.renderTableHead(), this.renderTableBody())));
  }
  renderAutoWidthCheck() {
    // Calculate number column width
    this.numberColumnWidth = this.rows.length.toString().length * 9;
    // Get columns with width option set to 'auto'
    const autoCols = [];
    this.fields.forEach(({ type, width = CELL_TYPES[type].defaults.width || CELL_DEFAULTS.width, }, columnIndex) => {
      if (width === 'auto') {
        autoCols.push(columnIndex);
      }
    });
    if (!autoCols.length) {
      this.needsAutoWidthParse = false;
      return this.renderTable();
    }
    return (hAsync("table", { class: `${name$1}__auto-width-check ${name$1}__table` }, hAsync("tr", { class: `tbody__row` }, autoCols.map((columnIndex) => {
      const field = this.fields[columnIndex];
      const { type, cell = CELL_TYPES[type] } = field;
      // Find largest content of each type. Use custom getter if exists
      const getLongestContent = cell.getLongestContent || this.getDefaultLongestContent;
      const content = getLongestContent({
        rows: this.rows,
        columnIndex,
        field,
      });
      return (hAsync("td", { class: `tbody__cell`, style: { width: 'auto' }, "data-columnindex": columnIndex }, cell.render({
        field,
        content,
        component: this,
        isAutoWidthCheck: true,
      })));
    }))));
  }
  renderTableHead() {
    return (hAsync("thead", { ref: (el) => (this.elTableHead = el), class: `thead ${this.hideHeader ? 'sr-only' : ''}` }, hAsync("tr", { class: `thead__row` }, this.numbered && this.renderTableHeadNumberedCell(), this.selectable && this.renderTableHeadSelectableCell(), this.fields.map(({ type, label = '', 
    // Params can be set optionally in the fields options, in the cell type
    // descriptor class, or falls back to common defaults
    visible = CELL_TYPES[type].defaults.visible !== undefined
      ? CELL_TYPES[type].defaults.visible
      : CELL_DEFAULTS.visible, sortable, sortDirection = 'none', resizable = CELL_TYPES[type].defaults.resizable !== undefined
      ? CELL_TYPES[type].defaults.resizable
      : CELL_DEFAULTS.resizable, width = CELL_TYPES[type].defaults.width || CELL_DEFAULTS.width, minWidth = CELL_TYPES[type].defaults.minWidth ||
      CELL_DEFAULTS.minWidth, maxWidth = CELL_TYPES[type].defaults.maxWidth ||
      CELL_DEFAULTS.maxWidth, textAlign = CELL_TYPES[type].defaults.textAlign ||
      CELL_DEFAULTS.textAlign, stretchWidth = 0, }, columnIndex) => {
      if (!visible) {
        return;
      }
      const props = {
        class: `thead__cell`,
        style: {
          width: `calc(${width}px + ${stretchWidth}px)`,
          textAlign,
        },
        'data-type': type,
      };
      if (sortable) {
        props['aria-sort'] = sortDirection;
      }
      return (hAsync("th", Object.assign({ title: "Activate to sort column" }, props, (sortable
        ? {
          onKeyDown: (event) => {
            if (['Enter', ' '].includes(event.key)) {
              this.toggleTableSorting(sortDirection, columnIndex, type);
            }
          },
          onClick: () => {
            this.toggleTableSorting(sortDirection, columnIndex, type);
          },
          tabindex: 0,
          class: `${props.class} thead-sortable`,
        }
        : {})), hAsync("div", { class: `thead__title` }, hAsync("span", { class: `thead__text` }, sortable && hAsync("span", { class: `thead__arrow-top` }), sortable && hAsync("span", { class: `thead__arrow-bottom` }), label)), resizable && (hAsync("div", { class: `thead__divider`, "data-index": columnIndex, "data-width": width, "data-min": minWidth, "data-max": maxWidth, onMouseDown: (e) => this.onDividerDown(e), onTouchStart: (e) => this.onDividerDown(e), "aria-hidden": "true" }, hAsync("div", { class: `thead__divider-line` })))));
    }))));
  }
  renderTableHeadNumberedCell() {
    return (hAsync("th", { class: `thead__cell  thead__cell--numbered`, style: { width: this.numberColumnWidth + 'px' } }, hAsync("span", { class: "scl-body" }, "#")));
  }
  renderTableHeadSelectableCell() {
    const style = {
      width: this.selectionColumnWidth + 'px',
    };
    // Make selection and numbered cells closer than regular padding
    if (this.numbered) {
      style.paddingLeft = '0px';
    }
    return (hAsync("th", { class: `thead__cell thead__cell--selection`, style: style, title: "Select" }, hAsync("scale-checkbox", { ref: (el) => (this.elToggleSelectAll = el), onScaleChange: () => this.toggleSelectAll(), hideLabel: true, "aria-label": "Select" })));
  }
  renderTableBody() {
    return (hAsync("tbody", { class: `tbody` }, (() => {
      const rows = [];
      // Pagination functionality
      const total = this.rows.length;
      const start = this.paginationStart;
      const end = Math.min(total, this.paginationStart + this.pageSize);
      for (let rowIndex = start; rowIndex < end; rowIndex++) {
        const rowData = this.rows[rowIndex];
        const rowNestedContent = [];
        let isNestedExpanded = false;
        rows.push(hAsync("tr", { class: `tbody__row` }, this.renderMobileTitle(rowData), this.numbered && this.renderTableBodyNumberedCell(rowIndex), this.selectable &&
          this.renderTableBodySelectableCell(rowIndex), rowData.map((cellContent, columnIndex) => {
          const field = this.fields[columnIndex];
          const visible = field.visible !== undefined
            ? field.visible
            : CELL_TYPES[field.type].defaults.visible !== undefined
              ? CELL_TYPES[field.type].defaults.visible
              : CELL_DEFAULTS.visible;
          if (!visible) {
            return;
          }
          // Add rows nested tables to array
          if (field.type === 'html') {
            if (!!cellContent.isExpanded) {
              isNestedExpanded = true;
            }
            rowNestedContent.push({
              content: cellContent,
            });
          }
          return this.renderTableCell(field, cellContent, rowIndex, columnIndex);
        })));
        // Add second row for nested content if any within the row are expanded
        if (rowNestedContent.length) {
          rows.push(hAsync("div", { class: `tbody__nested`, style: {
              width: this.contentWidth + 'px',
              display: isNestedExpanded ? 'block' : 'none',
            } }, hAsync("td", { class: `tbody__nested-cell` }, rowNestedContent.map(({ content }) => {
            return (hAsync("div", { ref: (el) => {
                if (el) {
                  // Remove content from other pages
                  let child = el.lastElementChild;
                  while (child) {
                    el.removeChild(child);
                    child = el.lastElementChild;
                  }
                  // Append actual content
                  el.appendChild(content);
                }
              } }));
          }))));
        }
      }
      return rows;
    })()));
  }
  renderMobileTitle(rowData) {
    if (this.mobileTitleIndex === -1) {
      return hAsync("h5", { class: `tbody__mobile-title scl-h5` }, "\u00A0");
    }
    return (hAsync("h5", { class: `tbody__mobile-title scl-h5` }, rowData[this.mobileTitleIndex]));
  }
  renderTableBodyNumberedCell(rowIndex) {
    return (hAsync("td", { class: `tbody__cell tbody__cell--numbered`, style: { width: this.numberColumnWidth + 'px' } }, hAsync("p", { class: "scl-body" }, rowIndex + 1)));
  }
  renderTableBodySelectableCell(rowIndex) {
    const style = {
      width: this.selectionColumnWidth + 'px',
    };
    if (this.numbered) {
      style.marginLeft = '0px';
      style.paddingLeft = '0px';
    }
    return (hAsync("td", { title: this.rows[rowIndex][0], class: `tbody__cell tbody__cell--selection`, style: style }, hAsync("scale-checkbox", { checked: this.rows[rowIndex].selected, onScaleChange: (e) => this.toggleRowSelect(e, rowIndex), hideLabel: true })));
  }
  renderTableCell(field, content, rowIndex, columnIndex) {
    const cell = CELL_TYPES[field.type];
    const { label, 
    // Use custom field, or default defined in class, or fallback default
    width = cell.defaults.width || CELL_DEFAULTS.width, stretchWidth = 0, mobileTitle, // For text cells
     } = field;
    return (hAsync("td", { class: `tbody__cell${mobileTitle ? ` tbody__cell--used-as-mobile-title` : ``}`, style: { width: `calc(${width}px + ${stretchWidth}px)` } }, hAsync("div", { class: `tbody__mobile-label` }, label), cell.render({
      field,
      content,
      component: this,
      rowIndex,
      columnIndex,
    })));
  }
  renderTableInfo() {
    return (hAsync("div", { class: `info` }, this.selectable && !!this.selection.length && (hAsync("div", { class: `info__selection` }, `${this.selection.length} row${this.selection.length > 1 ? 's' : ''} selected`)), this.isPagination && (hAsync("scale-pagination", { class: `info__pagination`, hideBorders: !this.isMobile, startElement: this.paginationStart, totalElements: this.rows.length, pageSize: this.pageSize, onScalePagination: ({ detail }) => (this.paginationStart = detail.startElement) }))));
  }
  /* 10. Render */
  render() {
    if (this.dataNeedsCheck) {
      this.hasData = this.checkHasData();
    }
    return (hAsync(Host$1, { style: {
        display: this.visible ? 'block' : 'none',
      } }, this.styles && hAsync("style", null, this.styles), hAsync("div", { class: this.getCssClassMap() }, hAsync("div", { class: `${name$1}__title-block` }, this.heading && (hAsync("h4", { class: `${name$1}__heading scl-h5` }, this.heading)), hAsync("div", null, hAsync("slot", null)), this.hasData && this.renderSettingsMenu()), this.hasData && this.renderTable(), this.hasData &&
      !this.hideInfo &&
      !this.needsAutoWidthParse &&
      (this.selectable || this.isPagination) &&
      this.renderTableInfo())));
  }
  get hostElement() { return getElement$1(this); }
  static get watchers() { return {
    "fields": ["fieldsHandler"],
    "rows": ["rowsHandler"]
  }; }
  static get style() { return dataGridCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-data-grid",
    "$members$": {
      "fields": [8],
      "freezeHeader": [4, "freeze-header"],
      "heading": [1],
      "height": [1],
      "hideBorder": [4, "hide-border"],
      "hideHeader": [4, "hide-header"],
      "hideInfo": [4, "hide-info"],
      "hideMenu": [4, "hide-menu"],
      "numbered": [4],
      "pageSize": [2, "page-size"],
      "rows": [8],
      "selectable": [4],
      "selection": [16],
      "shadeAlternate": [4, "shade-alternate"],
      "styles": [8],
      "visible": [4],
      "forceRender": [32],
      "paginationStart": [32],
      "scrollY": [32]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

let scopeId;
let contentRef;
let hostTagName;
let useNativeShadowDom = false;
let checkSlotFallbackVisibility = false;
let checkSlotRelocate = false;
let isSvgMode = false;
let queuePending = false;
const win = typeof window !== 'undefined' ? window : {};
const doc = win.document || { head: {} };
const plt = {
    $flags$: 0,
    $resourcesUrl$: '',
    jmp: (h) => h(),
    raf: (h) => requestAnimationFrame(h),
    ael: (el, eventName, listener, opts) => el.addEventListener(eventName, listener, opts),
    rel: (el, eventName, listener, opts) => el.removeEventListener(eventName, listener, opts),
    ce: (eventName, opts) => new CustomEvent(eventName, opts),
};
const supportsShadow = /*@__PURE__*/ (() => (doc.head.attachShadow + '').indexOf('[native') > -1)()
    ;
const promiseResolve = (v) => Promise.resolve(v);
const addHostEventListeners = (elm, hostRef, listeners, attachParentListeners) => {
    if (listeners) {
        listeners.map(([flags, name, method]) => {
            const target = getHostListenerTarget(elm, flags) ;
            const handler = hostListenerProxy(hostRef, method);
            const opts = hostListenerOpts(flags);
            plt.ael(target, name, handler, opts);
            (hostRef.$rmListeners$ = hostRef.$rmListeners$ || []).push(() => plt.rel(target, name, handler, opts));
        });
    }
};
const hostListenerProxy = (hostRef, methodName) => (ev) => {
    try {
        {
            if (hostRef.$flags$ & 256 /* isListenReady */) {
                // instance is ready, let's call it's member method for this event
                hostRef.$lazyInstance$[methodName](ev);
            }
            else {
                (hostRef.$queuedListeners$ = hostRef.$queuedListeners$ || []).push([methodName, ev]);
            }
        }
    }
    catch (e) {
        consoleError(e);
    }
};
const getHostListenerTarget = (elm, flags) => {
    if (flags & 4 /* TargetDocument */)
        return doc;
    if (flags & 8 /* TargetWindow */)
        return win;
    return elm;
};
// prettier-ignore
const hostListenerOpts = (flags) => (flags & 2 /* Capture */) !== 0;
const CONTENT_REF_ID = 'r';
const ORG_LOCATION_ID = 'o';
const SLOT_NODE_ID = 's';
const TEXT_NODE_ID = 't';
const HYDRATE_ID = 's-id';
const HYDRATED_STYLE_ID = 'sty-id';
const HYDRATE_CHILD_ID = 'c-id';
const XLINK_NS = 'http://www.w3.org/1999/xlink';
const createTime = (fnName, tagName = '') => {
    {
        return () => {
            return;
        };
    }
};
const uniqueTime = (key, measureText) => {
    {
        return () => {
            return;
        };
    }
};
const rootAppliedStyles = new WeakMap();
const registerStyle = (scopeId, cssText, allowCS) => {
    let style = styles.get(scopeId);
    {
        style = cssText;
    }
    styles.set(scopeId, style);
};
const addStyle = (styleContainerNode, cmpMeta, mode, hostElm) => {
    let scopeId = getScopeId(cmpMeta);
    let style = styles.get(scopeId);
    // if an element is NOT connected then getRootNode() will return the wrong root node
    // so the fallback is to always use the document for the root node in those cases
    styleContainerNode = styleContainerNode.nodeType === 11 /* DocumentFragment */ ? styleContainerNode : doc;
    if (style) {
        if (typeof style === 'string') {
            styleContainerNode = styleContainerNode.head || styleContainerNode;
            let appliedStyles = rootAppliedStyles.get(styleContainerNode);
            let styleElm;
            if (!appliedStyles) {
                rootAppliedStyles.set(styleContainerNode, (appliedStyles = new Set()));
            }
            if (!appliedStyles.has(scopeId)) {
                if (styleContainerNode.host &&
                    (styleElm = styleContainerNode.querySelector(`[${HYDRATED_STYLE_ID}="${scopeId}"]`))) {
                    // This is only happening on native shadow-dom, do not needs CSS var shim
                    styleElm.innerHTML = style;
                }
                else {
                    {
                        styleElm = doc.createElement('style');
                        styleElm.innerHTML = style;
                    }
                    {
                        styleElm.setAttribute(HYDRATED_STYLE_ID, scopeId);
                    }
                    styleContainerNode.insertBefore(styleElm, styleContainerNode.querySelector('link'));
                }
                if (appliedStyles) {
                    appliedStyles.add(scopeId);
                }
            }
        }
    }
    return scopeId;
};
const attachStyles = (hostRef) => {
    const cmpMeta = hostRef.$cmpMeta$;
    const elm = hostRef.$hostElement$;
    const flags = cmpMeta.$flags$;
    const endAttachStyles = createTime('attachStyles', cmpMeta.$tagName$);
    const scopeId = addStyle(supportsShadow && elm.shadowRoot ? elm.shadowRoot : elm.getRootNode(), cmpMeta);
    if (flags & 10 /* needsScopedEncapsulation */) {
        // only required when we're NOT using native shadow dom (slot)
        // or this browser doesn't support native shadow dom
        // and this host element was NOT created with SSR
        // let's pick out the inner content for slot projection
        // create a node to represent where the original
        // content was first placed, which is useful later on
        // DOM WRITE!!
        elm['s-sc'] = scopeId;
        elm.classList.add(scopeId + '-h');
    }
    endAttachStyles();
};
const getScopeId = (cmp, mode) => 'sc-' + (cmp.$tagName$);
/**
 * Default style mode id
 */
/**
 * Reusable empty obj/array
 * Don't add values to these!!
 */
const EMPTY_OBJ = {};
/**
 * Namespaces
 */
const SVG_NS = 'http://www.w3.org/2000/svg';
const HTML_NS = 'http://www.w3.org/1999/xhtml';
const isDef = (v) => v != null;
const isComplexType = (o) => {
    // https://jsperf.com/typeof-fn-object/5
    o = typeof o;
    return o === 'object' || o === 'function';
};
/**
 * Production h() function based on Preact by
 * Jason Miller (@developit)
 * Licensed under the MIT License
 * https://github.com/developit/preact/blob/master/LICENSE
 *
 * Modified for Stencil's compiler and vdom
 */
// const stack: any[] = [];
// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, child?: d.ChildType): d.VNode;
// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, ...children: d.ChildType[]): d.VNode;
const h = (nodeName, vnodeData, ...children) => {
    let child = null;
    let key = null;
    let slotName = null;
    let simple = false;
    let lastSimple = false;
    let vNodeChildren = [];
    const walk = (c) => {
        for (let i = 0; i < c.length; i++) {
            child = c[i];
            if (Array.isArray(child)) {
                walk(child);
            }
            else if (child != null && typeof child !== 'boolean') {
                if ((simple = typeof nodeName !== 'function' && !isComplexType(child))) {
                    child = String(child);
                }
                if (simple && lastSimple) {
                    // If the previous child was simple (string), we merge both
                    vNodeChildren[vNodeChildren.length - 1].$text$ += child;
                }
                else {
                    // Append a new vNode, if it's text, we create a text vNode
                    vNodeChildren.push(simple ? newVNode(null, child) : child);
                }
                lastSimple = simple;
            }
        }
    };
    walk(children);
    if (vnodeData) {
        // normalize class / classname attributes
        if (vnodeData.key) {
            key = vnodeData.key;
        }
        if (vnodeData.name) {
            slotName = vnodeData.name;
        }
        {
            const classData = vnodeData.className || vnodeData.class;
            if (classData) {
                vnodeData.class =
                    typeof classData !== 'object'
                        ? classData
                        : Object.keys(classData)
                            .filter((k) => classData[k])
                            .join(' ');
            }
        }
    }
    if (typeof nodeName === 'function') {
        // nodeName is a functional component
        return nodeName(vnodeData === null ? {} : vnodeData, vNodeChildren, vdomFnUtils);
    }
    const vnode = newVNode(nodeName, null);
    vnode.$attrs$ = vnodeData;
    if (vNodeChildren.length > 0) {
        vnode.$children$ = vNodeChildren;
    }
    {
        vnode.$key$ = key;
    }
    {
        vnode.$name$ = slotName;
    }
    return vnode;
};
const newVNode = (tag, text) => {
    const vnode = {
        $flags$: 0,
        $tag$: tag,
        $text$: text,
        $elm$: null,
        $children$: null,
    };
    {
        vnode.$attrs$ = null;
    }
    {
        vnode.$key$ = null;
    }
    {
        vnode.$name$ = null;
    }
    return vnode;
};
const Host = {};
const isHost = (node) => node && node.$tag$ === Host;
const vdomFnUtils = {
    forEach: (children, cb) => children.map(convertToPublic).forEach(cb),
    map: (children, cb) => children.map(convertToPublic).map(cb).map(convertToPrivate),
};
const convertToPublic = (node) => ({
    vattrs: node.$attrs$,
    vchildren: node.$children$,
    vkey: node.$key$,
    vname: node.$name$,
    vtag: node.$tag$,
    vtext: node.$text$,
});
const convertToPrivate = (node) => {
    if (typeof node.vtag === 'function') {
        const vnodeData = Object.assign({}, node.vattrs);
        if (node.vkey) {
            vnodeData.key = node.vkey;
        }
        if (node.vname) {
            vnodeData.name = node.vname;
        }
        return h(node.vtag, vnodeData, ...(node.vchildren || []));
    }
    const vnode = newVNode(node.vtag, node.vtext);
    vnode.$attrs$ = node.vattrs;
    vnode.$children$ = node.vchildren;
    vnode.$key$ = node.vkey;
    vnode.$name$ = node.vname;
    return vnode;
};
/**
 * Production setAccessor() function based on Preact by
 * Jason Miller (@developit)
 * Licensed under the MIT License
 * https://github.com/developit/preact/blob/master/LICENSE
 *
 * Modified for Stencil's compiler and vdom
 */
const setAccessor = (elm, memberName, oldValue, newValue, isSvg, flags) => {
    if (oldValue !== newValue) {
        let isProp = isMemberInElement(elm, memberName);
        let ln = memberName.toLowerCase();
        if (memberName === 'class') {
            const classList = elm.classList;
            const oldClasses = parseClassList(oldValue);
            const newClasses = parseClassList(newValue);
            classList.remove(...oldClasses.filter((c) => c && !newClasses.includes(c)));
            classList.add(...newClasses.filter((c) => c && !oldClasses.includes(c)));
        }
        else if (memberName === 'style') {
            // update style attribute, css properties and values
            {
                for (const prop in oldValue) {
                    if (!newValue || newValue[prop] == null) {
                        {
                            elm.style[prop] = '';
                        }
                    }
                }
            }
            for (const prop in newValue) {
                if (!oldValue || newValue[prop] !== oldValue[prop]) {
                    {
                        elm.style[prop] = newValue[prop];
                    }
                }
            }
        }
        else if (memberName === 'key')
            ;
        else if (memberName === 'ref') {
            // minifier will clean this up
            if (newValue) {
                newValue(elm);
            }
        }
        else if ((!isProp ) &&
            memberName[0] === 'o' &&
            memberName[1] === 'n') {
            // Event Handlers
            // so if the member name starts with "on" and the 3rd characters is
            // a capital letter, and it's not already a member on the element,
            // then we're assuming it's an event listener
            if (memberName[2] === '-') {
                // on- prefixed events
                // allows to be explicit about the dom event to listen without any magic
                // under the hood:
                // <my-cmp on-click> // listens for "click"
                // <my-cmp on-Click> // listens for "Click"
                // <my-cmp on-ionChange> // listens for "ionChange"
                // <my-cmp on-EVENTS> // listens for "EVENTS"
                memberName = memberName.slice(3);
            }
            else if (isMemberInElement(win, ln)) {
                // standard event
                // the JSX attribute could have been "onMouseOver" and the
                // member name "onmouseover" is on the window's prototype
                // so let's add the listener "mouseover", which is all lowercased
                memberName = ln.slice(2);
            }
            else {
                // custom event
                // the JSX attribute could have been "onMyCustomEvent"
                // so let's trim off the "on" prefix and lowercase the first character
                // and add the listener "myCustomEvent"
                // except for the first character, we keep the event name case
                memberName = ln[2] + memberName.slice(3);
            }
            if (oldValue) {
                plt.rel(elm, memberName, oldValue, false);
            }
            if (newValue) {
                plt.ael(elm, memberName, newValue, false);
            }
        }
        else {
            // Set property if it exists and it's not a SVG
            const isComplex = isComplexType(newValue);
            if ((isProp || (isComplex && newValue !== null)) && !isSvg) {
                try {
                    if (!elm.tagName.includes('-')) {
                        let n = newValue == null ? '' : newValue;
                        // Workaround for Safari, moving the <input> caret when re-assigning the same valued
                        if (memberName === 'list') {
                            isProp = false;
                            // tslint:disable-next-line: triple-equals
                        }
                        else if (oldValue == null || elm[memberName] != n) {
                            elm[memberName] = n;
                        }
                    }
                    else {
                        elm[memberName] = newValue;
                    }
                }
                catch (e) { }
            }
            /**
             * Need to manually update attribute if:
             * - memberName is not an attribute
             * - if we are rendering the host element in order to reflect attribute
             * - if it's a SVG, since properties might not work in <svg>
             * - if the newValue is null/undefined or 'false'.
             */
            let xlink = false;
            {
                if (ln !== (ln = ln.replace(/^xlink\:?/, ''))) {
                    memberName = ln;
                    xlink = true;
                }
            }
            if (newValue == null || newValue === false) {
                if (newValue !== false || elm.getAttribute(memberName) === '') {
                    if (xlink) {
                        elm.removeAttributeNS(XLINK_NS, memberName);
                    }
                    else {
                        elm.removeAttribute(memberName);
                    }
                }
            }
            else if ((!isProp || flags & 4 /* isHost */ || isSvg) && !isComplex) {
                newValue = newValue === true ? '' : newValue;
                if (xlink) {
                    elm.setAttributeNS(XLINK_NS, memberName, newValue);
                }
                else {
                    elm.setAttribute(memberName, newValue);
                }
            }
        }
    }
};
const parseClassListRegex = /\s/;
const parseClassList = (value) => (!value ? [] : value.split(parseClassListRegex));
const updateElement = (oldVnode, newVnode, isSvgMode, memberName) => {
    // if the element passed in is a shadow root, which is a document fragment
    // then we want to be adding attrs/props to the shadow root's "host" element
    // if it's not a shadow root, then we add attrs/props to the same element
    const elm = newVnode.$elm$.nodeType === 11 /* DocumentFragment */ && newVnode.$elm$.host
        ? newVnode.$elm$.host
        : newVnode.$elm$;
    const oldVnodeAttrs = (oldVnode && oldVnode.$attrs$) || EMPTY_OBJ;
    const newVnodeAttrs = newVnode.$attrs$ || EMPTY_OBJ;
    {
        // remove attributes no longer present on the vnode by setting them to undefined
        for (memberName in oldVnodeAttrs) {
            if (!(memberName in newVnodeAttrs)) {
                setAccessor(elm, memberName, oldVnodeAttrs[memberName], undefined, isSvgMode, newVnode.$flags$);
            }
        }
    }
    // add new & update changed attributes
    for (memberName in newVnodeAttrs) {
        setAccessor(elm, memberName, oldVnodeAttrs[memberName], newVnodeAttrs[memberName], isSvgMode, newVnode.$flags$);
    }
};
const createElm = (oldParentVNode, newParentVNode, childIndex, parentElm) => {
    // tslint:disable-next-line: prefer-const
    let newVNode = newParentVNode.$children$[childIndex];
    let i = 0;
    let elm;
    let childNode;
    let oldVNode;
    if (!useNativeShadowDom) {
        // remember for later we need to check to relocate nodes
        checkSlotRelocate = true;
        if (newVNode.$tag$ === 'slot') {
            if (scopeId) {
                // scoped css needs to add its scoped id to the parent element
                parentElm.classList.add(scopeId + '-s');
            }
            newVNode.$flags$ |= newVNode.$children$
                ? // slot element has fallback content
                    2 /* isSlotFallback */
                : // slot element does not have fallback content
                    1 /* isSlotReference */;
        }
    }
    if (newVNode.$text$ !== null) {
        // create text node
        elm = newVNode.$elm$ = doc.createTextNode(newVNode.$text$);
    }
    else if (newVNode.$flags$ & 1 /* isSlotReference */) {
        // create a slot reference node
        elm = newVNode.$elm$ =
            slotReferenceDebugNode(newVNode) ;
    }
    else {
        if (!isSvgMode) {
            isSvgMode = newVNode.$tag$ === 'svg';
        }
        // create element
        elm = newVNode.$elm$ = (doc.createElementNS(isSvgMode ? SVG_NS : HTML_NS, newVNode.$flags$ & 2 /* isSlotFallback */
                ? 'slot-fb'
                : newVNode.$tag$)
            );
        if (isSvgMode && newVNode.$tag$ === 'foreignObject') {
            isSvgMode = false;
        }
        // add css classes, attrs, props, listeners, etc.
        {
            updateElement(null, newVNode, isSvgMode);
        }
        if (isDef(scopeId) && elm['s-si'] !== scopeId) {
            // if there is a scopeId and this is the initial render
            // then let's add the scopeId as a css class
            elm.classList.add((elm['s-si'] = scopeId));
        }
        if (newVNode.$children$) {
            for (i = 0; i < newVNode.$children$.length; ++i) {
                // create the node
                childNode = createElm(oldParentVNode, newVNode, i, elm);
                // return node could have been null
                if (childNode) {
                    // append our new node
                    elm.appendChild(childNode);
                }
            }
        }
        {
            if (newVNode.$tag$ === 'svg') {
                // Only reset the SVG context when we're exiting <svg> element
                isSvgMode = false;
            }
            else if (elm.tagName === 'foreignObject') {
                // Reenter SVG context when we're exiting <foreignObject> element
                isSvgMode = true;
            }
        }
    }
    {
        elm['s-hn'] = hostTagName;
        if (newVNode.$flags$ & (2 /* isSlotFallback */ | 1 /* isSlotReference */)) {
            // remember the content reference comment
            elm['s-sr'] = true;
            // remember the content reference comment
            elm['s-cr'] = contentRef;
            // remember the slot name, or empty string for default slot
            elm['s-sn'] = newVNode.$name$ || '';
            // check if we've got an old vnode for this slot
            oldVNode = oldParentVNode && oldParentVNode.$children$ && oldParentVNode.$children$[childIndex];
            if (oldVNode && oldVNode.$tag$ === newVNode.$tag$ && oldParentVNode.$elm$) {
                // we've got an old slot vnode and the wrapper is being replaced
                // so let's move the old slot content back to it's original location
                putBackInOriginalLocation(oldParentVNode.$elm$, false);
            }
        }
    }
    return elm;
};
const putBackInOriginalLocation = (parentElm, recursive) => {
    plt.$flags$ |= 1 /* isTmpDisconnected */;
    const oldSlotChildNodes = parentElm.childNodes;
    for (let i = oldSlotChildNodes.length - 1; i >= 0; i--) {
        const childNode = oldSlotChildNodes[i];
        if (childNode['s-hn'] !== hostTagName && childNode['s-ol']) {
            // // this child node in the old element is from another component
            // // remove this node from the old slot's parent
            // childNode.remove();
            // and relocate it back to it's original location
            parentReferenceNode(childNode).insertBefore(childNode, referenceNode(childNode));
            // remove the old original location comment entirely
            // later on the patch function will know what to do
            // and move this to the correct spot in need be
            childNode['s-ol'].remove();
            childNode['s-ol'] = undefined;
            checkSlotRelocate = true;
        }
        if (recursive) {
            putBackInOriginalLocation(childNode, recursive);
        }
    }
    plt.$flags$ &= ~1 /* isTmpDisconnected */;
};
const addVnodes = (parentElm, before, parentVNode, vnodes, startIdx, endIdx) => {
    let containerElm = ((parentElm['s-cr'] && parentElm['s-cr'].parentNode) || parentElm);
    let childNode;
    if (containerElm.shadowRoot && containerElm.tagName === hostTagName) {
        containerElm = containerElm.shadowRoot;
    }
    for (; startIdx <= endIdx; ++startIdx) {
        if (vnodes[startIdx]) {
            childNode = createElm(null, parentVNode, startIdx, parentElm);
            if (childNode) {
                vnodes[startIdx].$elm$ = childNode;
                containerElm.insertBefore(childNode, referenceNode(before) );
            }
        }
    }
};
const removeVnodes = (vnodes, startIdx, endIdx, vnode, elm) => {
    for (; startIdx <= endIdx; ++startIdx) {
        if ((vnode = vnodes[startIdx])) {
            elm = vnode.$elm$;
            callNodeRefs(vnode);
            {
                // we're removing this element
                // so it's possible we need to show slot fallback content now
                checkSlotFallbackVisibility = true;
                if (elm['s-ol']) {
                    // remove the original location comment
                    elm['s-ol'].remove();
                }
                else {
                    // it's possible that child nodes of the node
                    // that's being removed are slot nodes
                    putBackInOriginalLocation(elm, true);
                }
            }
            // remove the vnode's element from the dom
            elm.remove();
        }
    }
};
const updateChildren = (parentElm, oldCh, newVNode, newCh) => {
    let oldStartIdx = 0;
    let newStartIdx = 0;
    let idxInOld = 0;
    let i = 0;
    let oldEndIdx = oldCh.length - 1;
    let oldStartVnode = oldCh[0];
    let oldEndVnode = oldCh[oldEndIdx];
    let newEndIdx = newCh.length - 1;
    let newStartVnode = newCh[0];
    let newEndVnode = newCh[newEndIdx];
    let node;
    let elmToMove;
    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
        if (oldStartVnode == null) {
            // Vnode might have been moved left
            oldStartVnode = oldCh[++oldStartIdx];
        }
        else if (oldEndVnode == null) {
            oldEndVnode = oldCh[--oldEndIdx];
        }
        else if (newStartVnode == null) {
            newStartVnode = newCh[++newStartIdx];
        }
        else if (newEndVnode == null) {
            newEndVnode = newCh[--newEndIdx];
        }
        else if (isSameVnode(oldStartVnode, newStartVnode)) {
            patch(oldStartVnode, newStartVnode);
            oldStartVnode = oldCh[++oldStartIdx];
            newStartVnode = newCh[++newStartIdx];
        }
        else if (isSameVnode(oldEndVnode, newEndVnode)) {
            patch(oldEndVnode, newEndVnode);
            oldEndVnode = oldCh[--oldEndIdx];
            newEndVnode = newCh[--newEndIdx];
        }
        else if (isSameVnode(oldStartVnode, newEndVnode)) {
            // Vnode moved right
            if ((oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot')) {
                putBackInOriginalLocation(oldStartVnode.$elm$.parentNode, false);
            }
            patch(oldStartVnode, newEndVnode);
            parentElm.insertBefore(oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);
            oldStartVnode = oldCh[++oldStartIdx];
            newEndVnode = newCh[--newEndIdx];
        }
        else if (isSameVnode(oldEndVnode, newStartVnode)) {
            // Vnode moved left
            if ((oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot')) {
                putBackInOriginalLocation(oldEndVnode.$elm$.parentNode, false);
            }
            patch(oldEndVnode, newStartVnode);
            parentElm.insertBefore(oldEndVnode.$elm$, oldStartVnode.$elm$);
            oldEndVnode = oldCh[--oldEndIdx];
            newStartVnode = newCh[++newStartIdx];
        }
        else {
            // createKeyToOldIdx
            idxInOld = -1;
            {
                for (i = oldStartIdx; i <= oldEndIdx; ++i) {
                    if (oldCh[i] && oldCh[i].$key$ !== null && oldCh[i].$key$ === newStartVnode.$key$) {
                        idxInOld = i;
                        break;
                    }
                }
            }
            if (idxInOld >= 0) {
                elmToMove = oldCh[idxInOld];
                if (elmToMove.$tag$ !== newStartVnode.$tag$) {
                    node = createElm(oldCh && oldCh[newStartIdx], newVNode, idxInOld, parentElm);
                }
                else {
                    patch(elmToMove, newStartVnode);
                    oldCh[idxInOld] = undefined;
                    node = elmToMove.$elm$;
                }
                newStartVnode = newCh[++newStartIdx];
            }
            else {
                // new element
                node = createElm(oldCh && oldCh[newStartIdx], newVNode, newStartIdx, parentElm);
                newStartVnode = newCh[++newStartIdx];
            }
            if (node) {
                {
                    parentReferenceNode(oldStartVnode.$elm$).insertBefore(node, referenceNode(oldStartVnode.$elm$));
                }
            }
        }
    }
    if (oldStartIdx > oldEndIdx) {
        addVnodes(parentElm, newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$, newVNode, newCh, newStartIdx, newEndIdx);
    }
    else if (newStartIdx > newEndIdx) {
        removeVnodes(oldCh, oldStartIdx, oldEndIdx);
    }
};
const isSameVnode = (vnode1, vnode2) => {
    // compare if two vnode to see if they're "technically" the same
    // need to have the same element tag, and same key to be the same
    if (vnode1.$tag$ === vnode2.$tag$) {
        if (vnode1.$tag$ === 'slot') {
            return vnode1.$name$ === vnode2.$name$;
        }
        {
            return vnode1.$key$ === vnode2.$key$;
        }
    }
    return false;
};
const referenceNode = (node) => {
    // this node was relocated to a new location in the dom
    // because of some other component's slot
    // but we still have an html comment in place of where
    // it's original location was according to it's original vdom
    return (node && node['s-ol']) || node;
};
const parentReferenceNode = (node) => (node['s-ol'] ? node['s-ol'] : node).parentNode;
const patch = (oldVNode, newVNode) => {
    const elm = (newVNode.$elm$ = oldVNode.$elm$);
    const oldChildren = oldVNode.$children$;
    const newChildren = newVNode.$children$;
    const tag = newVNode.$tag$;
    const text = newVNode.$text$;
    let defaultHolder;
    if (text === null) {
        {
            // test if we're rendering an svg element, or still rendering nodes inside of one
            // only add this to the when the compiler sees we're using an svg somewhere
            isSvgMode = tag === 'svg' ? true : tag === 'foreignObject' ? false : isSvgMode;
        }
        // element node
        {
            if (tag === 'slot')
                ;
            else {
                // either this is the first render of an element OR it's an update
                // AND we already know it's possible it could have changed
                // this updates the element's css classes, attrs, props, listeners, etc.
                updateElement(oldVNode, newVNode, isSvgMode);
            }
        }
        if (oldChildren !== null && newChildren !== null) {
            // looks like there's child vnodes for both the old and new vnodes
            updateChildren(elm, oldChildren, newVNode, newChildren);
        }
        else if (newChildren !== null) {
            // no old child vnodes, but there are new child vnodes to add
            if (oldVNode.$text$ !== null) {
                // the old vnode was text, so be sure to clear it out
                elm.textContent = '';
            }
            // add the new vnode children
            addVnodes(elm, null, newVNode, newChildren, 0, newChildren.length - 1);
        }
        else if (oldChildren !== null) {
            // no new child vnodes, but there are old child vnodes to remove
            removeVnodes(oldChildren, 0, oldChildren.length - 1);
        }
        if (isSvgMode && tag === 'svg') {
            isSvgMode = false;
        }
    }
    else if ((defaultHolder = elm['s-cr'])) {
        // this element has slotted content
        defaultHolder.parentNode.textContent = text;
    }
    else if (oldVNode.$text$ !== text) {
        // update the text content for the text only vnode
        // and also only if the text is different than before
        elm.data = text;
    }
};
const updateFallbackSlotVisibility = (elm) => {
    // tslint:disable-next-line: prefer-const
    let childNodes = elm.childNodes;
    let childNode;
    let i;
    let ilen;
    let j;
    let slotNameAttr;
    let nodeType;
    for (i = 0, ilen = childNodes.length; i < ilen; i++) {
        childNode = childNodes[i];
        if (childNode.nodeType === 1 /* ElementNode */) {
            if (childNode['s-sr']) {
                // this is a slot fallback node
                // get the slot name for this slot reference node
                slotNameAttr = childNode['s-sn'];
                // by default always show a fallback slot node
                // then hide it if there are other slots in the light dom
                childNode.hidden = false;
                for (j = 0; j < ilen; j++) {
                    nodeType = childNodes[j].nodeType;
                    if (childNodes[j]['s-hn'] !== childNode['s-hn'] || slotNameAttr !== '') {
                        // this sibling node is from a different component OR is a named fallback slot node
                        if (nodeType === 1 /* ElementNode */ && slotNameAttr === childNodes[j].getAttribute('slot')) {
                            childNode.hidden = true;
                            break;
                        }
                    }
                    else {
                        // this is a default fallback slot node
                        // any element or text node (with content)
                        // should hide the default fallback slot node
                        if (nodeType === 1 /* ElementNode */ ||
                            (nodeType === 3 /* TextNode */ && childNodes[j].textContent.trim() !== '')) {
                            childNode.hidden = true;
                            break;
                        }
                    }
                }
            }
            // keep drilling down
            updateFallbackSlotVisibility(childNode);
        }
    }
};
const relocateNodes = [];
const relocateSlotContent = (elm) => {
    // tslint:disable-next-line: prefer-const
    let childNode;
    let node;
    let hostContentNodes;
    let slotNameAttr;
    let relocateNodeData;
    let j;
    let i = 0;
    let childNodes = elm.childNodes;
    let ilen = childNodes.length;
    for (; i < ilen; i++) {
        childNode = childNodes[i];
        if (childNode['s-sr'] && (node = childNode['s-cr']) && node.parentNode) {
            // first got the content reference comment node
            // then we got it's parent, which is where all the host content is in now
            hostContentNodes = node.parentNode.childNodes;
            slotNameAttr = childNode['s-sn'];
            for (j = hostContentNodes.length - 1; j >= 0; j--) {
                node = hostContentNodes[j];
                if (!node['s-cn'] && !node['s-nr'] && node['s-hn'] !== childNode['s-hn']) {
                    // let's do some relocating to its new home
                    // but never relocate a content reference node
                    // that is suppose to always represent the original content location
                    if (isNodeLocatedInSlot(node, slotNameAttr)) {
                        // it's possible we've already decided to relocate this node
                        relocateNodeData = relocateNodes.find((r) => r.$nodeToRelocate$ === node);
                        // made some changes to slots
                        // let's make sure we also double check
                        // fallbacks are correctly hidden or shown
                        checkSlotFallbackVisibility = true;
                        node['s-sn'] = node['s-sn'] || slotNameAttr;
                        if (relocateNodeData) {
                            // previously we never found a slot home for this node
                            // but turns out we did, so let's remember it now
                            relocateNodeData.$slotRefNode$ = childNode;
                        }
                        else {
                            // add to our list of nodes to relocate
                            relocateNodes.push({
                                $slotRefNode$: childNode,
                                $nodeToRelocate$: node,
                            });
                        }
                        if (node['s-sr']) {
                            relocateNodes.map((relocateNode) => {
                                if (isNodeLocatedInSlot(relocateNode.$nodeToRelocate$, node['s-sn'])) {
                                    relocateNodeData = relocateNodes.find((r) => r.$nodeToRelocate$ === node);
                                    if (relocateNodeData && !relocateNode.$slotRefNode$) {
                                        relocateNode.$slotRefNode$ = relocateNodeData.$slotRefNode$;
                                    }
                                }
                            });
                        }
                    }
                    else if (!relocateNodes.some((r) => r.$nodeToRelocate$ === node)) {
                        // so far this element does not have a slot home, not setting slotRefNode on purpose
                        // if we never find a home for this element then we'll need to hide it
                        relocateNodes.push({
                            $nodeToRelocate$: node,
                        });
                    }
                }
            }
        }
        if (childNode.nodeType === 1 /* ElementNode */) {
            relocateSlotContent(childNode);
        }
    }
};
const isNodeLocatedInSlot = (nodeToRelocate, slotNameAttr) => {
    if (nodeToRelocate.nodeType === 1 /* ElementNode */) {
        if (nodeToRelocate.getAttribute('slot') === null && slotNameAttr === '') {
            return true;
        }
        if (nodeToRelocate.getAttribute('slot') === slotNameAttr) {
            return true;
        }
        return false;
    }
    if (nodeToRelocate['s-sn'] === slotNameAttr) {
        return true;
    }
    return slotNameAttr === '';
};
const callNodeRefs = (vNode) => {
    {
        vNode.$attrs$ && vNode.$attrs$.ref && vNode.$attrs$.ref(null);
        vNode.$children$ && vNode.$children$.map(callNodeRefs);
    }
};
const renderVdom = (hostRef, renderFnResults) => {
    const hostElm = hostRef.$hostElement$;
    const cmpMeta = hostRef.$cmpMeta$;
    const oldVNode = hostRef.$vnode$ || newVNode(null, null);
    const rootVnode = isHost(renderFnResults) ? renderFnResults : h(null, null, renderFnResults);
    hostTagName = hostElm.tagName;
    if (cmpMeta.$attrsToReflect$) {
        rootVnode.$attrs$ = rootVnode.$attrs$ || {};
        cmpMeta.$attrsToReflect$.map(([propName, attribute]) => (rootVnode.$attrs$[attribute] = hostElm[propName]));
    }
    rootVnode.$tag$ = null;
    rootVnode.$flags$ |= 4 /* isHost */;
    hostRef.$vnode$ = rootVnode;
    rootVnode.$elm$ = oldVNode.$elm$ = (hostElm.shadowRoot || hostElm );
    {
        scopeId = hostElm['s-sc'];
    }
    {
        contentRef = hostElm['s-cr'];
        useNativeShadowDom = supportsShadow && (cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) !== 0;
        // always reset
        checkSlotFallbackVisibility = false;
    }
    // synchronous patch
    patch(oldVNode, rootVnode);
    {
        // while we're moving nodes around existing nodes, temporarily disable
        // the disconnectCallback from working
        plt.$flags$ |= 1 /* isTmpDisconnected */;
        if (checkSlotRelocate) {
            relocateSlotContent(rootVnode.$elm$);
            let relocateData;
            let nodeToRelocate;
            let orgLocationNode;
            let parentNodeRef;
            let insertBeforeNode;
            let refNode;
            let i = 0;
            for (; i < relocateNodes.length; i++) {
                relocateData = relocateNodes[i];
                nodeToRelocate = relocateData.$nodeToRelocate$;
                if (!nodeToRelocate['s-ol']) {
                    // add a reference node marking this node's original location
                    // keep a reference to this node for later lookups
                    orgLocationNode =
                        originalLocationDebugNode(nodeToRelocate)
                            ;
                    orgLocationNode['s-nr'] = nodeToRelocate;
                    nodeToRelocate.parentNode.insertBefore((nodeToRelocate['s-ol'] = orgLocationNode), nodeToRelocate);
                }
            }
            for (i = 0; i < relocateNodes.length; i++) {
                relocateData = relocateNodes[i];
                nodeToRelocate = relocateData.$nodeToRelocate$;
                if (relocateData.$slotRefNode$) {
                    // by default we're just going to insert it directly
                    // after the slot reference node
                    parentNodeRef = relocateData.$slotRefNode$.parentNode;
                    insertBeforeNode = relocateData.$slotRefNode$.nextSibling;
                    orgLocationNode = nodeToRelocate['s-ol'];
                    while ((orgLocationNode = orgLocationNode.previousSibling)) {
                        refNode = orgLocationNode['s-nr'];
                        if (refNode && refNode['s-sn'] === nodeToRelocate['s-sn'] && parentNodeRef === refNode.parentNode) {
                            refNode = refNode.nextSibling;
                            if (!refNode || !refNode['s-nr']) {
                                insertBeforeNode = refNode;
                                break;
                            }
                        }
                    }
                    if ((!insertBeforeNode && parentNodeRef !== nodeToRelocate.parentNode) ||
                        nodeToRelocate.nextSibling !== insertBeforeNode) {
                        // we've checked that it's worth while to relocate
                        // since that the node to relocate
                        // has a different next sibling or parent relocated
                        if (nodeToRelocate !== insertBeforeNode) {
                            if (!nodeToRelocate['s-hn'] && nodeToRelocate['s-ol']) {
                                // probably a component in the index.html that doesn't have it's hostname set
                                nodeToRelocate['s-hn'] = nodeToRelocate['s-ol'].parentNode.nodeName;
                            }
                            // add it back to the dom but in its new home
                            parentNodeRef.insertBefore(nodeToRelocate, insertBeforeNode);
                        }
                    }
                }
                else {
                    // this node doesn't have a slot home to go to, so let's hide it
                    if (nodeToRelocate.nodeType === 1 /* ElementNode */) {
                        nodeToRelocate.hidden = true;
                    }
                }
            }
        }
        if (checkSlotFallbackVisibility) {
            updateFallbackSlotVisibility(rootVnode.$elm$);
        }
        // done moving nodes around
        // allow the disconnect callback to work again
        plt.$flags$ &= ~1 /* isTmpDisconnected */;
        // always reset
        relocateNodes.length = 0;
    }
};
// slot comment debug nodes only created with the `--debug` flag
// otherwise these nodes are text nodes w/out content
const slotReferenceDebugNode = (slotVNode) => doc.createComment(`<slot${slotVNode.$name$ ? ' name="' + slotVNode.$name$ + '"' : ''}> (host=${hostTagName.toLowerCase()})`);
const originalLocationDebugNode = (nodeToRelocate) => doc.createComment(`org-location for ` +
    (nodeToRelocate.localName
        ? `<${nodeToRelocate.localName}> (host=${nodeToRelocate['s-hn']})`
        : `[${nodeToRelocate.textContent}]`));
const getElement = (ref) => (getHostRef(ref).$hostElement$ );
const createEvent = (ref, name, flags) => {
    const elm = getElement(ref);
    return {
        emit: (detail) => {
            return emitEvent(elm, name, {
                bubbles: !!(flags & 4 /* Bubbles */),
                composed: !!(flags & 2 /* Composed */),
                cancelable: !!(flags & 1 /* Cancellable */),
                detail,
            });
        },
    };
};
const emitEvent = (elm, name, opts) => {
    const ev = plt.ce(name, opts);
    elm.dispatchEvent(ev);
    return ev;
};
const attachToAncestor = (hostRef, ancestorComponent) => {
    if (ancestorComponent && !hostRef.$onRenderResolve$ && ancestorComponent['s-p']) {
        ancestorComponent['s-p'].push(new Promise((r) => (hostRef.$onRenderResolve$ = r)));
    }
};
const scheduleUpdate = (hostRef, isInitialLoad) => {
    {
        hostRef.$flags$ |= 16 /* isQueuedForUpdate */;
    }
    if (hostRef.$flags$ & 4 /* isWaitingForChildren */) {
        hostRef.$flags$ |= 512 /* needsRerender */;
        return;
    }
    attachToAncestor(hostRef, hostRef.$ancestorComponent$);
    // there is no ancestor component or the ancestor component
    // has already fired off its lifecycle update then
    // fire off the initial update
    const dispatch = () => dispatchHooks(hostRef, isInitialLoad);
    return writeTask(dispatch) ;
};
const dispatchHooks = (hostRef, isInitialLoad) => {
    const endSchedule = createTime('scheduleUpdate', hostRef.$cmpMeta$.$tagName$);
    const instance = hostRef.$lazyInstance$ ;
    let promise;
    if (isInitialLoad) {
        {
            hostRef.$flags$ |= 256 /* isListenReady */;
            if (hostRef.$queuedListeners$) {
                hostRef.$queuedListeners$.map(([methodName, event]) => safeCall(instance, methodName, event));
                hostRef.$queuedListeners$ = null;
            }
        }
        {
            promise = safeCall(instance, 'componentWillLoad');
        }
    }
    else {
        {
            promise = safeCall(instance, 'componentWillUpdate');
        }
    }
    {
        promise = then(promise, () => safeCall(instance, 'componentWillRender'));
    }
    endSchedule();
    return then(promise, () => updateComponent(hostRef, instance, isInitialLoad));
};
const updateComponent = async (hostRef, instance, isInitialLoad) => {
    // updateComponent
    const elm = hostRef.$hostElement$;
    const endUpdate = createTime('update', hostRef.$cmpMeta$.$tagName$);
    const rc = elm['s-rc'];
    if (isInitialLoad) {
        // DOM WRITE!
        attachStyles(hostRef);
    }
    const endRender = createTime('render', hostRef.$cmpMeta$.$tagName$);
    {
        await callRender(hostRef, instance);
    }
    {
        try {
            // manually connected child components during server-side hydrate
            serverSideConnected(elm);
            if (isInitialLoad) {
                // using only during server-side hydrate
                if (hostRef.$cmpMeta$.$flags$ & 1 /* shadowDomEncapsulation */) {
                    elm['s-en'] = '';
                }
                else if (hostRef.$cmpMeta$.$flags$ & 2 /* scopedCssEncapsulation */) {
                    elm['s-en'] = 'c';
                }
            }
        }
        catch (e) {
            consoleError(e, elm);
        }
    }
    if (rc) {
        // ok, so turns out there are some child host elements
        // waiting on this parent element to load
        // let's fire off all update callbacks waiting
        rc.map((cb) => cb());
        elm['s-rc'] = undefined;
    }
    endRender();
    endUpdate();
    {
        const childrenPromises = elm['s-p'];
        const postUpdate = () => postUpdateComponent(hostRef);
        if (childrenPromises.length === 0) {
            postUpdate();
        }
        else {
            Promise.all(childrenPromises).then(postUpdate);
            hostRef.$flags$ |= 4 /* isWaitingForChildren */;
            childrenPromises.length = 0;
        }
    }
};
const callRender = (hostRef, instance, elm) => {
    try {
        instance = instance.render() ;
        {
            hostRef.$flags$ &= ~16 /* isQueuedForUpdate */;
        }
        {
            hostRef.$flags$ |= 2 /* hasRendered */;
        }
        {
            {
                // looks like we've got child nodes to render into this host element
                // or we need to update the css class/attrs on the host element
                // DOM WRITE!
                {
                    return Promise.resolve(instance).then((value) => renderVdom(hostRef, value));
                }
            }
        }
    }
    catch (e) {
        consoleError(e, hostRef.$hostElement$);
    }
    return null;
};
const postUpdateComponent = (hostRef) => {
    const tagName = hostRef.$cmpMeta$.$tagName$;
    const elm = hostRef.$hostElement$;
    const endPostUpdate = createTime('postUpdate', tagName);
    const instance = hostRef.$lazyInstance$ ;
    const ancestorComponent = hostRef.$ancestorComponent$;
    {
        safeCall(instance, 'componentDidRender');
    }
    if (!(hostRef.$flags$ & 64 /* hasLoadedComponent */)) {
        hostRef.$flags$ |= 64 /* hasLoadedComponent */;
        {
            // DOM WRITE!
            addHydratedFlag(elm);
        }
        {
            safeCall(instance, 'componentDidLoad');
        }
        endPostUpdate();
        {
            hostRef.$onReadyResolve$(elm);
            if (!ancestorComponent) {
                appDidLoad();
            }
        }
    }
    else {
        {
            safeCall(instance, 'componentDidUpdate');
        }
        endPostUpdate();
    }
    {
        hostRef.$onInstanceResolve$(elm);
    }
    // load events fire from bottom to top
    // the deepest elements load first then bubbles up
    {
        if (hostRef.$onRenderResolve$) {
            hostRef.$onRenderResolve$();
            hostRef.$onRenderResolve$ = undefined;
        }
        if (hostRef.$flags$ & 512 /* needsRerender */) {
            nextTick(() => scheduleUpdate(hostRef, false));
        }
        hostRef.$flags$ &= ~(4 /* isWaitingForChildren */ | 512 /* needsRerender */);
    }
    // ( •_•)
    // ( •_•)>⌐■-■
    // (⌐■_■)
};
const appDidLoad = (who) => {
    // on appload
    // we have finish the first big initial render
    {
        addHydratedFlag(doc.documentElement);
    }
    nextTick(() => emitEvent(win, 'appload', { detail: { namespace: NAMESPACE } }));
};
const safeCall = (instance, method, arg) => {
    if (instance && instance[method]) {
        try {
            return instance[method](arg);
        }
        catch (e) {
            consoleError(e);
        }
    }
    return undefined;
};
const then = (promise, thenFn) => {
    return promise && promise.then ? promise.then(thenFn) : thenFn();
};
const addHydratedFlag = (elm) => elm.classList.add('hydrated')
    ;
const serverSideConnected = (elm) => {
    const children = elm.children;
    if (children != null) {
        for (let i = 0, ii = children.length; i < ii; i++) {
            const childElm = children[i];
            if (typeof childElm.connectedCallback === 'function') {
                childElm.connectedCallback();
            }
            serverSideConnected(childElm);
        }
    }
};
const initializeClientHydrate = (hostElm, tagName, hostId, hostRef) => {
    const endHydrate = createTime('hydrateClient', tagName);
    const shadowRoot = hostElm.shadowRoot;
    const childRenderNodes = [];
    const slotNodes = [];
    const shadowRootNodes = shadowRoot ? [] : null;
    const vnode = (hostRef.$vnode$ = newVNode(tagName, null));
    if (!plt.$orgLocNodes$) {
        initializeDocumentHydrate(doc.body, (plt.$orgLocNodes$ = new Map()));
    }
    hostElm[HYDRATE_ID] = hostId;
    hostElm.removeAttribute(HYDRATE_ID);
    clientHydrate(vnode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, hostElm, hostId);
    childRenderNodes.map((c) => {
        const orgLocationId = c.$hostId$ + '.' + c.$nodeId$;
        const orgLocationNode = plt.$orgLocNodes$.get(orgLocationId);
        const node = c.$elm$;
        if (orgLocationNode && supportsShadow && orgLocationNode['s-en'] === '') {
            orgLocationNode.parentNode.insertBefore(node, orgLocationNode.nextSibling);
        }
        if (!shadowRoot) {
            node['s-hn'] = tagName;
            if (orgLocationNode) {
                node['s-ol'] = orgLocationNode;
                node['s-ol']['s-nr'] = node;
            }
        }
        plt.$orgLocNodes$.delete(orgLocationId);
    });
    if (shadowRoot) {
        shadowRootNodes.map((shadowRootNode) => {
            if (shadowRootNode) {
                shadowRoot.appendChild(shadowRootNode);
            }
        });
    }
    endHydrate();
};
const clientHydrate = (parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node, hostId) => {
    let childNodeType;
    let childIdSplt;
    let childVNode;
    let i;
    if (node.nodeType === 1 /* ElementNode */) {
        childNodeType = node.getAttribute(HYDRATE_CHILD_ID);
        if (childNodeType) {
            // got the node data from the element's attribute
            // `${hostId}.${nodeId}.${depth}.${index}`
            childIdSplt = childNodeType.split('.');
            if (childIdSplt[0] === hostId || childIdSplt[0] === '0') {
                childVNode = {
                    $flags$: 0,
                    $hostId$: childIdSplt[0],
                    $nodeId$: childIdSplt[1],
                    $depth$: childIdSplt[2],
                    $index$: childIdSplt[3],
                    $tag$: node.tagName.toLowerCase(),
                    $elm$: node,
                    $attrs$: null,
                    $children$: null,
                    $key$: null,
                    $name$: null,
                    $text$: null,
                };
                childRenderNodes.push(childVNode);
                node.removeAttribute(HYDRATE_CHILD_ID);
                // this is a new child vnode
                // so ensure its parent vnode has the vchildren array
                if (!parentVNode.$children$) {
                    parentVNode.$children$ = [];
                }
                // add our child vnode to a specific index of the vnode's children
                parentVNode.$children$[childVNode.$index$] = childVNode;
                // this is now the new parent vnode for all the next child checks
                parentVNode = childVNode;
                if (shadowRootNodes && childVNode.$depth$ === '0') {
                    shadowRootNodes[childVNode.$index$] = childVNode.$elm$;
                }
            }
        }
        // recursively drill down, end to start so we can remove nodes
        for (i = node.childNodes.length - 1; i >= 0; i--) {
            clientHydrate(parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node.childNodes[i], hostId);
        }
        if (node.shadowRoot) {
            // keep drilling down through the shadow root nodes
            for (i = node.shadowRoot.childNodes.length - 1; i >= 0; i--) {
                clientHydrate(parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node.shadowRoot.childNodes[i], hostId);
            }
        }
    }
    else if (node.nodeType === 8 /* CommentNode */) {
        // `${COMMENT_TYPE}.${hostId}.${nodeId}.${depth}.${index}`
        childIdSplt = node.nodeValue.split('.');
        if (childIdSplt[1] === hostId || childIdSplt[1] === '0') {
            // comment node for either the host id or a 0 host id
            childNodeType = childIdSplt[0];
            childVNode = {
                $flags$: 0,
                $hostId$: childIdSplt[1],
                $nodeId$: childIdSplt[2],
                $depth$: childIdSplt[3],
                $index$: childIdSplt[4],
                $elm$: node,
                $attrs$: null,
                $children$: null,
                $key$: null,
                $name$: null,
                $tag$: null,
                $text$: null,
            };
            if (childNodeType === TEXT_NODE_ID) {
                childVNode.$elm$ = node.nextSibling;
                if (childVNode.$elm$ && childVNode.$elm$.nodeType === 3 /* TextNode */) {
                    childVNode.$text$ = childVNode.$elm$.textContent;
                    childRenderNodes.push(childVNode);
                    // remove the text comment since it's no longer needed
                    node.remove();
                    if (!parentVNode.$children$) {
                        parentVNode.$children$ = [];
                    }
                    parentVNode.$children$[childVNode.$index$] = childVNode;
                    if (shadowRootNodes && childVNode.$depth$ === '0') {
                        shadowRootNodes[childVNode.$index$] = childVNode.$elm$;
                    }
                }
            }
            else if (childVNode.$hostId$ === hostId) {
                // this comment node is specifcally for this host id
                if (childNodeType === SLOT_NODE_ID) {
                    // `${SLOT_NODE_ID}.${hostId}.${nodeId}.${depth}.${index}.${slotName}`;
                    childVNode.$tag$ = 'slot';
                    if (childIdSplt[5]) {
                        node['s-sn'] = childVNode.$name$ = childIdSplt[5];
                    }
                    else {
                        node['s-sn'] = '';
                    }
                    node['s-sr'] = true;
                    if (shadowRootNodes) {
                        // browser support shadowRoot and this is a shadow dom component
                        // create an actual slot element
                        childVNode.$elm$ = doc.createElement(childVNode.$tag$);
                        if (childVNode.$name$) {
                            // add the slot name attribute
                            childVNode.$elm$.setAttribute('name', childVNode.$name$);
                        }
                        // insert the new slot element before the slot comment
                        node.parentNode.insertBefore(childVNode.$elm$, node);
                        // remove the slot comment since it's not needed for shadow
                        node.remove();
                        if (childVNode.$depth$ === '0') {
                            shadowRootNodes[childVNode.$index$] = childVNode.$elm$;
                        }
                    }
                    slotNodes.push(childVNode);
                    if (!parentVNode.$children$) {
                        parentVNode.$children$ = [];
                    }
                    parentVNode.$children$[childVNode.$index$] = childVNode;
                }
                else if (childNodeType === CONTENT_REF_ID) {
                    // `${CONTENT_REF_ID}.${hostId}`;
                    if (shadowRootNodes) {
                        // remove the content ref comment since it's not needed for shadow
                        node.remove();
                    }
                    else {
                        hostElm['s-cr'] = node;
                        node['s-cn'] = true;
                    }
                }
            }
        }
    }
    else if (parentVNode && parentVNode.$tag$ === 'style') {
        const vnode = newVNode(null, node.textContent);
        vnode.$elm$ = node;
        vnode.$index$ = '0';
        parentVNode.$children$ = [vnode];
    }
};
const initializeDocumentHydrate = (node, orgLocNodes) => {
    if (node.nodeType === 1 /* ElementNode */) {
        let i = 0;
        for (; i < node.childNodes.length; i++) {
            initializeDocumentHydrate(node.childNodes[i], orgLocNodes);
        }
        if (node.shadowRoot) {
            for (i = 0; i < node.shadowRoot.childNodes.length; i++) {
                initializeDocumentHydrate(node.shadowRoot.childNodes[i], orgLocNodes);
            }
        }
    }
    else if (node.nodeType === 8 /* CommentNode */) {
        const childIdSplt = node.nodeValue.split('.');
        if (childIdSplt[0] === ORG_LOCATION_ID) {
            orgLocNodes.set(childIdSplt[1] + '.' + childIdSplt[2], node);
            node.nodeValue = '';
            // useful to know if the original location is
            // the root light-dom of a shadow dom component
            node['s-en'] = childIdSplt[3];
        }
    }
};
const parsePropertyValue = (propValue, propType) => {
    // ensure this value is of the correct prop type
    if (propValue != null && !isComplexType(propValue)) {
        if (propType & 4 /* Boolean */) {
            // per the HTML spec, any string value means it is a boolean true value
            // but we'll cheat here and say that the string "false" is the boolean false
            return propValue === 'false' ? false : propValue === '' || !!propValue;
        }
        if (propType & 2 /* Number */) {
            // force it to be a number
            return parseFloat(propValue);
        }
        if (propType & 1 /* String */) {
            // could have been passed as a number or boolean
            // but we still want it as a string
            return String(propValue);
        }
        // redundant return here for better minification
        return propValue;
    }
    // not sure exactly what type we want
    // so no need to change to a different type
    return propValue;
};
const getValue = (ref, propName) => getHostRef(ref).$instanceValues$.get(propName);
const setValue = (ref, propName, newVal, cmpMeta) => {
    // check our new property value against our internal value
    const hostRef = getHostRef(ref);
    const elm = hostRef.$hostElement$ ;
    const oldVal = hostRef.$instanceValues$.get(propName);
    const flags = hostRef.$flags$;
    const instance = hostRef.$lazyInstance$ ;
    newVal = parsePropertyValue(newVal, cmpMeta.$members$[propName][0]);
    if ((!(flags & 8 /* isConstructingInstance */) || oldVal === undefined) && newVal !== oldVal) {
        // gadzooks! the property's value has changed!!
        // set our new value!
        hostRef.$instanceValues$.set(propName, newVal);
        if (instance) {
            // get an array of method names of watch functions to call
            if (cmpMeta.$watchers$ && flags & 128 /* isWatchReady */) {
                const watchMethods = cmpMeta.$watchers$[propName];
                if (watchMethods) {
                    // this instance is watching for when this property changed
                    watchMethods.map((watchMethodName) => {
                        try {
                            // fire off each of the watch methods that are watching this property
                            instance[watchMethodName](newVal, oldVal, propName);
                        }
                        catch (e) {
                            consoleError(e, elm);
                        }
                    });
                }
            }
            if ((flags & (2 /* hasRendered */ | 16 /* isQueuedForUpdate */)) === 2 /* hasRendered */) {
                // looks like this value actually changed, so we've got work to do!
                // but only if we've already rendered, otherwise just chill out
                // queue that we need to do an update, but don't worry about queuing
                // up millions cuz this function ensures it only runs once
                scheduleUpdate(hostRef, false);
            }
        }
    }
};
const proxyComponent = (Cstr, cmpMeta, flags) => {
    if (cmpMeta.$members$) {
        if (Cstr.watchers) {
            cmpMeta.$watchers$ = Cstr.watchers;
        }
        // It's better to have a const than two Object.entries()
        const members = Object.entries(cmpMeta.$members$);
        const prototype = Cstr.prototype;
        members.map(([memberName, [memberFlags]]) => {
            if ((memberFlags & 31 /* Prop */ ||
                    ((flags & 2 /* proxyState */) && memberFlags & 32 /* State */))) {
                // proxyComponent - prop
                Object.defineProperty(prototype, memberName, {
                    get() {
                        // proxyComponent, get value
                        return getValue(this, memberName);
                    },
                    set(newValue) {
                        // proxyComponent, set value
                        setValue(this, memberName, newValue, cmpMeta);
                    },
                    configurable: true,
                    enumerable: true,
                });
            }
            else if (flags & 1 /* isElementConstructor */ &&
                memberFlags & 64 /* Method */) {
                // proxyComponent - method
                Object.defineProperty(prototype, memberName, {
                    value(...args) {
                        const ref = getHostRef(this);
                        return ref.$onInstancePromise$.then(() => ref.$lazyInstance$[memberName](...args));
                    },
                });
            }
        });
        if ((flags & 1 /* isElementConstructor */)) {
            const attrNameToPropName = new Map();
            prototype.attributeChangedCallback = function (attrName, _oldValue, newValue) {
                plt.jmp(() => {
                    const propName = attrNameToPropName.get(attrName);
                    //  In a webcomponent lifecyle the attributeChangedCallback runs prior to connectedCallback
                    //  in the case where an attribute was set inline.
                    //  ```html
                    //    <my-component some-attribute="some-value"></my-component>
                    //  ```
                    //
                    //  There is an edge case where a developer sets the attribute inline on a custom element and then programatically
                    //  changes it before it has been upgraded as shown below:
                    //
                    //  ```html
                    //    <!-- this component has _not_ been upgraded yet -->
                    //    <my-component id="test" some-attribute="some-value"></my-component>
                    //    <script>
                    //      // grab non-upgraded component
                    //      el = document.querySelector("#test");
                    //      el.someAttribute = "another-value";
                    //      // upgrade component
                    //      cutsomElements.define('my-component', MyComponent);
                    //    </script>
                    //  ```
                    //  In this case if we do not unshadow here and use the value of the shadowing property, attributeChangedCallback
                    //  will be called with `newValue = "some-value"` and will set the shadowed property (this.someAttribute = "another-value")
                    //  to the value that was set inline i.e. "some-value" from above example. When
                    //  the connectedCallback attempts to unshadow it will use "some-value" as the intial value rather than "another-value"
                    //
                    //  The case where the attribute was NOT set inline but was not set programmatically shall be handled/unshadowed
                    //  by connectedCallback as this attributeChangedCallback will not fire.
                    //
                    //  https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties
                    //
                    //  TODO(STENCIL-16) we should think about whether or not we actually want to be reflecting the attributes to
                    //  properties here given that this goes against best practices outlined here
                    //  https://developers.google.com/web/fundamentals/web-components/best-practices#avoid-reentrancy
                    if (this.hasOwnProperty(propName)) {
                        newValue = this[propName];
                        delete this[propName];
                    }
                    this[propName] = newValue === null && typeof this[propName] === 'boolean' ? false : newValue;
                });
            };
            // create an array of attributes to observe
            // and also create a map of html attribute name to js property name
            Cstr.observedAttributes = members
                .filter(([_, m]) => m[0] & 15 /* HasAttribute */) // filter to only keep props that should match attributes
                .map(([propName, m]) => {
                const attrName = m[1] || propName;
                attrNameToPropName.set(attrName, propName);
                if (m[0] & 512 /* ReflectAttr */) {
                    cmpMeta.$attrsToReflect$.push([propName, attrName]);
                }
                return attrName;
            });
        }
    }
    return Cstr;
};
const initializeComponent = async (elm, hostRef, cmpMeta, hmrVersionId, Cstr) => {
    // initializeComponent
    if ((hostRef.$flags$ & 32 /* hasInitializedComponent */) === 0) {
        {
            // we haven't initialized this element yet
            hostRef.$flags$ |= 32 /* hasInitializedComponent */;
            // lazy loaded components
            // request the component's implementation to be
            // wired up with the host element
            Cstr = loadModule(cmpMeta);
            if (Cstr.then) {
                // Await creates a micro-task avoid if possible
                const endLoad = uniqueTime();
                Cstr = await Cstr;
                endLoad();
            }
            if (!Cstr.isProxied) {
                // we've never proxied this Constructor before
                // let's add the getters/setters to its prototype before
                // the first time we create an instance of the implementation
                {
                    cmpMeta.$watchers$ = Cstr.watchers;
                }
                proxyComponent(Cstr, cmpMeta, 2 /* proxyState */);
                Cstr.isProxied = true;
            }
            const endNewInstance = createTime('createInstance', cmpMeta.$tagName$);
            // ok, time to construct the instance
            // but let's keep track of when we start and stop
            // so that the getters/setters don't incorrectly step on data
            {
                hostRef.$flags$ |= 8 /* isConstructingInstance */;
            }
            // construct the lazy-loaded component implementation
            // passing the hostRef is very important during
            // construction in order to directly wire together the
            // host element and the lazy-loaded instance
            try {
                new Cstr(hostRef);
            }
            catch (e) {
                consoleError(e);
            }
            {
                hostRef.$flags$ &= ~8 /* isConstructingInstance */;
            }
            {
                hostRef.$flags$ |= 128 /* isWatchReady */;
            }
            endNewInstance();
            fireConnectedCallback(hostRef.$lazyInstance$);
        }
        if (Cstr.style) {
            // this component has styles but we haven't registered them yet
            let style = Cstr.style;
            const scopeId = getScopeId(cmpMeta);
            if (!styles.has(scopeId)) {
                const endRegisterStyles = createTime('registerStyles', cmpMeta.$tagName$);
                registerStyle(scopeId, style);
                endRegisterStyles();
            }
        }
    }
    // we've successfully created a lazy instance
    const ancestorComponent = hostRef.$ancestorComponent$;
    const schedule = () => scheduleUpdate(hostRef, true);
    if (ancestorComponent && ancestorComponent['s-rc']) {
        // this is the intial load and this component it has an ancestor component
        // but the ancestor component has NOT fired its will update lifecycle yet
        // so let's just cool our jets and wait for the ancestor to continue first
        // this will get fired off when the ancestor component
        // finally gets around to rendering its lazy self
        // fire off the initial update
        ancestorComponent['s-rc'].push(schedule);
    }
    else {
        schedule();
    }
};
const fireConnectedCallback = (instance) => {
    {
        safeCall(instance, 'connectedCallback');
    }
};
const connectedCallback = (elm) => {
    if ((plt.$flags$ & 1 /* isTmpDisconnected */) === 0) {
        const hostRef = getHostRef(elm);
        const cmpMeta = hostRef.$cmpMeta$;
        const endConnected = createTime('connectedCallback', cmpMeta.$tagName$);
        if (!(hostRef.$flags$ & 1 /* hasConnected */)) {
            // first time this component has connected
            hostRef.$flags$ |= 1 /* hasConnected */;
            let hostId;
            {
                hostId = elm.getAttribute(HYDRATE_ID);
                if (hostId) {
                    if (supportsShadow && cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) {
                        const scopeId = addStyle(elm.shadowRoot, cmpMeta);
                        elm.classList.remove(scopeId + '-h', scopeId + '-s');
                    }
                    initializeClientHydrate(elm, cmpMeta.$tagName$, hostId, hostRef);
                }
            }
            if (!hostId) {
                // initUpdate
                // if the slot polyfill is required we'll need to put some nodes
                // in here to act as original content anchors as we move nodes around
                // host element has been connected to the DOM
                {
                    setContentReference(elm);
                }
            }
            {
                // find the first ancestor component (if there is one) and register
                // this component as one of the actively loading child components for its ancestor
                let ancestorComponent = elm;
                while ((ancestorComponent = ancestorComponent.parentNode || ancestorComponent.host)) {
                    // climb up the ancestors looking for the first
                    // component that hasn't finished its lifecycle update yet
                    if ((ancestorComponent.nodeType === 1 /* ElementNode */ &&
                        ancestorComponent.hasAttribute('s-id') &&
                        ancestorComponent['s-p']) ||
                        ancestorComponent['s-p']) {
                        // we found this components first ancestor component
                        // keep a reference to this component's ancestor component
                        attachToAncestor(hostRef, (hostRef.$ancestorComponent$ = ancestorComponent));
                        break;
                    }
                }
            }
            {
                initializeComponent(elm, hostRef, cmpMeta);
            }
        }
        else {
            // not the first time this has connected
            // reattach any event listeners to the host
            // since they would have been removed when disconnected
            addHostEventListeners(elm, hostRef, cmpMeta.$listeners$);
            // fire off connectedCallback() on component instance
            fireConnectedCallback(hostRef.$lazyInstance$);
        }
        endConnected();
    }
};
const setContentReference = (elm) => {
    // only required when we're NOT using native shadow dom (slot)
    // or this browser doesn't support native shadow dom
    // and this host element was NOT created with SSR
    // let's pick out the inner content for slot projection
    // create a node to represent where the original
    // content was first placed, which is useful later on
    const contentRefElm = (elm['s-cr'] = doc.createComment(''));
    contentRefElm['s-cn'] = true;
    elm.insertBefore(contentRefElm, elm.firstChild);
};
const disconnectedCallback = (elm) => {
    if ((plt.$flags$ & 1 /* isTmpDisconnected */) === 0) {
        const hostRef = getHostRef(elm);
        const instance = hostRef.$lazyInstance$ ;
        {
            if (hostRef.$rmListeners$) {
                hostRef.$rmListeners$.map((rmListener) => rmListener());
                hostRef.$rmListeners$ = undefined;
            }
        }
        {
            safeCall(instance, 'disconnectedCallback');
        }
    }
};
const proxyCustomElement = (Cstr, compactMeta) => {
    const cmpMeta = {
        $flags$: compactMeta[0],
        $tagName$: compactMeta[1],
    };
    {
        cmpMeta.$members$ = compactMeta[2];
    }
    {
        cmpMeta.$listeners$ = compactMeta[3];
    }
    {
        cmpMeta.$watchers$ = Cstr.$watchers$;
    }
    {
        cmpMeta.$attrsToReflect$ = [];
    }
    if (!supportsShadow && cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) {
        cmpMeta.$flags$ |= 8 /* needsShadowDomShim */;
    }
    const originalConnectedCallback = Cstr.prototype.connectedCallback;
    const originalDisconnectedCallback = Cstr.prototype.disconnectedCallback;
    Object.assign(Cstr.prototype, {
        __registerHost() {
            registerHost(this, cmpMeta);
        },
        connectedCallback() {
            connectedCallback(this);
            if (originalConnectedCallback) {
                originalConnectedCallback.call(this);
            }
        },
        disconnectedCallback() {
            disconnectedCallback(this);
            if (originalDisconnectedCallback) {
                originalDisconnectedCallback.call(this);
            }
        },
    });
    Cstr.is = cmpMeta.$tagName$;
    return proxyComponent(Cstr, cmpMeta, 1 /* isElementConstructor */ | 2 /* proxyState */);
};
const hostRefs = new WeakMap();
const getHostRef = (ref) => hostRefs.get(ref);
const registerHost = (elm, cmpMeta) => {
    const hostRef = {
        $flags$: 0,
        $hostElement$: elm,
        $cmpMeta$: cmpMeta,
        $instanceValues$: new Map(),
    };
    {
        hostRef.$onInstancePromise$ = new Promise((r) => (hostRef.$onInstanceResolve$ = r));
    }
    {
        hostRef.$onReadyPromise$ = new Promise((r) => (hostRef.$onReadyResolve$ = r));
        elm['s-p'] = [];
        elm['s-rc'] = [];
    }
    addHostEventListeners(elm, hostRef, cmpMeta.$listeners$);
    return hostRefs.set(elm, hostRef);
};
const isMemberInElement = (elm, memberName) => memberName in elm;
const consoleError = (e, el) => (0, console.error)(e, el);
const cmpModules = /*@__PURE__*/ new Map();
const loadModule = (cmpMeta, hostRef, hmrVersionId) => {
    // loadModuleImport
    const exportName = cmpMeta.$tagName$.replace(/-/g, '_');
    const bundleId = cmpMeta.$lazyBundleId$;
    const module = cmpModules.get(bundleId) ;
    if (module) {
        return module[exportName];
    }
    return Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require(
    /* webpackInclude: /\.entry\.js$/ */
    /* webpackExclude: /\.system\.entry\.js$/ */
    /* webpackMode: "lazy" */
    `./${bundleId}.entry.js${''}`)); }).then((importedModule) => {
        {
            cmpModules.set(bundleId, importedModule);
        }
        return importedModule[exportName];
    }, consoleError);
};
const styles = new Map();
const queueDomReads = [];
const queueDomWrites = [];
const queueTask = (queue, write) => (cb) => {
    queue.push(cb);
    if (!queuePending) {
        queuePending = true;
        if (write && plt.$flags$ & 4 /* queueSync */) {
            nextTick(flush);
        }
        else {
            plt.raf(flush);
        }
    }
};
const consume = (queue) => {
    for (let i = 0; i < queue.length; i++) {
        try {
            queue[i](performance.now());
        }
        catch (e) {
            consoleError(e);
        }
    }
    queue.length = 0;
};
const flush = () => {
    // always force a bunch of medium callbacks to run, but still have
    // a throttle on how many can run in a certain time
    // DOM READS!!!
    consume(queueDomReads);
    // DOM WRITES!!!
    {
        consume(queueDomWrites);
        if ((queuePending = queueDomReads.length > 0)) {
            // still more to do yet, but we've run out of time
            // let's let this thing cool off and try again in the next tick
            plt.raf(flush);
        }
    }
};
const nextTick = /*@__PURE__*/ (cb) => promiseResolve().then(cb);
const writeTask = /*@__PURE__*/ queueTask(queueDomWrites, true);

const ISO_DATE_FORMAT$1 = /^(\d{4})-(\d{2})-(\d{2})$/;
var DaysOfWeek$1;
(function (DaysOfWeek) {
  DaysOfWeek[DaysOfWeek["Sunday"] = 0] = "Sunday";
  DaysOfWeek[DaysOfWeek["Monday"] = 1] = "Monday";
  DaysOfWeek[DaysOfWeek["Tuesday"] = 2] = "Tuesday";
  DaysOfWeek[DaysOfWeek["Wednesday"] = 3] = "Wednesday";
  DaysOfWeek[DaysOfWeek["Thursday"] = 4] = "Thursday";
  DaysOfWeek[DaysOfWeek["Friday"] = 5] = "Friday";
  DaysOfWeek[DaysOfWeek["Saturday"] = 6] = "Saturday";
})(DaysOfWeek$1 || (DaysOfWeek$1 = {}));
function createDate$1(year, month, day) {
  var dayInt = parseInt(day, 10);
  var monthInt = parseInt(month, 10);
  var yearInt = parseInt(year, 10);
  const isValid = Number.isInteger(yearInt) && // all parts should be integers
    Number.isInteger(monthInt) &&
    Number.isInteger(dayInt) &&
    monthInt > 0 && // month must be 1-12
    monthInt <= 12 &&
    dayInt > 0 && // day must be 1-31
    dayInt <= 31 &&
    yearInt > 0;
  if (isValid) {
    return new Date(yearInt, monthInt - 1, dayInt);
  }
}
/**
 * @param value date string in ISO format YYYY-MM-DD
 */
function parseISODate$1(value) {
  if (!value) {
    return;
  }
  const matches = value.match(ISO_DATE_FORMAT$1);
  if (matches) {
    return createDate$1(matches[1], matches[2], matches[3]);
  }
}
/**
 * print date in format YYYY-MM-DD
 * @param date
 */
function printISODate$1(date) {
  if (!date) {
    return "";
  }
  var d = date.getDate().toString(10);
  var m = (date.getMonth() + 1).toString(10);
  var y = date.getFullYear().toString(10);
  // days are not zero-indexed, so pad if less than 10
  if (date.getDate() < 10) {
    d = `0${d}`;
  }
  // months *are* zero-indexed, pad if less than 9!
  if (date.getMonth() < 9) {
    m = `0${m}`;
  }
  return `${y}-${m}-${d}`;
}
/**
 * Compare if two dates are equal in terms of day, month, and year
 */
function isEqual$1(a, b) {
  if (a == null || b == null) {
    return false;
  }
  return a.getFullYear() === b.getFullYear() && a.getMonth() === b.getMonth() && a.getDate() === b.getDate();
}
function addDays$1(date, days) {
  var d = new Date(date);
  d.setDate(d.getDate() + days);
  return d;
}
function startOfWeek$1(date, firstDayOfWeek = DaysOfWeek$1.Monday) {
  var d = new Date(date);
  var day = d.getDay();
  var diff = (day < firstDayOfWeek ? 7 : 0) + day - firstDayOfWeek;
  d.setDate(d.getDate() - diff);
  return d;
}
function endOfWeek$1(date, firstDayOfWeek = DaysOfWeek$1.Monday) {
  var d = new Date(date);
  var day = d.getDay();
  var diff = (day < firstDayOfWeek ? -7 : 0) + 6 - (day - firstDayOfWeek);
  d.setDate(d.getDate() + diff);
  return d;
}
function startOfMonth$1(date) {
  return new Date(date.getFullYear(), date.getMonth(), 1);
}
function endOfMonth$1(date) {
  return new Date(date.getFullYear(), date.getMonth() + 1, 0);
}
function setMonth$1(date, month) {
  const d = new Date(date);
  d.setMonth(month);
  return d;
}
function setYear$1(date, year) {
  const d = new Date(date);
  d.setFullYear(year);
  return d;
}
/**
 * Check if date is within a min and max
 */
function inRange$1(date, min, max) {
  return clamp$1(date, min, max) === date;
}
/**
 * Ensures date is within range, returns min or max if out of bounds
 */
function clamp$1(date, min, max) {
  const time = date.getTime();
  if (min && min instanceof Date && time < min.getTime()) {
    return min;
  }
  if (max && max instanceof Date && time > max.getTime()) {
    return max;
  }
  return date;
}
/**
 * given start and end date, return an (inclusive) array of all dates in between
 * @param start
 * @param end
 */
function getDaysInRange$1(start, end) {
  const days = [];
  let current = start;
  while (!isEqual$1(current, end)) {
    days.push(current);
    current = addDays$1(current, 1);
  }
  days.push(current);
  return days;
}
/**
 * given a date, return an array of dates from a calendar perspective
 * @param date
 * @param firstDayOfWeek
 */
function getViewOfMonth$1(date, firstDayOfWeek = DaysOfWeek$1.Monday) {
  const start = startOfWeek$1(startOfMonth$1(date), firstDayOfWeek);
  const end = endOfWeek$1(endOfMonth$1(date), firstDayOfWeek);
  return getDaysInRange$1(start, end);
}
/**
 * Form random hash
 */
function chr4$1() {
  return Math.random()
    .toString(16)
    .slice(-4);
}
/**
 * Create random identifier with a prefix
 * @param prefix
 */
function createIdentifier$1(prefix) {
  return `${prefix}-${chr4$1()}${chr4$1()}-${chr4$1()}-${chr4$1()}-${chr4$1()}-${chr4$1()}${chr4$1()}${chr4$1()}`;
}

const DatePickerInput$1 = ({ onClick, dateFormatter, localization, name, formattedValue, valueAsDate, value, identifier, disabled, required, role, buttonRef, inputRef, onInput, onBlur, onFocus, }) => {
  return (h("div", { class: "duet-date__input-wrapper" },
    h("input", { class: "duet-date__input", value: formattedValue, placeholder: localization.placeholder, id: identifier, disabled: disabled, role: role, required: required ? true : undefined, "aria-autocomplete": "none", onInput: onInput, onFocus: onFocus, onBlur: onBlur, autoComplete: "off", ref: inputRef }),
    h("input", { type: "hidden", name: name, value: value }),
    h("button", { class: "duet-date__toggle", onClick: onClick, disabled: disabled, ref: buttonRef, type: "button" },
      h("span", { class: "duet-date__toggle-icon" },
        h("svg", { "aria-hidden": "true", height: "24", viewBox: "0 0 21 21", width: "24", xmlns: "http://www.w3.org/2000/svg" },
          h("g", { fill: "none", "fill-rule": "evenodd", transform: "translate(2 2)" },
            h("path", { d: "m2.5.5h12c1.1045695 0 2 .8954305 2 2v12c0 1.1045695-.8954305 2-2 2h-12c-1.1045695 0-2-.8954305-2-2v-12c0-1.1045695.8954305-2 2-2z", stroke: "currentColor", "stroke-linecap": "round", "stroke-linejoin": "round" }),
            h("path", { d: "m.5 4.5h16", stroke: "currentColor", "stroke-linecap": "round", "stroke-linejoin": "round" }),
            h("g", { fill: "currentColor" },
              h("circle", { cx: "8.5", cy: "8.5", r: "1" }),
              h("circle", { cx: "4.5", cy: "8.5", r: "1" }),
              h("circle", { cx: "12.5", cy: "8.5", r: "1" }),
              h("circle", { cx: "8.5", cy: "12.5", r: "1" }),
              h("circle", { cx: "4.5", cy: "12.5", r: "1" }),
              h("circle", { cx: "12.5", cy: "12.5", r: "1" }))))),
      h("span", { class: "duet-date__vhidden" },
        localization.buttonLabel,
        valueAsDate && (h("span", null,
          ", ",
          localization.selectedDateMessage,
          " ",
          dateFormatter.format(valueAsDate)))))));
};

const DatePickerDay$1 = ({ focusedDay, today, day, onDaySelect, onKeyboardNavigation, focusedDayRef, inRange, isSelected, dateFormatter, }) => {
  const isToday = isEqual$1(day, today);
  const isFocused = isEqual$1(day, focusedDay);
  const isDisabled = day.getMonth() !== focusedDay.getMonth();
  const isOutsideRange = !inRange;
  function handleClick(e) {
    onDaySelect(e, day);
  }
  return (h("button", { class: {
      "duet-date__day": true,
      "is-outside": isOutsideRange,
      "is-disabled": isDisabled,
      "is-today": isToday,
    }, tabIndex: isFocused ? 0 : -1, onClick: handleClick, onKeyDown: onKeyboardNavigation, disabled: isOutsideRange || isDisabled, type: "button", "aria-pressed": isSelected ? "true" : "false", ref: el => {
      if (isFocused && el && focusedDayRef) {
        focusedDayRef(el);
      }
    } },
    h("span", { "aria-hidden": "true" }, day.getDate()),
    h("span", { class: "duet-date__vhidden" }, dateFormatter.format(day))));
};

function chunk$1(array, chunkSize) {
  const result = [];
  for (let i = 0; i < array.length; i += chunkSize) {
    result.push(array.slice(i, i + chunkSize));
  }
  return result;
}
function mapWithOffset$1(array, startingOffset, mapFn) {
  return array.map((_, i) => {
    const adjustedIndex = (i + startingOffset) % array.length;
    return mapFn(array[adjustedIndex]);
  });
}
const DatePickerMonth$1 = ({ selectedDate, focusedDate, labelledById, localization, firstDayOfWeek, min, max, dateFormatter, onDateSelect, onKeyboardNavigation, focusedDayRef, }) => {
  const today = new Date();
  const days = getViewOfMonth$1(focusedDate, firstDayOfWeek);
  return (h("table", { class: "duet-date__table", "aria-labelledby": labelledById },
    h("thead", null,
      h("tr", null, mapWithOffset$1(localization.dayNames, firstDayOfWeek, dayName => (h("th", { class: "duet-date__table-header", scope: "col" },
        h("span", { "aria-hidden": "true" }, dayName.substr(0, 2)),
        h("span", { class: "duet-date__vhidden" }, dayName)))))),
    h("tbody", null, chunk$1(days, 7).map(week => (h("tr", { class: "duet-date__row" }, week.map(day => (h("td", { class: "duet-date__cell" },
      h(DatePickerDay$1, { day: day, today: today, focusedDay: focusedDate, isSelected: isEqual$1(day, selectedDate), inRange: inRange$1(day, min, max), onDaySelect: onDateSelect, dateFormatter: dateFormatter, onKeyboardNavigation: onKeyboardNavigation, focusedDayRef: focusedDayRef }))))))))));
};

const localization$1 = {
  buttonLabel: "Choose date",
  placeholder: "YYYY-MM-DD",
  selectedDateMessage: "Selected date is",
  prevMonthLabel: "Previous month",
  nextMonthLabel: "Next month",
  monthSelectLabel: "Month",
  yearSelectLabel: "Year",
  closeLabel: "Close window",
  keyboardInstruction: "You can use arrow keys to navigate dates",
  calendarHeading: "Choose a date",
  dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  monthNames: [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December",
  ],
  monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
  locale: "en-GB",
};

const isoAdapter$1 = { parse: parseISODate$1, format: printISODate$1 };

const duetDatePickerCss$1 = ".duet-date *,.duet-date *::before,.duet-date *::after{box-sizing:border-box;margin:0;width:auto}.duet-date{box-sizing:border-box;color:var(--duet-color-text);display:block;font-family:var(--duet-font);margin:0;position:relative;text-align:left;width:100%}.duet-date__input{-webkit-appearance:none;appearance:none;background:var(--duet-color-surface);border:1px solid var(--duet-color-text);border-radius:var(--duet-radius);color:var(--duet-color-text);float:none;font-family:var(--duet-font);font-size:100%;line-height:normal;padding:14px 60px 14px 14px;width:100%}.duet-date__input:focus{border-color:var(--duet-color-primary);box-shadow:0 0 0 1px var(--duet-color-primary);outline:0}.duet-date__input::-webkit-input-placeholder{color:var(--duet-color-placeholder);opacity:1}.duet-date__input:-moz-placeholder{color:var(--duet-color-placeholder);opacity:1}.duet-date__input:-ms-input-placeholder{color:var(--duet-color-placeholder)}.duet-date__input-wrapper{position:relative;width:100%}.duet-date__toggle{-moz-appearance:none;-webkit-appearance:none;-webkit-user-select:none;align-items:center;appearance:none;background:var(--duet-color-button);border:0;border-radius:0;border-bottom-right-radius:var(--duet-radius);border-top-right-radius:var(--duet-radius);box-shadow:inset 1px 0 0 rgba(0, 0, 0, 0.1);color:var(--duet-color-text);cursor:pointer;display:flex;height:calc(100% - 2px);justify-content:center;padding:0;position:absolute;right:1px;top:1px;user-select:none;width:48px;z-index:2}.duet-date__toggle:focus{box-shadow:0 0 0 2px var(--duet-color-primary);outline:0}.duet-date__toggle-icon{display:flex;flex-basis:100%;justify-content:center;align-items:center}.duet-date__dialog{display:flex;left:0;min-width:320px;opacity:0;position:absolute;top:100%;transform:scale(0.96) translateZ(0) translateY(-20px);transform-origin:top right;transition:transform 300ms ease, opacity 300ms ease, visibility 300ms ease;visibility:hidden;width:100%;will-change:transform, opacity, visibility;z-index:var(--duet-z-index)}@media (max-width: 35.9375em){.duet-date__dialog{background:var(--duet-color-overlay);bottom:0;position:fixed;right:0;top:0;transform:translateZ(0);transform-origin:bottom center}}.duet-date__dialog.is-left{left:auto;right:0;width:auto}.duet-date__dialog.is-active{opacity:1;transform:scale(1.0001) translateZ(0) translateY(0);visibility:visible}.duet-date__dialog-content{background:var(--duet-color-surface);border:1px solid rgba(0, 0, 0, 0.1);border-radius:var(--duet-radius);box-shadow:0 4px 10px 0 rgba(0, 0, 0, 0.1);margin-left:auto;margin-top:8px;max-width:310px;min-width:290px;padding:16px 16px 20px;position:relative;transform:none;width:100%;z-index:var(--duet-z-index)}@media (max-width: 35.9375em){.duet-date__dialog-content{border:0;border-radius:0;border-top-left-radius:var(--duet-radius);border-top-right-radius:var(--duet-radius);bottom:0;left:0;margin:0;max-width:none;min-height:26em;opacity:0;padding:0 8% 20px;position:absolute;transform:translateZ(0) translateY(100%);transition:transform 400ms ease, opacity 400ms ease, visibility 400ms ease;visibility:hidden;will-change:transform, opacity, visibility}.is-active .duet-date__dialog-content{opacity:1;transform:translateZ(0) translateY(0);visibility:visible}}.duet-date__table{border-collapse:collapse;border-spacing:0;color:var(--duet-color-text);font-size:1rem;font-weight:var(--duet-font-normal);line-height:1.25;text-align:center;width:100%}.duet-date__table-header{font-size:0.75rem;font-weight:var(--duet-font-bold);letter-spacing:1px;line-height:1.25;padding-bottom:8px;text-decoration:none;text-transform:uppercase}.duet-date__cell{text-align:center}.duet-date__day{-moz-appearance:none;-webkit-appearance:none;appearance:none;background:transparent;border:0;border-radius:50%;color:var(--duet-color-text);cursor:pointer;display:inline-block;font-family:var(--duet-font);font-size:0.875rem;font-variant-numeric:tabular-nums;font-weight:var(--duet-font-normal);height:36px;line-height:1.25;padding:0 0 1px;position:relative;text-align:center;vertical-align:middle;width:36px;z-index:1}.duet-date__day.is-today{box-shadow:0 0 0 1px var(--duet-color-primary);position:relative;z-index:200}.duet-date__day:hover::before,.duet-date__day.is-today::before{background:var(--duet-color-primary);border-radius:50%;bottom:0;content:\"\";left:0;opacity:0.06;position:absolute;right:0;top:0}.duet-date__day[aria-pressed=true],.duet-date__day:focus{background:var(--duet-color-primary);box-shadow:none;color:var(--duet-color-text-active);outline:0}.duet-date__day:active{background:var(--duet-color-primary);box-shadow:0 0 5px var(--duet-color-primary);color:var(--duet-color-text-active);z-index:200}.duet-date__day:focus{box-shadow:0 0 5px var(--duet-color-primary);z-index:200}.duet-date__day.is-disabled{background:transparent;box-shadow:none;color:var(--duet-color-text);cursor:default;opacity:0.5}.duet-date__day.is-disabled::before{display:none}.duet-date__day.is-outside{background:var(--duet-color-button);box-shadow:none;color:var(--duet-color-text);cursor:default;opacity:0.6;pointer-events:none}.duet-date__day.is-outside::before{display:none}.duet-date__header{align-items:center;display:flex;justify-content:space-between;margin-bottom:16px;width:100%}.duet-date__nav{white-space:nowrap}.duet-date__prev,.duet-date__next{-moz-appearance:none;-webkit-appearance:none;align-items:center;appearance:none;background:var(--duet-color-button);border:0;border-radius:50%;color:var(--duet-color-text);cursor:pointer;display:inline-flex;height:32px;justify-content:center;margin-left:8px;padding:0;transition:background-color 300ms ease;width:32px}@media (max-width: 35.9375em){.duet-date__prev,.duet-date__next{height:40px;width:40px}}.duet-date__prev:focus,.duet-date__next:focus{box-shadow:0 0 0 2px var(--duet-color-primary);outline:0}.duet-date__prev:active:focus,.duet-date__next:active:focus{box-shadow:none}.duet-date__prev:disabled,.duet-date__next:disabled{cursor:default;opacity:0.5}.duet-date__prev svg,.duet-date__next svg{margin:0 auto}.duet-date__select{display:inline-flex;margin-top:4px;position:relative}.duet-date__select span{margin-right:4px}.duet-date__select select{cursor:pointer;font-size:1rem;height:100%;left:0;opacity:0;position:absolute;top:0;width:100%;z-index:2}.duet-date__select select:focus+.duet-date__select-label{box-shadow:0 0 0 2px var(--duet-color-primary)}.duet-date__select-label{align-items:center;border-radius:var(--duet-radius);color:var(--duet-color-text);display:flex;font-size:1.25rem;font-weight:var(--duet-font-bold);line-height:1.25;padding:0 4px 0 8px;pointer-events:none;position:relative;width:100%;z-index:1}.duet-date__select-label svg{width:16px;height:16px}.duet-date__mobile{align-items:center;border-bottom:1px solid rgba(0, 0, 0, 0.12);display:flex;justify-content:space-between;margin-bottom:20px;margin-left:-10%;overflow:hidden;padding:12px 20px;position:relative;text-overflow:ellipsis;white-space:nowrap;width:120%}@media (min-width: 36em){.duet-date__mobile{border:0;margin:0;overflow:visible;padding:0;position:absolute;right:-8px;top:-8px;width:auto}}.duet-date__mobile-heading{display:inline-block;font-weight:var(--duet-font-bold);max-width:84%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}@media (min-width: 36em){.duet-date__mobile-heading{display:none}}.duet-date__close{-webkit-appearance:none;align-items:center;appearance:none;background:var(--duet-color-button);border:0;border-radius:50%;color:var(--duet-color-text);cursor:pointer;display:flex;height:24px;justify-content:center;padding:0;width:24px}@media (min-width: 36em){.duet-date__close{opacity:0}}.duet-date__close:focus{box-shadow:0 0 0 2px var(--duet-color-primary);outline:none}@media (min-width: 36em){.duet-date__close:focus{opacity:1}}.duet-date__close svg{margin:0 auto}.duet-date__vhidden{border:0;clip:rect(1px, 1px, 1px, 1px);height:1px;overflow:hidden;padding:0;position:absolute;top:0;width:1px}";

function range$1(from, to) {
  var result = [];
  for (var i = from; i <= to; i++) {
    result.push(i);
  }
  return result;
}
const keyCode$1 = {
  TAB: 9,
  ESC: 27,
  SPACE: 32,
  PAGE_UP: 33,
  PAGE_DOWN: 34,
  END: 35,
  HOME: 36,
  LEFT: 37,
  UP: 38,
  RIGHT: 39,
  DOWN: 40,
};
const DISALLOWED_CHARACTERS$1 = /[^0-9\.\/\-]+/g;
const TRANSITION_MS$1 = 300;
const DuetDatePicker$1 = class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.duetChange = createEvent(this, "duetChange", 7);
    this.duetBlur = createEvent(this, "duetBlur", 7);
    this.duetFocus = createEvent(this, "duetFocus", 7);
    /**
     * Own Properties
     */
    this.monthSelectId = createIdentifier$1("DuetDateMonth");
    this.yearSelectId = createIdentifier$1("DuetDateYear");
    this.dialogLabelId = createIdentifier$1("DuetDateLabel");
    this.initialTouchX = null;
    this.initialTouchY = null;
    /**
     * State() variables
     */
    this.activeFocus = false;
    this.focusedDay = new Date();
    this.open = false;
    /**
     * Public Property API
     */
    /**
     * Name of the date picker input.
     */
    this.name = "date";
    /**
     * Adds a unique identifier for the date picker input. Use this instead of html `id` attribute.
     */
    this.identifier = "";
    /**
     * Makes the date picker input component disabled. This prevents users from being able to
     * interact with the input, and conveys its inactive state to assistive technologies.
     */
    this.disabled = false;
    /**
     * Forces the opening direction of the calendar modal to be always left or right.
     * This setting can be useful when the input is smaller than the opening date picker
     * would be as by default the picker always opens towards right.
     */
    this.direction = "right";
    /**
     * Should the input be marked as required?
     */
    this.required = false;
    /**
     * Date value. Must be in IS0-8601 format: YYYY-MM-DD.
     */
    this.value = "";
    /**
     * Minimum date allowed to be picked. Must be in IS0-8601 format: YYYY-MM-DD.
     * This setting can be used alone or together with the max property.
     */
    this.min = "";
    /**
     * Maximum date allowed to be picked. Must be in IS0-8601 format: YYYY-MM-DD.
     * This setting can be used alone or together with the min property.
     */
    this.max = "";
    /**
     * Which day is considered first day of the week? `0` for Sunday, `1` for Monday, etc.
     * Default is Monday.
     */
    this.firstDayOfWeek = DaysOfWeek$1.Monday;
    /**
     * Button labels, day names, month names, etc, used for localization.
     * Default is English.
     */
    this.localization = localization$1;
    /**
     * Date adapter, for custom parsing/formatting.
     * Must be object with a `parse` function which accepts a `string` and returns a `Date`,
     * and a `format` function which accepts a `Date` and returns a `string`.
     * Default is IS0-8601 parsing and formatting.
     */
    this.dateAdapter = isoAdapter$1;
    /**
     * Local methods.
     */
    this.enableActiveFocus = () => {
      this.activeFocus = true;
    };
    this.disableActiveFocus = () => {
      this.activeFocus = false;
    };
    this.toggleOpen = (e) => {
      e.preventDefault();
      this.open ? this.hide(false) : this.show();
    };
    this.handleEscKey = (event) => {
      if (event.keyCode === keyCode$1.ESC) {
        this.hide();
      }
    };
    this.handleBlur = (event) => {
      event.stopPropagation();
      this.duetBlur.emit({
        component: "duet-date-picker",
      });
    };
    this.handleFocus = (event) => {
      event.stopPropagation();
      this.duetFocus.emit({
        component: "duet-date-picker",
      });
    };
    this.handleTouchStart = (event) => {
      const touch = event.changedTouches[0];
      this.initialTouchX = touch.pageX;
      this.initialTouchY = touch.pageY;
    };
    this.handleTouchMove = (event) => {
      event.preventDefault();
    };
    this.handleTouchEnd = (event) => {
      const touch = event.changedTouches[0];
      const distX = touch.pageX - this.initialTouchX; // get horizontal dist traveled
      const distY = touch.pageY - this.initialTouchY; // get vertical dist traveled
      const threshold = 70;
      const isHorizontalSwipe = Math.abs(distX) >= threshold && Math.abs(distY) <= threshold;
      const isDownwardsSwipe = Math.abs(distY) >= threshold && Math.abs(distX) <= threshold && distY > 0;
      if (isHorizontalSwipe) {
        this.addMonths(distX < 0 ? 1 : -1);
      }
      else if (isDownwardsSwipe) {
        this.hide(false);
        event.preventDefault();
      }
      this.initialTouchY = null;
      this.initialTouchX = null;
    };
    this.handleNextMonthClick = (event) => {
      event.preventDefault();
      this.addMonths(1);
    };
    this.handlePreviousMonthClick = (event) => {
      event.preventDefault();
      this.addMonths(-1);
    };
    this.handleFirstFocusableKeydown = (event) => {
      // this ensures focus is trapped inside the dialog
      if (event.keyCode === keyCode$1.TAB && event.shiftKey) {
        this.focusedDayNode.focus();
        event.preventDefault();
      }
    };
    this.handleKeyboardNavigation = (event) => {
      // handle tab separately, since it needs to be treated
      // differently to other keyboard interactions
      if (event.keyCode === keyCode$1.TAB && !event.shiftKey) {
        event.preventDefault();
        this.firstFocusableElement.focus();
        return;
      }
      var handled = true;
      switch (event.keyCode) {
        case keyCode$1.RIGHT:
          this.addDays(1);
          break;
        case keyCode$1.LEFT:
          this.addDays(-1);
          break;
        case keyCode$1.DOWN:
          this.addDays(7);
          break;
        case keyCode$1.UP:
          this.addDays(-7);
          break;
        case keyCode$1.PAGE_UP:
          if (event.shiftKey) {
            this.addYears(-1);
          }
          else {
            this.addMonths(-1);
          }
          break;
        case keyCode$1.PAGE_DOWN:
          if (event.shiftKey) {
            this.addYears(1);
          }
          else {
            this.addMonths(1);
          }
          break;
        case keyCode$1.HOME:
          this.startOfWeek();
          break;
        case keyCode$1.END:
          this.endOfWeek();
          break;
        default:
          handled = false;
      }
      if (handled) {
        event.preventDefault();
        this.enableActiveFocus();
      }
    };
    this.handleDaySelect = (_event, day) => {
      if (!inRange$1(day, parseISODate$1(this.min), parseISODate$1(this.max))) {
        return;
      }
      if (day.getMonth() === this.focusedDay.getMonth()) {
        this.setValue(day);
        this.hide();
      }
      else {
        this.setFocusedDay(day);
      }
    };
    this.handleMonthSelect = e => {
      this.setMonth(parseInt(e.target.value, 10));
    };
    this.handleYearSelect = e => {
      this.setYear(parseInt(e.target.value, 10));
    };
    this.handleInputChange = (e) => {
      const target = e.target;
      // clean up any invalid characters
      target.value = target.value.replace(DISALLOWED_CHARACTERS$1, "");
      const parsed = this.dateAdapter.parse(target.value, createDate$1);
      if (parsed || target.value === "") {
        this.setValue(parsed);
      }
    };
    this.processFocusedDayNode = (element) => {
      this.focusedDayNode = element;
      if (this.activeFocus && this.open) {
        setTimeout(() => element.focus(), 0);
      }
    };
  }
  connectedCallback() {
    this.createDateFormatters();
  }
  createDateFormatters() {
    this.dateFormatShort = new Intl.DateTimeFormat(this.localization.locale, { day: "numeric", month: "long" });
    this.dateFormatLong = new Intl.DateTimeFormat(this.localization.locale, {
      day: "numeric",
      month: "long",
      year: "numeric",
    });
  }
  /**
   * Component event handling.
   */
  handleDocumentClick(e) {
    if (!this.open) {
      return;
    }
    const target = e.target;
    // TODO: stopPropagation only on open??
    // the dialog and the button aren't considered clicks outside.
    // dialog for obvious reasons, but the button needs to be skipped
    // so that two things are possible:
    //
    // a) clicking again on the button when dialog is open should close the modal.
    //    without skipping the button here, we would see a click outside
    //    _and_ a click on the button, so the `open` state goes
    //    open -> close (click outside) -> open (click button)
    //
    // b) clicking another date picker's button should close the current calendar
    //    and open the new one. this means we can't stopPropagation() on the button itself
    //
    // this was the only satisfactory combination of things to get the above to work
    if (this.dialogWrapperNode.contains(target) || this.datePickerButton.contains(target)) {
      return;
    }
    this.hide(false);
  }
  /**
   * Public methods API
   */
  /**
   * Sets focus on the date picker's input. Use this method instead of the global `focus()`.
   */
  async setFocus() {
    return this.datePickerInput.focus();
  }
  /**
   * Show the calendar modal, moving focus to the calendar inside.
   */
  async show() {
    this.open = true;
    this.setFocusedDay(parseISODate$1(this.value) || new Date());
    clearTimeout(this.focusTimeoutId);
    this.focusTimeoutId = setTimeout(() => this.monthSelectNode.focus(), TRANSITION_MS$1);
  }
  /**
   * Hide the calendar modal. Set `moveFocusToButton` to false to prevent focus
   * returning to the date picker's button. Default is true.
   */
  async hide(moveFocusToButton = true) {
    this.open = false;
    // in cases where calendar is quickly shown and hidden
    // we should avoid moving focus to the button
    clearTimeout(this.focusTimeoutId);
    if (moveFocusToButton) {
      // iOS VoiceOver needs to wait for all transitions to finish.
      setTimeout(() => this.datePickerButton.focus(), TRANSITION_MS$1 + 200);
    }
  }
  addDays(days) {
    this.setFocusedDay(addDays$1(this.focusedDay, days));
  }
  addMonths(months) {
    this.setMonth(this.focusedDay.getMonth() + months);
  }
  addYears(years) {
    this.setYear(this.focusedDay.getFullYear() + years);
  }
  startOfWeek() {
    this.setFocusedDay(startOfWeek$1(this.focusedDay, this.firstDayOfWeek));
  }
  endOfWeek() {
    this.setFocusedDay(endOfWeek$1(this.focusedDay, this.firstDayOfWeek));
  }
  setMonth(month) {
    const min = setMonth$1(startOfMonth$1(this.focusedDay), month);
    const max = endOfMonth$1(min);
    const date = setMonth$1(this.focusedDay, month);
    this.setFocusedDay(clamp$1(date, min, max));
  }
  setYear(year) {
    const min = setYear$1(startOfMonth$1(this.focusedDay), year);
    const max = endOfMonth$1(min);
    const date = setYear$1(this.focusedDay, year);
    this.setFocusedDay(clamp$1(date, min, max));
  }
  setFocusedDay(day) {
    this.focusedDay = clamp$1(day, parseISODate$1(this.min), parseISODate$1(this.max));
  }
  setValue(date) {
    this.value = printISODate$1(date);
    this.duetChange.emit({
      component: "duet-date-picker",
      value: this.value,
      valueAsDate: date,
    });
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    const valueAsDate = parseISODate$1(this.value);
    const formattedDate = valueAsDate && this.dateAdapter.format(valueAsDate);
    const selectedYear = (valueAsDate || this.focusedDay).getFullYear();
    const focusedMonth = this.focusedDay.getMonth();
    const focusedYear = this.focusedDay.getFullYear();
    const minDate = parseISODate$1(this.min);
    const maxDate = parseISODate$1(this.max);
    const prevMonthDisabled = minDate != null && minDate.getMonth() === focusedMonth && minDate.getFullYear() === focusedYear;
    const nextMonthDisabled = maxDate != null && maxDate.getMonth() === focusedMonth && maxDate.getFullYear() === focusedYear;
    const minYear = minDate ? minDate.getFullYear() : selectedYear - 10;
    const maxYear = maxDate ? maxDate.getFullYear() : selectedYear + 10;
    return (h(Host, null, h("div", { class: "duet-date" }, h(DatePickerInput$1, { dateFormatter: this.dateFormatLong, value: this.value, valueAsDate: valueAsDate, formattedValue: formattedDate, onInput: this.handleInputChange, onBlur: this.handleBlur, onFocus: this.handleFocus, onClick: this.toggleOpen, name: this.name, disabled: this.disabled, role: this.role, required: this.required, identifier: this.identifier, localization: this.localization, buttonRef: element => (this.datePickerButton = element), inputRef: element => (this.datePickerInput = element) }), h("div", { class: {
        "duet-date__dialog": true,
        "is-left": this.direction === "left",
        "is-active": this.open,
      }, role: "dialog", "aria-modal": "true", "aria-hidden": this.open ? "false" : "true", "aria-labelledby": this.dialogLabelId, onTouchMove: this.handleTouchMove, onTouchStart: this.handleTouchStart, onTouchEnd: this.handleTouchEnd }, h("div", { class: "duet-date__dialog-content", onKeyDown: this.handleEscKey, ref: element => (this.dialogWrapperNode = element) }, h("div", { class: "duet-date__vhidden duet-date__instructions", "aria-live": "polite" }, this.localization.keyboardInstruction), h("div", { class: "duet-date__mobile", onFocusin: this.disableActiveFocus }, h("label", { class: "duet-date__mobile-heading" }, this.localization.calendarHeading), h("button", { class: "duet-date__close", ref: element => (this.firstFocusableElement = element), onKeyDown: this.handleFirstFocusableKeydown, onClick: () => this.hide(), type: "button" }, h("svg", { "aria-hidden": "true", fill: "currentColor", xmlns: "http://www.w3.org/2000/svg", width: "16", height: "16", viewBox: "0 0 24 24" }, h("path", { d: "M0 0h24v24H0V0z", fill: "none" }), h("path", { d: "M18.3 5.71c-.39-.39-1.02-.39-1.41 0L12 10.59 7.11 5.7c-.39-.39-1.02-.39-1.41 0-.39.39-.39 1.02 0 1.41L10.59 12 5.7 16.89c-.39.39-.39 1.02 0 1.41.39.39 1.02.39 1.41 0L12 13.41l4.89 4.89c.39.39 1.02.39 1.41 0 .39-.39.39-1.02 0-1.41L13.41 12l4.89-4.89c.38-.38.38-1.02 0-1.4z" })), h("span", { class: "duet-date__vhidden" }, this.localization.closeLabel))), h("div", { class: "duet-date__header", onFocusin: this.disableActiveFocus }, h("div", null, h("h2", { id: this.dialogLabelId, class: "duet-date__vhidden", "aria-live": "polite", "aria-atomic": "true" }, this.localization.monthNames[focusedMonth], " ", this.focusedDay.getFullYear()), h("label", { htmlFor: this.monthSelectId, class: "duet-date__vhidden" }, this.localization.monthSelectLabel), h("div", { class: "duet-date__select" }, h("select", { id: this.monthSelectId, class: "duet-date__select--month", ref: element => (this.monthSelectNode = element), onChange: this.handleMonthSelect }, this.localization.monthNames.map((month, i) => (h("option", { key: month, value: i, selected: i === focusedMonth }, month)))), h("div", { class: "duet-date__select-label", "aria-hidden": "true" }, h("span", null, this.localization.monthNamesShort[focusedMonth]), h("svg", { fill: "currentColor", xmlns: "http://www.w3.org/2000/svg", width: "16", height: "16", viewBox: "0 0 24 24" }, h("path", { d: "M8.12 9.29L12 13.17l3.88-3.88c.39-.39 1.02-.39 1.41 0 .39.39.39 1.02 0 1.41l-4.59 4.59c-.39.39-1.02.39-1.41 0L6.7 10.7c-.39-.39-.39-1.02 0-1.41.39-.38 1.03-.39 1.42 0z" })))), h("label", { htmlFor: this.yearSelectId, class: "duet-date__vhidden" }, this.localization.yearSelectLabel), h("div", { class: "duet-date__select" }, h("select", { id: this.yearSelectId, class: "duet-date__select--year", onChange: this.handleYearSelect }, range$1(minYear, maxYear).map(year => (h("option", { key: year, selected: year === focusedYear }, year)))), h("div", { class: "duet-date__select-label", "aria-hidden": "true" }, h("span", null, this.focusedDay.getFullYear()), h("svg", { fill: "currentColor", xmlns: "http://www.w3.org/2000/svg", width: "16", height: "16", viewBox: "0 0 24 24" }, h("path", { d: "M8.12 9.29L12 13.17l3.88-3.88c.39-.39 1.02-.39 1.41 0 .39.39.39 1.02 0 1.41l-4.59 4.59c-.39.39-1.02.39-1.41 0L6.7 10.7c-.39-.39-.39-1.02 0-1.41.39-.38 1.03-.39 1.42 0z" }))))), h("div", { class: "duet-date__nav" }, h("button", { class: "duet-date__prev", onClick: this.handlePreviousMonthClick, disabled: prevMonthDisabled, type: "button" }, h("svg", { "aria-hidden": "true", fill: "currentColor", xmlns: "http://www.w3.org/2000/svg", width: "21", height: "21", viewBox: "0 0 24 24" }, h("path", { d: "M14.71 15.88L10.83 12l3.88-3.88c.39-.39.39-1.02 0-1.41-.39-.39-1.02-.39-1.41 0L8.71 11.3c-.39.39-.39 1.02 0 1.41l4.59 4.59c.39.39 1.02.39 1.41 0 .38-.39.39-1.03 0-1.42z" })), h("span", { class: "duet-date__vhidden" }, this.localization.prevMonthLabel)), h("button", { class: "duet-date__next", onClick: this.handleNextMonthClick, disabled: nextMonthDisabled, type: "button" }, h("svg", { "aria-hidden": "true", fill: "currentColor", xmlns: "http://www.w3.org/2000/svg", width: "21", height: "21", viewBox: "0 0 24 24" }, h("path", { d: "M9.29 15.88L13.17 12 9.29 8.12c-.39-.39-.39-1.02 0-1.41.39-.39 1.02-.39 1.41 0l4.59 4.59c.39.39.39 1.02 0 1.41L10.7 17.3c-.39.39-1.02.39-1.41 0-.38-.39-.39-1.03 0-1.42z" })), h("span", { class: "duet-date__vhidden" }, this.localization.nextMonthLabel)))), h(DatePickerMonth$1, { dateFormatter: this.dateFormatShort, selectedDate: valueAsDate, focusedDate: this.focusedDay, onDateSelect: this.handleDaySelect, onKeyboardNavigation: this.handleKeyboardNavigation, labelledById: this.dialogLabelId, localization: this.localization, firstDayOfWeek: this.firstDayOfWeek, focusedDayRef: this.processFocusedDayNode, min: minDate, max: maxDate }))))));
  }
  get element() { return this; }
  static get watchers() { return {
    "localization": ["createDateFormatters"]
  }; }
  static get style() { return duetDatePickerCss$1; }
};

const DuetDatePicker$1$1 = /*@__PURE__*/proxyCustomElement(DuetDatePicker$1, [0,"duet-date-picker",{"name":[1],"identifier":[1],"disabled":[516],"role":[1],"direction":[1],"required":[4],"value":[513],"min":[1],"max":[1],"firstDayOfWeek":[2,"first-day-of-week"],"localization":[16],"dateAdapter":[16],"activeFocus":[32],"focusedDay":[32],"open":[32]},[[6,"click","handleDocumentClick"]]]);

const datePickerCss = "duet-date-picker{--duet-color-primary:var(--scl-color-primary, #e20074);--duet-color-text:var(--scl-color-text-standard, #1a1a1a);--duet-color-overlay:var(--scl-color-background-standard, #ffffff);--duet-font:var(--scl-font-family-sans);--duet-font-normal:var(--scl-font-weight-regular);--duet-font-bold:var(--scl-font-weight-medium);--duet-color-placeholder:var(--scl-color-grey-60);--duet-radius:var(--scl-radius-8);--duet-color-text-active:var(--scl-color-white, #ffffff);--duet-color-button:var(--scl-color-background-standard, #ffffff);--duet-color-surface:var(--scl-color-background-standard, #ffffff);--duet-z-index:600;--spacing-heading:0 0 var(--scl-spacing-16) 0;--font-size-heading:var(--scl-font-size-20);--font-size-select-label:var(--scl-font-size-16);--radius-day:var(--scl-radius-12);--font-size-day:var(--scl-font-size-16);--font-size-table-header:var(--font-size-day);--font-weight-table-header:var(--scl-font-weight-extrabold)}duet-date-picker .duet-date__input{border:var(--scl-spacing-1) solid var(--scl-color-text-standard);padding:var(--scl-spacing-12) var(--scl-spacing-12) 0 var(--scl-spacing-12);height:var(--scl-spacing-48)}duet-date-picker .duet-date__input:hover{border:var(--scl-spacing-1) solid var(--scl-color-primary-hover)}duet-date-picker .duet-date__input:focus{box-shadow:0 0 0 var(--scl-spacing-2) var(--scl-color-focus);border:var(--scl-spacing-1) solid var(--scl-color-text-standard)}duet-date-picker .duet-date__toggle{border-radius:0 var(--duet-radius) var(--duet-radius) 0}duet-date-picker .duet-date__toggle:focus{box-shadow:0 0 0 var(--scl-spacing-2) var(--scl-color-focus)}duet-date-picker .duet-date__toggle:hover scale-icon-content-calendar{color:var(--scl-color-primary-hover)}duet-date-picker .duet-date__toggle:active scale-icon-content-calendar{color:var(--scl-color-primary-active)}@media screen and (forced-colors: active), (-ms-high-contrast: active){duet-date-picker .duet-date__toggle scale-icon-content-calendar,duet-date-picker .duet-date__header .duet-date__select-label,duet-date-picker .duet-date__header .duet-date__nav svg{color:var(--scl-color-white)}duet-date-picker .duet-date__day[aria-pressed='true']{border:1px solid transparent}duet-date-picker .duet-date__day.is-today::before{border:2px solid transparent}}.scale-date-picker{position:relative}.scale-date-picker .date-picker__helper-text{font-weight:var(--scl-font-weight-bold);transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);padding-left:var(--scl-spacing-12);font-size:var(--scl-font-size-12);line-height:var(--scl-font-line-height-133);color:var(--scl-color-blue-70)}.scale-date-picker .date-picker__meta{display:flex;justify-content:space-between;margin-top:var(--scl-spacing-4)}.scale-date-picker .date-picker__label{top:0;left:0;color:var(--scl-color-grey-60);display:flex;z-index:10;position:absolute;transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);pointer-events:none;font-size:var(--scl-spacing-16);transform:translate(\n    var(--scl-spacing-12),\n    calc((var(--scl-spacing-48) - var(--scl-font-size-16)) / 2)\n  );font-weight:var(--scl-font-weight-medium)}duet-date-picker .duet-date__input::placeholder{visibility:hidden;color:transparent;transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard)}.scale-date-picker.scale-date-picker--focus .date-picker__label,.scale-date-picker.animated .date-picker__label{color:var(--scl-color-grey-60);transform:translate(var(--scl-spacing-12), var(--scl-spacing-8));transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);font-size:var(--scl-font-size-10);font-weight:var(--scl-font-weight-bold)}.scale-date-picker.animated .duet-date__input::placeholder,duet-date-picker .duet-date__input:focus::placeholder{visibility:initial;color:var(--scl-color-grey-60);transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard)}.scale-date-picker--status-error duet-date-picker .duet-date__input{border:var(--scl-spacing-2) solid var(--scl-color-text-error)}.scale-date-picker--status-error duet-date-picker .duet-date__input:hover{border:var(--scl-spacing-2) solid var(--scl-color-primary-hover)}.scale-date-picker--status-error duet-date-picker .duet-date__input:focus{border:var(--scl-spacing-2) solid var(--scl-color-primary-hover)}.scale-date-picker--status-error .date-picker__helper-text{color:var(--scl-color-text-error)}.scale-date-picker--status-error .duet-date__toggle{height:44px;margin-top:var(--scl-spacing-1);margin-right:var(--scl-spacing-1);width:47px}.scale-date-picker--size-small .duet-date__input{height:var(--scl-spacing-40)}.scale-date-picker--size-small .date-picker__label{top:0;left:0;color:var(--scl-color-grey-60);display:flex;z-index:10;position:absolute;transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);pointer-events:none;font-size:var(--scl-font-size-16);transform:translate(\n    var(--scl-spacing-12),\n    calc((var(--scl-spacing-40) - var(--scl-font-size-16)) / 2)\n  );font-weight:var(--scl-font-weight-medium)}.scale-date-picker--size-small.scale-date-picker--focus .date-picker__label,.scale-date-picker--size-small.animated .date-picker__label{color:var(--scl-color-grey-60);transform:translate(var(--scl-spacing-12), var(--scl-spacing-4));transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);font-size:var(--scl-font-size-10);font-weight:var(--scl-font-weight-medium)}.scale-date-picker--size-small.scale-date-picker--status-error .duet-date__toggle{height:36px}.scale-date-picker.scale-date-picker--disabled,.scale-date-picker.scale-date-picker--disabled input,.scale-date-picker.scale-date-picker--disabled input:hover,.scale-date-picker.scale-date-picker--disabled .duet-date__toggle,.scale-date-picker.scale-date-picker--disabled .duet-date__toggle:hover,.scale-date-picker.scale-date-picker--disabled .duet-date__toggle:hover scale-icon-content-calendar,.scale-date-picker.scale-date-picker--disabled .date-picker__helper-text{cursor:not-allowed;border-color:var(--scl-color-grey-20);color:var(--scl-color-grey-20);background:var(--scl-color-background-standard)}.scale-date-picker.scale-date-picker--disabled .date-picker__label{color:var(--scl-color-grey-20)}.scale-date-picker__popup-heading{text-align:center;padding:var(--spacing-heading);font-size:var(--font-size-heading)}duet-date-picker .duet-date__dialog-content{border:none;box-shadow:var(--scl-shadow-level-4)}duet-date-picker .duet-date__select{margin-top:0}duet-date-picker .duet-date__select:nth-of-type(1){margin-right:var(--scl-spacing-8)}duet-date-picker .duet-date__select-label{font-size:var(--font-size-select-label)}duet-date-picker .duet-date__select-label svg{width:16px;height:16px}duet-date-picker .duet-date__select select:focus+.duet-date__select-label{box-shadow:0 0 0 var(--scl-spacing-2) var(--scl-color-focus)}duet-date-picker .duet-date__select select:hover+.duet-date__select-label{background:var(--scl-color-primary-hover);color:var(--scl-color-white)}duet-date-picker .duet-date__select select:active+.duet-date__select-label{box-shadow:none;background:var(--scl-color-primary-active);color:var(--scl-color-white)}duet-date-picker .duet-date__prev,duet-date-picker .duet-date__next{border-radius:var(--duet-radius);margin-left:var(--scl-spacing-2)}duet-date-picker .duet-date__prev svg,duet-date-picker .duet-date__next svg{height:16px;width:16px}duet-date-picker .duet-date__prev:hover,duet-date-picker .duet-date__next:hover{background:var(--scl-color-primary-hover);color:var(--scl-color-white)}duet-date-picker .duet-date__prev:active,duet-date-picker .duet-date__next:active{background:var(--scl-color-primary-active);color:var(--scl-color-white)}duet-date-picker .duet-date__prev:focus,duet-date-picker .duet-date__next:focus{box-shadow:0 0 0 var(--scl-spacing-2) var(--scl-color-focus)}duet-date-picker .duet-date__close{border-radius:var(--duet-radius)}duet-date-picker .duet-date__close:focus{box-shadow:0 0 0 var(--scl-spacing-2) var(--scl-color-focus)}duet-date-picker .duet-date__table-header{font-size:var(--font-size-table-header);font-weight:var(--font-weight-table-header)}duet-date-picker .duet-date__day{padding:0;border-radius:var(--radius-day);font-size:var(--font-size-day)}duet-date-picker .duet-date__day.is-today{box-shadow:none}duet-date-picker .duet-date__day.is-disabled{opacity:1;color:var(--scl-color-grey-20);pointer-events:none}duet-date-picker .duet-date__day.is-today::before{content:'';display:inline-block;width:var(--scl-spacing-4);height:var(--scl-spacing-4);border-radius:var(--scl-radius-8);background-color:var(--scl-color-primary);opacity:1;left:var(--scl-spacing-16);top:27px}duet-date-picker [aria-selected='true'] .duet-date__day.is-today::before,duet-date-picker .duet-date__day.is-today:hover::before{background-color:var(--scl-color-background-standard)}duet-date-picker .duet-date__day.is-today.is-disabled::before{background-color:var(--scl-radius-8)}duet-date-picker .duet-date__day:focus{box-shadow:0 0 0 var(--scl-spacing-2) var(--scl-color-focus);background:var(--scl-color-background-standard);color:var(--scl-color-primary)}duet-date-picker .duet-date__day:hover{background:var(--scl-color-primary-hover);color:var(--scl-color-white)}duet-date-picker .duet-date__day:active{box-shadow:none;background:var(--scl-color-primary-active);color:var(--scl-color-white)}duet-date-picker .duet-date__day:hover::before{border-radius:var(--duet-radius);opacity:1;background:transparent;color:var(--scl-color-white)}@media (max-width: 35.9375em) and (orientation: landscape){duet-date-picker .duet-date__dialog-content{zoom:70%}}";

let i$d = 0;
if (typeof window !== 'undefined' &&
  typeof window.Audio !== 'undefined' &&
  !customElements.get('duet-date-picker')) {
  customElements.define('duet-date-picker', DuetDatePicker$1$1);
}
class DatePicker {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.scaleChange = createEvent$1(this, "scale-change", 7);
    this.scaleChangeLegacy = createEvent$1(this, "scaleChange", 7);
    this.scaleBlur = createEvent$1(this, "scale-blur", 7);
    this.scaleBlurLegacy = createEvent$1(this, "scaleBlur", 7);
    this.scaleFocus = createEvent$1(this, "scale-focus", 7);
    this.scaleFocusLegacy = createEvent$1(this, "scaleFocus", 7);
    /**
     * Name of the date picker input.
     */
    this.name = 'date';
    /** @deprecated in v3 in favor of localization.calendarHeading */
    this.popupTitle = 'Pick a date';
    /**
     * Makes the date picker input component disabled. This prevents users from being able to
     * interact with the input, and conveys its inactive state to assistive technologies.
     */
    this.disabled = false;
    /**
     * Forces the opening direction of the calendar modal to be always left or right.
     * This setting can be useful when the input is smaller than the opening date picker
     * would be as by default the picker always opens towards right.
     */
    this.direction = 'right';
    /**
     * Should the input be marked as required?
     */
    this.required = false;
    /**
     * Date value. Must be in IS0-8601 format: YYYY-MM-DD.
     */
    this.value = '';
    /**
     * Minimum date allowed to be picked. Must be in IS0-8601 format: YYYY-MM-DD.
     * This setting can be used alone or together with the max property.
     */
    this.min = '';
    /**
     * Maximum date allowed to be picked. Must be in IS0-8601 format: YYYY-MM-DD.
     * This setting can be used alone or together with the min property.
     */
    this.max = '';
    /** (optional) Helper text */
    this.helperText = '';
    /** @deprecated - invalid should replace status */
    this.status = '';
    /** (optional) Label */
    this.label = '';
    /** (optional) Size */
    this.size = '';
    /** Whether the input element has focus */
    this.hasFocus = false;
    /** Whether the input element has value */
    this.hasValue = this.value != null && this.value !== '';
    this.helperTextId = `helper-message-${i$d}`;
    /**
     * Fix JAWS reading the day twice, e.g. "19 19. August"
     * It'd probably make sense to open a PR in duetds/date-picker
     * https://github.com/duetds/date-picker/blob/master/src/components/duet-date-picker/date-picker-day.tsx#L61
     */
    this.adjustButtonsLabelsForA11y = () => {
      const table = this.hostElement.querySelector('.duet-date__table');
      const options = { subtree: true, childList: true, attributes: true };
      const callback = () => {
        this.mo.disconnect(); // avoid a feedback loop
        const buttons = Array.from(this.hostElement.querySelectorAll('.duet-date__day'));
        buttons.forEach((button) => {
          const span = button.querySelector('.duet-date__vhidden');
          const text = span.textContent;
          button.setAttribute('aria-label', text);
          span.setAttribute('hidden', 'hidden');
        });
        this.mo.observe(table, options);
      };
      this.mo = new MutationObserver(callback);
      callback();
    };
  }
  /**
   * Public methods API
   */
  /**
   * Sets focus on the date picker's input. Use this method instead of the global `focus()`.
   */
  async setFocus() {
    return this.duetInput.setFocus();
  }
  /**
   * Show the calendar modal, moving focus to the calendar inside.
   */
  async show() {
    return this.duetInput.show();
  }
  /**
   * Hide the calendar modal. Set `moveFocusToButton` to false to prevent focus
   * returning to the date picker's button. Default is true.
   */
  async hide(moveFocusToButton = true) {
    return this.duetInput.hide(moveFocusToButton);
  }
  /**
   * Watch `value` property for changes and update `hasValue` based on that.
   */
  onValueChange() {
    this.hasValue = this.value != null && this.value !== '';
    // @ts-ignore
    this.duetInput.querySelector('.duet-date__input').value = this.value;
  }
  componentWillLoad() {
    if (this.popupTitle !== 'Pick a date') {
      statusNote({
        tag: 'deprecated',
        message: 'Property "popupTitle" is deprecate in favor of localization.calendarHeading.',
        type: 'warn',
        source: this.hostElement,
      });
    }
    this.handleKeyPress = this.handleKeyPress.bind(this);
    if (this.identifier == null) {
      this.identifier = 'scale-date-picker-' + i$d++;
    }
  }
  componentDidLoad() {
    var _a, _b;
    const calendarIcon = this.duetInput.querySelector('.duet-date__toggle-icon');
    if (calendarIcon) {
      calendarIcon.replaceWith(document.createElement('scale-icon-content-calendar'));
    }
    const navLeftIcon = this.duetInput.querySelector('.duet-date__prev svg');
    if (navLeftIcon) {
      navLeftIcon.replaceWith(document.createElement('scale-icon-navigation-left'));
    }
    const navRightIcon = this.duetInput.querySelector('.duet-date__next svg');
    if (navRightIcon) {
      navRightIcon.replaceWith(document.createElement('scale-icon-navigation-right'));
    }
    const selectIcon = this.duetInput.querySelectorAll('.duet-date__select-label svg');
    if (selectIcon) {
      Array.from(selectIcon).forEach((icon) => icon.replaceWith(document.createElement('scale-icon-navigation-collapse-down')));
    }
    const input = this.duetInput.querySelector('.duet-date__input');
    if (input) {
      input.addEventListener('keyup', this.handleKeyPress);
    }
    if (input && this.helperText) {
      input.setAttribute('aria-describedby', this.helperTextId);
    }
    if (input && (this.status === 'error' || this.invalid)) {
      input.setAttribute('aria-invalid', 'true');
    }
    // Remove existing <h2> with `{Month} {Year}` text
    const dialog = this.hostElement.querySelector('.duet-date__dialog');
    let duetHeadingId = '';
    if (dialog) {
      duetHeadingId = dialog.getAttribute('aria-labelledby');
      if (duetHeadingId) {
        const duetHeading = this.hostElement.querySelector(`#${duetHeadingId}`);
        if (duetHeading) {
          duetHeading.parentElement.removeChild(duetHeading);
        }
      }
    }
    // Add custom <h2> heading
    const dialogContent = this.hostElement.querySelector('.duet-date__dialog-content');
    if (dialogContent) {
      const calendarHeading = ((_a = this.localization) === null || _a === void 0 ? void 0 : _a.calendarHeading) || this.popupTitle || 'Pick a date';
      const heading = document.createElement('h2');
      heading.id = duetHeadingId; // link to .duet-date__dialog[aria-labelledby]
      heading.className = 'scale-date-picker__popup-heading';
      heading.innerHTML = calendarHeading;
      dialogContent.insertBefore(heading, dialogContent.firstChild);
    }
    // truncate table headings to a single character
    const tableHeadings = this.hostElement.querySelectorAll('.duet-date__table-header span[aria-hidden="true"]');
    if (tableHeadings) {
      Array.from(tableHeadings).forEach((item) => (item.innerHTML = item.innerHTML[0]));
    }
    const today = this.hostElement.querySelector('.duet-date__day.is-today span.duet-date__vhidden');
    if (today) {
      today.innerHTML = `${today.innerHTML}, ${((_b = this.localization) === null || _b === void 0 ? void 0 : _b.today) || 'today'}`;
    }
    this.adjustButtonsLabelsForA11y();
  }
  componentDidRender() {
    if (this.status !== '') {
      statusNote({
        tag: 'deprecated',
        message: 'Property "status" is deprecated. Please use the "invalid" property!',
        type: 'warn',
        source: this.hostElement,
      });
    }
  }
  disconnectedCallback() {
    const input = this.duetInput.querySelector('.duet-date__input');
    if (input) {
      input.removeEventListener('keyup', this.handleKeyPress);
    }
    if (this.mo) {
      this.mo.disconnect();
    }
  }
  handleKeyPress(e) {
    this.hasValue = e.target.value != null && e.target.value !== '';
  }
  render() {
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync("div", { class: classnames('scale-date-picker', this.status && `scale-date-picker--status-${this.status}`, this.invalid && `scale-date-picker--status-error`, this.hasFocus && 'scale-date-picker--focus', this.disabled && 'scale-date-picker--disabled', this.size && `scale-date-picker--size-${this.size}`, this.hasValue && 'animated') }, hAsync("label", { class: "date-picker__label", htmlFor: this.identifier }, this.label), hAsync("duet-date-picker", { onDuetChange: (e) => {
        emitEvent$1(this, 'scaleChange', e.detail);
        this.handleKeyPress(e);
      }, onDuetFocus: (e) => {
        emitEvent$1(this, 'scaleFocus', e.detail);
        this.hasFocus = true;
      }, onDuetBlur: (e) => {
        emitEvent$1(this, 'scaleBlur', e.detail);
        this.hasFocus = false;
      }, name: this.name, identifier: this.identifier, role: this.role, direction: this.direction, required: this.required, min: this.min, max: this.max, firstDayOfWeek: this.firstDayOfWeek, localization: this.localization, dateAdapter: this.dateAdapter, disabled: this.disabled, value: this.value, ref: (element) => (this.duetInput = element) }), !!this.helperText && (hAsync("div", { class: "date-picker__meta", id: this.helperTextId, "aria-live": "polite", "aria-relevant": "additions removals" }, hAsync("div", { class: "date-picker__helper-text" }, this.helperText))))));
  }
  get hostElement() { return getElement$1(this); }
  static get watchers() { return {
    "value": ["onValueChange"]
  }; }
  static get style() { return datePickerCss; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-date-picker",
    "$members$": {
      "name": [1],
      "popupTitle": [1, "popup-title"],
      "identifier": [1025],
      "disabled": [516],
      "role": [1],
      "direction": [1],
      "required": [4],
      "value": [1537],
      "min": [1],
      "max": [1],
      "firstDayOfWeek": [8, "first-day-of-week"],
      "localization": [16],
      "dateAdapter": [8, "date-adapter"],
      "helperText": [1, "helper-text"],
      "status": [1],
      "invalid": [4],
      "label": [1],
      "size": [1],
      "styles": [1],
      "hasFocus": [32],
      "hasValue": [32],
      "setFocus": [64],
      "show": [64],
      "hide": [64]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["disabled", "disabled"], ["value", "value"]]
  }; }
}

const iconCss$1q = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class DeviceAddDevice {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M8.5 6a3 3 0 013 3v3.22a7.97 7.97 0 00-.335 10.155A3 3 0 018.5 24h-5a3 3 0 01-3-3V9a3 3 0 013-3zm9 5a6.5 6.5 0 110 13 6.5 6.5 0 010-13zm0 1.5a5 5 0 100 10 5 5 0 000-10zM6 19.75a1 1 0 100 2 1 1 0 000-2zm11.5-5.5a.75.75 0 01.75.75v1.75H20a.75.75 0 010 1.5h-1.75V20a.75.75 0 11-1.5 0v-1.75H15a.75.75 0 110-1.5h1.75V15a.75.75 0 01.75-.75zM17.5 1a3 3 0 013 3v6.085a8 8 0 00-7.5.8V9a4.5 4.5 0 00-4.5-4.5H3.97V4a3 3 0 013-3zm-10 6.5h-3V9h3V7.5z" }))) : (hAsync("g", null, hAsync("path", { d: "M8 6c1.65 0 3 1.35 3 3v3.25c-.65.7-1.15 1.55-1.5 2.5V9c0-.85-.65-1.5-1.5-1.5H7V9H4V7.5H3c-.85 0-1.5.65-1.5 1.5v12c0 .85.65 1.5 1.5 1.5h5c.85 0 1.5-.65 1.5-1.5v-.75c.25.75.65 1.45 1.15 2.1-.5 1-1.5 1.65-2.65 1.65H3c-1.65 0-3-1.35-3-3V9c0-1.65 1.35-3 3-3zm9 5c3.6 0 6.5 2.9 6.5 6.5S20.6 24 17 24s-6.5-2.9-6.5-6.5S13.4 11 17 11zM5.5 19.75a1 1 0 110 2 1 1 0 010-2zm11.5-5.5c-.4 0-.75.35-.75.75v1.75H14.5c-.4 0-.75.35-.75.75s.35.75.75.75h1.75V20c0 .4.35.75.75.75s.75-.35.75-.75v-1.75h1.75c.4 0 .75-.35.75-.75s-.35-.75-.75-.75h-1.75V15c0-.4-.35-.75-.75-.75zM17 1c1.65 0 3 1.35 3 3v6.1c-.5-.2-1-.35-1.5-.45V4c0-.85-.65-1.5-1.5-1.5H6.5C5.65 2.5 5 3.15 5 4v.5H3.5V4c0-1.65 1.35-3 3-3z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1q; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-device-add-device",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1p = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class DeviceCamera {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M21.78 7L20 8.785V5H2v1.5H.5v4H2V17a3 3 0 003 3h12a3 3 0 003-3v-1.785L21.78 17h1.72V7h-1.72zM9 15.775v-6.55l5 3.275-5 3.275z" }))) : (hAsync("g", null, hAsync("path", { d: "M20 5v3.8L21.8 7h1.7v10h-1.7L20 15.2V17c0 1.65-1.35 3-3 3H5c-1.65 0-3-1.35-3-3v-6.5H.5v-4H2V5zm-1.5 1.5h-15V17c0 .85.65 1.5 1.5 1.5h12c.85 0 1.5-.65 1.5-1.5zM9 9.25l5 3.25-5 3.25zm13-.35l-2 2v2.2l2 2z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1p; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-device-camera",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1o = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class DeviceChangeCamera {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M13.777 1.154l.103.011A11 11 0 0123 12a10.965 10.965 0 01-4.1 8.555L20.5 23h-6.685l2.685-6.13 1.57 2.44a9.5 9.5 0 00-4.46-16.645.762.762 0 01.27-1.5zM10.185 1L7.5 7.13 5.93 4.715a9.5 9.5 0 004.46 16.645l-.015-.025a.762.762 0 01-.27 1.5 11 11 0 01-5-19.385L3.5 1h6.685zM14.5 9v1.765L15.825 9.5h.675V14h-.675L14.5 12.735V13a1.5 1.5 0 01-1.5 1.5H9.5A1.5 1.5 0 018 13V9h6.5z" }))) : (hAsync("g", null, hAsync("path", { d: "M13.794 1.141l.106.009C19.05 2.1 23 6.6 23 12c0 3.45-1.6 6.55-4.1 8.6l1.6 2.4h-6.7l2.7-6.1 1.55 2.4c2.1-1.75 3.45-4.35 3.45-7.3 0-4.65-3.4-8.55-7.9-9.4-.45-.05-.75-.55-.55-1 .1-.35.5-.5.85-.45zM10.2 1L7.55 7.1l-1.6-2.4C3.85 6.45 2.5 9.05 2.5 12c0 4.65 3.4 8.55 7.9 9.35.45.05.75.55.55 1.05-.1.35-.5.5-.85.45C4.95 21.9 1 17.4 1 12c0-3.45 1.6-6.55 4.1-8.55L3.5 1zm4.3 8v1.75l1.35-1.25h.65V14h-.65l-1.35-1.25V13c0 .85-.65 1.5-1.5 1.5H9.5c-.85 0-1.5-.65-1.5-1.5V9z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1o; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-device-change-camera",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1n = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class DeviceComputer {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M24 17a2 2 0 01-2 2H2a2 2 0 01-2-2zM18.5 4.25a2.245 2.245 0 012.25 2.25v9H3.25v-9A2.245 2.245 0 015.5 4.25zm-11 3.505v5.09l1.08-1.29 1 2.385.92-.39-1-2.38 1.645.14z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M24 17c0 1.1-.9 2-2 2H2c-1.1 0-2-.9-2-2zM18.5 3.5c1.65 0 3 1.35 3 3v9H20v-9c0-.85-.65-1.5-1.5-1.5h-13C4.65 5 4 5.65 4 6.5v9H2.5v-9c0-1.65 1.35-3 3-3zm-11 4.25l3.65 3.55-1.65-.15 1 2.4-.95.4-1-2.4-1.05 1.3z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1n; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-device-computer",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1m = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class DeviceDevicePhone {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M16 .5a3 3 0 013 3v17a3 3 0 01-3 3H8a3 3 0 01-3-3v-17a3 3 0 013-3zm-4 17.75a1.5 1.5 0 100 3 1.5 1.5 0 000-3zm0 .5a1 1 0 110 2 1 1 0 010-2zm2-16.5h-4v1h4v-1z" }))) : (hAsync("g", null, hAsync("path", { d: "M16 .5c1.65 0 3 1.35 3 3v17c0 1.65-1.35 3-3 3H8c-1.65 0-3-1.35-3-3v-17c0-1.65 1.35-3 3-3zM10 2H8c-.85 0-1.5.65-1.5 1.5v17c0 .85.65 1.5 1.5 1.5h8c.85 0 1.5-.65 1.5-1.5v-17c0-.85-.65-1.5-1.5-1.5h-2v1.5h-4zm2 16.5a1.25 1.25 0 110 2.5 1.25 1.25 0 010-2.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1m; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-device-device-phone",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1l = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class DeviceDeviceRouter {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M19.5 7h-2.3L13 10.635l-1 .865-1-.845L6.8 7H4.5a3 3 0 00-3 3v10a3 3 0 003 3h15a3 3 0 003-3V10a3 3 0 00-3-3zM13 19h-2v-2h2v2zM12 3a5.5 5.5 0 014.615 2.5l1.145-1a7 7 0 00-11.525 0l1.15 1A5.5 5.5 0 0112 3zm2.3 4.5l1.165-1a4 4 0 00-6.93 0l1.165 1a2.5 2.5 0 014.6 0zm-3.3 1a1 1 0 102 0 1 1 0 00-2 0z" }))) : (hAsync("g", null, hAsync("path", { d: "M6.8 7l1.75 1.5H4.5C3.65 8.5 3 9.15 3 10v10c0 .85.65 1.5 1.5 1.5h15c.85 0 1.5-.65 1.5-1.5V10c0-.85-.65-1.5-1.5-1.5h-4.05L17.2 7h2.3c1.65 0 3 1.35 3 3v10c0 1.65-1.35 3-3 3h-15c-1.65 0-3-1.35-3-3V10c0-1.65 1.35-3 3-3zM13 17v2h-2v-2zm-1-9.5a1 1 0 110 2 1 1 0 010-2zm0-3c1.45 0 2.75.8 3.45 2l-1.15 1C13.9 6.65 13.05 6 12 6s-1.9.6-2.3 1.5l-1.15-1c.65-1.2 2-2 3.45-2zm0-3c2.4 0 4.5 1.2 5.75 3l-1.15 1C15.65 4 13.95 3 12 3S8.35 4 7.4 5.55l-1.15-1A6.904 6.904 0 0112 1.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1l; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-device-device-router",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1k = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class DeviceDeviceTv {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M1 3.5V16a3 3 0 003 3h5.44l-.11.21A1.5 1.5 0 018 20H5.5v1.5h13V20H16a1.5 1.5 0 01-1.325-.79L14.56 19H20a3 3 0 003-3V3.5H1zm8.5 11.35v-7.2l5.5 3.6-5.5 3.6z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M1 3.5V16a3 3 0 003 3h5.44l-.11.21A1.5 1.5 0 018 20H5.5v1.5h13V20H16a1.5 1.5 0 01-1.325-.79L14.56 19H20a3 3 0 003-3V3.5H1zm8.5 11.35v-7.2l5.5 3.6-5.5 3.6z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1k; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-device-device-tv",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1j = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class DeviceDeviceWatch {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M17.19 20.875l-.08.3A2.5 2.5 0 0114.7 23H9.3a2.5 2.5 0 01-2.41-1.825l-.08-.3h10.38zM15.97 3.5a4 4 0 014 4v9a4 4 0 01-4 4H8.03a4 4 0 01-4-4v-9a4 4 0 014-4zm5.53 7v3h-1.05v-3h1.05zM14.7.955a2.5 2.5 0 012.41 1.825l.08.3H6.81l.08-.3A2.5 2.5 0 019.3.955z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M21.5 10.5H20v-3c0-1.75-1.1-3.2-2.65-3.75l-.25-.9C16.8 1.75 15.8 1 14.7 1H9.3c-1.1 0-2.1.75-2.4 1.8l-.25.9C5.1 4.3 4 5.75 4 7.5v9c0 1.75 1.1 3.2 2.65 3.75l.25.9c.3 1.1 1.3 1.8 2.4 1.8h5.4c1.1 0 2.1-.75 2.4-1.8l.25-.9A4.004 4.004 0 0020 16.5v-3h1.5v-3zm-3 6c0 1.4-1.1 2.5-2.5 2.5H8c-1.4 0-2.5-1.1-2.5-2.5v-9C5.5 6.1 6.6 5 8 5h8c1.4 0 2.5 1.1 2.5 2.5v9z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1j; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-device-device-watch",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1i = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class DeviceFixedLineServices {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M19.75 11.5a3 3 0 013 3V24H1.25v-9.5a3 3 0 013-3V13a1.5 1.5 0 00-1.5 1.5v8h18.5v-8a1.5 1.5 0 00-1.5-1.5zM15.25 0a3 3 0 013 3v15a3 3 0 01-3 3h-6.5a3 3 0 01-3-3V3a3 3 0 013-3zM12 15a.75.75 0 100 1.5.75.75 0 000-1.5zm2.5 0a.75.75 0 100 1.5.75.75 0 000-1.5zm-5 0a.75.75 0 100 1.5.75.75 0 000-1.5zm2.5-2.5a.75.75 0 100 1.5.75.75 0 000-1.5zm2.5 0a.75.75 0 100 1.5.75.75 0 000-1.5zm-5 0a.75.75 0 100 1.5.75.75 0 000-1.5zM12 10a.75.75 0 100 1.5.75.75 0 000-1.5zm2.5 0a.75.75 0 100 1.5.75.75 0 000-1.5zm-5 0a.75.75 0 100 1.5.75.75 0 000-1.5zm5.75-5h-6.5v3.5h6.5V5z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M20 11.5c1.65 0 3 1.35 3 3V24H1.5v-9.5c0-1.65 1.35-3 3-3V13c-.85 0-1.5.65-1.5 1.5v8h18.5v-8c0-.85-.65-1.5-1.5-1.5zM15.5 0c1.65 0 3 1.35 3 3v15c0 1.65-1.35 3-3 3H9c-1.65 0-3-1.35-3-3V3c0-1.65 1.35-3 3-3zm0 1.5H9c-.85 0-1.5.65-1.5 1.5v15c0 .85.65 1.5 1.5 1.5h6.5c.85 0 1.5-.65 1.5-1.5V3c0-.85-.65-1.5-1.5-1.5zM14.75 15a.75.75 0 110 1.5.75.75 0 010-1.5zm-5 0a.75.75 0 110 1.5.75.75 0 010-1.5zm2.5 0a.75.75 0 110 1.5.75.75 0 010-1.5zm2.5-2.5a.75.75 0 110 1.5.75.75 0 010-1.5zm-5 0a.75.75 0 110 1.5.75.75 0 010-1.5zm2.5 0a.75.75 0 110 1.5.75.75 0 010-1.5zM9.75 10a.75.75 0 110 1.5.75.75 0 010-1.5zm2.5 0a.75.75 0 110 1.5.75.75 0 010-1.5zm2.5 0a.75.75 0 110 1.5.75.75 0 010-1.5zm.75-5v3.5H9V5h6.5z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1i; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-device-fixed-line-services",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1h = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class DeviceMediaReceiver {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M23.5 13v5a3 3 0 01-3 3h-17a3 3 0 01-3-3v-5h23zM19 16h-2v2h2v-2zm.175-11.53l1.06 1.06A11.42 11.42 0 0112.1 8.9a11.41 11.41 0 01-8.13-3.37l1.06-1.06A9.93 9.93 0 0012.1 7.4a9.935 9.935 0 007.075-2.93zm-2.83-2.83l1.06 1.06A7.44 7.44 0 0112.1 4.9a7.435 7.435 0 01-5.3-2.2l1.06-1.06A5.95 5.95 0 0012.1 3.4a5.96 5.96 0 004.245-1.76z" }))) : (hAsync("g", null, hAsync("path", { d: "M23.5 13v5c0 1.65-1.35 3-3 3h-17c-1.65 0-3-1.35-3-3v-5zM22 14.5H2V18c0 .85.65 1.5 1.5 1.5h17c.85 0 1.5-.65 1.5-1.5zM19 16v2h-2v-2zm.2-11.5l1.05 1.05C18.05 7.7 15.3 8.9 12.2 8.9s-6-1.2-8.15-3.35L5.1 4.5c1.85 1.9 4.4 2.95 7.05 2.95S17.3 6.4 19.2 4.5zm-2.85-2.85L17.4 2.7c-1.4 1.4-3.3 2.2-5.3 2.2s-3.9-.8-5.3-2.2l1.05-1.05A5.935 5.935 0 0012.1 3.4c1.6 0 3.1-.6 4.25-1.75z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1h; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-device-media-receiver",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1g = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class DeviceMobileDevicesCombination {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M10 6a2.5 2.5 0 012.5 2.5v13A2.5 2.5 0 0110 24H4a2.5 2.5 0 01-2.5-2.5v-13A2.5 2.5 0 014 6zM7 19.75a1 1 0 100 2 1 1 0 000-2zM19.5 0a3 3 0 013 3v14.5a3 3 0 01-3 3H14V19h5.5a1.5 1.5 0 001.5-1.5V3a1.5 1.5 0 00-1.5-1.5H10A1.5 1.5 0 008.5 3v1.5H7V3a3 3 0 013-3zm-4.75 16a1 1 0 110 2 1 1 0 010-2zM8.5 7.5h-3V9h3V7.5z" }))) : (hAsync("g", null, hAsync("path", { d: "M10 6c1.4 0 2.5 1.1 2.5 2.5v13c0 1.4-1.1 2.5-2.5 2.5H4c-1.4 0-2.5-1.1-2.5-2.5v-13C1.5 7.1 2.6 6 4 6zM5.5 7.5H4c-.55 0-1 .45-1 1v13c0 .55.45 1 1 1h6c.55 0 1-.45 1-1v-13c0-.55-.45-1-1-1H8.5V9h-3zM7 19.75a1 1 0 110 2 1 1 0 010-2zM19.5 0c1.65 0 3 1.35 3 3v14.5c0 1.65-1.35 3-3 3H14V19h5.5c.85 0 1.5-.65 1.5-1.5V3c0-.85-.65-1.5-1.5-1.5H10c-.85 0-1.5.65-1.5 1.5v1.5H7V3c0-1.65 1.35-3 3-3zm-4.75 16a1 1 0 110 2 1 1 0 010-2z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1g; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-device-mobile-devices-combination",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1f = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class DeviceMobileEquipment {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M18.83 6.5c.728 0 1.368.484 1.565 1.185l.29 1.03a2.915 2.915 0 011.815 2.7V13.5h1V16h-1v2.585a2.915 2.915 0 01-1.815 2.7l-.29 1.03A1.625 1.625 0 0118.83 23.5h-4.16a1.625 1.625 0 01-1.565-1.185l-.29-1.03a2.915 2.915 0 01-1.815-2.7v-7.17c0-1.185.717-2.253 1.815-2.7l.29-1.03A1.625 1.625 0 0114.67 6.5zM10.9.5A3.105 3.105 0 0114 3.58v1.5a3.13 3.13 0 00-2.34 2.2l-.115.415a4.41 4.41 0 00-2.045 3.72v7.17A4.36 4.36 0 0010.225 21H4.6a3.105 3.105 0 01-3.1-3.1V3.6A3.105 3.105 0 014.6.5zm8.685 9.5h-5.67c-.781 0-1.415.634-1.415 1.415v7.17c0 .781.634 1.415 1.415 1.415h5.67c.781 0 1.415-.634 1.415-1.415v-7.17c0-.781-.634-1.415-1.415-1.415zM7.75 16a1.25 1.25 0 100 2.5 1.25 1.25 0 000-2.5zm0 .5a.75.75 0 110 1.5.75.75 0 010-1.5zM9.5 2.25H6v1h3.5v-1z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M18.83 6.5c.73 0 1.37.485 1.565 1.185l.29 1.03a2.917 2.917 0 011.815 2.7V13.5h1V16h-1v2.585a2.92 2.92 0 01-1.81 2.7l-.29 1.03c-.2.7-.84 1.185-1.565 1.185H14.67c-.73 0-1.37-.485-1.565-1.185l-.29-1.03a2.917 2.917 0 01-1.815-2.7v-7.17c0-1.22.75-2.265 1.81-2.7l.29-1.03c.2-.7.84-1.185 1.565-1.185zM10.9.5C12.61.5 14 1.89 14 3.6v1.485a3.12 3.12 0 00-1.5.805V3.6c0-.88-.72-1.6-1.6-1.6H9.5v1.5H6V2H4.6C3.72 2 3 2.72 3 3.6v14.3c0 .88.72 1.6 1.6 1.6h5c.115.545.33 1.05.625 1.5H4.6c-1.71 0-3.1-1.39-3.1-3.1V3.6C1.5 1.89 2.89.5 4.6.5zm8.685 9.5h-5.67c-.78 0-1.415.635-1.415 1.415v7.17c0 .78.635 1.415 1.415 1.415h5.67c.78 0 1.415-.635 1.415-1.415v-7.17c0-.78-.635-1.415-1.415-1.415zM7.75 16a1.25 1.25 0 110 2.5 1.25 1.25 0 010-2.5z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1f; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-device-mobile-equipment",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1e = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class DeviceMobilePhoneInsurance {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M16 .5a3 3 0 013 3v1.955L9.03 11l4.05 2.19-3.785 2.31.81 1.275 6-3.675-3.94-2.1L19 7.17V20.5a3 3 0 01-3 3H8a3 3 0 01-3-3v-17a3 3 0 013-3zm-4 17.75a1.5 1.5 0 100 3 1.5 1.5 0 000-3zm0 .5a1 1 0 110 2 1 1 0 010-2zm2-16.5h-4v1h4v-1z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M16 .5c1.65 0 3 1.35 3 3v17c0 1.65-1.35 3-3 3H8c-1.65 0-3-1.35-3-3v-17c0-1.65 1.35-3 3-3zM10 2H8c-.85 0-1.5.65-1.5 1.5v17c0 .85.65 1.5 1.5 1.5h8c.85 0 1.5-.65 1.5-1.5V7.9L12.2 11l3.95 2.1-6.05 3.7-.8-1.3 3.8-2.35L9.05 11l8.45-4.8V3.5c0-.85-.65-1.5-1.5-1.5h-2v1.5h-4V2zm2 16.5a1.25 1.25 0 110 2.5 1.25 1.25 0 010-2.5z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1e; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-device-mobile-phone-insurance",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1d = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class DeviceMobileServices {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M11.5.5a3 3 0 013 3v1l-.165.855-.18 1-.845-.585-.685-.5-2.26 2.26-.59.595.475.685.57.855-1 .185L9 10v4l.83.2 1 .185-.58.84-.475.69 2.85 2.85.685-.5.845-.585.18 1 .165.82v1a3 3 0 01-3 3h-8a3 3 0 01-3-3v-17a3 3 0 013-3zm-4 17.75a1.5 1.5 0 100 3 1.5 1.5 0 000-3zm0 .5a1 1 0 110 2 1 1 0 010-2zM17.685 5.5L18 7.135a.595.595 0 00.9.365l1.375-.93 1.67 1.67L21 9.605a.59.59 0 00.37.895l1.635.32v2.38l-1.635.3a.59.59 0 00-.37.895l.935 1.38-1.67 1.67L18.9 16.5a.595.595 0 00-.9.37l-.315 1.63H15.32l-.295-1.615a.595.595 0 00-.92-.385l-1.38.93-1.67-1.67.945-1.365a.59.59 0 00-.365-.935l-1.63-.3V10.8l1.63-.3A.59.59 0 0012 9.605l-.93-1.365 1.67-1.67 1.365.94a.59.59 0 00.92-.38l.295-1.63h2.365zM16.5 10a2 2 0 100 4 2 2 0 000-4zm-7-7.75h-4v1h4v-1z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M11.5.5c1.65 0 3 1.35 3 3v.75c-.5.15-1 .3-1.5.55V3.5c0-.85-.65-1.5-1.5-1.5h-2v1.5h-4V2h-2C2.65 2 2 2.65 2 3.5v17c0 .85.65 1.5 1.5 1.5h8c.85 0 1.5-.65 1.5-1.5v-1.3c.5.25 1 .4 1.5.55v.75c0 1.65-1.35 3-3 3h-8c-1.65 0-3-1.35-3-3v-17c0-1.65 1.35-3 3-3zm-4 18a1.25 1.25 0 110 2.5 1.25 1.25 0 010-2.5zm10.2-13l.3 1.6c.05.45.55.65.9.4l1.35-.9 1.65 1.65-.95 1.35c-.2.35 0 .8.4.9l1.65.35v2.35l-1.65.3c-.4.05-.6.55-.35.9l.85 1.3-1.65 1.65-1.35-.95c-.35-.2-.8 0-.9.4l-.3 1.65H15.3L15 16.8a.567.567 0 00-.9-.4l-1.35.95-1.65-1.65.95-1.35c.2-.35 0-.8-.4-.9l-1.65-.3V10.8l1.65-.3c.45-.05.65-.55.4-.9l-.95-1.35 1.65-1.65 1.35.95c.35.2.8 0 .9-.4l.35-1.65h2.35zM16.5 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1d; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-device-mobile-services",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1c = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class DeviceNoCamera {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M4.396 2.255a.75.75 0 01.734.215l18 18a.745.745 0 010 1.06.75.75 0 01-1.06 0l-18-18a.75.75 0 01.326-1.275zM3.42 5l14.76 14.76A3 3 0 0117 20H5a3 3 0 01-3-3v-6.5H.5v-4H2V5h1.42zM20 5v3.785L21.78 7h1.72v10h-1.72l-.485-.485-1.295-1.3v.005L9.78 5H20z" }))) : (hAsync("g", null, hAsync("path", { d: "M4.1 2.45c.3-.3.75-.3 1.05 0l18.05 18c.3.3.3.75 0 1.05-.15.15-.35.2-.55.2s-.4-.05-.55-.2l-18-18c-.3-.3-.3-.75 0-1.05zM3.4 5l1.5 1.5H3.5V17c0 .85.65 1.5 1.5 1.5h11.9l1.3 1.25c-.4.15-.8.25-1.2.25H5c-1.65 0-3-1.35-3-3v-6.5H.5v-4H2V5zM20 5v3.8L21.8 7h1.7v10h-1.7l-3.3-3.3V6.5h-7.2L9.8 5zm2 3.9l-2 2v2.2l2 2z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1c; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-device-no-camera",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1b = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class DevicePhotoCamera {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M20 6.25h-2.25l-1.5-2.5h-8.5l-1.5 2.5H4A2.245 2.245 0 001.75 8.5V17A2.245 2.245 0 004 19.25h16A2.245 2.245 0 0022.25 17V8.5A2.245 2.245 0 0020 6.25zm-8 9.42a3.67 3.67 0 110-7.34 3.67 3.67 0 010 7.34zm7-5.17a1 1 0 110-2 1 1 0 010 2z" }))) : (hAsync("g", null, hAsync("path", { d: "M16.7 3l1.5 2.5H20c1.65 0 3 1.35 3 3V17c0 1.65-1.35 3-3 3H4c-1.65 0-3-1.35-3-3V8.5c0-1.65 1.35-3 3-3h1.85L7.35 3zm-.9 1.5H8.15L6.65 7H4c-.85 0-1.5.65-1.5 1.5V17c0 .85.65 1.5 1.5 1.5h16c.85 0 1.5-.65 1.5-1.5V8.5c0-.85-.65-1.5-1.5-1.5h-2.7zM12 7c2.75 0 5 2.25 5 5s-2.25 5-5 5-5-2.25-5-5 2.25-5 5-5zm0 1.5c-1.95 0-3.5 1.55-3.5 3.5s1.55 3.5 3.5 3.5 3.5-1.55 3.5-3.5-1.55-3.5-3.5-3.5zm7 0a1 1 0 110 2 1 1 0 010-2z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1b; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-device-photo-camera",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1a = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class DeviceRemoteController {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M10.255 7.045l6.715 6.72-7.6 7.6a4.745 4.745 0 01-6.715 0l-.173-.182a4.745 4.745 0 01.173-6.533l7.6-7.605zM9 15a1 1 0 10-1.403 1.425A1 1 0 009 15zm2.43-2.43a1 1 0 00-1.405 0 1 1 0 101.415 0zM13.06 1A10 10 0 0123 10.96h-1.5a8.5 8.5 0 00-8.44-8.46zm0 3.425a6.54 6.54 0 016.535 6.535h-1.5a5.04 5.04 0 00-5.035-5.035z" }))) : (hAsync("g", null, hAsync("path", { d: "M10.255 5.985l7.78 7.785-8.13 8.13a5.46 5.46 0 01-3.89 1.61 5.46 5.46 0 01-3.89-1.61 5.507 5.507 0 010-7.78zM10.25 8.11l-7.07 7.07a4.002 4.002 0 000 5.655 3.974 3.974 0 002.83 1.17c1.07 0 2.075-.415 2.83-1.17l7.065-7.07zm-2.675 6.9c.39-.39 1.025-.39 1.415 0s.39 1.025 0 1.415-1.025.39-1.415 0a1.002 1.002 0 010-1.415zm2.44-2.44c.39-.39 1.025-.39 1.415 0s.39 1.025 0 1.415-1.025.39-1.415 0a1.002 1.002 0 010-1.415zm3.045-8.145a6.54 6.54 0 016.535 6.535h-1.5a5.042 5.042 0 00-5.035-5.035zm0-3.43c5.49 0 9.96 4.47 9.96 9.96h-1.5c0-4.665-3.795-8.46-8.46-8.46z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1a; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-device-remote-controller",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$19 = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class DeviceReplacementMobilephone {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M7.03 3a4.13 4.13 0 00-.03.5v1H4.5A1.5 1.5 0 003 6v14.5A1.5 1.5 0 004.5 22h2.765c.194.554.497 1.064.89 1.5H4.5a3 3 0 01-3-3V6a3 3 0 013-3zM19.5.5a3 3 0 013 3v17a3 3 0 01-3 3h-8a3 3 0 01-3-3v-6.25h2.25v3.5l7.62-5-7.62-5v3.5H8.5V3.5a3 3 0 013-3zm-4 17.75a1.5 1.5 0 100 3 1.5 1.5 0 000-3zm0 .5a1 1 0 110 2 1 1 0 010-2zm-4-9.6l5.5 3.6-5.5 3.6V13.5H6.75a.75.75 0 110-1.5h4.75V9.15zm6-6.9h-4v1h4v-1z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M7.05 3C7 3.15 7 3.35 7 3.5v1H4.5C3.65 4.5 3 5.15 3 6v14.5c0 .85.65 1.5 1.5 1.5h2.75c.2.55.5 1.05.9 1.5H4.5c-1.65 0-3-1.35-3-3V6c0-1.65 1.35-3 3-3zM19.5.5c1.65 0 3 1.35 3 3v17c0 1.65-1.35 3-3 3h-8c-1.65 0-3-1.35-3-3V15H10v5.5c0 .85.65 1.5 1.5 1.5h8c.85 0 1.5-.65 1.5-1.5v-17c0-.85-.65-1.5-1.5-1.5h-2v1.5h-4V2h-2c-.85 0-1.5.65-1.5 1.5v7H8.5v-7c0-1.65 1.35-3 3-3zm-4 18a1.25 1.25 0 110 2.5 1.25 1.25 0 010-2.5zm-4-9.35l5.5 3.6-5.5 3.6V13.5H6.75c-.4 0-.75-.35-.75-.75s.35-.75.75-.75h4.75V9.15z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$19; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-device-replacement-mobilephone",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$18 = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class DeviceScreenRotate {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M22.153 12.678l.102.007a.76.76 0 01.665.85A11.075 11.075 0 0118 21.23L19.125 23h-5.31l2.13-4.855L17.155 20a9.575 9.575 0 004.255-6.675.75.75 0 01.845-.64zM15.258 1.5a3 3 0 012.122.88l4.24 4.24a3 3 0 010 4.245L10.865 21.62a3 3 0 01-4.245 0l-4.24-4.24a3 3 0 010-4.245L13.135 2.38a3 3 0 012.123-.88zM8.12 15.85a1.255 1.255 0 00-1.77 0 1.26 1.26 0 000 1.77c.49.487 1.28.487 1.77 0l.015.015a1.26 1.26 0 00-.015-1.785zm-.87.15a.75.75 0 11-.001 1.5.75.75 0 01.001-1.5zm2.935-15l-2.13 4.88-1.21-1.855a9.575 9.575 0 00-4.255 6.65.745.745 0 01-.74.645l-.105-.005a.76.76 0 01-.64-.85 11.075 11.075 0 014.92-7.705L4.875 1h5.31z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M22.153 12.678l.102.007c.41.06.695.44.645.845-.44 3.155-2.275 5.975-4.92 7.695l1.15 1.76-5.31-.01 2.13-4.86 1.21 1.855c2.285-1.485 3.87-3.92 4.25-6.645a.75.75 0 01.845-.64zM15.255 1.5c.77 0 1.54.295 2.12.875L21.62 6.62a3.003 3.003 0 010 4.25L10.865 21.625a2.996 2.996 0 01-4.24 0L2.38 17.38a3.006 3.006 0 010-4.245L13.135 2.38a2.987 2.987 0 012.12-.88zm0 1.5c-.4 0-.775.155-1.06.44L3.44 14.195a1.5 1.5 0 000 2.12l4.245 4.245c.285.285.66.44 1.06.44s.775-.155 1.06-.44L20.56 9.805a1.5 1.5 0 000-2.12L16.315 3.44a1.486 1.486 0 00-1.06-.44zM4.875 1.01l5.305.015-2.13 4.86L6.84 4.03c-2.285 1.485-3.87 3.92-4.25 6.645a.744.744 0 01-.74.645c-.035 0-.07 0-.105-.01a.75.75 0 01-.64-.845C1.545 7.31 3.38 4.49 6.025 2.77l-1.15-1.76z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$18; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-device-screen-rotate",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$17 = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class DeviceSmartSpeaker {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M21.224 10.231a2.087 2.087 0 00-2.087-1.883h-1.132a19.68 19.68 0 00-5.833-1.044 18.295 18.295 0 00-5.739 1.044H5.181a2.087 2.087 0 00-2.087 1.883c-.193 2.119-.485 5.53-.485 7.696a4.889 4.889 0 003.814 4.946v.084c0 .576.467 1.043 1.043 1.043h9.391c.577 0 1.044-.467 1.044-1.043v-.084c2.264-.433 3.814-2.52 3.814-4.946 0-2.165-.287-5.577-.49-7.696zm-8.019 9.595h-2.087V17.74h2.087v2.087zm-.782-18.26a13.08 13.08 0 015.353 1.142l.751-1.378a14.682 14.682 0 00-12.673.235l.751 1.357a13.12 13.12 0 015.818-1.357zM7.617 4.762l.73 1.373a9.391 9.391 0 017.655-.204l.756-1.388a11.009 11.009 0 00-9.14.22z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M12 7.55c2.2 0 4.4.6 5.6 1h1.1c1.05 0 1.9.75 2 1.8.15 2 .45 5.3.45 7.35 0 2.3-1.5 4.3-3.65 4.7v.1c0 .55-.45 1-1 1h-9c-.55 0-1-.45-1-1v-.05C4.35 22 2.85 20 2.85 17.7c0-2.05.25-5.3.45-7.35.1-1 .95-1.8 2-1.8h1.15c1.05-.35 3.2-1 5.55-1zM18.7 10H5.3c-.25 0-.5.2-.5.45-.15 1.85-.45 5.2-.45 7.25 0 1.85 1.3 3.3 3 3.3h9.3c1.7 0 3-1.45 3-3.3 0-2.1-.3-5.45-.45-7.25-.05-.25-.25-.45-.5-.45zM13 17.5v2h-2v-2h2zM12.25 4c1.5 0 2.9.3 4.15.8l-.7 1.35a8.86 8.86 0 00-3.45-.7c-1.4 0-2.7.35-3.9.9l-.7-1.3C9.05 4.4 10.6 4 12.25 4zm0-3.5c2.1 0 4.05.45 5.85 1.3l-.7 1.3C15.8 2.4 14.1 2 12.25 2c-2 0-3.9.45-5.6 1.3L5.95 2C7.85 1.05 10 .5 12.25.5z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$17; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-device-smart-speaker",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$16 = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class DeviceTvAndMobile {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M21.5 9.5a2 2 0 012 2v10a2 2 0 01-2 2H17a2 2 0 01-2-2v-10a2 2 0 012-2zM18.09 11H17a.5.5 0 00-.5.5v10a.5.5 0 00.5.5h4.5a.5.5 0 00.5-.5v-10a.5.5 0 00-.5-.5h-1.09v1.035h-2.32V11zm1.16 9a.75.75 0 110 1.5.75.75 0 010-1.5zM14 17v1.5H5V17h9zM22.5.5v8.22a3 3 0 00-1-.175H17a3 3 0 00-3 3V16H3.5a3 3 0 01-3-3V.5h22zM10 5.96v4.58l3.5-2.29L10 5.96z" }))) : (hAsync("g", null, hAsync("path", { d: "M21.5 9.5c1.1 0 2 .9 2 2v10c0 1.1-.9 2-2 2H17c-1.1 0-2-.9-2-2v-10c0-1.1.9-2 2-2zM18 11h-1c-.3 0-.5.2-.5.5v10c0 .3.2.5.5.5h4.5c.3 0 .5-.2.5-.5v-10c0-.3-.2-.5-.5-.5h-1v1H18zm1.25 9a.75.75 0 110 1.5.75.75 0 010-1.5zM22.5.5v7.65c-.3-.1-.65-.15-1-.15H21V2H2v11c0 .85.65 1.5 1.5 1.5h10v4H5V17h2.498c.278-.003.884-.059 1.402-1H3.5c-1.65 0-3-1.35-3-3V.5zM9 4.65l5.5 3.6-5.5 3.6z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$16; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-device-tv-and-mobile",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const dividerCss = "/*!@:host*/.sc-scale-divider-h{--width:100%;--height:100%;--spacing:var(--scl-spacing-12);--color:var(--scl-color-grey-20);--border-width:var(--scl-spacing-1);--min-height-vertical:var(--scl-spacing-24);width:var(--width);height:var(--height)}/*!@.divider*/.divider.sc-scale-divider{padding:var(--spacing)}/*!@.divider--vertical*/.divider--vertical.sc-scale-divider{display:inline-flex;height:inherit}/*!@.divider__horizontal*/.divider__horizontal.sc-scale-divider{margin:0;border:0;border-top:var(--border-width) solid var(--color)}/*!@.divider__vertical*/.divider__vertical.sc-scale-divider{display:inline-flex;height:inherit;min-height:var(--min-height-vertical);border-left:var(--border-width) solid var(--color)}";

class Divider {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) Divider vertical */
    this.vertical = false;
  }
  render() {
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync("div", { class: this.getCssClassMap(), "aria-hidden": "true", part: classnames('base', this.vertical && 'vertical') }, !this.vertical ? (hAsync("hr", { class: "divider__horizontal", part: "rule-horizontal" })) : (hAsync("span", { class: "divider__vertical", part: "rule-vertical" })))));
  }
  getCssClassMap() {
    return classnames('divider', this.vertical && `divider--vertical`);
  }
  static get style() { return dividerCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-divider",
    "$members$": {
      "vertical": [4],
      "styles": [1]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const dropdownCss = "scale-dropdown{--font-weight:var(--scl-font-weight-bold);--height:var(--scl-spacing-48);--height-small:var(--scl-spacing-40);--spacing-x:var(--scl-spacing-12);--spacing-dropdown:var(--scl-spacing-12) var(--scl-spacing-40) 0\n    calc(var(--spacing-x) - 1px);--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);--radius:var(--scl-radius-8);--border:var(--scl-spacing-1) solid var(--scl-color-text-standard);--border-error:var(--scl-spacing-2) solid var(--scl-color-background-error);--border-color-hover:var(--scl-color-primary-hover, #f90984);--border-color-focus:var(--scl-color-primary-hover, #f90984);--box-shadow-focus:0 0 0 var(--scl-spacing-2) var(--scl-color-focus);--color-disabled:var(--scl-color-background-disabled);--background-disabled:var(--scl-color-white);--transition-input:var(--transition);--font-size-input:var(--scl-font-size-16);--transition-helper-text:var(--transition);--font-size-helper-text:var(--scl-font-size-12);--line-height-helper-text:var(--scl-font-line-height-133);--color-helper-text:var(--scl-color-blue-70);--color-helper-text-error:var(--scl-color-text-error);--spacing-y-meta:var(--scl-spacing-4);--color-meta:var(--scl-color-text-standard);--height-icon:var(--scl-spacing-24);--color-icon:var(--scl-color-text-standard);--color-icon-hover:var(--scl-color-primary-hover, #f90984);--color-icon-active:var(--scl-color-primary-active, #cb0068);--transition-icon:var(--transition);--color-label:var(--scl-color-grey-60);--z-index-label:var(--scl-z-index-10);--transition-label:var(--transition);--font-size-label:var(--scl-font-size-16);--font-size-label-small:var(--scl-font-size-16);--font-weight-label:var(--scl-font-weight-medium);--font-size-label-focus:var(--scl-font-size-10);--font-weight-label-focus:var(--scl-font-weight-bold)}.dropdown{position:relative}.dropdown .input__helper-text{font-weight:var(--font-weight)}.dropdown .input__dropdown{width:100%;height:var(--height);margin:0;display:flex;outline:none;padding:var(--spacing-dropdown);z-index:1;box-sizing:border-box;transition:var(--transition-input);font-family:inherit;font-size:var(--font-size-input);border-radius:var(--radius);border:var(--border);white-space:nowrap;text-overflow:ellipsis;appearance:none;-webkit-appearance:none}@-moz-document url-prefix(){.dropdown .input__dropdown{text-indent:-2px}}.dropdown .input__dropdown-wrapper{position:relative}.dropdown .input__helper-text{transition:var(--transition-helper-text);padding-left:var(--spacing-x);font-size:var(--font-size-helper-text);line-height:var(--line-height-helper-text);color:var(--color-helper-text)}.dropdown .input__meta{display:flex;justify-content:space-between;margin-top:var(--spacing-y-meta);color:var(--color-meta)}.dropdown.dropdown--disabled .input__dropdown-wrapper .input__dropdown-icon{color:var(--color-disabled)}.dropdown:not(.dropdown--disabled):hover .input__dropdown-icon{color:var(--color-icon-hover)}.dropdown:not(.dropdown--disabled):active .input__dropdown-icon{color:var(--color-icon-active)}.dropdown:not(.dropdown--disabled) .input__dropdown:hover{border-color:var(--border-color-hover)}.dropdown:not(.dropdown--disabled) .input__dropdown:focus{border-color:var(--border-color-focus)}.dropdown:not(.dropdown--disabled) .input__dropdown:focus{box-shadow:var(--box-shadow-focus)}.dropdown .input__dropdown-wrapper .input__dropdown-icon{top:50%;right:var(--spacing-x);position:absolute;transform:translateY(-50%);pointer-events:none;height:var(--height-icon);color:var(--color-icon);transition:var(--transition-icon)}.input__label{top:0;left:0;color:var(--color-label);display:flex;z-index:var(--z-index-label);position:absolute;transition:var(--transition-label);pointer-events:none;font-size:var(--font-size-label);transform:translate(\n    var(--spacing-x),\n    calc((var(--scl-spacing-48) - var(--font-size-label)) / 2)\n  );font-weight:var(--font-weight-label)}.animated .input__label{transform:translate(var(--spacing-x), var(--scl-spacing-8));font-size:var(--font-size-label-focus);font-weight:var(--font-weight-label-focus);line-height:var(--scl-font-variant-label-size)}.dropdown--status-error .input__dropdown{border:var(--border-error)}.dropdown--status-error .input__helper-text{color:var(--color-helper-text-error)}.dropdown--size-small .input__dropdown{height:var(--height-small)}.dropdown--size-small .input__label{font-size:var(--font-size-label-small);transform:translate(\n    var(--spacing-x),\n    calc((var(--height-small) - var(--font-size-label-small)) / 2)\n  );font-weight:var(--font-weight-label-small)}.dropdown--size-small.animated .input__label{transform:translate(var(--spacing-x), var(--scl-spacing-4));font-size:var(--font-size-label-focus);font-weight:var(--font-weight-label-focus);line-height:var(--scl-font-variant-label-size)}.dropdown--transparent .input__dropdown{background-color:transparent}.dropdown--disabled label,.dropdown--disabled .input__label,.dropdown--disabled input,.dropdown--disabled .input__dropdown,.dropdown--disabled .input__helper-text{cursor:not-allowed;border-color:var(--color-disabled);color:var(--color-disabled);background:var(--background-disabled)}";

let i$c = 0;
class Dropdown {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.scaleInput = createEvent$1(this, "scale-input", 7);
    this.scaleInputLegacy = createEvent$1(this, "scaleInput", 7);
    this.scaleChange = createEvent$1(this, "scale-change", 7);
    this.scaleChangeLegacy = createEvent$1(this, "scaleChange", 7);
    this.scaleFocus = createEvent$1(this, "scale-focus", 7);
    this.scaleFocusLegacy = createEvent$1(this, "scaleFocus", 7);
    this.scaleBlur = createEvent$1(this, "scale-blur", 7);
    this.scaleBlurLegacy = createEvent$1(this, "scaleBlur", 7);
    this.scaleKeyDown = createEvent$1(this, "scale-keydown", 7);
    this.scaleKeyDownLegacy = createEvent$1(this, "scaleKeydown", 7);
    /** (optional) Input name */
    this.name = '';
    /** (optional) Input label */
    this.label = '';
    /** (optional) Input size */
    this.size = '';
    /** (optional) Input helper text */
    this.helperText = '';
    /** @deprecated - invalid should replace status */
    this.status = '';
    /** (optional) Input status */
    this.invalid = false;
    /** (optional) Input value */
    this.value = '';
    /** (optional) Makes type `select` behave as a controlled component in React */
    this.controlled = false;
    // Handle change on <select> independently
    // so we can allow "controlled" (React) behavior,
    // in which only the `value` changing does update
    // the actual <select> value, not the user's input.
    this.handleSelectChange = (event) => {
      const target = event.target;
      if (this.controlled) {
        emitEvent$1(this, 'scaleChange', { value: target.value });
        this.selectElement.value = String(this.value);
        this.forceUpdate = String(Date.now());
      }
      else {
        this.value = target.value || '';
        this.emitChange();
      }
    };
    this.handleInput = (event) => {
      const target = event.target;
      if (target) {
        this.value = target.value || '';
        this.emitChange();
      }
      emitEvent$1(this, 'scaleInput', event);
    };
    this.handleChange = (event) => {
      const target = event.target;
      if (target) {
        this.value = target.value || '';
        this.emitChange();
      }
    };
    this.handleFocus = () => {
      emitEvent$1(this, 'scaleFocus');
    };
    this.handleBlur = () => {
      emitEvent$1(this, 'scaleBlur');
    };
    this.handleKeyDown = (event) => {
      emitEvent$1(this, 'scaleKeyDown', event);
    };
  }
  componentWillLoad() {
    this.hasSlotIcon = !!this.hostElement.querySelector('[slot="icon"]');
    if (this.inputId == null) {
      this.inputId = 'input-dropdown' + i$c++;
    }
  }
  componentDidLoad() {
    // Keep this.value up-to-date for type="select".
    // This is important also for React, where `value` is used to control the element state.
    const select = this.selectElement;
    const selectedValue = select.selectedIndex > -1
      ? select.options[select.selectedIndex].value
      : null;
    // If we have a `value` passed, set it on the <select> element
    // Otherwise, if we have an <option selected>, set its value on `value`
    if (this.value) {
      select.value = String(this.value);
    }
    else if (selectedValue) {
      this.value = selectedValue;
    }
    // This is a workaroud to prevent a bug in Stencil:
    // when using slots without Shadow DOM (possible only with Stencil)
    // sometimes an update in the Light DOM does not trigger a re-render
    // thus causing unexpected results.
    // https://gitlab.com/scale-ds/scale-telekom/-/issues/16
    if (this.selectElement) {
      this.mutationObserver = new MutationObserver(() => {
        this.forceUpdate = String(Date.now());
      });
      this.mutationObserver.observe(this.hostElement, {
        childList: true,
        subtree: true,
      });
    }
  }
  componentDidUpdate() {
    this.hasSlotIcon = !!this.hostElement.querySelector('[slot="icon"]');
  }
  componentDidRender() {
    // When type `select` and `controlled` is true,
    // make sure the <select> is always in sync with the value.
    const value = this.value == null ? '' : this.value.toString();
    if (this.controlled && this.selectElement.value.toString() !== value) {
      this.selectElement.value = value;
    }
    if (this.status !== '') {
      statusNote({
        tag: 'deprecated',
        message: 'Property "status" is deprecated. Please use the "invalid" property!',
        type: 'warn',
        source: this.hostElement,
      });
    }
  }
  disconnectedCallback() {
    if (this.mutationObserver) {
      this.mutationObserver.disconnect();
    }
  }
  // We're not watching `value` like we used to
  // because we get unwanted `scaleChange` events
  // because how we keep this.value up-to-date for type="select"
  // `this.value = selectedValue`
  emitChange() {
    emitEvent$1(this, 'scaleChange', {
      value: this.value == null ? this.value : this.value.toString(),
    });
  }
  render() {
    const ariaInvalidAttr = this.status === 'error' || this.invalid ? { 'aria-invalid': true } : {};
    const helperTextId = `helper-message-${i$c}`;
    const ariaDescribedByAttr = { 'aria-describedBy': helperTextId };
    return (hAsync(Host$1, null, hAsync("div", { class: this.getCssClassMap() }, hAsync("label", { class: "input__label", htmlFor: this.inputId }, this.label), hAsync("div", { class: "input__dropdown-wrapper" }, hAsync("select", Object.assign({ ref: (el) => (this.selectElement = el), class: "input__dropdown",
      // @ts-ignore
      value: this.value, onChange: this.handleSelectChange, onFocus: this.handleFocus, onBlur: this.handleBlur, onKeyDown: this.handleKeyDown, disabled: this.disabled, required: this.required, multiple: this.multiple, id: this.inputId, name: this.name, size: this.visibleSize }, ariaInvalidAttr, (this.helperText ? ariaDescribedByAttr : {})), hAsync("slot", null)), hAsync("div", { class: "input__dropdown-icon" }, this.hasSlotIcon ? (hAsync("slot", { name: "icon" })) : (hAsync("scale-icon-navigation-collapse-down", { decorative: true })))), !!this.helperText && (hAsync("div", { class: "input__meta", id: helperTextId, "aria-live": "polite", "aria-relevant": "additions removals" }, hAsync("div", { class: "input__helper-text" }, this.helperText))))));
  }
  getCssClassMap() {
    return classnames('dropdown', this.disabled && `dropdown--disabled`, this.transparent && 'dropdown--transparent', this.status && `dropdown--status-${this.status}`, this.invalid && `dropdown--status-error`, this.size && `dropdown--size-${this.size}`, this.value != null && this.value !== '' && 'animated');
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return dropdownCss; }
  static get cmpMeta() { return {
    "$flags$": 4,
    "$tagName$": "scale-dropdown",
    "$members$": {
      "name": [1],
      "label": [1],
      "size": [1],
      "helperText": [1, "helper-text"],
      "status": [1],
      "invalid": [4],
      "disabled": [4],
      "required": [4],
      "value": [1032],
      "inputId": [1, "input-id"],
      "multiple": [4],
      "visibleSize": [2, "visible-size"],
      "transparent": [4],
      "controlled": [4],
      "styles": [1],
      "forceUpdate": [32]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const ISO_DATE_FORMAT = /^(\d{4})-(\d{2})-(\d{2})$/;
var DaysOfWeek;
(function (DaysOfWeek) {
  DaysOfWeek[DaysOfWeek["Sunday"] = 0] = "Sunday";
  DaysOfWeek[DaysOfWeek["Monday"] = 1] = "Monday";
  DaysOfWeek[DaysOfWeek["Tuesday"] = 2] = "Tuesday";
  DaysOfWeek[DaysOfWeek["Wednesday"] = 3] = "Wednesday";
  DaysOfWeek[DaysOfWeek["Thursday"] = 4] = "Thursday";
  DaysOfWeek[DaysOfWeek["Friday"] = 5] = "Friday";
  DaysOfWeek[DaysOfWeek["Saturday"] = 6] = "Saturday";
})(DaysOfWeek || (DaysOfWeek = {}));
function createDate(year, month, day) {
  var dayInt = parseInt(day, 10);
  var monthInt = parseInt(month, 10);
  var yearInt = parseInt(year, 10);
  const isValid = Number.isInteger(yearInt) && // all parts should be integers
    Number.isInteger(monthInt) &&
    Number.isInteger(dayInt) &&
    monthInt > 0 && // month must be 1-12
    monthInt <= 12 &&
    dayInt > 0 && // day must be 1-31
    dayInt <= 31 &&
    yearInt > 0;
  if (isValid) {
    return new Date(yearInt, monthInt - 1, dayInt);
  }
}
/**
 * @param value date string in ISO format YYYY-MM-DD
 */
function parseISODate(value) {
  if (!value) {
    return;
  }
  const matches = value.match(ISO_DATE_FORMAT);
  if (matches) {
    return createDate(matches[1], matches[2], matches[3]);
  }
}
/**
 * print date in format YYYY-MM-DD
 * @param date
 */
function printISODate(date) {
  if (!date) {
    return "";
  }
  var d = date.getDate().toString(10);
  var m = (date.getMonth() + 1).toString(10);
  var y = date.getFullYear().toString(10);
  // days are not zero-indexed, so pad if less than 10
  if (date.getDate() < 10) {
    d = `0${d}`;
  }
  // months *are* zero-indexed, pad if less than 9!
  if (date.getMonth() < 9) {
    m = `0${m}`;
  }
  return `${y}-${m}-${d}`;
}
/**
 * Compare if two dates are equal in terms of day, month, and year
 */
function isEqual(a, b) {
  if (a == null || b == null) {
    return false;
  }
  return a.getFullYear() === b.getFullYear() && a.getMonth() === b.getMonth() && a.getDate() === b.getDate();
}
function addDays(date, days) {
  var d = new Date(date);
  d.setDate(d.getDate() + days);
  return d;
}
function startOfWeek(date, firstDayOfWeek = DaysOfWeek.Monday) {
  var d = new Date(date);
  var day = d.getDay();
  var diff = (day < firstDayOfWeek ? 7 : 0) + day - firstDayOfWeek;
  d.setDate(d.getDate() - diff);
  return d;
}
function endOfWeek(date, firstDayOfWeek = DaysOfWeek.Monday) {
  var d = new Date(date);
  var day = d.getDay();
  var diff = (day < firstDayOfWeek ? -7 : 0) + 6 - (day - firstDayOfWeek);
  d.setDate(d.getDate() + diff);
  return d;
}
function startOfMonth(date) {
  return new Date(date.getFullYear(), date.getMonth(), 1);
}
function endOfMonth(date) {
  return new Date(date.getFullYear(), date.getMonth() + 1, 0);
}
function setMonth(date, month) {
  const d = new Date(date);
  d.setMonth(month);
  return d;
}
function setYear(date, year) {
  const d = new Date(date);
  d.setFullYear(year);
  return d;
}
/**
 * Check if date is within a min and max
 */
function inRange(date, min, max) {
  return clamp(date, min, max) === date;
}
/**
 * Ensures date is within range, returns min or max if out of bounds
 */
function clamp(date, min, max) {
  const time = date.getTime();
  if (min && min instanceof Date && time < min.getTime()) {
    return min;
  }
  if (max && max instanceof Date && time > max.getTime()) {
    return max;
  }
  return date;
}
/**
 * given start and end date, return an (inclusive) array of all dates in between
 * @param start
 * @param end
 */
function getDaysInRange(start, end) {
  const days = [];
  let current = start;
  while (!isEqual(current, end)) {
    days.push(current);
    current = addDays(current, 1);
  }
  days.push(current);
  return days;
}
/**
 * given a date, return an array of dates from a calendar perspective
 * @param date
 * @param firstDayOfWeek
 */
function getViewOfMonth(date, firstDayOfWeek = DaysOfWeek.Monday) {
  const start = startOfWeek(startOfMonth(date), firstDayOfWeek);
  const end = endOfWeek(endOfMonth(date), firstDayOfWeek);
  return getDaysInRange(start, end);
}
/**
 * Form random hash
 */
function chr4() {
  return Math.random()
    .toString(16)
    .slice(-4);
}
/**
 * Create random identifier with a prefix
 * @param prefix
 */
function createIdentifier(prefix) {
  return `${prefix}-${chr4()}${chr4()}-${chr4()}-${chr4()}-${chr4()}-${chr4()}${chr4()}${chr4()}`;
}

const DatePickerInput = ({ onClick, dateFormatter, localization, name, formattedValue, valueAsDate, value, identifier, disabled, required, role, buttonRef, inputRef, onInput, onBlur, onFocus, }) => {
  return (hAsync("div", { class: "duet-date__input-wrapper" },
    hAsync("input", { class: "duet-date__input", value: formattedValue, placeholder: localization.placeholder, id: identifier, disabled: disabled, role: role, required: required ? true : undefined, "aria-autocomplete": "none", onInput: onInput, onFocus: onFocus, onBlur: onBlur, autoComplete: "off", ref: inputRef }),
    hAsync("input", { type: "hidden", name: name, value: value }),
    hAsync("button", { class: "duet-date__toggle", onClick: onClick, disabled: disabled, ref: buttonRef, type: "button" },
      hAsync("span", { class: "duet-date__toggle-icon" },
        hAsync("svg", { "aria-hidden": "true", height: "24", viewBox: "0 0 21 21", width: "24", xmlns: "http://www.w3.org/2000/svg" },
          hAsync("g", { fill: "none", "fill-rule": "evenodd", transform: "translate(2 2)" },
            hAsync("path", { d: "m2.5.5h12c1.1045695 0 2 .8954305 2 2v12c0 1.1045695-.8954305 2-2 2h-12c-1.1045695 0-2-.8954305-2-2v-12c0-1.1045695.8954305-2 2-2z", stroke: "currentColor", "stroke-linecap": "round", "stroke-linejoin": "round" }),
            hAsync("path", { d: "m.5 4.5h16", stroke: "currentColor", "stroke-linecap": "round", "stroke-linejoin": "round" }),
            hAsync("g", { fill: "currentColor" },
              hAsync("circle", { cx: "8.5", cy: "8.5", r: "1" }),
              hAsync("circle", { cx: "4.5", cy: "8.5", r: "1" }),
              hAsync("circle", { cx: "12.5", cy: "8.5", r: "1" }),
              hAsync("circle", { cx: "8.5", cy: "12.5", r: "1" }),
              hAsync("circle", { cx: "4.5", cy: "12.5", r: "1" }),
              hAsync("circle", { cx: "12.5", cy: "12.5", r: "1" }))))),
      hAsync("span", { class: "duet-date__vhidden" },
        localization.buttonLabel,
        valueAsDate && (hAsync("span", null,
          ", ",
          localization.selectedDateMessage,
          " ",
          dateFormatter.format(valueAsDate)))))));
};

const DatePickerDay = ({ focusedDay, today, day, onDaySelect, onKeyboardNavigation, focusedDayRef, inRange, isSelected, dateFormatter, }) => {
  const isToday = isEqual(day, today);
  const isFocused = isEqual(day, focusedDay);
  const isDisabled = day.getMonth() !== focusedDay.getMonth();
  const isOutsideRange = !inRange;
  function handleClick(e) {
    onDaySelect(e, day);
  }
  return (hAsync("button", { class: {
      "duet-date__day": true,
      "is-outside": isOutsideRange,
      "is-disabled": isDisabled,
      "is-today": isToday,
    }, tabIndex: isFocused ? 0 : -1, onClick: handleClick, onKeyDown: onKeyboardNavigation, disabled: isOutsideRange || isDisabled, type: "button", "aria-pressed": isSelected ? "true" : "false", ref: el => {
      if (isFocused && el && focusedDayRef) {
        focusedDayRef(el);
      }
    } },
    hAsync("span", { "aria-hidden": "true" }, day.getDate()),
    hAsync("span", { class: "duet-date__vhidden" }, dateFormatter.format(day))));
};

function chunk(array, chunkSize) {
  const result = [];
  for (let i = 0; i < array.length; i += chunkSize) {
    result.push(array.slice(i, i + chunkSize));
  }
  return result;
}
function mapWithOffset(array, startingOffset, mapFn) {
  return array.map((_, i) => {
    const adjustedIndex = (i + startingOffset) % array.length;
    return mapFn(array[adjustedIndex]);
  });
}
const DatePickerMonth = ({ selectedDate, focusedDate, labelledById, localization, firstDayOfWeek, min, max, dateFormatter, onDateSelect, onKeyboardNavigation, focusedDayRef, }) => {
  const today = new Date();
  const days = getViewOfMonth(focusedDate, firstDayOfWeek);
  return (hAsync("table", { class: "duet-date__table", "aria-labelledby": labelledById },
    hAsync("thead", null,
      hAsync("tr", null, mapWithOffset(localization.dayNames, firstDayOfWeek, dayName => (hAsync("th", { class: "duet-date__table-header", scope: "col" },
        hAsync("span", { "aria-hidden": "true" }, dayName.substr(0, 2)),
        hAsync("span", { class: "duet-date__vhidden" }, dayName)))))),
    hAsync("tbody", null, chunk(days, 7).map(week => (hAsync("tr", { class: "duet-date__row" }, week.map(day => (hAsync("td", { class: "duet-date__cell" },
      hAsync(DatePickerDay, { day: day, today: today, focusedDay: focusedDate, isSelected: isEqual(day, selectedDate), inRange: inRange(day, min, max), onDaySelect: onDateSelect, dateFormatter: dateFormatter, onKeyboardNavigation: onKeyboardNavigation, focusedDayRef: focusedDayRef }))))))))));
};

const localization = {
  buttonLabel: "Choose date",
  placeholder: "YYYY-MM-DD",
  selectedDateMessage: "Selected date is",
  prevMonthLabel: "Previous month",
  nextMonthLabel: "Next month",
  monthSelectLabel: "Month",
  yearSelectLabel: "Year",
  closeLabel: "Close window",
  keyboardInstruction: "You can use arrow keys to navigate dates",
  calendarHeading: "Choose a date",
  dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  monthNames: [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December",
  ],
  monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
  locale: "en-GB",
};

const isoAdapter = { parse: parseISODate, format: printISODate };

const duetDatePickerCss = ".duet-date *,.duet-date *::before,.duet-date *::after{box-sizing:border-box;margin:0;width:auto}.duet-date{box-sizing:border-box;color:var(--duet-color-text);display:block;font-family:var(--duet-font);margin:0;position:relative;text-align:left;width:100%}.duet-date__input{-webkit-appearance:none;appearance:none;background:var(--duet-color-surface);border:1px solid var(--duet-color-text);border-radius:var(--duet-radius);color:var(--duet-color-text);float:none;font-family:var(--duet-font);font-size:100%;line-height:normal;padding:14px 60px 14px 14px;width:100%}.duet-date__input:focus{border-color:var(--duet-color-primary);box-shadow:0 0 0 1px var(--duet-color-primary);outline:0}.duet-date__input::-webkit-input-placeholder{color:var(--duet-color-placeholder);opacity:1}.duet-date__input:-moz-placeholder{color:var(--duet-color-placeholder);opacity:1}.duet-date__input:-ms-input-placeholder{color:var(--duet-color-placeholder)}.duet-date__input-wrapper{position:relative;width:100%}.duet-date__toggle{-moz-appearance:none;-webkit-appearance:none;-webkit-user-select:none;align-items:center;appearance:none;background:var(--duet-color-button);border:0;border-radius:0;border-bottom-right-radius:var(--duet-radius);border-top-right-radius:var(--duet-radius);box-shadow:inset 1px 0 0 rgba(0, 0, 0, 0.1);color:var(--duet-color-text);cursor:pointer;display:flex;height:calc(100% - 2px);justify-content:center;padding:0;position:absolute;right:1px;top:1px;user-select:none;width:48px;z-index:2}.duet-date__toggle:focus{box-shadow:0 0 0 2px var(--duet-color-primary);outline:0}.duet-date__toggle-icon{display:flex;flex-basis:100%;justify-content:center;align-items:center}.duet-date__dialog{display:flex;left:0;min-width:320px;opacity:0;position:absolute;top:100%;transform:scale(0.96) translateZ(0) translateY(-20px);transform-origin:top right;transition:transform 300ms ease, opacity 300ms ease, visibility 300ms ease;visibility:hidden;width:100%;will-change:transform, opacity, visibility;z-index:var(--duet-z-index)}@media (max-width: 35.9375em){.duet-date__dialog{background:var(--duet-color-overlay);bottom:0;position:fixed;right:0;top:0;transform:translateZ(0);transform-origin:bottom center}}.duet-date__dialog.is-left{left:auto;right:0;width:auto}.duet-date__dialog.is-active{opacity:1;transform:scale(1.0001) translateZ(0) translateY(0);visibility:visible}.duet-date__dialog-content{background:var(--duet-color-surface);border:1px solid rgba(0, 0, 0, 0.1);border-radius:var(--duet-radius);box-shadow:0 4px 10px 0 rgba(0, 0, 0, 0.1);margin-left:auto;margin-top:8px;max-width:310px;min-width:290px;padding:16px 16px 20px;position:relative;transform:none;width:100%;z-index:var(--duet-z-index)}@media (max-width: 35.9375em){.duet-date__dialog-content{border:0;border-radius:0;border-top-left-radius:var(--duet-radius);border-top-right-radius:var(--duet-radius);bottom:0;left:0;margin:0;max-width:none;min-height:26em;opacity:0;padding:0 8% 20px;position:absolute;transform:translateZ(0) translateY(100%);transition:transform 400ms ease, opacity 400ms ease, visibility 400ms ease;visibility:hidden;will-change:transform, opacity, visibility}.is-active .duet-date__dialog-content{opacity:1;transform:translateZ(0) translateY(0);visibility:visible}}.duet-date__table{border-collapse:collapse;border-spacing:0;color:var(--duet-color-text);font-size:1rem;font-weight:var(--duet-font-normal);line-height:1.25;text-align:center;width:100%}.duet-date__table-header{font-size:0.75rem;font-weight:var(--duet-font-bold);letter-spacing:1px;line-height:1.25;padding-bottom:8px;text-decoration:none;text-transform:uppercase}.duet-date__cell{text-align:center}.duet-date__day{-moz-appearance:none;-webkit-appearance:none;appearance:none;background:transparent;border:0;border-radius:50%;color:var(--duet-color-text);cursor:pointer;display:inline-block;font-family:var(--duet-font);font-size:0.875rem;font-variant-numeric:tabular-nums;font-weight:var(--duet-font-normal);height:36px;line-height:1.25;padding:0 0 1px;position:relative;text-align:center;vertical-align:middle;width:36px;z-index:1}.duet-date__day.is-today{box-shadow:0 0 0 1px var(--duet-color-primary);position:relative;z-index:200}.duet-date__day:hover::before,.duet-date__day.is-today::before{background:var(--duet-color-primary);border-radius:50%;bottom:0;content:\"\";left:0;opacity:0.06;position:absolute;right:0;top:0}.duet-date__day[aria-pressed=true],.duet-date__day:focus{background:var(--duet-color-primary);box-shadow:none;color:var(--duet-color-text-active);outline:0}.duet-date__day:active{background:var(--duet-color-primary);box-shadow:0 0 5px var(--duet-color-primary);color:var(--duet-color-text-active);z-index:200}.duet-date__day:focus{box-shadow:0 0 5px var(--duet-color-primary);z-index:200}.duet-date__day.is-disabled{background:transparent;box-shadow:none;color:var(--duet-color-text);cursor:default;opacity:0.5}.duet-date__day.is-disabled::before{display:none}.duet-date__day.is-outside{background:var(--duet-color-button);box-shadow:none;color:var(--duet-color-text);cursor:default;opacity:0.6;pointer-events:none}.duet-date__day.is-outside::before{display:none}.duet-date__header{align-items:center;display:flex;justify-content:space-between;margin-bottom:16px;width:100%}.duet-date__nav{white-space:nowrap}.duet-date__prev,.duet-date__next{-moz-appearance:none;-webkit-appearance:none;align-items:center;appearance:none;background:var(--duet-color-button);border:0;border-radius:50%;color:var(--duet-color-text);cursor:pointer;display:inline-flex;height:32px;justify-content:center;margin-left:8px;padding:0;transition:background-color 300ms ease;width:32px}@media (max-width: 35.9375em){.duet-date__prev,.duet-date__next{height:40px;width:40px}}.duet-date__prev:focus,.duet-date__next:focus{box-shadow:0 0 0 2px var(--duet-color-primary);outline:0}.duet-date__prev:active:focus,.duet-date__next:active:focus{box-shadow:none}.duet-date__prev:disabled,.duet-date__next:disabled{cursor:default;opacity:0.5}.duet-date__prev svg,.duet-date__next svg{margin:0 auto}.duet-date__select{display:inline-flex;margin-top:4px;position:relative}.duet-date__select span{margin-right:4px}.duet-date__select select{cursor:pointer;font-size:1rem;height:100%;left:0;opacity:0;position:absolute;top:0;width:100%;z-index:2}.duet-date__select select:focus+.duet-date__select-label{box-shadow:0 0 0 2px var(--duet-color-primary)}.duet-date__select-label{align-items:center;border-radius:var(--duet-radius);color:var(--duet-color-text);display:flex;font-size:1.25rem;font-weight:var(--duet-font-bold);line-height:1.25;padding:0 4px 0 8px;pointer-events:none;position:relative;width:100%;z-index:1}.duet-date__select-label svg{width:16px;height:16px}.duet-date__mobile{align-items:center;border-bottom:1px solid rgba(0, 0, 0, 0.12);display:flex;justify-content:space-between;margin-bottom:20px;margin-left:-10%;overflow:hidden;padding:12px 20px;position:relative;text-overflow:ellipsis;white-space:nowrap;width:120%}@media (min-width: 36em){.duet-date__mobile{border:0;margin:0;overflow:visible;padding:0;position:absolute;right:-8px;top:-8px;width:auto}}.duet-date__mobile-heading{display:inline-block;font-weight:var(--duet-font-bold);max-width:84%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}@media (min-width: 36em){.duet-date__mobile-heading{display:none}}.duet-date__close{-webkit-appearance:none;align-items:center;appearance:none;background:var(--duet-color-button);border:0;border-radius:50%;color:var(--duet-color-text);cursor:pointer;display:flex;height:24px;justify-content:center;padding:0;width:24px}@media (min-width: 36em){.duet-date__close{opacity:0}}.duet-date__close:focus{box-shadow:0 0 0 2px var(--duet-color-primary);outline:none}@media (min-width: 36em){.duet-date__close:focus{opacity:1}}.duet-date__close svg{margin:0 auto}.duet-date__vhidden{border:0;clip:rect(1px, 1px, 1px, 1px);height:1px;overflow:hidden;padding:0;position:absolute;top:0;width:1px}";

function range(from, to) {
  var result = [];
  for (var i = from; i <= to; i++) {
    result.push(i);
  }
  return result;
}
const keyCode = {
  TAB: 9,
  ESC: 27,
  SPACE: 32,
  PAGE_UP: 33,
  PAGE_DOWN: 34,
  END: 35,
  HOME: 36,
  LEFT: 37,
  UP: 38,
  RIGHT: 39,
  DOWN: 40,
};
const DISALLOWED_CHARACTERS = /[^0-9\.\/\-]+/g;
const TRANSITION_MS = 300;
class DuetDatePicker {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.duetChange = createEvent$1(this, "duetChange", 7);
    this.duetBlur = createEvent$1(this, "duetBlur", 7);
    this.duetFocus = createEvent$1(this, "duetFocus", 7);
    /**
     * Own Properties
     */
    this.monthSelectId = createIdentifier("DuetDateMonth");
    this.yearSelectId = createIdentifier("DuetDateYear");
    this.dialogLabelId = createIdentifier("DuetDateLabel");
    this.initialTouchX = null;
    this.initialTouchY = null;
    /**
     * State() variables
     */
    this.activeFocus = false;
    this.focusedDay = new Date();
    this.open = false;
    /**
     * Public Property API
     */
    /**
     * Name of the date picker input.
     */
    this.name = "date";
    /**
     * Adds a unique identifier for the date picker input. Use this instead of html `id` attribute.
     */
    this.identifier = "";
    /**
     * Makes the date picker input component disabled. This prevents users from being able to
     * interact with the input, and conveys its inactive state to assistive technologies.
     */
    this.disabled = false;
    /**
     * Forces the opening direction of the calendar modal to be always left or right.
     * This setting can be useful when the input is smaller than the opening date picker
     * would be as by default the picker always opens towards right.
     */
    this.direction = "right";
    /**
     * Should the input be marked as required?
     */
    this.required = false;
    /**
     * Date value. Must be in IS0-8601 format: YYYY-MM-DD.
     */
    this.value = "";
    /**
     * Minimum date allowed to be picked. Must be in IS0-8601 format: YYYY-MM-DD.
     * This setting can be used alone or together with the max property.
     */
    this.min = "";
    /**
     * Maximum date allowed to be picked. Must be in IS0-8601 format: YYYY-MM-DD.
     * This setting can be used alone or together with the min property.
     */
    this.max = "";
    /**
     * Which day is considered first day of the week? `0` for Sunday, `1` for Monday, etc.
     * Default is Monday.
     */
    this.firstDayOfWeek = DaysOfWeek.Monday;
    /**
     * Button labels, day names, month names, etc, used for localization.
     * Default is English.
     */
    this.localization = localization;
    /**
     * Date adapter, for custom parsing/formatting.
     * Must be object with a `parse` function which accepts a `string` and returns a `Date`,
     * and a `format` function which accepts a `Date` and returns a `string`.
     * Default is IS0-8601 parsing and formatting.
     */
    this.dateAdapter = isoAdapter;
    /**
     * Local methods.
     */
    this.enableActiveFocus = () => {
      this.activeFocus = true;
    };
    this.disableActiveFocus = () => {
      this.activeFocus = false;
    };
    this.toggleOpen = (e) => {
      e.preventDefault();
      this.open ? this.hide(false) : this.show();
    };
    this.handleEscKey = (event) => {
      if (event.keyCode === keyCode.ESC) {
        this.hide();
      }
    };
    this.handleBlur = (event) => {
      event.stopPropagation();
      this.duetBlur.emit({
        component: "duet-date-picker",
      });
    };
    this.handleFocus = (event) => {
      event.stopPropagation();
      this.duetFocus.emit({
        component: "duet-date-picker",
      });
    };
    this.handleTouchStart = (event) => {
      const touch = event.changedTouches[0];
      this.initialTouchX = touch.pageX;
      this.initialTouchY = touch.pageY;
    };
    this.handleTouchMove = (event) => {
      event.preventDefault();
    };
    this.handleTouchEnd = (event) => {
      const touch = event.changedTouches[0];
      const distX = touch.pageX - this.initialTouchX; // get horizontal dist traveled
      const distY = touch.pageY - this.initialTouchY; // get vertical dist traveled
      const threshold = 70;
      const isHorizontalSwipe = Math.abs(distX) >= threshold && Math.abs(distY) <= threshold;
      const isDownwardsSwipe = Math.abs(distY) >= threshold && Math.abs(distX) <= threshold && distY > 0;
      if (isHorizontalSwipe) {
        this.addMonths(distX < 0 ? 1 : -1);
      }
      else if (isDownwardsSwipe) {
        this.hide(false);
        event.preventDefault();
      }
      this.initialTouchY = null;
      this.initialTouchX = null;
    };
    this.handleNextMonthClick = (event) => {
      event.preventDefault();
      this.addMonths(1);
    };
    this.handlePreviousMonthClick = (event) => {
      event.preventDefault();
      this.addMonths(-1);
    };
    this.handleFirstFocusableKeydown = (event) => {
      // this ensures focus is trapped inside the dialog
      if (event.keyCode === keyCode.TAB && event.shiftKey) {
        this.focusedDayNode.focus();
        event.preventDefault();
      }
    };
    this.handleKeyboardNavigation = (event) => {
      // handle tab separately, since it needs to be treated
      // differently to other keyboard interactions
      if (event.keyCode === keyCode.TAB && !event.shiftKey) {
        event.preventDefault();
        this.firstFocusableElement.focus();
        return;
      }
      var handled = true;
      switch (event.keyCode) {
        case keyCode.RIGHT:
          this.addDays(1);
          break;
        case keyCode.LEFT:
          this.addDays(-1);
          break;
        case keyCode.DOWN:
          this.addDays(7);
          break;
        case keyCode.UP:
          this.addDays(-7);
          break;
        case keyCode.PAGE_UP:
          if (event.shiftKey) {
            this.addYears(-1);
          }
          else {
            this.addMonths(-1);
          }
          break;
        case keyCode.PAGE_DOWN:
          if (event.shiftKey) {
            this.addYears(1);
          }
          else {
            this.addMonths(1);
          }
          break;
        case keyCode.HOME:
          this.startOfWeek();
          break;
        case keyCode.END:
          this.endOfWeek();
          break;
        default:
          handled = false;
      }
      if (handled) {
        event.preventDefault();
        this.enableActiveFocus();
      }
    };
    this.handleDaySelect = (_event, day) => {
      if (!inRange(day, parseISODate(this.min), parseISODate(this.max))) {
        return;
      }
      if (day.getMonth() === this.focusedDay.getMonth()) {
        this.setValue(day);
        this.hide();
      }
      else {
        this.setFocusedDay(day);
      }
    };
    this.handleMonthSelect = e => {
      this.setMonth(parseInt(e.target.value, 10));
    };
    this.handleYearSelect = e => {
      this.setYear(parseInt(e.target.value, 10));
    };
    this.handleInputChange = (e) => {
      const target = e.target;
      // clean up any invalid characters
      target.value = target.value.replace(DISALLOWED_CHARACTERS, "");
      const parsed = this.dateAdapter.parse(target.value, createDate);
      if (parsed || target.value === "") {
        this.setValue(parsed);
      }
    };
    this.processFocusedDayNode = (element) => {
      this.focusedDayNode = element;
      if (this.activeFocus && this.open) {
        setTimeout(() => element.focus(), 0);
      }
    };
  }
  connectedCallback() {
    this.createDateFormatters();
  }
  createDateFormatters() {
    this.dateFormatShort = new Intl.DateTimeFormat(this.localization.locale, { day: "numeric", month: "long" });
    this.dateFormatLong = new Intl.DateTimeFormat(this.localization.locale, {
      day: "numeric",
      month: "long",
      year: "numeric",
    });
  }
  /**
   * Component event handling.
   */
  handleDocumentClick(e) {
    if (!this.open) {
      return;
    }
    const target = e.target;
    // TODO: stopPropagation only on open??
    // the dialog and the button aren't considered clicks outside.
    // dialog for obvious reasons, but the button needs to be skipped
    // so that two things are possible:
    //
    // a) clicking again on the button when dialog is open should close the modal.
    //    without skipping the button here, we would see a click outside
    //    _and_ a click on the button, so the `open` state goes
    //    open -> close (click outside) -> open (click button)
    //
    // b) clicking another date picker's button should close the current calendar
    //    and open the new one. this means we can't stopPropagation() on the button itself
    //
    // this was the only satisfactory combination of things to get the above to work
    if (this.dialogWrapperNode.contains(target) || this.datePickerButton.contains(target)) {
      return;
    }
    this.hide(false);
  }
  /**
   * Public methods API
   */
  /**
   * Sets focus on the date picker's input. Use this method instead of the global `focus()`.
   */
  async setFocus() {
    return this.datePickerInput.focus();
  }
  /**
   * Show the calendar modal, moving focus to the calendar inside.
   */
  async show() {
    this.open = true;
    this.setFocusedDay(parseISODate(this.value) || new Date());
    clearTimeout(this.focusTimeoutId);
    this.focusTimeoutId = setTimeout(() => this.monthSelectNode.focus(), TRANSITION_MS);
  }
  /**
   * Hide the calendar modal. Set `moveFocusToButton` to false to prevent focus
   * returning to the date picker's button. Default is true.
   */
  async hide(moveFocusToButton = true) {
    this.open = false;
    // in cases where calendar is quickly shown and hidden
    // we should avoid moving focus to the button
    clearTimeout(this.focusTimeoutId);
    if (moveFocusToButton) {
      // iOS VoiceOver needs to wait for all transitions to finish.
      setTimeout(() => this.datePickerButton.focus(), TRANSITION_MS + 200);
    }
  }
  addDays(days) {
    this.setFocusedDay(addDays(this.focusedDay, days));
  }
  addMonths(months) {
    this.setMonth(this.focusedDay.getMonth() + months);
  }
  addYears(years) {
    this.setYear(this.focusedDay.getFullYear() + years);
  }
  startOfWeek() {
    this.setFocusedDay(startOfWeek(this.focusedDay, this.firstDayOfWeek));
  }
  endOfWeek() {
    this.setFocusedDay(endOfWeek(this.focusedDay, this.firstDayOfWeek));
  }
  setMonth(month) {
    const min = setMonth(startOfMonth(this.focusedDay), month);
    const max = endOfMonth(min);
    const date = setMonth(this.focusedDay, month);
    this.setFocusedDay(clamp(date, min, max));
  }
  setYear(year) {
    const min = setYear(startOfMonth(this.focusedDay), year);
    const max = endOfMonth(min);
    const date = setYear(this.focusedDay, year);
    this.setFocusedDay(clamp(date, min, max));
  }
  setFocusedDay(day) {
    this.focusedDay = clamp(day, parseISODate(this.min), parseISODate(this.max));
  }
  setValue(date) {
    this.value = printISODate(date);
    this.duetChange.emit({
      component: "duet-date-picker",
      value: this.value,
      valueAsDate: date,
    });
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    const valueAsDate = parseISODate(this.value);
    const formattedDate = valueAsDate && this.dateAdapter.format(valueAsDate);
    const selectedYear = (valueAsDate || this.focusedDay).getFullYear();
    const focusedMonth = this.focusedDay.getMonth();
    const focusedYear = this.focusedDay.getFullYear();
    const minDate = parseISODate(this.min);
    const maxDate = parseISODate(this.max);
    const prevMonthDisabled = minDate != null && minDate.getMonth() === focusedMonth && minDate.getFullYear() === focusedYear;
    const nextMonthDisabled = maxDate != null && maxDate.getMonth() === focusedMonth && maxDate.getFullYear() === focusedYear;
    const minYear = minDate ? minDate.getFullYear() : selectedYear - 10;
    const maxYear = maxDate ? maxDate.getFullYear() : selectedYear + 10;
    return (hAsync(Host$1, null, hAsync("div", { class: "duet-date" }, hAsync(DatePickerInput, { dateFormatter: this.dateFormatLong, value: this.value, valueAsDate: valueAsDate, formattedValue: formattedDate, onInput: this.handleInputChange, onBlur: this.handleBlur, onFocus: this.handleFocus, onClick: this.toggleOpen, name: this.name, disabled: this.disabled, role: this.role, required: this.required, identifier: this.identifier, localization: this.localization, buttonRef: element => (this.datePickerButton = element), inputRef: element => (this.datePickerInput = element) }), hAsync("div", { class: {
        "duet-date__dialog": true,
        "is-left": this.direction === "left",
        "is-active": this.open,
      }, role: "dialog", "aria-modal": "true", "aria-hidden": this.open ? "false" : "true", "aria-labelledby": this.dialogLabelId, onTouchMove: this.handleTouchMove, onTouchStart: this.handleTouchStart, onTouchEnd: this.handleTouchEnd }, hAsync("div", { class: "duet-date__dialog-content", onKeyDown: this.handleEscKey, ref: element => (this.dialogWrapperNode = element) }, hAsync("div", { class: "duet-date__vhidden duet-date__instructions", "aria-live": "polite" }, this.localization.keyboardInstruction), hAsync("div", { class: "duet-date__mobile", onFocusin: this.disableActiveFocus }, hAsync("label", { class: "duet-date__mobile-heading" }, this.localization.calendarHeading), hAsync("button", { class: "duet-date__close", ref: element => (this.firstFocusableElement = element), onKeyDown: this.handleFirstFocusableKeydown, onClick: () => this.hide(), type: "button" }, hAsync("svg", { "aria-hidden": "true", fill: "currentColor", xmlns: "http://www.w3.org/2000/svg", width: "16", height: "16", viewBox: "0 0 24 24" }, hAsync("path", { d: "M0 0h24v24H0V0z", fill: "none" }), hAsync("path", { d: "M18.3 5.71c-.39-.39-1.02-.39-1.41 0L12 10.59 7.11 5.7c-.39-.39-1.02-.39-1.41 0-.39.39-.39 1.02 0 1.41L10.59 12 5.7 16.89c-.39.39-.39 1.02 0 1.41.39.39 1.02.39 1.41 0L12 13.41l4.89 4.89c.39.39 1.02.39 1.41 0 .39-.39.39-1.02 0-1.41L13.41 12l4.89-4.89c.38-.38.38-1.02 0-1.4z" })), hAsync("span", { class: "duet-date__vhidden" }, this.localization.closeLabel))), hAsync("div", { class: "duet-date__header", onFocusin: this.disableActiveFocus }, hAsync("div", null, hAsync("h2", { id: this.dialogLabelId, class: "duet-date__vhidden", "aria-live": "polite", "aria-atomic": "true" }, this.localization.monthNames[focusedMonth], " ", this.focusedDay.getFullYear()), hAsync("label", { htmlFor: this.monthSelectId, class: "duet-date__vhidden" }, this.localization.monthSelectLabel), hAsync("div", { class: "duet-date__select" }, hAsync("select", { id: this.monthSelectId, class: "duet-date__select--month", ref: element => (this.monthSelectNode = element), onChange: this.handleMonthSelect }, this.localization.monthNames.map((month, i) => (hAsync("option", { key: month, value: i, selected: i === focusedMonth }, month)))), hAsync("div", { class: "duet-date__select-label", "aria-hidden": "true" }, hAsync("span", null, this.localization.monthNamesShort[focusedMonth]), hAsync("svg", { fill: "currentColor", xmlns: "http://www.w3.org/2000/svg", width: "16", height: "16", viewBox: "0 0 24 24" }, hAsync("path", { d: "M8.12 9.29L12 13.17l3.88-3.88c.39-.39 1.02-.39 1.41 0 .39.39.39 1.02 0 1.41l-4.59 4.59c-.39.39-1.02.39-1.41 0L6.7 10.7c-.39-.39-.39-1.02 0-1.41.39-.38 1.03-.39 1.42 0z" })))), hAsync("label", { htmlFor: this.yearSelectId, class: "duet-date__vhidden" }, this.localization.yearSelectLabel), hAsync("div", { class: "duet-date__select" }, hAsync("select", { id: this.yearSelectId, class: "duet-date__select--year", onChange: this.handleYearSelect }, range(minYear, maxYear).map(year => (hAsync("option", { key: year, selected: year === focusedYear }, year)))), hAsync("div", { class: "duet-date__select-label", "aria-hidden": "true" }, hAsync("span", null, this.focusedDay.getFullYear()), hAsync("svg", { fill: "currentColor", xmlns: "http://www.w3.org/2000/svg", width: "16", height: "16", viewBox: "0 0 24 24" }, hAsync("path", { d: "M8.12 9.29L12 13.17l3.88-3.88c.39-.39 1.02-.39 1.41 0 .39.39.39 1.02 0 1.41l-4.59 4.59c-.39.39-1.02.39-1.41 0L6.7 10.7c-.39-.39-.39-1.02 0-1.41.39-.38 1.03-.39 1.42 0z" }))))), hAsync("div", { class: "duet-date__nav" }, hAsync("button", { class: "duet-date__prev", onClick: this.handlePreviousMonthClick, disabled: prevMonthDisabled, type: "button" }, hAsync("svg", { "aria-hidden": "true", fill: "currentColor", xmlns: "http://www.w3.org/2000/svg", width: "21", height: "21", viewBox: "0 0 24 24" }, hAsync("path", { d: "M14.71 15.88L10.83 12l3.88-3.88c.39-.39.39-1.02 0-1.41-.39-.39-1.02-.39-1.41 0L8.71 11.3c-.39.39-.39 1.02 0 1.41l4.59 4.59c.39.39 1.02.39 1.41 0 .38-.39.39-1.03 0-1.42z" })), hAsync("span", { class: "duet-date__vhidden" }, this.localization.prevMonthLabel)), hAsync("button", { class: "duet-date__next", onClick: this.handleNextMonthClick, disabled: nextMonthDisabled, type: "button" }, hAsync("svg", { "aria-hidden": "true", fill: "currentColor", xmlns: "http://www.w3.org/2000/svg", width: "21", height: "21", viewBox: "0 0 24 24" }, hAsync("path", { d: "M9.29 15.88L13.17 12 9.29 8.12c-.39-.39-.39-1.02 0-1.41.39-.39 1.02-.39 1.41 0l4.59 4.59c.39.39.39 1.02 0 1.41L10.7 17.3c-.39.39-1.02.39-1.41 0-.38-.39-.39-1.03 0-1.42z" })), hAsync("span", { class: "duet-date__vhidden" }, this.localization.nextMonthLabel)))), hAsync(DatePickerMonth, { dateFormatter: this.dateFormatShort, selectedDate: valueAsDate, focusedDate: this.focusedDay, onDateSelect: this.handleDaySelect, onKeyboardNavigation: this.handleKeyboardNavigation, labelledById: this.dialogLabelId, localization: this.localization, firstDayOfWeek: this.firstDayOfWeek, focusedDayRef: this.processFocusedDayNode, min: minDate, max: maxDate }))))));
  }
  get element() { return getElement$1(this); }
  static get watchers() { return {
    "localization": ["createDateFormatters"]
  }; }
  static get style() { return duetDatePickerCss; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "duet-date-picker",
    "$members$": {
      "name": [1],
      "identifier": [1],
      "disabled": [516],
      "role": [1],
      "direction": [1],
      "required": [4],
      "value": [513],
      "min": [1],
      "max": [1],
      "firstDayOfWeek": [2, "first-day-of-week"],
      "localization": [16],
      "dateAdapter": [16],
      "activeFocus": [32],
      "focusedDay": [32],
      "open": [32],
      "setFocus": [64],
      "show": [64],
      "hide": [64]
    },
    "$listeners$": [[6, "click", "handleDocumentClick"]],
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["disabled", "disabled"], ["value", "value"]]
  }; }
}

/**
 * @license
 * Scale https://github.com/telekom/scale
 *
 * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
const findSelected = (structure = [], id, parent) => structure.reduce((acc, item) => {
  if (item.id === id) {
    return { selected: item, parent };
  }
  if (item.children &&
    item.children.length &&
    !!findSelected(item.children, id, item).selected) {
    return findSelected(item.children, id, item);
  }
  return acc;
}, { selected: null, parent: null });
const findRootNode = (structure, id) => {
  let result = findSelected(structure, id);
  while (result.parent) {
    result = findSelected(structure, result.parent.id);
  }
  return result.selected;
};

const appHeaderCss = "scale-app-header{--header-nav-height:56px;--header-brand-height:72px;--header-border-radius:var(--scl-radius-12);--header-transition-speed:0.3s;--header-brand-collapsed-height:4px;--header-max-width:inherit;--background:var(--scl-color-primary);--font-weight:var(--scl-font-weight-regular);--border:1px solid var(--scl-color-grey-10);--color-brand:var(--scl-color-white);--background-brand:var(--scl-color-primary);--color-nav:var(--scl-color-text-standard);--background-nav:var(--scl-color-white);--spacing-nav:0 var(--scl-spacing-16)}@keyframes keyframes-slideUp{from{top:0}to{top:-56px}}.header__container{width:100%;height:128px}.header__user-menu--desktop{display:block}.header__user-menu--mobile{display:none}@media (max-width: 1023px){.header__container{width:100%;height:66px}.header__user-menu--desktop{display:none}.header__user-menu--mobile{display:block}}.header{width:100%;z-index:99;position:fixed;background:var(--background);font-weight:var(--font-weight)}.header .header__brand{color:var(--color-brand);background:var(--background-brand);display:flex;align-items:center}.header .header__nav{box-sizing:border-box;color:var(--color-nav);background:var(--background-nav);display:flex;align-items:center;border-top-left-radius:var(--header-border-radius);border-top-right-radius:var(--header-border-radius);border-bottom:1px solid transparent}.header.menu--open .header__nav,.header.header--sticky .header__nav{border-bottom:var(--border)}.header .header__nav-content{width:100%;display:flex;align-items:center}.header .header__nav-menu-wrapper{width:100%;display:flex;align-items:center;justify-content:space-between}.header.header--sticky .header__nav-before,.header.header--sticky .header__nav-after,.header.menu--open .header__nav-before,.header.menu--open .header__nav-after{width:var(--header-border-radius);bottom:calc(-2 * var(--header-border-radius));height:calc(2 * var(--header-border-radius));position:absolute;border-top:var(--border);box-shadow:0 calc(-1 * var(--header-border-radius)) 0 0 #fff;background-color:transparent}.header.menu--open .header__nav-before,.header.header--sticky .header__nav-before{left:-1px;z-index:97;border-left:var(--border);border-top-left-radius:var(--header-border-radius)}.header.menu--open .header__nav-after,.header.header--sticky .header__nav-after{right:-1px;z-index:98;border-right:var(--border);border-top-right-radius:var(--header-border-radius)}.header *[slot='menu-icon'],.header .meta-navigation{display:flex;padding:0;list-style:none;align-items:center;margin-block-start:0;margin-block-end:0}@media (max-width: 1023px){.header{height:var(--header-nav-height)}.header.menu--open .header__nav-before,.header.header--sticky .header__nav-before,.header.header--sticky .header__nav-after,.header.menu--open .header__nav-after{top:51px}.header .sector-navigation,.header .addon-navigation,.header *[slot='menu-main'],.header .main-navigation{display:none !important}.header .header__brand{width:100%;height:var(--header-nav-height);display:flex;padding:0 var(--scl-spacing-16);z-index:96;position:absolute;transition:height var(--header-transition-speed) ease-in-out;align-items:center;animation-name:keyframes-slideUp;animation-delay:0.5s;justify-content:space-between;animation-duration:0.75s;animation-fill-mode:forwards;animation-timing-function:cubic-bezier(0.42, 0, 0.1, 1)}.header .header__nav{top:4px;width:100%;height:calc(var(--header-nav-height) - 4px);padding:var(--spacing-nav);z-index:95;position:absolute}.header .header__nav__mobile-menu{top:var(--header-nav-height);width:100%;display:none;position:relative}.header .header__nav__mobile-menu--opened{height:calc(100vh - var(--header-nav-height));display:block;overflow-y:auto;background:#fff}.header .header__brand .header__brand-before,.header .header__brand .header__brand-after{width:var(--header-border-radius);bottom:calc(-2 * var(--header-border-radius));height:calc(2 * var(--header-border-radius));position:absolute;border-top:transparent;box-shadow:0 calc(-1 * var(--header-border-radius)) 0 0\n      var(--scl-color-primary);background-color:transparent}.header .header__brand .header__brand-before{left:-1px;z-index:97;border-left:transparent;border-top-left-radius:var(--header-border-radius)}.header .header__brand .header__brand-after{right:-1px;z-index:98;border-right:transparent;border-top-right-radius:var(--header-border-radius)}.header .header__brand .logo svg{width:auto;height:26px}}.header .header__nav .header__nav-logo svg path{fill:var(--scl-color-primary) !important}@media (min-width: 1024px){.header .header__nav-before{top:55px}.header .header__nav-after{top:55px}.header .mobile-menu,.header .header__nav__mobile-menu{display:none}.header .header__brand{height:var(--header-brand-height);padding:0 var(--scl-spacing-24);transition:height var(--header-transition-speed) ease-in-out;justify-content:space-between}.header .header__brand-content{top:0;width:100%;display:flex;opacity:1;position:relative;transition:opacity var(--header-transition-speed) ease-in-out,\n      top var(--header-transition-speed) ease-in-out;align-items:center}.header .header__nav{height:var(--header-nav-height);padding:0 var(--scl-spacing-24);position:relative}.header .header__nav-logo{width:50px;opacity:0;transition:opacity var(--header-transition-speed) ease-in-out;font-weight:var(--scl-font-weight-bold);margin-right:var(--scl-spacing-16);pointer-events:none}.header.header--sticky .header__nav-logo{pointer-events:all;margin-right:var(--scl-spacing-32)}.header scale-nav-main:first-child li{padding-left:0}.header *[slot='menu-main'],.header .main-navigation{height:var(--header-nav-height);margin:0;display:flex;padding:0;list-style:none;transition:margin-left var(--header-transition-speed) ease-in-out;align-items:center;margin-left:calc(-50px - var(--scl-spacing-16))}.header *[slot='menu-sector'],.header *[slot='menu-addon'],.header .sector-navigation{display:flex}.header .addon-navigation{display:flex;list-style:none}.header .sector-navigation .segment-navigation__item-link{margin:0 7px}.header .addon-navigation .segment-navigation__item-link{margin:0 0 0 14px}.header.header--sticky{--header-brand-height:4px}.header.header--sticky .header__nav-logo{opacity:1;transition:opacity var(--header-transition-speed) ease-in-out}.header.header--sticky .header__brand-content{top:56px;opacity:0;transition:opacity var(--header-transition-speed) ease-in-out,\n      top var(--header-transition-speed) ease-in-out}.header *[slot='menu-main'],.header.header--sticky .main-navigation{transition:margin-left var(--header-transition-speed) ease-in-out;margin-left:0}.header .sector-navigation .sector-navigation__portal-name{font-weight:var(--scl-font-weight-extrabold);font-size:var(--scl-font-variant-body-large-size);list-style-type:none}.header *[slot='menu-main'],scale-nav-main{height:100%}.header *[slot='logo'],.header .header__brand-content .header__brand-branding{width:100%;display:flex;align-items:center;justify-content:flex-start}.header .header__brand-content .header__brand-sector{width:100%;display:flex;align-items:center;justify-content:center}.header .header__brand-content .header__brand-meta{width:100%;display:flex;align-items:center;justify-content:flex-end}.header .header__brand app-logo{margin-right:var(--scl-spacing-16)}}@media (min-width: 1552px){.header .header__nav-content,.header .header__brand-content{margin:0 auto;max-width:var(--header-max-width)}}";

const readData = (data) => {
  let parsedData;
  try {
    parsedData = JSON.parse(data);
  }
  catch (error) {
    parsedData = data;
  }
  return parsedData;
};
class Header {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.portalName = '';
    this.mainNavigation = [];
    this.iconNavigation = [];
    this.userNavigation = [];
    this.sectorNavigation = [];
    this.addonNavigation = [];
    // DEPRECATED - megaMenuVisible should replace isMegaMenuVisible
    this.isMegaMenuVisible = false;
    this.megaMenuVisible = false;
    // DEPRECATED - mobileMenuVisible should replace isMobileMenuVisible
    this.isMobileMenuVisible = false;
    this.mobileMenuVisible = false;
    this.activeSegment = readData(this.sectorNavigation).find(({ id }) => id === this.activeSectorId) || readData(this.sectorNavigation)[0];
    this.mobileMenu = false;
    this.userMenu = false;
    this.userMenuMobile = false;
    this.visibleMegaMenu = '';
    this.scrolled = false;
  }
  megaMenuVisibleChange(isVisible) {
    this.visibleMegaMenu = isVisible;
  }
  // DEPRECATED - megaMenuVisible should replace isMegaMenuVisible
  isMegaMenuVisibleChange(isVisible) {
    this.visibleMegaMenu = isVisible;
  }
  onScroll() {
    this.scrolled = window.pageYOffset > 2;
  }
  handleCloseMenu() {
    if (this.mobileMenu) {
      this.mobileMenuToggle.focus();
    }
    this.mobileMenu = false;
  }
  handleCloseUserMenu() {
    this.userMenuToggle.focus();
    this.userMenu = false;
  }
  handleOpenUserMenu() {
    this.userMenu = true;
  }
  handleActiveSegment(newValue) {
    this.activeSegment =
      readData(this.sectorNavigation).find(({ id }) => id === newValue) || {};
  }
  componentWillLoad() {
    this.hasSlotMenuMain = !!this.hostElement.querySelector('[slot="menu-main"]');
    this.hasSlotMenuIcon = !!this.hostElement.querySelector('[slot="menu-icon"]');
    this.hasSlotMenuSector = !!this.hostElement.querySelector('[slot="menu-sector"]');
    this.hasSlotMenuAddon = !!this.hostElement.querySelector('[slot="menu-addon"]');
    this.hasSlotMenuMobile = !!this.hostElement.querySelector('[slot="menu-mobile"]');
    this.hasSlotLogo = !!this.hostElement.querySelector('[slot="logo"]');
  }
  componentDidUpdate() {
    this.hasSlotMenuMain = !!this.hostElement.querySelector('[slot="menu-main"]');
    this.hasSlotMenuIcon = !!this.hostElement.querySelector('[slot="menu-icon"]');
    this.hasSlotMenuSector = !!this.hostElement.querySelector('[slot="menu-sector"]');
    this.hasSlotMenuAddon = !!this.hostElement.querySelector('[slot="menu-addon"]');
    this.hasSlotMenuMobile = !!this.hostElement.querySelector('[slot="menu-mobile"]');
    this.hasSlotLogo = !!this.hostElement.querySelector('[slot="logo"]');
  }
  componentWillRender() {
    // make sure the deprecated props overwrite the actual ones if used
    // and show status note deprecated
    if (this.isMegaMenuVisible !== false) {
      statusNote({
        tag: 'deprecated',
        message: 'Property "isMegaMenuVisible" is deprecated. Please use the "megaMenuVisible" property!',
        type: 'warn',
        source: this.hostElement,
      });
    }
    if (this.isMobileMenuVisible !== false) {
      statusNote({
        tag: 'deprecated',
        message: 'Property "isMobileMenuVisible" is deprecated. Please use the "mobileMenuVisible" property!',
        type: 'warn',
        source: this.hostElement,
      });
    }
  }
  handleMobileMenu(event) {
    if (event) {
      event.preventDefault();
    }
    if (event && 'key' in event) {
      if (!['Escape', 'Enter'].includes(event.key)) {
        return;
      }
      if (event.key === 'Escape' && !this.mobileMenu) {
        return;
      }
      if (event.key === 'Enter' && this.mobileMenu) {
        return;
      }
    }
    this.userMenuMobile = false;
    this.mobileMenu = !this.mobileMenu;
  }
  handleSelectedSegment(event, item) {
    this.activeSegment = item;
    if (typeof item.onClick === 'function') {
      item.onClick(event);
    }
  }
  menuMain() {
    const rootNode = findRootNode(readData(this.mainNavigation), this.activeRouteId);
    const isActive = (item) => rootNode &&
      rootNode.id === item.id &&
      !this.visibleMegaMenu &&
      this.visibleMegaMenu !== null;
    return (hAsync("ul", { class: "main-navigation", onKeyDown: (e) => {
        if (e.key === 'Escape') {
          this.visibleMegaMenu = '';
        }
      } }, this.hasSlotMenuMain ? (hAsync("slot", { name: "menu-main" })) : (readData(this.mainNavigation).map((item) => (hAsync("scale-nav-main", { href: item.href, active: isActive(item), megaMenuVisible: this.visibleMegaMenu === item.id, onMouseEnter: () => {
        this.visibleMegaMenu = item.children ? item.id : null;
      }, onMouseLeave: () => {
        this.visibleMegaMenu = '';
      }, clickLink: (event) => {
        if (item.href) {
          this.visibleMegaMenu = '';
        }
        if (typeof item.onClick === 'function') {
          item.onClick(event);
        }
        this.visibleMegaMenu = item.children ? item.id : null;
      }, name: item.name }, item.children && item.children.length > 0 && (hAsync("app-mega-menu", { navigation: item.children, hide: () => {
        this.visibleMegaMenu = '';
      }, activeRouteId: this.activeRouteId, active: this.visibleMegaMenu === item.id }))))))));
  }
  menuIcon() {
    const { defaultName, openedName } = readData(this.iconNavigation).find(({ id }) => id === 'menu') || { defaultName: 'Menu', openedName: 'Close' };
    const { shortName = 'Login', badge, badgeLabel } = readData(this.userNavigation).find(({ type }) => type === 'userInfo') || {
      shortName: 'Login',
    };
    return (hAsync("ul", { class: "meta-navigation" }, this.hasSlotMenuIcon ? (hAsync("slot", { name: "menu-icon" })) : (readData(this.iconNavigation)
      .filter(({ id }) => id !== 'menu')
      .map((item) => (hAsync("scale-nav-icon", { icon: item.icon, href: item.href, badge: item.badge, badgeLabel: item.badgeLabel, clickLink: (event) => {
        if (typeof item.onClick === 'function') {
          item.onClick(event);
        }
      } }, item.name)))), readData(this.userNavigation).length > 0 && (hAsync("span", null, hAsync("span", { class: "header__user-menu--desktop" }, hAsync("scale-menu-flyout", null, hAsync("scale-nav-icon", { slot: "trigger", active: this.userMenu, icon: 'user-file-user', refUserMenuToggle: (el) => (this.userMenuToggle = el), badge: badge, badgeLabel: badgeLabel }, shortName), hAsync("scale-menu-flyout-list", null, hAsync("app-navigation-user-menu", { hide: () => {
        this.userMenu = false;
        this.userMenuToggle.focus();
      }, navigation: readData(this.userNavigation) })))), hAsync("span", { class: "header__user-menu--mobile" }, hAsync("scale-nav-icon", { slot: "trigger", active: this.userMenuMobile, icon: 'user-file-user', refMobileUserMenuToggle: (el) => (this.userMenuMobileToggle = el), clickLink: () => {
        this.mobileMenu = false;
        this.userMenuMobile = !this.userMenuMobile;
      }, badge: badge, badgeLabel: badgeLabel }, shortName)))), (readData(this.mainNavigation).length > 0 ||
      this.hasSlotMenuMobile) && (hAsync("scale-nav-icon", { mobileMenuOpen: this.mobileMenu, icon: this.mobileMenu ? 'action-circle-close' : 'action-menu', clickLink: (event) => this.handleMobileMenu(event), refMobileMenuToggle: (el) => (this.mobileMenuToggle = el), active: this.mobileMenu }, this.mobileMenu ? openedName : defaultName))));
  }
  menuSector() {
    return (hAsync("ul", { class: "sector-navigation" }, this.hasSlotMenuSector ? (hAsync("slot", { name: "menu-sector" })) : this.portalName ? (hAsync("li", { class: "sector-navigation__portal-name" }, this.portalName)) : (readData(this.sectorNavigation).map((item) => (hAsync("scale-nav-segment", { active: this.activeSegment.id === item.id, href: item.href, onClick: (event) => this.handleSelectedSegment(event, item), onFocus: () => {
        window.scrollTo({ top: 0 });
      } }, item.name))))));
  }
  menuAddon() {
    return (hAsync("ul", { class: "addon-navigation" }, this.hasSlotMenuAddon ? (hAsync("slot", { name: "menu-addon" })) : (readData(this.addonNavigation).map((item) => (hAsync("scale-nav-segment", { href: item.href, onClick: (event) => {
        if (typeof item.onClick === 'function') {
          item.onClick(event);
        }
      }, onFocus: () => {
        window.scrollTo({ top: 0 });
      } }, item.name))))));
  }
  render() {
    return (hAsync(Host$1, null, hAsync("header", { class: "header__container" }, hAsync("div", { class: this.getCssClassMap() }, hAsync("div", { class: "header__brand" }, hAsync("span", { class: "header__brand-before" }), hAsync("span", { class: "header__brand-after" }), hAsync("div", { class: "header__brand-content" }, hAsync("div", { class: "header__brand-branding" }, this.hasSlotLogo ? (hAsync("slot", { name: "logo" })) : (hAsync("app-logo", { claim: true, claimLang: this.claimLang, href: this.logoHref, logoTitle: this.logoTitle, onClick: this.logoClick }))), hAsync("div", { class: "header__brand-sector" }, this.menuSector()), hAsync("div", { class: "header__brand-meta" }, this.menuAddon()))), hAsync("nav", { class: "header__nav", "aria-label": "top" }, hAsync("span", { class: "header__nav-before" }), hAsync("span", { class: "header__nav-after" }), hAsync("div", { class: "header__nav-content" }, hAsync("div", { class: "header__nav-logo" }, hAsync("app-logo", { color: "#e20074", href: this.logoHref, logoTitle: this.logoTitle, onClick: this.logoClick, focusable: this.scrolled })), hAsync("div", { class: "header__nav-menu-wrapper" }, hAsync("div", { class: "header__nav-menu-main" }, this.menuMain()), hAsync("div", { class: "header__nav-menu-icon" }, this.menuIcon())))), hAsync("nav", { class: `header__nav__mobile-menu${this.mobileMenu ? ' header__nav__mobile-menu--opened' : ''}`, "aria-label": "main" }, this.hasSlotMenuMobile ? (hAsync("slot", { name: "menu-mobile" })) : (hAsync("div", null, hAsync("app-navigation-sector-mobile", { navigation: readData(this.sectorNavigation), activeSectorId: this.activeSectorId, hide: () => {
        this.handleMobileMenu();
        this.mobileMenuToggle.focus();
      } }), hAsync("app-navigation-main-mobile", { navigation: readData(this.mainNavigation), activeRouteId: this.activeRouteId, hide: () => {
        this.handleMobileMenu();
        this.mobileMenuToggle.focus();
      } })))), hAsync("nav", { class: `header__nav__mobile-menu${this.userMenuMobile ? ' header__nav__mobile-menu--opened' : ''}`, "aria-label": "main" }, hAsync("div", null, this.userMenuMobile && (hAsync("app-navigation-user-menu", { hide: () => {
        this.userMenuMobile = false;
        this.userMenuMobileToggle.focus();
      }, navigation: readData(this.userNavigation) }))))))));
  }
  getCssClassMap() {
    return classnames('header', this.scrolled && 'header--sticky', (this.visibleMegaMenu || this.mobileMenu || this.userMenuMobile) &&
      'menu--open');
  }
  get hostElement() { return getElement$1(this); }
  static get watchers() { return {
    "megaMenuVisible": ["megaMenuVisibleChange"],
    "isMegaMenuVisible": ["isMegaMenuVisibleChange"],
    "activeSectorId": ["handleActiveSegment"]
  }; }
  static get style() { return appHeaderCss; }
  static get cmpMeta() { return {
    "$flags$": 4,
    "$tagName$": "scale-app-header",
    "$members$": {
      "logoHref": [1, "logo-href"],
      "logoTitle": [1, "logo-title"],
      "logoClick": [8, "logo-click"],
      "claimLang": [1, "claim-lang"],
      "portalName": [1, "portal-name"],
      "mainNavigation": [8, "main-navigation"],
      "iconNavigation": [8, "icon-navigation"],
      "userNavigation": [8, "user-navigation"],
      "sectorNavigation": [8, "sector-navigation"],
      "addonNavigation": [8, "addon-navigation"],
      "activeRouteId": [1, "active-route-id"],
      "activeSectorId": [1, "active-sector-id"],
      "isMegaMenuVisible": [4, "is-mega-menu-visible"],
      "megaMenuVisible": [4, "mega-menu-visible"],
      "isMobileMenuVisible": [4, "is-mobile-menu-visible"],
      "mobileMenuVisible": [4, "mobile-menu-visible"],
      "activeSegment": [32],
      "mobileMenu": [32],
      "userMenu": [32],
      "userMenuMobile": [32],
      "visibleMegaMenu": [32],
      "scrolled": [32]
    },
    "$listeners$": [[9, "scroll", "onScroll"], [0, "closeMenu", "handleCloseMenu"], [0, "scale-close", "handleCloseUserMenu"], [0, "scale-open", "handleOpenUserMenu"]],
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const iconCss$15 = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class HomeHome {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 5.11l7.75 7.75V19a2.245 2.245 0 01-2.25 2.25h-4.75v-4.5a.75.75 0 10-1.5 0v4.5H6.5A2.245 2.245 0 014.25 19v-6.14zm0-4.24l11.565 11.565-1.06 1.06L12 2.99 1.495 13.495l-1.06-1.06z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M19 12.1l1.5 1.5V19c0 1.65-1.35 3-3 3h-11c-1.65 0-3-1.35-3-3v-5.4L5 12.1V19c0 .85.65 1.5 1.5 1.5h4.75v-3.75c0-.4.35-.75.75-.75s.75.35.75.75v3.75h4.75c.85 0 1.5-.65 1.5-1.5zM12 .85l11.55 11.6-1.05 1.05L12 3 1.5 13.5.45 12.45z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$15; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-home-home",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$14 = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class HomeInternetAtHome {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 .87L.435 12.435 1.5 13.5 12 3l10.5 10.5 1.06-1.06zm-7.75 12V19a2.25 2.25 0 002.25 2.25h11A2.245 2.245 0 0019.75 19v-6.14L12 5.11zM12 18.5a.875.875 0 110-1.75.875.875 0 010 1.75zm2-1.735a2.185 2.185 0 00-4 0l-1.025-.88a3.5 3.5 0 016.07 0zm3.03-2.61l-1 .865a4.805 4.805 0 00-8.08 0l-1-.865a6.11 6.11 0 0110.08 0z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M19 12.1l1.5 1.5V19c0 1.65-1.35 3-3 3h-11c-1.65 0-3-1.35-3-3v-5.4L5 12.1V19c0 .85.65 1.5 1.5 1.5h11c.85 0 1.5-.65 1.5-1.5zm-7 3.65a.9.9 0 110 1.8.9.9 0 010-1.8zm-.05-2.65c1.3 0 2.45.7 3.05 1.75l-1 .9c-.3-.75-1.1-1.3-2.1-1.35-.9 0-1.65.55-2 1.35l-1-.9c.6-1.05 1.75-1.75 3.05-1.75zm.05-2.6c2.1 0 3.95 1.05 5.05 2.65l-1 .85c-.85-1.3-2.35-2.2-4.05-2.2s-3.2.85-4.05 2.2l-1-.85c1.1-1.6 2.95-2.65 5.05-2.65zm0-9.65l11.55 11.6-1.05 1.05L12 3 1.5 13.5.45 12.45z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$14; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-home-internet-at-home",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$13 = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class HomeIot {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M2.824 13.779a3.407 3.407 0 013.411-3.398l.97.038.287-.819a5.304 5.304 0 012.86-3.101V4a7.638 7.638 0 00-4.77 4.061 5.75 5.75 0 00.64 11.468H8.47v-2.353H6.22a3.402 3.402 0 01-3.397-3.397zm17.2-3.661A7.586 7.586 0 0014.588 4v2.494A5.256 5.256 0 0117.76 11.2l.033 1.078 1.082.06a2.433 2.433 0 01-.131 4.838h-6.038v2.353h6.038a4.786 4.786 0 001.28-9.411zm-8.73 9.61v-2.966l3.402-3.402c.119.032.24.05.363.052A1.412 1.412 0 1013.647 12c.003.122.02.244.052.362L9.882 16.18v3.548a1.412 1.412 0 101.412 0zm.47-15.926v4.142L7.13 12.579A1.412 1.412 0 108 13.882v-.16l5.176-5.176V3.84a1.412 1.412 0 10-1.411 0v-.038z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M15.25 10.5c.85 0 1.5.65 1.5 1.5 0 .95-.9 1.7-1.9 1.45l-3.6 3.6v3.15c.45.25.75.75.75 1.3 0 .85-.65 1.5-1.5 1.5S9 22.35 9 21.5c0-.55.3-1.05.75-1.3v-3.75l4.05-4.05c-.25-1 .5-1.9 1.45-1.9zm-.5-6.5c2.85.85 5 3.35 5.35 6.4 2.1.45 3.65 2.3 3.65 4.55 0 2.55-2.05 4.6-4.6 4.6h-6.4v-1.5h6.45c1.7 0 3.1-1.4 3.1-3.1 0-1.15-.6-2.1-1.5-2.65-.75-.45-1.35-.45-2.15-.5 0-.8 0-1.35-.25-2.2-.55-1.85-1.9-3.3-3.65-4zm-4.5 0v1.6c-1.4.55-2.5 1.55-3.2 2.9-.2.45-.3.75-.5 1.3.05 0-1.1-.15-2.15.25-1.55.6-2.65 2.1-2.65 3.85 0 2.25 1.85 4.1 4.1 4.1h2.4v1.5h-2.4c-3.1 0-5.6-2.5-5.6-5.6 0-3 2.35-5.45 5.25-5.65.9-2.05 2.65-3.6 4.75-4.25zM12.5.5c.85 0 1.5.65 1.5 1.5 0 .55-.3 1.05-.75 1.4v5l-5.5 5.5c.1.9-.65 1.65-1.5 1.65s-1.5-.65-1.5-1.5c0-1.1 1.05-1.8 2.05-1.4l4.95-4.95V3.3C11.3 3.05 11 2.55 11 2c0-.85.65-1.5 1.5-1.5z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$13; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-home-iot",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$12 = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class HomeNoWifi {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M11.964 18.128a2.043 2.043 0 110 4.085 2.043 2.043 0 010-4.085zM1.331 1.775a.766.766 0 011.064-.018L20.778 20.14a.77.77 0 010 1.082.76.76 0 01-1.083 0L1.312 2.84a.766.766 0 01.02-1.064zm8.78 12.012l1.772 1.787a4.596 4.596 0 00-3.973 2.431l-1.47-1.532a6.68 6.68 0 013.67-2.686zm1.853-4.85a11.234 11.234 0 018.753 4.197l-1.435 1.49a9.191 9.191 0 00-5.265-3.39l-2.272-2.298zM6.603 10.3l1.526 1.521a9.237 9.237 0 00-3.482 2.804l-1.44-1.491A11.306 11.306 0 016.603 10.3zm5.361-5.96c4.595 0 8.962 2.003 11.96 5.485L22.498 11.3A13.731 13.731 0 009.426 6.638l-1.705-1.72a15.911 15.911 0 014.243-.578zM3.258 6.955L4.734 8.43a13.736 13.736 0 00-3.31 2.854L0 9.81a16.085 16.085 0 013.258-2.854z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M12 18a2 2 0 110 4 2 2 0 010-4zM1.57 1.97a.745.745 0 011.06 0l18 18a.745.745 0 010 1.06.754.754 0 01-.53.22.754.754 0 01-.53-.22l-18-18a.75.75 0 010-1.06zm8.615 11.795l1.74 1.735a4.5 4.5 0 00-3.895 2.38l-1.435-1.49a6.495 6.495 0 013.59-2.625zM12 9c3.465 0 6.555 1.605 8.57 4.11l-1.405 1.46a9.006 9.006 0 00-5.15-3.34L11.79 9.005c.07 0 .14-.005.21-.005zm-5.245 1.335l1.49 1.49a9.045 9.045 0 00-3.41 2.745L3.43 13.11c.91-1.13 2.04-2.075 3.325-2.775zM3.48 7.06l1.445 1.445c-1.22.755-2.315 1.7-3.24 2.795L.29 9.855c.93-1.07 2.005-2.01 3.19-2.795zM12 4.5c4.68 0 8.87 2.075 11.715 5.355L22.32 11.3A13.465 13.465 0 009.515 6.735l-1.67-1.67A15.608 15.608 0 0112 4.5z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$12; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-home-no-wifi",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$11 = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class HomeSmarthome {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M12 5.11l7.75 7.75V19a2.245 2.245 0 01-2.25 2.25h-11A2.245 2.245 0 014.25 19v-6.13L12 5.11zm3.477 9.233a.625.625 0 00-.797.317 3.535 3.535 0 01-4.71 1.925.625.625 0 10-.5 1.14 4.775 4.775 0 006.375-2.605.632.632 0 00-.368-.777zM22.5 13.5L12 3 1.5 13.5.435 12.435 12 .87l11.565 11.565L22.5 13.5zM9.715 10.55c-.69 0-1.25.56-1.25 1.25l.007.132a1.25 1.25 0 101.243-1.382zm5.82.625H13.76a.625.625 0 100 1.25h1.775a.625.625 0 100-1.25z" }))) : (hAsync("g", null, hAsync("path", { d: "M19 12.1l1.5 1.5V19c0 1.65-1.35 3-3 3h-11c-1.65 0-3-1.35-3-3v-5.4L5 12.1V19c0 .85.65 1.5 1.5 1.5h11c.85 0 1.5-.65 1.5-1.5zm-4.3 2.5c.1-.3.5-.5.8-.35.3.1.5.5.35.8-.75 1.8-2.5 3-4.45 3-.7 0-1.35-.15-1.95-.4-.3-.1-.45-.5-.3-.8.1-.3.5-.45.8-.3.5.2.95.35 1.45.3 1.5 0 2.75-.9 3.3-2.25zM12 .85l11.55 11.6-1.05 1.05L12 3 1.5 13.5.45 12.45zM9.3 10.5c.608 0 1.1.604 1.1 1.35s-.492 1.35-1.1 1.35-1.1-.604-1.1-1.35.492-1.35 1.1-1.35zm5.75.75c.3 0 .6.3.6.6s-.25.6-.6.6H13.3c-.3 0-.6-.3-.6-.6s.25-.6.6-.6z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$11; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-home-smarthome",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$10 = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class HomeWifi {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M12 13.5a6.5 6.5 0 00-5.405 2.895l1.435 1.5a4.5 4.5 0 017.94 0l1.435-1.5A6.5 6.5 0 0012 13.5zM12 9a11 11 0 00-8.575 4.11l1.41 1.46a9 9 0 0114.33 0l1.41-1.46A11 11 0 0012 9zm0-4.5A15.46 15.46 0 00.285 9.855L1.68 11.3a13.5 13.5 0 0120.64 0l1.395-1.445A15.46 15.46 0 0012 4.5zM12 18a2 2 0 100 4 2 2 0 000-4z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M12 17a2 2 0 110 4 2 2 0 010-4zm0-4.5c2.25 0 4.25 1.15 5.4 2.9l-1.45 1.5A4.435 4.435 0 0012 14.5c-1.7 0-3.2 1-3.95 2.4L6.6 15.4a6.458 6.458 0 015.4-2.9zM12 8c3.45 0 6.55 1.6 8.55 4.1l-1.4 1.45C17.5 11.4 14.95 10 12 10s-5.5 1.4-7.15 3.55l-1.4-1.45C5.45 9.6 8.55 8 12 8zm0-4.5c4.7 0 8.85 2.1 11.7 5.35l-1.4 1.45C19.85 7.35 16.15 5.5 12 5.5S4.15 7.35 1.7 10.3L.3 8.85C3.15 5.6 7.3 3.5 12 3.5z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$10; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-home-wifi",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$$ = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class Icon {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /**
     * Will be used for both `width` and `height`, all icons are square.
     * Keep in mind the `viewBox` attribute is set to "0 0 24 24".
     */
    this.size = 24;
    /** The SVG `fill` attribute */
    this.fill = 'var(--icon-color, currentColor)';
    /** The SVG `stroke` attribute */
    this.stroke = 'transparent';
    /** (optional) If `true` the icon can receive focus */
    this.focusable = false;
    /** (optional) If `true` the svg element will get aria-hidden="true" */
    this.decorative = false;
  }
  render() {
    const pathAttributes = {
      fill: this.fill,
      stroke: this.stroke,
    };
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ xmlns: "http://www.w3.org/2000/svg" }, (this.focusable ? { tabindex: 0 } : {}), { class: this.getCssClassMap(), part: "base", width: this.size, height: this.size, viewBox: "0 0 24 24", role: "img" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), this.path ? (hAsync("path", Object.assign({ d: this.path }, pathAttributes, { part: "path" }))) : (hAsync("use", Object.assign({ xlinkHref: `#icon-${this.name}` }, pathAttributes))))));
  }
  getCssClassMap() {
    return classnames('icon');
  }
  static get style() { return iconCss$$; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon",
    "$members$": {
      "name": [1],
      "path": [1],
      "size": [514],
      "fill": [1],
      "stroke": [1],
      "focusable": [4],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"]]
  }; }
}

const inputCss = ".input{position:relative}.input .input__helper-text,.input .input__counter{font-weight:var(--scl-font-weight-bold)}.input .input__input,.input .input__select{width:100%;height:var(--scl-spacing-48);margin:0;display:flex;outline:none;padding:var(--scl-spacing-12) var(--scl-spacing-12);z-index:1;box-sizing:border-box;transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);font-family:inherit;font-size:var(--scl-font-size-16);border-radius:var(--scl-radius-8);border:var(--scl-spacing-1) solid var(--scl-color-black)}.input .input__textarea{width:100%;margin:0;resize:vertical;display:flex;outline:none;padding:var(--scl-spacing-12) var(--scl-spacing-12);z-index:1;box-sizing:border-box;transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);font-family:inherit;font-size:var(--scl-font-size-16);border-radius:var(--scl-radius-8);border:var(--scl-spacing-1) solid var(--scl-color-text-standard)}.input .input__select{appearance:none;-webkit-appearance:none}.input .input__select-wrapper{position:relative}.input .input__counter{display:flex;transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);margin-left:auto;padding-right:var(--scl-spacing-12);justify-content:flex-end;font-size:var(--scl-font-size-12);line-height:var(--scl-font-line-height-133);color:var(--scl-color-text-standard)}.input .input__helper-text{transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);padding-left:var(--scl-spacing-12);font-size:var(--scl-font-size-12);line-height:var(--scl-font-line-height-133);color:var(--scl-color-blue-70)}.input .input__meta{display:flex;justify-content:space-between;margin-top:var(--scl-spacing-4)}.input:not(.input--disabled):hover .input__select-wrapper{--icon-color:var(--scl-color-primary-hover, #f90984)}.input:not(.input--disabled):active .input__select-wrapper{--icon-color:var(--scl-color-primary-active, #cb0068)}.input:not(.input--disabled) .input__input:hover,.input:not(.input--disabled) .input__input:focus,.input:not(.input--disabled) .input__select:hover,.input:not(.input--disabled) .input__select:focus,.input:not(.input--disabled) .input__textarea:hover,.input:not(.input--disabled) .input__textarea:focus{border-color:var(--scl-color-primary-hover, #f90984)}.input:not(.input--disabled) .input__input:focus,.input:not(.input--disabled) .input__select:focus,.input:not(.input--disabled) .input__textarea:focus{box-shadow:0 0 0 var(--scl-spacing-2) var(--scl-color-focus)}.input:not(.input--disabled) .input__input:focus::placeholder,.input:not(.input--disabled) .input__select:focus::placeholder,.input:not(.input--disabled) .input__textarea:focus::placeholder{color:var(--scl-color-grey-60);transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard)}.input .input__select-wrapper scale-icon{top:50%;right:var(--scl-spacing-12);position:absolute;transform:translateY(-50%);pointer-events:none}.input .input__input::placeholder,.input .input__select::placeholder,.input .input__textarea::placeholder,.input ::placeholder{color:transparent;transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard)}.input--variant-static .input__label{color:var(--scl-color-grey-60);display:flex;font-weight:var(--scl-font-weight-medium)}.input--variant-animated .input__input,.input--variant-animated .input__select{padding:var(--scl-spacing-12) var(--scl-spacing-12) 0\n    calc(var(--scl-spacing-12) - 1px)}.input--variant-animated .input__textarea{padding-top:var(--scl-spacing-24)}.input--variant-animated .input__label{top:0;left:0;color:var(--scl-color-grey-60);display:flex;z-index:var(--scl-z-index-10);position:absolute;transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);pointer-events:none;font-size:var(--scl-font-size-16);transform:translate(\n    var(--scl-spacing-12),\n    calc((var(--scl-spacing-48) - var(--scl-font-size-16)) / 2)\n  );font-weight:var(--scl-font-weight-medium)}.input--variant-animated.input--has-focus .input__label,.input--variant-animated.animated .input__label{color:var(--scl-color-grey-60);transform:translate(var(--scl-spacing-12), var(--scl-spacing-8));transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);font-size:var(--scl-font-size-10);font-weight:var(--scl-font-weight-bold)}.input--status-error .input__input,.input--status-error .input__textarea,.input--status-error .input__select{border:var(--scl-spacing-2) solid var(--scl-color-background-error)}.input--status-error .input__helper-text{color:var(--scl-color-text-error)}.input--status-error .input__counter{color:var(--scl-color-text-error)}.input--size-small .input__input{height:var(--scl-spacing-40)}.input--size-small .input__select{height:var(--scl-spacing-40)}.input--size-small .input__label{top:0;left:0;color:var(--scl-color-grey-60);display:flex;z-index:var(--scl-z-index-10);position:absolute;transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);pointer-events:none;font-size:var(--scl-font-size-16);transform:translate(\n    var(--scl-spacing-12),\n    calc((var(--scl-spacing-40) - var(--scl-font-size-16)) / 2)\n  );font-weight:var(--scl-font-weight-medium)}.input--size-small.input--has-focus .input__label,.input--size-small.animated .input__label{color:var(--scl-color-grey-60);transform:translate(var(--scl-spacing-12), var(--scl-spacing-4));transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);font-size:var(--scl-font-size-10);font-weight:var(--scl-font-weight-medium)}.input--transparent .input__input,.input--transparent .input__textarea,.input--transparent.input--type-radio .input__radio,.input--transparent .input__select{background-color:transparent}.input--type-checkbox{display:flex;flex-wrap:wrap;align-items:center}.input--type-checkbox input{width:0;height:0;opacity:0;position:absolute}.input--type-checkbox .input__meta{width:100%}.input--type-checkbox .input__helper-text{padding-left:var(--scl-spacing-32)}.input--type-checkbox label{color:var(--scl-color-text-standard);font-weight:var(--scl-font-weight-medium)}.input--type-checkbox .input__checkbox-container{width:var(--scl-spacing-16);height:var(--scl-spacing-16);display:flex;position:relative;align-items:center;margin-right:var(--scl-spacing-8)}.input--type-checkbox input:disabled~label{color:var(--scl-color-background-disabled)}.input--type-checkbox input:checked:disabled~label{color:var(--scl-color-background-disabled)}.input--type-checkbox input:checked:disabled~.input__checkbox-container .input__checkbox-placeholder{background:var(--scl-color-background-disabled)}.input--type-checkbox input:checked:disabled~.input__checkbox-container scale-icon{--icon-color:var(--scl-color-grey-30)}.input--type-checkbox input:checked:not([disabled]):hover~.input__checkbox-container .input__checkbox-placeholder,.input--type-checkbox input:checked:not([disabled])~.input__checkbox-container:hover .input__checkbox-placeholder{box-shadow:none;border-color:var(--scl-color-primary-hover, #f90984);background:var(--scl-color-primary-hover, #f90984)}.input--type-checkbox input:checked:not([disabled]):active~.input__checkbox-container .input__checkbox-placeholder,.input--type-checkbox input:checked:not([disabled])~.input__checkbox-container:active .input__checkbox-placeholder{border-color:var(--scl-color-primary-active, #cb0068);background:var(--scl-color-primary-active, #cb0068)}.input--type-checkbox input:checked:not([disabled]):active~.input__checkbox-container scale-icon,.input--type-checkbox input:checked:not([disabled])~.input__checkbox-container:active scale-icon{--icon-color:var(--scl-color-white)}.input--type-checkbox input:checked:not([disabled])~.input__checkbox-container .input__checkbox-placeholder{border:var(--scl-spacing-1) solid var(--scl-color-primary, #e20074);background:var(--scl-color-primary, #e20074)}.input--type-checkbox input:disabled~.input__checkbox-container .input__checkbox-placeholder{border-color:var(--scl-color-background-disabled)}.input--type-checkbox input:focus~.input__checkbox-container .input__checkbox-placeholder{box-shadow:0 0 0 var(--scl-spacing-2) var(--scl-color-focus)}.input--type-checkbox input:not([disabled]):hover~.input__checkbox-container .input__checkbox-placeholder,.input--type-checkbox input:not([disabled])~.input__checkbox-container:hover .input__checkbox-placeholder{box-shadow:none;border-color:var(--scl-color-primary-hover, #f90984)}.input--type-checkbox input:not([disabled]):hover~.input__checkbox-container~label,.input--type-checkbox input:not([disabled])~.input__checkbox-container:hover~label{color:var(--scl-color-primary-hover, #f90984)}.input--type-checkbox input:not([disabled]):active~.input__checkbox-container .input__checkbox-placeholder,.input--type-checkbox input:not([disabled])~.input__checkbox-container:active .input__checkbox-placeholder{border-color:var(--scl-color-primary-active, #cb0068);background:var(--scl-color-primary-active, #cb0068)}.input--type-checkbox input:not([disabled]):active~.input__checkbox-container scale-icon,.input--type-checkbox input:not([disabled])~.input__checkbox-container:active scale-icon{--icon-color:var(--scl-color-primary-active, #cb0068)}.input--type-checkbox input:not([disabled]):active~.input__checkbox-container~label,.input--type-checkbox input:not([disabled])~.input__checkbox-container:active~label{color:var(--scl-color-primary-active, #cb0068)}.input--type-checkbox .input__checkbox-container .input__checkbox-placeholder{width:var(--scl-spacing-16);height:var(--scl-spacing-16);margin:0;box-sizing:border-box;transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);border-radius:var(--scl-radius-8);border:var(--scl-spacing-1) solid var(--scl-color-text-standard);background:var(--scl-color-background-standard)}.input--type-checkbox .input__checkbox-container scale-icon{top:calc(0.5 * var(--scl-spacing-12));left:calc(0.5 * var(--scl-spacing-12));width:var(--scl-spacing-12);height:var(--scl-spacing-12);position:absolute;user-select:none;--icon-color:var(--scl-color-background-standard)}.input--type-checkbox .input__checkbox-container~label{transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard)}.input--type-checkbox.input--status-error .input__checkbox-container .input__checkbox-placeholder{border:var(--scl-spacing-2) solid var(--scl-color-background-error)}.input--type-radio{display:flex;flex-wrap:wrap;align-items:center}.input--type-radio .input__meta{width:100%}.input--type-radio .input__helper-text{margin-top:var(--scl-spacing-4);padding-left:var(--scl-spacing-24)}.input--type-radio label{color:var(--scl-color-text-standard);transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);font-weight:var(--scl-font-weight-medium)}.input--type-radio input{width:var(--scl-spacing-16);height:var(--scl-spacing-16);transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);border-radius:50%;-webkit-appearance:none;background-color:#fff;border:var(--scl-spacing-1) solid var(--scl-color-text-standard);margin:0 var(--scl-spacing-8) 0 0}.input--type-radio input:focus{outline:none;box-shadow:0 0 0 var(--scl-spacing-2) var(--scl-color-focus)}.input--type-radio:hover input:not(:checked):not([disabled]){box-shadow:none;border-color:var(--scl-color-primary-hover, #f90984)}.input--type-radio:hover input:not(:checked):not([disabled])~label{color:var(--scl-color-primary-hover, #f90984)}.input--type-radio input:active{border:var(--scl-spacing-8) solid var(--scl-color-primary-active)}.input--type-radio input:not(:checked):not([disabled]):active~label{color:var(--scl-color-primary-active)}.input--type-radio input:disabled{border:var(--scl-spacing-1) solid var(--scl-color-background-disabled)}.input--type-radio input:disabled~label{color:var(--scl-color-grey-30)}.input--type-radio.input--status-error input{border:var(--scl-spacing-2) solid var(--scl-color-background-error)}.input--type-radio input:checked{border:calc(0.5 * var(--scl-spacing-12)) solid var(--scl-color-primary)}.input--type-radio input:checked:active{border:calc(0.5 * var(--scl-spacing-12)) solid\n    var(--scl-color-primary-active, #cb0068)}.input--type-radio input:checked:disabled{background:var(--scl-color-grey-30);border:calc(0.5 * var(--scl-spacing-12)) solid\n    var(--scl-color-background-disabled)}.input--type-radio input:checked:disabled~label{color:var(--scl-color-grey-30)}.input__textarea-label-safety-background{top:var(--scl-spacing-2);left:var(--scl-spacing-2);right:var(--scl-spacing-2);position:absolute;pointer-events:none;border-radius:var(--scl-radius-8);height:var(--scl-spacing-24);background-color:var(--scl-color-background-standard, #ffffff)}.input--disabled .input__textarea-label-safety-background{background-color:transparent}.input--disabled label,.input--disabled .input__label,.input--disabled input,.input--disabled .input__input,.input--disabled .input__checkbox-container,.input--disabled .input__radio,.input--disabled .input__select,.input--disabled .input__textarea,.input--disabled .input__helper-text{cursor:not-allowed;border-color:var(--scl-color-background-disabled);color:var(--scl-color-background-disabled);background:var(--scl-color-white)}.input--disabled .input__select-wrapper{--icon-color:var(--scl-color-background-disabled)}.input--disabled.animated label.input__label{color:var(--scl-color-background-disabled)}";

let i$b = 0;
const SELECT_ICON = 'M20.65 7.4c-.3-.3-.75-.3-1.05 0L12 15 4.4 7.4c-.3-.3-.75-.3-1.05 0s-.3.75 0 1.05L12 17.1l8.65-8.65c.3-.25.3-.75 0-1.05z';
class Input {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.scaleInput = createEvent$1(this, "scale-input", 7);
    this.scaleInputLegacy = createEvent$1(this, "scaleInput", 7);
    this.scaleChange = createEvent$1(this, "scale-change", 7);
    this.scaleChangeLegacy = createEvent$1(this, "scaleChange", 7);
    this.scaleFocus = createEvent$1(this, "scale-focus", 7);
    this.scaleFocusLegacy = createEvent$1(this, "scaleFocus", 7);
    this.scaleBlur = createEvent$1(this, "scale-blur", 7);
    this.scaleBlurLegacy = createEvent$1(this, "scaleBlur", 7);
    this.scaleKeyDown = createEvent$1(this, "scale-keydown", 7);
    this.scaleKeyDownLegacy = createEvent$1(this, "scaleKeyDown", 7);
    /** (optional) Input type */
    this.type = 'text';
    /** (optional) Input name */
    this.name = '';
    /** (optional) Input label variant */
    this.variant = 'static';
    /** (optional) Input label */
    this.label = '';
    /** (optional) Input size */
    this.size = '';
    /** (optional) Input helper text */
    this.helperText = '';
    /** @deprecated - invalid should replace status */
    this.status = '';
    /** (optional) Input status */
    this.invalid = false;
    /** (optional) Input placeHolder */
    this.placeholder = '';
    /** (optional) Active switch */
    this.checked = false;
    /** (optional) Input value */
    this.value = '';
    /** (optional) Makes type `select` behave as a controlled component in React */
    this.controlled = false;
    /** Whether the input element has focus */
    this.hasFocus = false;
    // Handle checkbox/radio change (click on label)
    this.handleCheckChange = (event) => {
      this.checked = event.target.checked;
    };
    // Handle click on checkbox visual element
    this.handleCheckboxClick = () => {
      if (!this.disabled) {
        this.checked = !this.checked;
      }
    };
    // Handle change on <select> independently
    // so we can allow "controlled" (React) behavior,
    // in which only the `value` changing does update
    // the actual <select> value, not the user's input.
    this.handleSelectChange = (event) => {
      const target = event.target;
      if (this.controlled) {
        emitEvent$1(this, 'scaleChange', { value: target.value });
        this.selectElement.value = String(this.value);
        this.forceUpdate = String(Date.now());
      }
      else {
        this.value = target.value || '';
        this.emitChange();
      }
    };
    this.handleInput = (event) => {
      const target = event.target;
      if (target) {
        this.value = target.value || '';
        this.emitChange();
      }
      emitEvent$1(this, 'scaleInput', event);
    };
    this.handleChange = (event) => {
      const target = event.target;
      if (target) {
        this.value = target.value || '';
        this.emitChange();
      }
    };
    this.handleFocus = () => {
      emitEvent$1(this, 'scaleFocus');
      this.hasFocus = true;
    };
    this.handleBlur = () => {
      emitEvent$1(this, 'scaleBlur');
      this.hasFocus = false;
    };
    this.handleKeyDown = (event) => {
      emitEvent$1(this, 'scaleKeyDown', event);
    };
  }
  componentWillLoad() {
    if (this.inputId == null) {
      this.inputId = 'input-' + i$b++;
    }
    // Default icon for `select` type
    if (this.type === 'select' && this.icon == null) {
      this.icon = SELECT_ICON;
    }
  }
  componentDidLoad() {
    // tslint:disable-next-line:no-console
    statusNote({
      tag: 'deprecated',
      source: this.el,
      type: 'warn',
      extraMessage: `Please use <${{
        select: 'scale-dropdown',
        checkbox: 'scale-checkbox',
        radio: 'scale-radio-button',
        textarea: 'scale-textarea',
      }[this.type] || 'scale-text-field'}> instead.`,
    });
    // Keep this.value up-to-date for type="select".
    // This is important also for React, where `value` is used to control the element state.
    if (this.type === 'select') {
      const select = this.selectElement;
      const selectedValue = select.selectedIndex > -1
        ? select.options[select.selectedIndex].value
        : null;
      // If we have a `value` passed, set it on the <select> element
      // Otherwise, if we have an <option selected>, set its value on `value`
      if (this.value) {
        select.value = String(this.value);
      }
      else if (selectedValue) {
        this.value = selectedValue;
      }
    }
    // This is a workaroud to prevent a bug in Stencil:
    // when using slots without Shadow DOM (possible only with Stencil)
    // sometimes an update in the Light DOM does not trigger a re-render
    // thus causing unexpected results.
    // https://gitlab.com/scale-ds/scale-telekom/-/issues/16
    if (this.type === 'select' && this.selectElement) {
      this.mutationObserver = new MutationObserver(() => {
        this.forceUpdate = String(Date.now());
      });
      this.mutationObserver.observe(this.el, {
        childList: true,
        subtree: true,
      });
    }
  }
  componentWillUpdate() { }
  componentDidRender() {
    // When type `select` and `controlled` is true,
    // make sure the <select> is always in sync with the value.
    const value = this.value == null ? '' : this.value.toString();
    if (this.type === 'select' &&
      this.controlled &&
      this.selectElement.value.toString() !== value) {
      this.selectElement.value = value;
    }
    if (this.status !== '') {
      statusNote({
        tag: 'deprecated',
        message: 'Property "status" is deprecated. Please use the "invalid" property!',
        type: 'warn',
        source: this.el,
      });
    }
  }
  disconnectedCallback() {
    if (this.mutationObserver) {
      this.mutationObserver.disconnect();
    }
  }
  // We're not watching `value` like we used to
  // because we get unwanted `scaleChange` events
  // because how we keep this.value up-to-date for type="select"
  // `this.value = selectedValue`
  emitChange() {
    emitEvent$1(this, 'scaleChange', {
      value: this.value == null ? this.value : this.value.toString(),
    });
  }
  checkedChanged() {
    emitEvent$1(this, 'scaleChange', { value: this.checked });
  }
  render() {
    const Tag = this.type === 'textarea' ? 'textarea' : 'input';
    const ariaInvalidAttr = this.status === 'error' || this.invalid ? { 'aria-invalid': true } : {};
    const helperTextId = `helper-message-${i$b}`;
    const ariaDescribedByAttr = { 'aria-describedBy': helperTextId };
    if (this.type === 'checkbox') {
      return (hAsync(Host$1, { checked: this.checked }, hAsync("div", { class: this.getCssClassMap() }, hAsync("input", Object.assign({ type: "checkbox", name: this.name, id: this.inputId, onChange: this.handleCheckChange, value: this.value, checked: this.checked, disabled: this.disabled }, ariaInvalidAttr, ariaDescribedByAttr)), hAsync("div", { class: classnames('input__checkbox-container'), onClick: this.handleCheckboxClick }, hAsync("span", { class: classnames('input__checkbox-placeholder') }), !!this.icon && this.checked && (hAsync("scale-icon", { path: this.icon, size: 12 }))), hAsync("label", { htmlFor: this.inputId }, this.label), !!this.helperText && (hAsync("div", { class: "input__meta", id: helperTextId, "aria-live": "polite", "aria-relevant": "additions removals" }, hAsync("div", { class: "input__helper-text" }, this.helperText))))));
    }
    if (this.type === 'radio') {
      return (hAsync(Host$1, null, hAsync("div", { class: this.getCssClassMap() }, hAsync("input", Object.assign({ type: "radio", name: this.name, id: this.inputId, onChange: this.handleCheckChange, value: this.value, checked: this.checked, disabled: this.disabled }, ariaInvalidAttr, ariaDescribedByAttr)), hAsync("label", { htmlFor: this.inputId }, this.label), !!this.helperText && (hAsync("div", { class: "input__meta", id: helperTextId, "aria-live": "polite", "aria-relevant": "additions removals" }, hAsync("div", { class: "input__helper-text" }, this.helperText))))));
    }
    return (hAsync(Host$1, null, hAsync("div", { class: this.getCssClassMap() }, hAsync("label", { class: "input__label", htmlFor: this.inputId }, this.label), this.type === 'select' ? (hAsync("div", { class: "input__select-wrapper" }, hAsync("select", Object.assign({ ref: (el) => (this.selectElement = el), class: classnames('input__select'),
      // @ts-ignore
      value: this.value, onChange: this.handleSelectChange, onFocus: this.handleFocus, onBlur: this.handleBlur, onKeyDown: this.handleKeyDown, disabled: this.disabled, required: this.required, multiple: this.multiple, id: this.inputId, name: this.name, size: this.visibleSize }, ariaInvalidAttr, ariaDescribedByAttr), hAsync("slot", null)), !!this.icon && hAsync("scale-icon", { path: this.icon }))) : (hAsync(Tag, Object.assign({ type: this.type, class: classnames(`input__${this.type === 'textarea' ? 'textarea' : 'input'}`, this.customResize && this.customResize.id), style: !!this.resize && { resize: this.resize }, value: this.value }, (!!this.name ? { name: this.name } : {}), { required: this.required, minLength: this.minLength, maxLength: this.maxLength, id: this.inputId, onInput: this.handleInput, onChange: this.handleChange, onFocus: this.handleFocus, onBlur: this.handleBlur, onKeyDown: this.handleKeyDown }, (!!this.placeholder ? { placeholder: this.placeholder } : {}), { disabled: this.disabled }, (!!this.rows ? { rows: this.rows } : {}), (!!this.cols ? { cols: this.cols } : {}), ariaInvalidAttr, ariaDescribedByAttr))), this.type === 'textarea' && this.variant === 'animated' && (hAsync("span", { class: "input__textarea-label-safety-background", "aria-hidden": "true" })), (!!this.helperText || !!this.counter) && (hAsync("div", { class: "input__meta", id: helperTextId, "aria-live": "polite", "aria-relevant": "additions removals" }, !!this.helperText && (hAsync("div", { class: "input__helper-text" }, this.helperText)), this.counter && (hAsync("div", { class: "input__counter" }, !!this.value ? String(this.value).length : 0, " /", ' ', this.maxLength)))))));
  }
  getCssClassMap() {
    return classnames('input', this.type && `input--type-${this.type}`, this.hasFocus && 'input--has-focus', this.checked && `input--checked`, this.resize && `input--resize-${this.resize}`, this.variant && `input--variant-${this.variant}`, this.disabled && `input--disabled`, this.transparent && 'input--transparent', this.status && `input--status-${this.status}`, this.invalid && `input--status-error`, this.size && `input--size-${this.size}`, this.value != null && this.value !== '' && 'animated');
  }
  get el() { return getElement$1(this); }
  static get watchers() { return {
    "checked": ["checkedChanged"]
  }; }
  static get style() { return inputCss; }
  static get cmpMeta() { return {
    "$flags$": 4,
    "$tagName$": "scale-input",
    "$members$": {
      "type": [1],
      "name": [1],
      "variant": [1],
      "label": [1],
      "size": [1],
      "rows": [2],
      "cols": [2],
      "helperText": [1, "helper-text"],
      "status": [1],
      "invalid": [4],
      "maxLength": [2, "max-length"],
      "minLength": [2, "min-length"],
      "placeholder": [1],
      "disabled": [4],
      "required": [4],
      "counter": [4],
      "checked": [516],
      "resize": [1],
      "value": [1032],
      "inputId": [1, "input-id"],
      "icon": [1],
      "multiple": [4],
      "visibleSize": [2, "visible-size"],
      "transparent": [4],
      "controlled": [4],
      "styles": [1],
      "customResize": [32],
      "hasFocus": [32],
      "forceUpdate": [32]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["checked", "checked"]]
  }; }
}

const linkCss = "/*!@:host*/.sc-scale-link-h{--font-weight:var(--scl-font-weight-medium);--spacing-x-icon:var(--scl-spacing-4);--line-offset:0.0625em;--color:var(--scl-color-blue-60);--color-line-initial:hsl(219, 100%, 87%);--line-thickness-initial:0.0625em;--color-visited:var(--scl-color-text-link-visited);--color-line-visited:var(--scl-color-text-link-visited);--line-thickness-visited:var(--line-thickness-initial);--color-hover:var(--scl-color-blue-70);--color-line-hover:var(--scl-color-blue-70);--line-thickness-hover:var(--line-thickness-initial);--color-focus:var(--scl-color-blue-70);--color-line-focus:var(--scl-color-blue-70);--line-thickness-focus:calc(var(--line-thickness-initial) * 2);--color-active:var(--scl-color-blue-60);--color-line-active:var(--scl-color-blue-60);--line-thickness-active:var(--line-thickness-initial);--color-disabled:var(--scl-color-grey-50);--color-line-disabled:var(--scl-color-grey-50);--line-thickness-disabled:var(--line-thickness-initial)}/*!@:host*/.sc-scale-link-h{display:inline;margin-bottom:calc(var(--line-offset) + var(--line-thickness-initial));--anchor-color:var(--color);--line-color:var(--color-line-initial);--line-thickess:var(--line-thickness-initial)}/*!@[part='anchor']*/[part='anchor'].sc-scale-link{cursor:pointer;outline:none;font-weight:var(--font-weight);color:var(--anchor-color);position:relative;display:inline-flex;text-decoration:underline;text-underline-offset:0.1875em;text-underline-position:from-font;text-decoration-thickness:var(\n    --line-thickness,\n    var(--line-thickness-initial)\n  );text-decoration-color:var(--line-color);transition:text-decoration var(--scl-motion-duration-fast)}/*!@[part='anchor']*/[part='anchor'].sc-scale-link{display:inline-flex;align-items:center}/*!@[part='content']*/[part='content'].sc-scale-link{position:relative}/*!@slot[name='icon']::slotted(*)*/slot[name='icon'].sc-scale-link-s>*{position:relative;margin-left:var(--spacing-x-icon)}/*!@:host(.reverse) [part='anchor']*/.reverse.sc-scale-link-h [part='anchor'].sc-scale-link{flex-direction:row-reverse}/*!@:host(.reverse) slot[name='icon']::slotted(*)*/.sc-scale-link-h.reverse slot[name='icon'].sc-scale-link-s>*{margin-left:auto;margin-right:var(--spacing-x-icon)}/*!@:host(.no-underline)*/.no-underline.sc-scale-link-h{--color-line-initial:transparent;--color-line-visited:transparent}/*!@[part='anchor']:hover,\n[part='anchor']:focus,\n[part='anchor']:active*/[part='anchor'].sc-scale-link:hover,[part='anchor'].sc-scale-link:focus,[part='anchor'].sc-scale-link:active{transition:text-decoration var(--scl-motion-duration-fast)}/*!@[part='anchor']:visited*/[part='anchor'].sc-scale-link:visited{--anchor-color:var(--color-visited);--line-color:var(--color-line-visited);--line-thickness:var(--line-thickness-visited)}/*!@[part='anchor']:hover*/[part='anchor'].sc-scale-link:hover{--anchor-color:var(--color-hover);--line-color:var(--color-line-hover);--line-thickness:var(--line-thickness-hover)}/*!@[part='anchor']:focus*/[part='anchor'].sc-scale-link:focus{--anchor-color:var(--color-focus);--line-color:var(--color-line-focus);--line-thickness:var(--line-thickness-focus)}/*!@[part='anchor']:active*/[part='anchor'].sc-scale-link:active{--anchor-color:var(--color-active);--line-color:var(--color-line-active);--line-thickness:var(--line-thickness-active)}/*!@:host(.disabled)*/.disabled.sc-scale-link-h{cursor:not-allowed}/*!@:host(.disabled) [part='anchor'],\n:host(.disabled) [part='anchor']:visited,\n:host(.disabled) [part='anchor']:hover,\n:host(.disabled) [part='anchor']:active*/.disabled.sc-scale-link-h [part='anchor'].sc-scale-link,.disabled.sc-scale-link-h [part='anchor'].sc-scale-link:visited,.disabled.sc-scale-link-h [part='anchor'].sc-scale-link:hover,.disabled.sc-scale-link-h [part='anchor'].sc-scale-link:active{--anchor-color:var(--color-disabled);--line-color:var(--color-line-disabled);cursor:not-allowed;pointer-events:none}";

/**
 * This is a superset of the default anchor `<a>` element.
 * @part anchor - the native achor element wrapping all contents
 * @part content - a wrapper around the default slot with the underline
 *
 * @slot default - here goes the actual text of the
 * @slot icon - a slot that will not be underlined and which position can be changed
 */
class Link {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) Disabled link */
    this.disabled = false;
    /** (optional) Remove the initial line from the text (can also be achieved via `--line-thickness-initial: 0`)
     * Remove the line for every state with `--line-thickness: 0`
     */
    this.omitUnderline = false;
    /** (optional) Download declaration */
    this.download = false;
    /** (optional) Chnage icon/content slot order */
    this.iconPosition = 'after';
  }
  async setFocus() {
    this.focusableElement.focus();
  }
  getAnchorProps() {
    const props = {
      href: this.href || null,
      tabIndex: this.disabled ? -1 : this.innerTabindex,
      'aria-disabled': this.disabled ? 'true' : false,
      download: this.download || null,
      hreflang: this.hreflang || null,
      ping: this.ping || null,
      referrerpolicy: this.referrerpolicy || null,
      rel: this.rel || null,
      target: this.target || null,
      type: this.type || null,
    };
    return Object.assign({}, props);
  }
  render() {
    return (hAsync(Host$1, { class: {
        disabled: this.disabled,
        reverse: this.iconPosition === 'before',
        'no-underline': this.omitUnderline,
      } }, this.styles && hAsync("style", null, this.styles), hAsync("a", Object.assign({ part: "anchor", ref: (el) => (this.focusableElement = el) }, this.getAnchorProps()), hAsync("div", { part: "content" }, hAsync("slot", null)), hAsync("slot", { name: "icon" }))));
  }
  static get style() { return linkCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-link",
    "$members$": {
      "disabled": [4],
      "omitUnderline": [4, "omit-underline"],
      "href": [1],
      "download": [4],
      "iconPosition": [1, "icon-position"],
      "hreflang": [1],
      "ping": [1],
      "referrerpolicy": [1],
      "rel": [1],
      "target": [1],
      "type": [1],
      "innerTabindex": [2, "inner-tabindex"],
      "styles": [1],
      "setFocus": [64]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const listCss = "/*!@:host*/.sc-scale-list-h{--spacing-left:0;--spacing-left-nested:var(--scl-spacing-8)}/*!@.list*/.list.sc-scale-list{padding-left:var(--spacing-left)}/*!@.list--nested*/.list--nested.sc-scale-list{margin-top:0;margin-bottom:0;padding-left:var(--spacing-left-nested)}";

/**
 * @see https://github.com/carbon-design-system/carbon-web-components/tree/master/src/components/list
 */
class List {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.isNested = false;
    /** (optional) Make the list ordered (ol) */
    this.ordered = false;
  }
  orderedChanged(newValue) {
    this.propagatePropsToChildren(newValue);
  }
  componentDidLoad() {
    this.propagatePropsToChildren(this.ordered);
  }
  connectedCallback() {
    this.isNested = this.el.closest('scale-list-item') != null;
    if (this.isNested) {
      this.el.setAttribute('slot', 'nested');
    }
    else {
      this.el.removeAttribute('slot');
    }
  }
  propagatePropsToChildren(ordered) {
    const items = Array.from(this.el.children).filter((child) => child.matches('scale-list-item'));
    items.forEach((item, index) => {
      item.ordered = ordered;
      item.index = index + 1;
    });
  }
  render() {
    const Tag = this.ordered ? 'ol' : 'ul';
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync(Tag, { class: this.getCssClassMap(), part: classnames('base', this.ordered && 'ordered', this.isNested && 'nested') }, hAsync("slot", null))));
  }
  getCssClassMap() {
    return classnames('list', this.ordered && 'list--type-ordered', this.isNested && 'list--nested');
  }
  get el() { return getElement$1(this); }
  static get watchers() { return {
    "ordered": ["orderedChanged"]
  }; }
  static get style() { return listCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-list",
    "$members$": {
      "ordered": [4],
      "styles": [1]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const listItemCss = "/*!@:host(scale-list-item)*/scale-list-item.sc-scale-list-item-h{--display:block;--font-size:var(--scl-font-size-16);--line-height:var(--scl-font-line-height-150);--spacing-left:calc(0.25ch + var(--scl-spacing-16));--font-size-marker-ordered:var(--scl-font-size-16);--font-weight-marker-ordered:var(--scl-font-weight-bold);--font-size-marker-ordered-nested:var(--scl-font-size-12);--line-height-marker-ordered-nested:var(--scl-font-line-height-150);--spacing-top-marker-ordered-nested:calc(\n    var(--scl-spacing-16) - var(--scl-spacing-12)\n  );--spacing-right-no-marker:var(--scl-spacing-8);display:var(--display)}/*!@.list-item*/.list-item.sc-scale-list-item{position:relative;font-size:var(--font-size);line-height:var(--line-height);padding-left:var(--spacing-left)}/*!@.list-item:before*/.list-item.sc-scale-list-item:before{content:'';position:absolute;top:0;left:0}/*!@.list-item--unordered:before*/.list-item--unordered.sc-scale-list-item:before{top:0.5em;border:var(--scl-spacing-1) solid currentColor;display:block;transform:scale(0.66);background:currentColor;box-sizing:border-box;border-radius:50%;width:var(--scl-spacing-8);height:var(--scl-spacing-8)}/*!@.list-item--nested.list-item--unordered:before*/.list-item--nested.list-item--unordered.sc-scale-list-item:before{border:var(--scl-spacing-1) solid currentColor;background:transparent}/*!@.list-item--ordered:before*/.list-item--ordered.sc-scale-list-item:before{content:attr(data-index) '.';font-size:var(--font-size-marker-ordered);font-weight:var(--font-weight-marker-ordered)}/*!@.list-item--nested.list-item--ordered:before*/.list-item--nested.list-item--ordered.sc-scale-list-item:before{font-size:var(--font-size-marker-ordered-nested);line-height:var(--line-height-marker-ordered-nested);padding-top:var(--spacing-top-marker-ordered-nested)}/*!@.list-item--no-marker*/.list-item--no-marker.sc-scale-list-item{display:inline-flex;align-items:center;padding-left:0}/*!@.list-item--no-marker:before*/.list-item--no-marker.sc-scale-list-item:before{display:none}/*!@.list-item--no-marker > ::slotted(*)*/.list-item--no-marker>.sc-scale-list-item-s>*{margin-right:var(--spacing-right-no-marker)}";

/**
 * @todo styles for custom icon (no-marker prop?)
 * @see https://github.com/carbon-design-system/carbon-web-components/tree/master/src/components/list
 */
class ListItem {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** Whether this is a child of an ordered scale-list, gets set automatically by its parent */
    this.ordered = false;
    /** If `false`, no marker or left padding will be visible */
    this.marker = true;
    this.hasNestedChild = false;
    this.isNested = false;
    this.handleSlotChange = ({ target }) => {
      this.hasNestedChild =
        target.assignedNodes().length > 0;
      this.isNested = this.isNestedCheck();
    };
    this.isNestedCheck = () => {
      return this.el.closest('scale-list[slot="nested"]') != null;
    };
  }
  componentWillLoad() {
    this.isNested = this.isNestedCheck();
  }
  connectedCallback() {
    if (!this.el.hasAttribute('role')) {
      this.el.setAttribute('role', 'listitem');
    }
  }
  render() {
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync("div", { class: this.getCssClassMap(), "data-index": this.index, part: classnames('base', this.ordered ? 'ordered' : 'unordered', this.isNested && 'nested', !this.marker && 'no-marker') }, hAsync("slot", null), hAsync("div", { class: "list-item__nested-list", part: "nested-list", hidden: !this.hasNestedChild }, hAsync("slot", { name: "nested", onSlotchange: this.handleSlotChange })))));
  }
  getCssClassMap() {
    const orderType = this.ordered ? 'ordered' : 'unordered';
    return classnames('list-item', this.isNested && 'list-item--nested', `list-item--${orderType}`, !this.marker && 'list-item--no-marker');
  }
  get el() { return getElement$1(this); }
  static get style() { return listItemCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-list-item",
    "$members$": {
      "ordered": [4],
      "index": [1026],
      "marker": [4],
      "styles": [1],
      "hasNestedChild": [32],
      "isNested": [32]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const loadingSpinnerCss = "/*!@:host*/.sc-scale-loading-spinner-h{display:inline-flex;--size-outer-small:28px;--size-outer-large:56px;--size-inner-small:28px;--size-inner-large:56px;--line-height-size-small:24px;--line-height-size-large:48px;--font-weight:var(--scl-font-weight-bold);--font-size:var(--scl-font-size-16);--spacing:var(--scl-spacing-8);--color-circle-primary:var(--scl-color-primary);--color-circle-primary-inner:var(--scl-color-grey-20);--color-text-primary:var(--scl-color-grey-60);--color-circle-white:var(--scl-color-white);--color-circle-white-inner:var(--scl-color-grey-60);--color-text-white:var(--scl-color-white)}/*!@.sr-only*/.sr-only.sc-scale-loading-spinner{position:absolute;left:-10000px;overflow:hidden}/*!@.spinner*/.spinner.sc-scale-loading-spinner{display:inline-flex;align-items:center}/*!@.spinner.spinner--alignment-vertical*/.spinner.spinner--alignment-vertical.sc-scale-loading-spinner{flex-direction:column}/*!@.spinner .spinner__text*/.spinner.sc-scale-loading-spinner .spinner__text.sc-scale-loading-spinner{font-weight:var(--font-weight);font-size:var(--font-size);color:var(--color-text-primary)}/*!@.spinner.spinner--variant-white .spinner__text*/.spinner.spinner--variant-white.sc-scale-loading-spinner .spinner__text.sc-scale-loading-spinner{color:var(--color-circle-white)}/*!@.spinner.spinner--alignment-horizontal .spinner__text*/.spinner.spinner--alignment-horizontal.sc-scale-loading-spinner .spinner__text.sc-scale-loading-spinner{display:flex;align-self:center;margin-left:var(--spacing);margin-top:3px}/*!@.spinner.spinner--alignment-horizontal.spinner--size-small .spinner__text*/.spinner.spinner--alignment-horizontal.spinner--size-small.sc-scale-loading-spinner .spinner__text.sc-scale-loading-spinner{line-height:var(--line-height-size-small)}/*!@.spinner.spinner--alignment-horizontal.spinner--size-large .spinner__text*/.spinner.spinner--alignment-horizontal.spinner--size-large.sc-scale-loading-spinner .spinner__text.sc-scale-loading-spinner{line-height:var(--line-height-size-large);margin-top:5px}/*!@.spinner.spinner--alignment-vertical .spinner__text*/.spinner.spinner--alignment-vertical.sc-scale-loading-spinner .spinner__text.sc-scale-loading-spinner{margin-top:var(--spacing)}/*!@.spinner.spinner--alignment-vertical.spinner--size-small .spinner__container*/.spinner.spinner--alignment-vertical.spinner--size-small.sc-scale-loading-spinner .spinner__container.sc-scale-loading-spinner{height:24px;padding-bottom:5px}/*!@.spinner.spinner--alignment-vertical.spinner--size-large .spinner__container*/.spinner.spinner--alignment-vertical.spinner--size-large.sc-scale-loading-spinner .spinner__container.sc-scale-loading-spinner{height:48px;padding-bottom:5px}/*!@.spinner.spinner--alignment-horizontal.spinner--size-small .spinner__container*/.spinner.spinner--alignment-horizontal.spinner--size-small.sc-scale-loading-spinner .spinner__container.sc-scale-loading-spinner{height:24px;padding-right:30px}/*!@.spinner.spinner--alignment-horizontal.spinner--size-large .spinner__container*/.spinner.spinner--alignment-horizontal.spinner--size-large.sc-scale-loading-spinner .spinner__container.sc-scale-loading-spinner{height:48px;padding-right:60px}/*!@.spinner .spinner__container .spinner__circle*/.spinner.sc-scale-loading-spinner .spinner__container.sc-scale-loading-spinner .spinner__circle.sc-scale-loading-spinner{animation:rotate 2s linear infinite;z-index:2;position:absolute;width:var(--size-inner-small);height:var(--size-inner-small)}/*!@.spinner .spinner__container .spinner__circle-background*/.spinner.sc-scale-loading-spinner .spinner__container.sc-scale-loading-spinner .spinner__circle-background.sc-scale-loading-spinner{animation:rotate 2s linear infinite;position:absolute;width:var(--size-outer-small);height:var(--size-outer-small)}/*!@.spinner.spinner.spinner--alignment-vertical\n  .spinner__container\n  .spinner__circle-background*/.spinner.spinner.spinner--alignment-vertical.sc-scale-loading-spinner .spinner__container.sc-scale-loading-spinner .spinner__circle-background.sc-scale-loading-spinner{margin-left:-15px}/*!@.spinner.spinner--size-large .spinner__container .spinner__circle-background*/.spinner.spinner--size-large.sc-scale-loading-spinner .spinner__container.sc-scale-loading-spinner .spinner__circle-background.sc-scale-loading-spinner{width:var(--size-outer-large);height:var(--size-outer-large)}/*!@.spinner.spinner--alignment-vertical.spinner--size-large\n  .spinner__container\n  .spinner__circle-background*/.spinner.spinner--alignment-vertical.spinner--size-large.sc-scale-loading-spinner .spinner__container.sc-scale-loading-spinner .spinner__circle-background.sc-scale-loading-spinner{margin-left:-30px}/*!@.spinner.spinner.spinner--alignment-vertical\n  .spinner__container\n  .spinner__circle*/.spinner.spinner.spinner--alignment-vertical.sc-scale-loading-spinner .spinner__container.sc-scale-loading-spinner .spinner__circle.sc-scale-loading-spinner{margin-left:-15px}/*!@.spinner.spinner--alignment-vertical.spinner--size-large\n  .spinner__container\n  .spinner__circle*/.spinner.spinner--alignment-vertical.spinner--size-large.sc-scale-loading-spinner .spinner__container.sc-scale-loading-spinner .spinner__circle.sc-scale-loading-spinner{margin-left:-30px}/*!@.spinner.spinner--size-large .spinner__container .spinner__circle*/.spinner.spinner--size-large.sc-scale-loading-spinner .spinner__container.sc-scale-loading-spinner .spinner__circle.sc-scale-loading-spinner{width:var(--size-inner-large);height:var(--size-inner-large)}/*!@.spinner.spinner--variant-white\n  .spinner__container\n  .spinner__circle-background\n  .path*/.spinner.spinner--variant-white.sc-scale-loading-spinner .spinner__container.sc-scale-loading-spinner .spinner__circle-background.sc-scale-loading-spinner .path.sc-scale-loading-spinner{stroke:var(--color-circle-white-inner)}/*!@.spinner .spinner__container .spinner__circle-background .path*/.spinner.sc-scale-loading-spinner .spinner__container.sc-scale-loading-spinner .spinner__circle-background.sc-scale-loading-spinner .path.sc-scale-loading-spinner{stroke:var(--color-circle-primary-inner)}/*!@.spinner.spinner--variant-white .spinner__container .spinner__circle .path*/.spinner.spinner--variant-white.sc-scale-loading-spinner .spinner__container.sc-scale-loading-spinner .spinner__circle.sc-scale-loading-spinner .path.sc-scale-loading-spinner{stroke:white}/*!@.spinner .spinner__container .spinner__circle .path*/.spinner.sc-scale-loading-spinner .spinner__container.sc-scale-loading-spinner .spinner__circle.sc-scale-loading-spinner .path.sc-scale-loading-spinner{animation:dash 1.5s ease-in-out infinite;stroke:var(--color-circle-primary)}@keyframes rotate{100%{transform:rotate(360deg)}}@keyframes dash{0%{stroke-dasharray:1, 150;stroke-dashoffset:0}50%{stroke-dasharray:90, 150;stroke-dashoffset:-35}100%{stroke-dasharray:90, 150;stroke-dashoffset:-124}}@media screen and (forced-colors: active), (-ms-high-contrast: active){/*!@.spinner .spinner__container .spinner__circle-background .path*/.spinner.sc-scale-loading-spinner .spinner__container.sc-scale-loading-spinner .spinner__circle-background.sc-scale-loading-spinner .path.sc-scale-loading-spinner{stroke:none}/*!@.spinner .spinner__container .spinner__circle .path*/.spinner.sc-scale-loading-spinner .spinner__container.sc-scale-loading-spinner .spinner__circle.sc-scale-loading-spinner .path.sc-scale-loading-spinner{stroke:white}/*!@.spinner.spinner--variant-white\n    .spinner__container\n    .spinner__circle-background\n    .path*/.spinner.spinner--variant-white.sc-scale-loading-spinner .spinner__container.sc-scale-loading-spinner .spinner__circle-background.sc-scale-loading-spinner .path.sc-scale-loading-spinner{stroke:none}/*!@.spinner.spinner--variant-white .spinner__container .spinner__circle .path*/.spinner.spinner--variant-white.sc-scale-loading-spinner .spinner__container.sc-scale-loading-spinner .spinner__circle.sc-scale-loading-spinner .path.sc-scale-loading-spinner{stroke:white}}";

let i$a = 0;
class LoadingSpinner {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.variant = 'primary';
    this.alignment = 'horizontal';
    this.size = 'small';
  }
  componentWillLoad() {
    i$a++;
  }
  render() {
    return (hAsync(Host$1, null, hAsync("div", { part: this.getBasePartMap(), class: this.getCssClassMap() }, hAsync("div", { part: "container", class: "spinner__container" }, hAsync("svg", { class: "spinner__circle", viewBox: "0 0 50 50", "aria-hidden": "true" }, hAsync("circle", { class: "path", cx: "25", cy: "25", r: "20", fill: "none", "stroke-width": "4" })), hAsync("svg", { class: "spinner__circle-background", viewBox: "0 0 50 50", "aria-hidden": "true" }, hAsync("circle", { class: "path", cx: "25", cy: "25", r: "20", fill: "none", "stroke-width": "4" }))), hAsync("div", { class: "sr-only", "aria-live": "polite", id: `spinner-label-${i$a}` }, this.text || 'Loading'), hAsync("div", { part: "text", class: "spinner__text", "aria-hidden": "true" }, this.text))));
  }
  getBasePartMap() {
    return this.getCssOrBasePartMap('basePart');
  }
  getCssClassMap() {
    return this.getCssOrBasePartMap('css');
  }
  getCssOrBasePartMap(mode) {
    const name = 'spinner';
    const prefix = mode === 'basePart' ? '' : `${name}--`;
    return classnames(name, this.alignment && `${prefix}alignment-${this.alignment}`, this.variant && `${prefix}variant-${this.variant}`, this.size && `${prefix}size-${this.size}`, this.text && `${prefix}text`);
  }
  static get style() { return loadingSpinnerCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-loading-spinner",
    "$members$": {
      "variant": [1],
      "alignment": [1],
      "text": [1],
      "size": [1]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const appLogoCss = ".logo{display:flex;align-items:center}.logo>svg{width:100%;max-width:300px;height:auto}";

class Logo$1 {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.href = 'javascript:void(0);';
    this.logoTitle = 'Telekom Logo';
    this.color = '#fff';
    this.claim = false;
    this.focusable = true;
  }
  render() {
    if (!this.claim) {
      return (hAsync("a", { href: this.href, title: this.logoTitle, tabindex: this.focusable === false ? -1 : undefined }, hAsync("svg", { width: "51", height: "24", viewBox: "0 0 51 24", xmlns: "http://www.w3.org/2000/svg" }, hAsync("path", { d: "M0 15.8v-4.83h4.996v4.83H0zm15.235 0v-4.83h4.997v4.83h-4.997zm14.99 0v-4.83h4.995v4.83h-4.996zm14.988 0v-4.83h4.996v4.83h-4.996zM19.984 0l.248 8.415-1.31.219c-.243-2.48-.916-4.32-2.02-5.52-1.16-1.257-2.76-1.913-4.815-1.97V18.75c0 1.538.225 2.536.689 2.997.395.392 1.062.633 2.002.723.28.023.755.034 1.428.034v1.346H4.026v-1.346c.673 0 1.148-.011 1.427-.034.94-.09 1.608-.33 2.002-.723.465-.46.687-1.46.687-2.997V1.145c-2.055.056-3.652.712-4.813 1.968-1.103 1.201-1.776 3.041-2.02 5.521L0 8.415.247 0h19.737z", fill: this.color, "fill-rule": "nonzero" }))));
    }
    return (hAsync("a", { class: "logo", href: this.href, title: this.logoTitle, onFocus: () => {
        window.scrollTo({ top: 0 });
      } }, hAsync("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 284 36" }, hAsync("g", { fill: this.color, "fill-rule": "nonzero" }, this.claimLang === 'de' ? (hAsync("path", { d: "M104.6 16v2.3h4.1v2h-4.1v2.5h4.2v2.1h-6.4v-11h6.4V16zM114 20.9h-1.1v4h-2.2v-11h4c2.1 0 3.6 1.3 3.6 3.5 0 1.7-.9 2.8-2.2 3.2l2.3 4.2h-2.5l-1.9-3.9zm-1.1-2.1h1.7c.9 0 1.5-.5 1.5-1.4 0-.9-.6-1.4-1.5-1.4h-1.7v2.8zM120 13.9h2.2v8.9h3.9v2.1H120zM129.5 16v2.3h4.1v2h-4.1v2.5h4.3v2.1h-6.5v-11h6.5V16zM143.1 21.8c0 1.7-1 3-3.4 3h-4.1V13.9h4.2c2.2 0 3.2 1.3 3.2 2.9 0 1.1-.5 2-1.3 2.5v.1c.9.4 1.4 1.3 1.4 2.4zm-5.2-5.9v2.5h1.7c.7 0 1.2-.5 1.2-1.3s-.5-1.3-1.2-1.3h-1.7v.1zm2.9 5.7c0-.8-.5-1.3-1.3-1.3h-1.6v2.6h1.6c.8 0 1.3-.5 1.3-1.3zM147 16v2.3h4.1v2H147v2.5h4.3v2.1h-6.5v-11h6.5V16zM161.6 13.9v11h-2.2l-3.9-6.9h-.1v6.9h-2.3v-11h2.3l3.9 6.9h.1v-6.9zM166 22.3v2.3c0 1.7-.7 2.8-2.5 2.9v-1.2c.9-.1 1.2-.5 1.2-1.4v-.1h-1.2v-2.5h2.5zM183.9 13.9l-2.9 11h-2.4l-1.8-7.2h-.1l-1.8 7.2h-2.4l-2.9-11h2.3l1.8 7.3h.1l1.7-7.3h2.5l1.8 7.3h.1l1.7-7.3zM189.9 22.7h-3.8l-.7 2.1h-2.2l3.7-10.9h2.2l3.7 10.9h-2.2l-.7-2.1zm-.7-2l-1.1-3.4h-.1l-1.1 3.4h2.3zM193.3 21.8h2.2c.2.9.8 1.3 1.6 1.3 1 0 1.4-.5 1.4-1.2s-.5-1-1.3-1.3l-1.3-.4c-1.8-.5-2.4-1.7-2.4-3.1 0-2.1 1.6-3.4 3.6-3.4 2.2 0 3.4 1.3 3.6 3.3h-2.2c-.2-.8-.6-1.2-1.5-1.2-.7 0-1.3.4-1.3 1.2 0 .8.5 1.1 1.1 1.2l1.3.3c1.6.4 2.6 1.6 2.6 3.2 0 2.2-1.6 3.4-3.7 3.4-2.2 0-3.5-1.2-3.7-3.3zM214 13.9l-3.5 11h-2.2l-3.6-11h2.3l2.3 7.4h.1l2.4-7.4zM217.1 16v2.3h4.1v2h-4.1v2.5h4.3v2.1h-6.5v-11h6.5V16zM226.5 20.9h-1.1v4h-2.2v-11h4c2.1 0 3.6 1.3 3.6 3.5 0 1.7-.9 2.8-2.2 3.2l2.3 4.2h-2.5l-1.9-3.9zm-1.1-2.1h1.7c.9 0 1.5-.5 1.5-1.4 0-.9-.6-1.4-1.5-1.4h-1.7v2.8zM239.9 21.8c0 1.7-1 3-3.4 3h-4.1V13.9h4.2c2.2 0 3.2 1.3 3.2 2.9 0 1.1-.5 2-1.3 2.5v.1c.9.4 1.4 1.3 1.4 2.4zm-5.2-5.9v2.5h1.7c.7 0 1.2-.5 1.2-1.3s-.5-1.3-1.2-1.3h-1.7v.1zm2.9 5.7c0-.8-.5-1.3-1.3-1.3h-1.6v2.6h1.6c.9 0 1.3-.5 1.3-1.3zM241.6 13.9h2.2v11h-2.2zM254.4 13.9v11h-2.2l-4-6.9h-.1v6.9h-2.2v-11h2.3l3.9 6.9h.1v-6.9zM256.5 13.9h3.8c2.8 0 4.6 1.9 4.6 5.5s-1.8 5.5-4.6 5.5h-3.8v-11zm3.7 8.9c1.5 0 2.5-1 2.5-3.4s-1-3.4-2.5-3.4h-1.4v6.8h1.4zM268.8 16v2.3h4v2h-4v2.5h4.2v2.1h-6.4v-11h6.4V16zM273.9 13.9h7.8V16h-2.8v8.9h-2.2V16h-2.8zM281.5 22.3h2.5v2.6h-2.5z" })) : (hAsync("path", { d: "M103.174 13.906h2.159v8.686h3.822v2.01h-5.981zM110.296 13.906h2.16v10.696h-2.16zM116.712 15.904v2.42h3.822v1.997h-3.822v4.281h-2.16V13.906h6.13v1.998zM124.033 15.904v2.258h3.97v1.998h-3.97v2.432h4.132v2.01h-6.291V13.906h6.291v1.998zM133.662 13.906h2.16v10.696h-2.16zM137.05 21.575h2.147c.186.893.781 1.253 1.563 1.253.93 0 1.39-.509 1.39-1.204 0-.67-.447-1.005-1.278-1.228l-1.229-.348c-1.712-.459-2.382-1.7-2.382-3.04 0-2.047 1.526-3.326 3.5-3.326 2.158 0 3.325 1.254 3.536 3.214h-2.11c-.149-.794-.595-1.203-1.427-1.203-.732 0-1.29.41-1.29 1.166 0 .757.496 1.03 1.092 1.179l1.228.335c1.588.41 2.581 1.588 2.581 3.115 0 2.146-1.588 3.35-3.598 3.35-2.222 0-3.525-1.154-3.723-3.263zM151.618 15.904v2.42h3.822v1.997h-3.822v4.281h-2.16V13.906h6.13v1.998zM156.594 19.254c0-3.462 1.6-5.584 4.53-5.584 2.928 0 4.528 2.122 4.528 5.584 0 3.462-1.6 5.584-4.529 5.584-2.928 0-4.53-2.134-4.53-5.584zm6.812 0c0-2.333-.806-3.524-2.283-3.524-1.489 0-2.283 1.179-2.283 3.524 0 2.345.794 3.524 2.283 3.524 1.49 0 2.283-1.191 2.283-3.524zM170.343 20.693H169.3v3.91h-2.159V13.917h3.946c2.085 0 3.55 1.229 3.55 3.388 0 1.638-.845 2.742-2.147 3.164l2.258 4.132h-2.395l-2.01-3.909zm-1.043-1.997h1.676c.843 0 1.427-.497 1.427-1.39 0-.894-.571-1.39-1.427-1.39H169.3v2.78zM179.203 21.575h2.146c.187.893.782 1.253 1.564 1.253.93 0 1.39-.509 1.39-1.204 0-.67-.447-1.005-1.278-1.228l-1.229-.348c-1.712-.459-2.382-1.7-2.382-3.04 0-2.047 1.526-3.326 3.499-3.326 2.16 0 3.326 1.254 3.537 3.214h-2.11c-.149-.794-.596-1.203-1.427-1.203-.732 0-1.29.41-1.29 1.166 0 .757.496 1.03 1.091 1.179l1.229.335c1.588.41 2.581 1.588 2.581 3.115 0 2.146-1.588 3.35-3.599 3.35-2.22 0-3.536-1.154-3.722-3.263zM196.004 13.906v10.696h-2.159V20.16h-3.822v4.442h-2.159V13.906h2.16v4.256h3.821v-4.256zM203.4 22.53h-3.685l-.683 2.06h-2.196l3.648-10.684h2.16l3.647 10.684h-2.196l-.695-2.06zm-.67-2.01l-1.117-3.313h-.1l-1.116 3.313h2.333zM210.324 20.693h-1.042v3.91h-2.16V13.917h3.947c2.084 0 3.549 1.229 3.549 3.388 0 1.638-.844 2.742-2.147 3.164l2.258 4.132h-2.395l-2.01-3.909zm-1.042-1.997h1.675c.844 0 1.427-.497 1.427-1.39 0-.894-.57-1.39-1.427-1.39h-1.675v2.78zM215.983 13.906h2.159v10.696h-2.16zM228.503 13.906v10.696h-2.171l-3.847-6.688h-.1v6.688h-2.159V13.906h2.197l3.834 6.725h.1v-6.725zM239.026 18.969v.595c0 3.537-1.589 5.274-4.294 5.274-3.102 0-4.678-2.16-4.678-5.584 0-3.425 1.663-5.584 4.629-5.584 2.308 0 3.871 1.377 4.181 3.375h-2.308c-.235-.794-.93-1.315-1.873-1.315-1.527 0-2.383 1.216-2.383 3.524s.82 3.524 2.432 3.524c1.142 0 1.899-.533 2.085-1.948h-1.948v-1.861h4.157zM240.192 22.133h2.457v2.47h-2.457z" })), hAsync("g", null, hAsync("path", { d: "M7.3 16.6H0v7.3h7.3z" }), hAsync("path", { d: "M.4 0L0 12.7l1.9.3c.4-3.7 1.3-6.5 2.9-8.3 1.7-1.9 4-2.9 7-3v26.6c0 2.3-.3 3.8-1 4.5-.6.6-1.5 1-2.9 1.1-.3.1-1 .1-2 .1v2h17.8v-2c-1 0-1.7 0-2.1-.1-1.4-.1-2.3-.5-2.9-1.1-.7-.7-1-2.2-1-4.5V1.7c3 .1 5.3 1.1 7 3 1.6 1.8 2.6 4.6 2.9 8.3l1.9-.3L29.2 0H.4z" }), hAsync("path", { d: "M22.2 16.6v7.3h7.3v-7.3h-3.7zM44.1 16.6v7.3h7.3v-7.3h-3.6zM66 16.6v7.3h7.3v-7.3h-3.8z" }))))));
  }
  static get style() { return appLogoCss; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "app-logo",
    "$members$": {
      "href": [1],
      "logoTitle": [1, "logo-title"],
      "color": [1],
      "claim": [4],
      "claimLang": [1, "claim-lang"],
      "focusable": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const logoCss = "/*!@:host*/.sc-scale-logo-h{--logo-size:36px}/*!@.logo*/.logo.sc-scale-logo{display:inline-flex;height:var(--logo-size);padding:calc(var(--logo-size) / 3);position:relative}/*!@.logo--variant-magenta*/.logo--variant-magenta.sc-scale-logo{background-color:var(--scl-color-white)}/*!@.logo--variant-white*/.logo--variant-white.sc-scale-logo{background-color:var(--scl-color-primary)}/*!@.logo--transparent*/.logo--transparent.sc-scale-logo{background-color:transparent}";

class Logo {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) Variant/color of the logo text and logo */
    this.variant = 'magenta';
    /** (optional) Set transparent background */
    this.transparent = false;
    /** (optional) Language of the logo text/ claimOff showes just the T Logo */
    this.language = 'en';
    /** (optional) The height in pixels */
    this.size = 36;
    /** (optional) Set a link */
    this.href = '';
  }
  styles() {
    return `:host {
        --logo-size: ${this.size}px;
      }`;
  }
  getLogoSvg(role) {
    if (this.accessibilityTitle) {
      return (hAsync("scale-logo-svg", { language: this.language, color: this.variant, size: this.size, accessibilityTitle: this.accessibilityTitle, role: role }));
    }
    else {
      return (hAsync("scale-logo-svg", { language: this.language, color: this.variant, size: this.size, role: role }));
    }
  }
  render() {
    return (hAsync(Host$1, null, hAsync("style", null, this.styles()), this.href === '' ? (hAsync("div", { class: this.getCssClassMap(), onClick: this.clickHandler }, this.getLogoSvg('img'))) : (hAsync("a", { href: this.href, class: this.getCssClassMap(), onClick: this.clickHandler }, this.getLogoSvg('link')))));
  }
  getCssClassMap() {
    return classnames(`logo`, this.variant && `logo--variant-${this.variant}`, this.transparent && `logo--transparent`);
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return logoCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-logo",
    "$members$": {
      "variant": [1],
      "transparent": [4],
      "language": [1],
      "size": [2],
      "href": [1],
      "clickHandler": [8, "click-handler"],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

let i$9 = 0;
const colors = {
  magenta: '#e20074',
  white: '#ffffff',
};
class LogoSvg {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The languages for the Text behind the Logo */
    this.language = 'en';
    /** (optional) Sets the icon color via the `fill` attribute */
    this.color = 'magenta';
    /** (optional) The height in pixels */
    this.size = 36;
    this.role = 'img';
  }
  componentWillLoad() {
    i$9++;
  }
  getColor() {
    return this.color === 'magenta' || 'white'
      ? colors[this.color]
      : this.color;
  }
  renderPaths() {
    switch (this.language) {
      case 'en':
        return (hAsync("svg", { xmlns: "http://www.w3.org/2000/svg", height: this.size + 'px', viewBox: "0 0 289.56 42.52", fill: this.getColor(), role: this.role === 'link' ? null : 'img', "aria-labelledby": `logo-title-${i$9}` }, this.accessibilityTitle ? (hAsync("title", { id: `logo-title-${i$9}` }, this.accessibilityTitle)) : (hAsync("title", { id: `logo-title-${i$9}` }, `Telekom Logo - Life is for sharing ${this.role === 'link' ? '- Go to Start Page' : ''}`)), hAsync("path", { d: "M286.56 27.35H289.53v2.97h-2.97zM280.12 23.52v2.24h2.36c-.21 1.72-1.14 2.36-2.51 2.36-1.95 0-2.94-1.47-2.94-4.25s1.04-4.25 2.88-4.25c1.14 0 1.97.62 2.26 1.59h2.78c-.37-2.42-2.26-4.08-5.05-4.08-3.58 0-5.59 2.61-5.59 6.75 0 4.14 1.9 6.75 5.65 6.75 3.27 0 5.18-2.11 5.18-6.38v-.72h-5.02zM269.84 17.41v8.12h-.11l-4.64-8.12h-2.65v12.91h2.61v-8.08h.12l4.64 8.08h2.63V17.41zM257.3 30.32h2.61V17.41H257.3zM252.9 30.32h2.9l-2.73-4.99c1.57-.52 2.59-1.86 2.59-3.83 0-2.61-1.78-4.1-4.29-4.1h-4.78v12.92h2.61V25.6h1.26l2.44 4.72zm-3.7-10.5h2.03c1.03 0 1.72.6 1.72 1.68s-.7 1.68-1.72 1.68h-2.03v-3.36zM242.94 30.32h2.65l-4.41-12.92h-2.61l-4.41 12.92h2.65l.83-2.49h4.45l.85 2.49zm-4.48-4.93l1.35-4h.12l1.35 4h-2.82zM230.56 17.41v5.14h-4.62v-5.14h-2.61v12.91h2.61v-5.35h4.62v5.35h2.61V17.41zM217.34 30.61c2.44 0 4.35-1.45 4.35-4.04 0-1.86-1.2-3.27-3.11-3.77l-1.49-.41c-.72-.19-1.32-.52-1.32-1.43 0-.91.68-1.41 1.57-1.41 1.01 0 1.55.48 1.72 1.45h2.55c-.25-2.38-1.66-3.89-4.27-3.89-2.4 0-4.23 1.55-4.23 4.02 0 1.62.81 3.11 2.88 3.67l1.49.42c1.01.27 1.55.68 1.55 1.49 0 .83-.56 1.45-1.68 1.45-.95 0-1.66-.42-1.9-1.51h-2.59c.22 2.57 1.81 3.96 4.48 3.96zM204.58 30.32h2.9l-2.73-4.99c1.57-.52 2.59-1.86 2.59-3.83 0-2.61-1.78-4.1-4.29-4.1h-4.78v12.92h2.61V25.6h1.26l2.44 4.72zm-3.69-10.5h2.03c1.03 0 1.72.6 1.72 1.68s-.7 1.68-1.72 1.68h-2.03v-3.36zM191 30.61c3.54 0 5.47-2.57 5.47-6.75s-1.93-6.75-5.47-6.75-5.47 2.57-5.47 6.75 1.93 6.75 5.47 6.75zm0-2.49c-1.8 0-2.77-1.43-2.77-4.25s.97-4.25 2.77-4.25 2.77 1.43 2.77 4.25-.97 4.25-2.77 4.25zM184.31 19.82v-2.41h-7.4v12.91h2.61v-5.16h4.62v-2.42h-4.62v-2.92zM166.4 30.61c2.44 0 4.35-1.45 4.35-4.04 0-1.86-1.2-3.27-3.11-3.77l-1.49-.41c-.72-.19-1.32-.52-1.32-1.43 0-.91.68-1.41 1.57-1.41 1.01 0 1.55.48 1.72 1.45h2.55c-.25-2.38-1.66-3.89-4.27-3.89-2.4 0-4.23 1.55-4.23 4.02 0 1.62.81 3.11 2.88 3.67l1.49.42c1.01.27 1.55.68 1.55 1.49 0 .83-.56 1.45-1.68 1.45-.95 0-1.66-.42-1.9-1.51h-2.59c.22 2.57 1.81 3.96 4.48 3.96zM157.82 30.32h2.61V17.41H157.82zM151.17 19.82v-2.41h-7.6v12.91h7.6v-2.41h-4.99v-2.94h4.8v-2.42h-4.8v-2.73zM142.13 19.82v-2.41h-7.41v12.91h2.61v-5.16h4.62v-2.42h-4.62v-2.92zM129.58 30.32h2.61V17.41H129.58zM120.96 30.32h7.23v-2.41h-4.62v-10.5h-2.61z" }), hAsync("path", { d: "M82.12 19.56h4.41v8.61h-8.61v-8.61zM52.09 19.56v8.61h8.61v-8.61h-4.19zM26.26 19.56v8.61h8.61v-8.61h-4.42z" }), hAsync("path", { d: "M.43 0L0 15l2.26.39c.42-4.42 1.58-7.7 3.48-9.84 2-2.24 4.75-3.41 8.29-3.51v31.39c0 2.74-.38 4.52-1.18 5.34-.68.7-1.83 1.13-3.45 1.29-.48.04-1.3.06-2.46.06v2.4h20.99v-2.4c-1.16 0-1.98-.02-2.46-.06-1.62-.16-2.77-.59-3.45-1.29-.8-.82-1.19-2.6-1.19-5.34V2.04c3.54.1 6.3 1.27 8.3 3.51 1.9 2.14 3.06 5.42 3.48 9.84l2.26-.39-.43-15H.43z" }), hAsync("path", { d: "M8.61 19.56H0v8.61h8.61z" })));
      case 'de':
        return (hAsync("svg", { xmlns: "http://www.w3.org/2000/svg", height: this.size + 'px', viewBox: "0 0 335.4 42.52", fill: this.getColor(), role: this.role === 'link' ? null : 'img', "aria-labelledby": `logo-title-${i$9}` }, this.accessibilityTitle ? (hAsync("title", { id: `logo-title-${i$9}` }, this.accessibilityTitle)) : (hAsync("title", { id: `logo-title-${i$9}` }, `Telekom Logo - Erleben, was verbindet ${this.role === 'link' ? '- Zur Startseite' : ''}`)), hAsync("path", { d: "M332.39 27.34h2.98v2.98h-2.98zM323.5 19.82h3.31v10.5h2.61v-10.5h3.31v-2.41h-9.23zM322.41 19.82v-2.41h-7.6v12.91h7.6v-2.41h-4.99v-2.94h4.79v-2.42h-4.79v-2.73zM302.94 30.32h4.49c3.36 0 5.47-2.26 5.47-6.46s-2.11-6.46-5.47-6.46h-4.49v12.92zm2.61-2.41v-8.08h1.68c1.8 0 2.96 1.2 2.96 4.04s-1.16 4.04-2.96 4.04h-1.68zM297.82 17.41v8.12h-.11l-4.64-8.12h-2.65v12.91h2.61v-8.08h.12l4.64 8.08h2.63V17.41zM285.28 30.32h2.61V17.41h-2.61zM281.63 23.87v-.08c.99-.58 1.59-1.62 1.59-2.96 0-1.86-1.12-3.42-3.77-3.42h-4.91v12.92h4.81c2.8 0 3.98-1.61 3.98-3.58 0-1.36-.62-2.38-1.7-2.88zm-2.53-4.16c.85 0 1.41.58 1.41 1.49 0 .89-.54 1.51-1.41 1.51h-1.95v-3h1.95zm-.06 8.31h-1.9v-3.09h1.9c1.03 0 1.59.6 1.59 1.53-.01.98-.57 1.56-1.59 1.56zM269.94 30.32h2.9l-2.73-4.99c1.57-.52 2.59-1.86 2.59-3.83 0-2.61-1.78-4.1-4.29-4.1h-4.78v12.92h2.61V25.6h1.26l2.44 4.72zm-3.7-10.5h2.03c1.03 0 1.72.6 1.72 1.68s-.7 1.68-1.72 1.68h-2.03v-3.36zM261.42 19.82v-2.41h-7.6v12.91h7.6v-2.41h-4.99v-2.94h4.79v-2.42h-4.79v-2.73zM250.09 17.41l-2.78 8.74h-.12l-2.76-8.74h-2.69l4.21 12.91h2.62l4.21-12.91zM232.78 30.61c2.44 0 4.35-1.45 4.35-4.04 0-1.86-1.2-3.27-3.11-3.77l-1.49-.41c-.72-.19-1.32-.52-1.32-1.43 0-.91.68-1.41 1.57-1.41 1.01 0 1.55.48 1.72 1.45h2.55c-.25-2.38-1.66-3.89-4.27-3.89-2.4 0-4.23 1.55-4.23 4.02 0 1.62.81 3.11 2.88 3.67l1.49.42c1.01.27 1.55.68 1.55 1.49 0 .83-.56 1.45-1.68 1.45-.95 0-1.66-.42-1.9-1.51h-2.59c.22 2.57 1.81 3.96 4.48 3.96zM225.13 30.32h2.65l-4.41-12.92h-2.61l-4.41 12.92H219l.83-2.49h4.45l.85 2.49zm-4.49-4.93l1.35-4h.12l1.35 4h-2.82zM214.52 17.41l-2.09 8.64h-.11l-2.11-8.64h-2.9l-2.09 8.64h-.12l-2.1-8.64h-2.69l3.44 12.91h2.8l2.15-8.45h.12l2.16 8.45h2.79l3.44-12.91zM193.08 27.34v2.98h1.41v.08c0 1.12-.35 1.64-1.41 1.7v1.37c2.17-.1 2.98-1.37 2.98-3.38v-2.75h-2.98zM188.27 17.41v8.12h-.11l-4.64-8.12h-2.65v12.91h2.61v-8.08h.11l4.64 8.08h2.64V17.41zM178.65 19.82v-2.41h-7.6v12.91h7.6v-2.41h-4.99v-2.94h4.8v-2.42h-4.8v-2.73zM167.31 23.87v-.08c.99-.58 1.59-1.62 1.59-2.96 0-1.86-1.12-3.42-3.77-3.42h-4.91v12.92h4.81c2.8 0 3.98-1.61 3.98-3.58 0-1.36-.62-2.38-1.7-2.88zm-2.54-4.16c.85 0 1.41.58 1.41 1.49 0 .89-.54 1.51-1.41 1.51h-1.95v-3h1.95zm-.05 8.31h-1.9v-3.09h1.9c1.03 0 1.59.6 1.59 1.53-.01.98-.57 1.56-1.59 1.56zM157.99 19.82v-2.41h-7.6v12.91h7.6v-2.41H153v-2.94h4.8v-2.42H153v-2.73zM141.68 30.32h7.23v-2.41h-4.62v-10.5h-2.61zM137.08 30.32h2.9l-2.73-4.99c1.57-.52 2.59-1.86 2.59-3.83 0-2.61-1.78-4.1-4.29-4.1h-4.78v12.92h2.61V25.6h1.26l2.44 4.72zm-3.69-10.5h2.03c1.03 0 1.72.6 1.72 1.68s-.7 1.68-1.72 1.68h-2.03v-3.36zM128.56 19.82v-2.41h-7.6v12.91h7.6v-2.41h-4.99v-2.94h4.8v-2.42h-4.8v-2.73z" }), hAsync("path", { d: "M82.12 19.56h4.41v8.61h-8.61v-8.61zM52.09 19.56v8.61h8.61v-8.61h-4.19zM26.26 19.56v8.61h8.61v-8.61h-4.42z" }), hAsync("path", { d: "M.43 0L0 15l2.26.39c.42-4.42 1.58-7.7 3.48-9.84 2-2.24 4.75-3.41 8.29-3.51v31.39c0 2.74-.38 4.52-1.18 5.34-.68.7-1.83 1.13-3.45 1.29-.48.04-1.3.06-2.46.06v2.4h20.99v-2.4c-1.16 0-1.98-.02-2.46-.06-1.62-.16-2.77-.59-3.45-1.29-.8-.82-1.19-2.6-1.19-5.34V2.04c3.54.1 6.3 1.27 8.3 3.51 1.9 2.14 3.06 5.42 3.48 9.84l2.26-.39-.43-15H.43z" }), hAsync("path", { d: "M8.61 19.56H0v8.61h8.61z" })));
      case 'cz':
        return (hAsync("svg", { xmlns: "http://www.w3.org/2000/svg", height: this.size + 'px', viewBox: "0 0 313.61 42.52", fill: this.getColor(), role: this.role === 'link' ? null : 'img', "aria-labelledby": `logo-title-${i$9}` }, this.accessibilityTitle ? (hAsync("title", { id: `logo-title-${i$9}` }, this.accessibilityTitle)) : (hAsync("title", { id: `logo-title-${i$9}` }, `Telekom Logo - Life is for sharing ${this.role === 'link' ? '- Go to Start Page' : ''}`)), hAsync("path", { d: "M130.03 21.7c0 2.75-1.76 4.27-4.27 4.27h-2.19v4.35h-2.61V17.41h4.79c2.52 0 4.28 1.54 4.28 4.29zm-2.71 0c0-1.22-.75-1.88-1.74-1.88h-2.01v3.73h2.01c.99.01 1.74-.65 1.74-1.85zM135.34 25.61h-1.26v4.72h-2.61V17.41h4.78c2.51 0 4.29 1.49 4.29 4.1 0 1.97-1.02 3.31-2.59 3.83l2.73 4.99h-2.9l-2.44-4.72zm-1.26-2.42h2.03c1.03 0 1.72-.6 1.72-1.68s-.7-1.68-1.72-1.68h-2.03v3.36zM141.76 23.87c0-4.18 1.93-6.75 5.47-6.75s5.47 2.57 5.47 6.75-1.93 6.75-5.47 6.75c-3.54-.01-5.47-2.58-5.47-6.75zm8.23 0c0-2.82-.97-4.25-2.76-4.25-1.8 0-2.76 1.43-2.76 4.25s.97 4.25 2.76 4.25c1.79 0 2.76-1.43 2.76-4.25zM158.47 26.67h2.59c.23 1.08.95 1.51 1.9 1.51 1.12 0 1.68-.62 1.68-1.45 0-.81-.54-1.22-1.55-1.49l-1.49-.42c-2.07-.56-2.88-2.05-2.88-3.67 0-2.48 1.84-4.02 4.23-4.02 2.61 0 4.02 1.51 4.27 3.89h-2.55c-.17-.97-.72-1.45-1.72-1.45-.89 0-1.57.5-1.57 1.41 0 .91.6 1.24 1.32 1.43l1.49.41c1.91.5 3.11 1.91 3.11 3.77 0 2.59-1.91 4.04-4.35 4.04-2.66-.02-4.25-1.41-4.48-3.96zM177.92 21.7c0 2.75-1.76 4.27-4.27 4.27h-2.19v4.35h-2.61V17.41h4.79c2.52 0 4.28 1.54 4.28 4.29zm-2.71 0c0-1.22-.75-1.88-1.74-1.88h-2.01v3.73h2.01c.99.01 1.74-.65 1.74-1.85zM178.94 23.87c0-4.18 1.93-6.75 5.47-6.75s5.47 2.57 5.47 6.75-1.93 6.75-5.47 6.75c-3.54-.01-5.47-2.58-5.47-6.75zm8.23 0c0-2.82-.97-4.25-2.76-4.25-1.8 0-2.77 1.43-2.77 4.25s.97 4.25 2.77 4.25 2.76-1.43 2.76-4.25zM191.69 17.41h2.61v10.5h4.62v2.41h-7.23zM202.92 19.82v2.73h4.79v2.42h-4.79v2.94h4.99v2.41h-7.6V17.41h7.6v2.41zM214.77 17.12c2.57 0 4.54 1.66 4.91 4.39h-2.73c-.29-1.33-1.18-1.9-2.19-1.9-1.78 0-2.76 1.47-2.76 4.25s.99 4.25 2.76 4.25c1.01 0 1.89-.56 2.19-1.9h2.73c-.37 2.73-2.34 4.39-4.91 4.39-3.5 0-5.47-2.59-5.47-6.75s1.97-6.73 5.47-6.73zM215.71 13.19h2.4l-2.22 2.92h-2.28l-2.19-2.92h2.38l.91 1.2h.11zM231.06 17.41v12.91h-2.63l-4.64-8.08h-.12v8.08h-2.61V17.41h2.65l4.64 8.12h.12v-8.12zM236.19 19.82v2.73h4.8v2.42h-4.8v2.94h4.99v2.41h-7.6V17.41h7.6v2.41zM238.34 16.11h-2.47l1.99-2.92h2.49zM255.58 27.91v2.41h-8.1v-2.97l5.24-7.41v-.12h-5.05v-2.41h7.85v2.97l-5.24 7.41v.12zM262.53 13.19h2.5l-1.99 2.92h-2.5zM264.29 27.83h-4.45l-.83 2.49h-2.65l4.41-12.92h2.61l4.41 12.92h-2.65l-.85-2.49zm-.81-2.44l-1.35-4h-.12l-1.35 4h2.82zM276.74 27.91v2.41h-8.1v-2.97l5.24-7.41v-.12h-5.05v-2.41h7.85v2.97l-5.24 7.41v.12zM273.68 13.19h2.38l-2.2 2.92h-2.28l-2.21-2.92h2.4l.89 1.2h.12zM278.28 17.41h2.61v12.91h-2.61zM282.2 17.41h9.23v2.41h-3.31v10.5h-2.61v-10.5h-3.31zM296.28 25.14l-.93 1.18v4h-2.61V17.41h2.61v4.87h.09l3.72-4.87h3.21l-4.41 5.57 4.46 7.34h-2.99l-3.04-5.18zM309.46 25.04v5.28h-2.62v-5.28l-4.15-7.63h3.05l2.34 4.75h.12l2.36-4.75h3.05z" }), hAsync("path", { d: "M82.12 19.56h4.41v8.61h-8.61v-8.61zM52.09 19.56v8.61h8.61v-8.61h-4.19zM26.26 19.56v8.61h8.61v-8.61h-4.42z" }), hAsync("path", { d: "M.43 0L0 15l2.26.39c.42-4.42 1.58-7.7 3.48-9.84 2-2.24 4.75-3.41 8.29-3.51v31.39c0 2.74-.38 4.52-1.18 5.34-.68.7-1.83 1.13-3.45 1.29-.48.04-1.3.06-2.46.06v2.4h20.99v-2.4c-1.16 0-1.98-.02-2.46-.06-1.62-.16-2.77-.59-3.45-1.29-.8-.82-1.19-2.6-1.19-5.34V2.04c3.54.1 6.3 1.27 8.3 3.51 1.9 2.14 3.06 5.42 3.48 9.84l2.26-.39-.43-15H.43z" }), hAsync("path", { d: "M8.61 19.56H0v8.61h8.61z" })));
      case 'hr':
        return (hAsync("svg", { xmlns: "http://www.w3.org/2000/svg", height: this.size + 'px', viewBox: "0 0 257.77 42.52", fill: this.getColor(), role: this.role === 'link' ? null : 'img', "aria-labelledby": `logo-title-${i$9}` }, this.accessibilityTitle ? (hAsync("title", { id: `logo-title-${i$9}` }, this.accessibilityTitle)) : (hAsync("title", { id: `logo-title-${i$9}` }, `Telekom Logo - Life is for sharing ${this.role === 'link' ? '- Go to Start Page' : ''}`)), hAsync("path", { d: "M129.06 27.91v2.41h-8.1v-2.97l5.24-7.41v-.12h-5.04v-2.41h7.85v2.97l-5.24 7.41v.12zM126.01 13.19h2.38l-2.21 2.92h-2.28l-2.2-2.92h2.4l.89 1.2h.11zM130.41 17.41H133.02v12.91h-2.61zM144.91 17.41l-4.21 12.91h-2.61l-4.22-12.91h2.69l2.76 8.74h.12l2.79-8.74zM147.42 28.12c.97 0 1.74-.62 1.74-2.28v-8.43h2.59v8.76c0 2.67-1.7 4.45-4.33 4.45-2.69 0-4.1-1.64-4.29-4.43h2.61c.11 1.27.62 1.93 1.68 1.93zM156.6 19.82v2.73h4.79v2.42h-4.79v2.94h4.99v2.41h-7.6V17.41h7.6v2.41zM162.68 17.41h9.23v2.41h-3.31v10.5h-2.61v-10.5h-3.31zM173.22 17.41H175.83v12.91h-2.61zM190.92 27.91v2.41h-8.1v-2.97l5.24-7.41v-.12h-5.05v-2.41h7.85v2.97l-5.24 7.41v.12zM199.54 27.83h-4.45l-.83 2.49h-2.65l4.41-12.92h2.61l4.41 12.92h-2.65l-.85-2.49zm-.81-2.44l-1.35-4h-.12l-1.35 4h2.82zM207.25 28.12c.97 0 1.74-.62 1.74-2.28v-8.43h2.59v8.76c0 2.67-1.7 4.45-4.33 4.45-2.69 0-4.1-1.64-4.29-4.43h2.61c.11 1.27.62 1.93 1.68 1.93zM216.23 19.82v2.73h4.8v2.42h-4.8v2.94h4.99v2.41h-7.6V17.41h7.6v2.41zM223.15 17.41h4.49c3.36 0 5.47 2.26 5.47 6.46s-2.11 6.46-5.47 6.46h-4.49V17.41zm4.29 10.5c1.8 0 2.96-1.2 2.96-4.04s-1.16-4.04-2.96-4.04h-1.68v8.08h1.68zM244.82 17.41v12.91h-2.63l-4.64-8.08h-.12v8.08h-2.61V17.41h2.65l4.64 8.12h.12v-8.12zM246.82 23.87c0-4.18 1.93-6.75 5.47-6.75s5.47 2.57 5.47 6.75-1.93 6.75-5.47 6.75c-3.53-.01-5.47-2.58-5.47-6.75zm8.24 0c0-2.82-.97-4.25-2.76-4.25-1.8 0-2.76 1.43-2.76 4.25s.97 4.25 2.76 4.25c1.79 0 2.76-1.43 2.76-4.25z" }), hAsync("path", { d: "M82.12 19.56h4.41v8.61h-8.61v-8.61zM52.09 19.56v8.61h8.61v-8.61h-4.19zM26.26 19.56v8.61h8.61v-8.61h-4.42z" }), hAsync("path", { d: "M.43 0L0 15l2.26.39c.42-4.42 1.58-7.7 3.48-9.84 2-2.24 4.75-3.41 8.29-3.51v31.39c0 2.74-.38 4.52-1.18 5.34-.68.7-1.83 1.13-3.45 1.29-.48.04-1.3.06-2.46.06v2.4h20.99v-2.4c-1.16 0-1.98-.02-2.46-.06-1.62-.16-2.77-.59-3.45-1.29-.8-.82-1.19-2.6-1.19-5.34V2.04c3.54.1 6.3 1.27 8.3 3.51 1.9 2.14 3.06 5.42 3.48 9.84l2.26-.39-.43-15H.43z" }), hAsync("path", { d: "M8.61 19.56H0v8.61h8.61z" })));
      case 'hu':
        return (hAsync("svg", { xmlns: "http://www.w3.org/2000/svg", height: this.size + 'px', viewBox: "0 0 239.39 42.52", fill: this.getColor(), role: this.role === 'link' ? null : 'img', "aria-labelledby": `logo-title-${i$9}` }, this.accessibilityTitle ? (hAsync("title", { id: `logo-title-${i$9}` }, this.accessibilityTitle)) : (hAsync("title", { id: `logo-title-${i$9}` }, `Telekom Logo - Life is for sharing ${this.role === 'link' ? '- Go to Start Page' : ''}`)), hAsync("path", { d: "M123.57 19.82v2.73h4.8v2.42h-4.8v2.94h4.99v2.41h-7.6V17.41h7.6v2.41zM140.95 23.52v.72c0 4.27-1.91 6.38-5.18 6.38-3.75 0-5.65-2.61-5.65-6.75 0-4.14 2.01-6.75 5.59-6.75 2.78 0 4.68 1.66 5.05 4.08h-2.78c-.29-.97-1.12-1.59-2.26-1.59-1.84 0-2.88 1.47-2.88 4.25s.99 4.25 2.94 4.25c1.37 0 2.3-.64 2.51-2.36h-2.36v-2.24h5.02zM147.54 25.04v5.28h-2.61v-5.28l-4.16-7.63h3.05l2.34 4.75h.12l2.36-4.75h3.05zM152.44 25.61v-8.2h2.59v7.85c0 2.01.62 2.86 2.2 2.86 1.57 0 2.2-.85 2.2-2.86v-7.85H162v8.2c0 3.23-1.72 5.01-4.78 5.01-3.06-.01-4.78-1.79-4.78-5.01zM156.58 13.81v2.26h-2.5v-2.26h1.04zM160.35 13.81v2.26h-2.48v-2.26h1.31zM163.13 17.41h9.22v2.41h-3.31v10.5h-2.61v-10.5h-3.3zM173.21 17.41h9.23v2.41h-3.31v10.5h-2.61v-10.5h-3.31zM182.2 27.35h2.98v2.97h-2.98zM200.51 17.41l-4.22 12.91h-2.61l-4.21-12.91h2.68l2.77 8.74h.12l2.78-8.74zM204.16 19.82v2.73h4.79v2.42h-4.79v2.94h4.98v2.41h-7.59V17.41h7.59v2.41zM211.17 17.41h2.61v10.5h4.62v2.41h-7.23zM222.4 19.82v2.73h4.79v2.42h-4.79v2.94h4.99v2.41h-7.6V17.41h7.6v2.41zM229.41 17.41h4.49c3.36 0 5.47 2.26 5.47 6.46s-2.11 6.46-5.47 6.46h-4.49V17.41zm4.29 10.5c1.8 0 2.96-1.2 2.96-4.04s-1.16-4.04-2.96-4.04h-1.68v8.08h1.68z" }), hAsync("path", { d: "M82.12 19.56h4.41v8.61h-8.61v-8.61zM52.09 19.56v8.61h8.61v-8.61h-4.19zM26.26 19.56v8.61h8.61v-8.61h-4.42z" }), hAsync("path", { d: "M.43 0L0 15l2.26.39c.42-4.42 1.58-7.7 3.48-9.84 2-2.24 4.75-3.41 8.29-3.51v31.39c0 2.74-.38 4.52-1.18 5.34-.68.7-1.83 1.13-3.45 1.29-.48.04-1.3.06-2.46.06v2.4h20.99v-2.4c-1.16 0-1.98-.02-2.46-.06-1.62-.16-2.77-.59-3.45-1.29-.8-.82-1.19-2.6-1.19-5.34V2.04c3.54.1 6.3 1.27 8.3 3.51 1.9 2.14 3.06 5.42 3.48 9.84l2.26-.39-.43-15H.43z" }), hAsync("path", { d: "M8.61 19.56H0v8.61h8.61z" })));
      case 'me':
        return (hAsync("svg", { xmlns: "http://www.w3.org/2000/svg", height: this.size + 'px', viewBox: "0 0 288.6 42.52", fill: this.getColor(), role: this.role === 'link' ? null : 'img', "aria-labelledby": `logo-title-${i$9}` }, this.accessibilityTitle ? (hAsync("title", { id: `logo-title-${i$9}` }, this.accessibilityTitle)) : (hAsync("title", { id: `logo-title-${i$9}` }, `Telekom Logo - Life is for sharing ${this.role === 'link' ? '- Go to Start Page' : ''}`)), hAsync("path", { d: "M130.03 21.7c0 2.75-1.76 4.27-4.27 4.27h-2.19v4.35h-2.61V17.41h4.79c2.52 0 4.28 1.54 4.28 4.29zm-2.71 0c0-1.22-.75-1.88-1.74-1.88h-2.01v3.73h2.01c.99.01 1.74-.65 1.74-1.85zM131.05 23.87c0-4.18 1.93-6.75 5.47-6.75s5.47 2.57 5.47 6.75-1.93 6.75-5.47 6.75c-3.54-.01-5.47-2.58-5.47-6.75zm8.24 0c0-2.82-.97-4.25-2.76-4.25-1.8 0-2.76 1.43-2.76 4.25s.97 4.25 2.76 4.25c1.79 0 2.76-1.43 2.76-4.25zM143.8 17.41h4.49c3.36 0 5.47 2.26 5.47 6.46s-2.11 6.46-5.47 6.46h-4.49V17.41zm4.3 10.5c1.8 0 2.96-1.2 2.96-4.04s-1.16-4.04-2.96-4.04h-1.68v8.08h1.68zM155.48 17.41H158.09v12.91h-2.61zM163.44 28.12c.97 0 1.74-.62 1.74-2.28v-8.43h2.59v8.76c0 2.67-1.7 4.45-4.33 4.45-2.69 0-4.1-1.64-4.29-4.43h2.61c.11 1.27.62 1.93 1.68 1.93zM172.62 19.82v2.73h4.79v2.42h-4.79v2.94h4.99v2.41h-7.6V17.41h7.6v2.41zM179.73 17.41h2.61v10.5h4.62v2.41h-7.23zM188.15 17.41H190.76v12.91h-2.61zM198.69 17.41h4.49c3.36 0 5.47 2.26 5.47 6.46s-2.11 6.46-5.47 6.46h-4.49V17.41zm4.29 10.5c1.8 0 2.96-1.2 2.96-4.04s-1.16-4.04-2.96-4.04h-1.68v8.08h1.68zM209.74 23.87c0-4.18 1.93-6.75 5.47-6.75s5.47 2.57 5.47 6.75-1.93 6.75-5.47 6.75c-3.54-.01-5.47-2.58-5.47-6.75zm8.24 0c0-2.82-.97-4.25-2.76-4.25-1.8 0-2.76 1.43-2.76 4.25s.97 4.25 2.76 4.25c1.79 0 2.76-1.43 2.76-4.25zM229.72 27.91v2.41h-8.1v-2.97l5.24-7.41v-.12h-5.04v-2.41h7.85v2.97l-5.24 7.41v.12zM226.67 13.19h2.38l-2.21 2.92h-2.28l-2.2-2.92h2.4l.88 1.2h.12zM231.46 17.41h2.61v12.91h-2.61zM246.15 17.41l-4.21 12.91h-2.61l-4.22-12.91h2.69l2.76 8.74h.12l2.78-8.74zM247.19 17.41h2.61v10.5h4.62v2.41h-7.23zM259.21 28.12c.97 0 1.74-.62 1.74-2.28v-8.43h2.59v8.76c0 2.67-1.7 4.45-4.33 4.45-2.69 0-4.1-1.64-4.29-4.43h2.61c.12 1.27.62 1.93 1.68 1.93zM271.99 27.83h-4.45l-.83 2.49h-2.65l4.41-12.92h2.61l4.41 12.92h-2.65l-.85-2.49zm-.82-2.44l-1.35-4h-.12l-1.35 4h2.82zM279.79 28.12c.97 0 1.74-.62 1.74-2.28v-8.43h2.59v8.76c0 2.67-1.7 4.45-4.33 4.45-2.69 0-4.1-1.64-4.29-4.43h2.61c.12 1.27.62 1.93 1.68 1.93zM285.61 27.35H288.58v2.97h-2.97z" }), hAsync("path", { d: "M82.12 19.56h4.41v8.61h-8.61v-8.61zM52.09 19.56v8.61h8.61v-8.61h-4.19zM26.26 19.56v8.61h8.61v-8.61h-4.42z" }), hAsync("path", { d: "M.43 0L0 15l2.26.39c.42-4.42 1.58-7.7 3.48-9.84 2-2.24 4.75-3.41 8.29-3.51v31.39c0 2.74-.38 4.52-1.18 5.34-.68.7-1.83 1.13-3.45 1.29-.48.04-1.3.06-2.46.06v2.4h20.99v-2.4c-1.16 0-1.98-.02-2.46-.06-1.62-.16-2.77-.59-3.45-1.29-.8-.82-1.19-2.6-1.19-5.34V2.04c3.54.1 6.3 1.27 8.3 3.51 1.9 2.14 3.06 5.42 3.48 9.84l2.26-.39-.43-15H.43z" }), hAsync("path", { d: "M8.61 19.56H0v8.61h8.61z" })));
      case 'mk_lat':
        return (hAsync("svg", { xmlns: "http://www.w3.org/2000/svg", height: this.size + 'px', viewBox: "0 0 274.11 42.52", fill: this.getColor(), role: this.role === 'link' ? null : 'img', "aria-labelledby": `logo-title-${i$9}` }, this.accessibilityTitle ? (hAsync("title", { id: `logo-title-${i$9}` }, this.accessibilityTitle)) : (hAsync("title", { id: `logo-title-${i$9}` }, `Telekom Logo - Life is for sharing ${this.role === 'link' ? '- Go to Start Page' : ''}`)), hAsync("path", { d: "M130.96 17.41v12.91h-2.63l-4.64-8.08h-.12v8.08h-2.61V17.41h2.65l4.64 8.12h.12v-8.12zM133.49 17.41h4.49c3.36 0 5.47 2.26 5.47 6.46s-2.11 6.46-5.47 6.46h-4.49V17.41zm4.29 10.5c1.8 0 2.96-1.2 2.96-4.04s-1.16-4.04-2.96-4.04h-1.68v8.08h1.68zM151.65 27.83h-4.45l-.83 2.49h-2.65l4.41-12.92h2.61l4.41 12.92h-2.65l-.85-2.49zm-.81-2.44l-1.35-4h-.12l-1.35 4h2.82zM159.46 28.12c.97 0 1.74-.62 1.74-2.28v-8.43h2.59v8.76c0 2.67-1.7 4.45-4.33 4.45-2.69 0-4.1-1.64-4.29-4.43h2.61c.11 1.27.62 1.93 1.68 1.93zM165.83 17.41H168.44v12.91h-2.61zM185.43 21.7c0 2.75-1.76 4.27-4.27 4.27h-2.19v4.35h-2.61V17.41h4.79c2.53 0 4.28 1.54 4.28 4.29zm-2.7 0c0-1.22-.75-1.88-1.74-1.88h-2.01v3.73h2.01c.98.01 1.74-.65 1.74-1.85zM189.49 19.82v2.73h4.79v2.42h-4.79v2.94h4.99v2.41h-7.6V17.41h7.6v2.41zM190.03 16.07h-2.49v-2.26h2.49zM193.8 16.07h-2.49v-2.26h2.49zM200.56 25.61h-1.26v4.72h-2.61V17.41h4.78c2.51 0 4.29 1.49 4.29 4.1 0 1.97-1.02 3.31-2.59 3.83l2.73 4.99H203l-2.44-4.72zm-1.26-2.42h2.03c1.03 0 1.72-.6 1.72-1.68s-.7-1.68-1.72-1.68h-2.03v3.36z" }), hAsync("path", { d: "M210.13 28.12c.97 0 1.74-.62 1.74-2.28v-8.43h2.59v8.76c0 2.67-1.7 4.45-4.33 4.45-2.69 0-4.1-1.64-4.29-4.43h2.61c.11 1.27.61 1.93 1.68 1.93zM219.3 19.82v2.73h4.8v2.42h-4.8v2.94h4.99v2.41h-7.59V17.41h7.59v2.41zM225.39 17.41h9.22v2.41h-3.3v10.5h-2.61v-10.5h-3.31zM235.92 17.41H238.53v12.91h-2.61zM253.65 17.41v12.91h-2.59v-7.29h-.12l-3.17 5.69h-.83l-3.15-5.69h-.12v7.29h-2.61V17.41h2.4l3.85 7.15h.11l3.83-7.15zM258.78 19.82v2.73h4.8v2.42h-4.8v2.94h4.99v2.41h-7.6V17.41h7.6v2.41zM264.87 17.41h9.22v2.41h-3.3v10.5h-2.61v-10.5h-3.31z" }), hAsync("path", { d: "M82.12 19.56h4.41v8.61h-8.61v-8.61zM52.09 19.56v8.61h8.61v-8.61h-4.19zM26.26 19.56v8.61h8.61v-8.61h-4.42z" }), hAsync("path", { d: "M.43 0L0 15l2.26.39c.42-4.42 1.58-7.7 3.48-9.84 2-2.24 4.75-3.41 8.29-3.51v31.39c0 2.74-.38 4.52-1.18 5.34-.68.7-1.83 1.13-3.45 1.29-.48.04-1.3.06-2.46.06v2.4h20.99v-2.4c-1.16 0-1.98-.02-2.46-.06-1.62-.16-2.77-.59-3.45-1.29-.8-.82-1.19-2.6-1.19-5.34V2.04c3.54.1 6.3 1.27 8.3 3.51 1.9 2.14 3.06 5.42 3.48 9.84l2.26-.39-.43-15H.43z" }), hAsync("path", { d: "M8.61 19.56H0v8.61h8.61z" })));
      case 'mk_kyr':
        return (hAsync("svg", { xmlns: "http://www.w3.org/2000/svg", height: this.size + 'px', viewBox: "0 0 283 36", fill: this.getColor(), role: this.role === 'link' ? null : 'img', "aria-labelledby": `logo-title-${i$9}` }, this.accessibilityTitle ? (hAsync("title", { id: `logo-title-${i$9}` }, this.accessibilityTitle)) : (hAsync("title", { id: `logo-title-${i$9}` }, `Telekom Logo - Life is for sharing ${this.role === 'link' ? '- Go to Start Page' : ''}`)), hAsync("path", { d: "M105.657 14.511c2.154 0 3.817 1.407 4.12 3.692h-2.293c-.24-1.117-.996-1.582-1.84-1.582-1.5 0-2.318 1.23-2.318 3.567 0 2.335.831 3.566 2.318 3.566.844 0 1.588-.465 1.84-1.582h2.293c-.315 2.285-1.966 3.692-4.12 3.692-2.936 0-4.599-2.185-4.599-5.664 0-3.478 1.65-5.689 4.599-5.689zM110.986 14.762h8.139v10.826h-2.192v-8.804h-3.767v8.804h-2.18zM120.687 20.175c0-3.504 1.625-5.664 4.599-5.664 2.973 0 4.598 2.173 4.598 5.664 0 3.491-1.625 5.664-4.598 5.664-2.974 0-4.599-2.173-4.599-5.664zm6.917 0c0-2.36-.819-3.566-2.318-3.566-1.512 0-2.318 1.193-2.318 3.566 0 2.374.806 3.567 2.318 3.567 1.5 0 2.318-1.206 2.318-3.567zM140.883 23.553v4.019h-2.116v-1.997h-6.287v1.997h-2.13v-4.019h.845c.428-.238.73-.954.793-2.461l.278-6.33h7.534v8.791h1.083zm-3.25 0v-6.769h-3.276l-.176 4.42c-.05 1.043-.29 1.797-.655 2.35h4.107zM144.676 16.784v2.286h4.031v2.022h-4.031v2.461h4.195v2.035h-6.388V14.762h6.388v2.022zM149.917 25.562v-1.858c.113.038.327.05.491.05.617 0 1.058-.339 1.109-1.796l.264-7.183h7.698v10.813h-2.192v-8.791h-3.427l-.189 5.525c-.1 2.638-1.335 3.404-2.734 3.404-.516-.013-.806-.063-1.02-.164zM163.826 21.569h.088l3.906-6.807h2.217v10.826h-2.192v-6.77h-.088l-3.893 6.77h-2.218V14.762h2.18zM186.24 23.553v4.019h-2.117v-1.997h-6.287v1.997h-2.13v-4.019h.845c.428-.238.73-.954.794-2.461l.277-6.33h7.534v8.791h1.083zm-3.238 0v-6.769h-3.276l-.177 4.42c-.05 1.043-.29 1.797-.655 2.35h4.108zM187.02 20.175c0-3.504 1.626-5.664 4.6-5.664 2.973 0 4.598 2.173 4.598 5.664 0 3.491-1.625 5.664-4.599 5.664-2.973 0-4.598-2.173-4.598-5.664zm6.917 0c0-2.36-.818-3.566-2.318-3.566-1.512 0-2.318 1.193-2.318 3.566 0 2.374.806 3.567 2.318 3.567s2.318-1.206 2.318-3.567zM205.541 21.18h-1.083v4.408h-2.18V21.18h-1.084l-2.343 4.408h-2.558l3.15-5.476-3.074-5.35h2.457l2.368 4.396h1.084v-4.396h2.18v4.396h1.083l2.381-4.396h2.444l-3.048 5.35 3.15 5.476h-2.584zM213.63 21.569h.1l3.893-6.807h2.23v10.826h-2.192v-6.77h-.1l-3.881 6.77h-2.23V14.762h2.18zM229.366 22.586c0 1.658-.996 3.002-3.352 3.002h-4.044V14.775h4.12c2.23 0 3.162 1.306 3.162 2.863 0 1.118-.504 1.997-1.335 2.474v.063c.92.414 1.449 1.281 1.449 2.411zm-5.204-5.89v2.512h1.638c.73 0 1.184-.515 1.184-1.268 0-.766-.466-1.244-1.184-1.244h-1.638zm2.923 5.652c0-.792-.466-1.281-1.335-1.281h-1.588v2.587h1.588c.87 0 1.335-.49 1.335-1.306zM236.131 14.762h2.47l-5.09 10.826h-2.394l1.852-3.944-3.477-6.882h2.494l2.104 4.509h.088zM246.588 22.586c0 1.658-.995 3.002-3.35 3.002h-4.045V14.775h4.12c2.23 0 3.162 1.306 3.162 2.863 0 1.118-.504 1.997-1.335 2.474v.063c.932.414 1.448 1.281 1.448 2.411zm-5.203-5.89v2.512h1.638c.73 0 1.184-.515 1.184-1.268 0-.766-.466-1.244-1.184-1.244h-1.638zm2.923 5.652c0-.792-.466-1.281-1.335-1.281h-1.588v2.587h1.588c.869 0 1.335-.49 1.335-1.306zM253.53 23.478h-3.754l-.693 2.11h-2.23l3.704-10.813h2.192l3.704 10.813h-2.23l-.693-2.11zm-.667-2.022l-1.172-3.516h-.1l-1.16 3.516h2.432zM257.26 14.762h2.18v3.642h3.779v-3.642h2.18v3.642h1.852c2.116 0 3.59 1.281 3.59 3.58 0 2.298-1.474 3.591-3.59 3.591h-4.032v-5.149h-3.78v5.149h-2.18V14.762zm9.852 8.791c.832 0 1.462-.552 1.462-1.57 0-1.004-.63-1.557-1.462-1.557h-1.7v3.127h1.7zM277.607 23.478h-3.754l-.693 2.11h-2.23l3.704-10.813h2.192l3.704 10.813h-2.23l-.693-2.11zm-.655-2.022l-1.172-3.516h-.1l-1.16 3.516h2.432z" }), hAsync("path", { d: "M29.08 0l.364 12.7-1.908.33C27.18 9.288 26.2 6.511 24.597 4.7c-1.689-1.897-4.02-2.888-7.008-2.973v26.578c0 2.32.329 3.827 1.004 4.52.575.593 1.546.958 2.914 1.093.405.034 1.097.05 2.077.05v2.033H5.86v-2.032c.98 0 1.672-.017 2.077-.051 1.368-.135 2.34-.5 2.913-1.092.676-.694.997-2.202.997-4.521V1.727c-2.99.085-5.311 1.076-7 2.972-1.605 1.812-2.584 4.59-2.939 8.331L0 12.7.363 0h28.718zm.364 16.561v7.29h-7.27v-7.29h7.27zm21.81 0v7.29h-7.27v-7.29h7.27zm21.811 0v7.29h-7.27v-7.29h7.27zM7.19 16.376v7.208H0v-7.208h7.189z" })));
      case '':
        return (hAsync("svg", { xmlns: "http://www.w3.org/2000/svg", height: this.size + 'px', viewBox: "0 0 86.5 42.52", fill: this.getColor(), role: this.role === 'link' ? null : 'img', "aria-labelledby": `logo-title-${i$9}` }, this.accessibilityTitle ? (hAsync("title", { id: `logo-title-${i$9}` }, this.accessibilityTitle)) : (hAsync("title", { id: `logo-title-${i$9}` }, `Telekom Logo - Life is for sharing ${this.role === 'link' ? '- Go to Start Page' : ''}`)), hAsync("path", { d: "M82.12 19.56h4.41v8.61h-8.61v-8.61zM52.09 19.56v8.61h8.61v-8.61h-4.19zM26.26 19.56v8.61h8.61v-8.61h-4.42z" }), hAsync("path", { d: "M.43 0L0 15l2.26.39c.42-4.42 1.58-7.7 3.48-9.84 2-2.24 4.75-3.41 8.29-3.51v31.39c0 2.74-.38 4.52-1.18 5.34-.68.7-1.83 1.13-3.45 1.29-.48.04-1.3.06-2.46.06v2.4h20.99v-2.4c-1.16 0-1.98-.02-2.46-.06-1.62-.16-2.77-.59-3.45-1.29-.8-.82-1.19-2.6-1.19-5.34V2.04c3.54.1 6.3 1.27 8.3 3.51 1.9 2.14 3.06 5.42 3.48 9.84l2.26-.39-.43-15H.43z" }), hAsync("path", { d: "M8.61 19.56H0v8.61h8.61z" })));
      case 'ro':
        return (hAsync("svg", { xmlns: "http://www.w3.org/2000/svg", height: this.size + 'px', viewBox: "0 0 314.73 42.52", fill: this.getColor(), role: this.role === 'link' ? null : 'img', "aria-labelledby": `logo-title-${i$9}` }, this.accessibilityTitle ? (hAsync("title", { id: `logo-title-${i$9}` }, this.accessibilityTitle)) : (hAsync("title", { id: `logo-title-${i$9}` }, `Telekom Logo - Life is for sharing ${this.role === 'link' ? '- Go to Start Page' : ''}`)), hAsync("path", { d: "M123.57 19.82v2.73h4.8v2.41h-4.8v2.94h4.99v2.42h-7.6V17.41h7.6v2.41zM136.85 23.86l3.67 6.46h-3.05l-2.32-4.37h-.12l-2.32 4.37h-3.05l3.65-6.46-3.65-6.45h3.05l2.32 4.38h.12l2.32-4.38h3.05zM150.98 21.7c0 2.75-1.76 4.27-4.27 4.27h-2.19v4.35h-2.61V17.41h4.79c2.52 0 4.28 1.54 4.28 4.29zm-2.71 0c0-1.22-.75-1.88-1.74-1.88h-2.01v3.73h2.01c.99 0 1.74-.65 1.74-1.85zM155.03 19.82v2.73h4.8v2.41h-4.8v2.94h4.99v2.42h-7.6V17.41h7.6v2.41zM166.11 25.6h-1.26v4.72h-2.61V17.41h4.78c2.51 0 4.29 1.49 4.29 4.1 0 1.97-1.02 3.31-2.59 3.83l2.73 4.99h-2.9l-2.44-4.73zm-1.26-2.41h2.03c1.03 0 1.72-.6 1.72-1.68s-.7-1.68-1.72-1.68h-2.03v3.36zM173.14 17.41H175.75v12.91h-2.61zM180.89 19.82v2.73h4.79v2.41h-4.79v2.94h4.99v2.42h-7.6V17.41h7.6v2.41zM198.09 17.41v12.91h-2.63l-4.64-8.08h-.12v8.08h-2.61V17.41h2.65l4.64 8.12h.12v-8.12zM199.4 17.41h9.22v2.41h-3.3v10.5h-2.61v-10.5h-3.31zM202.82 34.19c.81-.02 1.1-.29 1.1-.79v-.06h-1.1v-1.89h2.36v1.47c0 1.47-.56 2.24-2.36 2.26v-.99zM212.54 19.82v2.73h4.8v2.41h-4.8v2.94h4.99v2.42h-7.6V17.41h7.6v2.41zM226.4 14.91l-.91 1.2h-2.38l2.18-2.92h2.29l2.22 2.92h-2.4l-.89-1.2zM225.14 17.41h2.61v12.91h-2.61zM242.87 17.41v12.91h-2.59v-7.29h-.12l-3.17 5.69h-.83l-3.15-5.69h-.12v7.29h-2.61V17.41h2.4l3.85 7.15h.11l3.83-7.15zM254.46 21.7c0 2.75-1.76 4.27-4.27 4.27H248v4.35h-2.61V17.41h4.79c2.52 0 4.28 1.54 4.28 4.29zm-2.71 0c0-1.22-.75-1.88-1.74-1.88H248v3.73h2.01c.99 0 1.74-.65 1.74-1.85zM259.77 25.6h-1.26v4.72h-2.61V17.41h4.78c2.51 0 4.29 1.49 4.29 4.1 0 1.97-1.02 3.31-2.59 3.83l2.73 4.99h-2.9l-2.44-4.73zm-1.26-2.41h2.03c1.03 0 1.72-.6 1.72-1.68s-.7-1.68-1.72-1.68h-2.03v3.36zM269.41 19.82v2.73h4.8v2.41h-4.8v2.94h4.99v2.42h-7.6V17.41h7.6v2.41zM276.33 25.6v-8.2h2.59v7.85c0 2.01.62 2.86 2.2 2.86 1.57 0 2.2-.85 2.2-2.86V17.4h2.57v8.2c0 3.23-1.72 5.01-4.78 5.01-3.06 0-4.78-1.78-4.78-5.01zM298.13 17.41v12.91h-2.63l-4.64-8.08h-.11v8.08h-2.61V17.41h2.64l4.65 8.12h.11v-8.12zM307.06 27.83h-4.45l-.83 2.49h-2.65l4.41-12.92h2.61l4.41 12.92h-2.65l-.85-2.49zm-.81-2.44l-1.35-4h-.12l-1.35 4h2.82zM307.89 13.19c0 1.91-1.22 3.02-3.04 3.02-1.84 0-3.04-1.1-3.04-3.02h1.93c.02.72.43 1.12 1.1 1.12.68 0 1.06-.41 1.08-1.12h1.97zM311.75 27.34h2.98v2.98h-2.98z" }), hAsync("path", { d: "M82.12 19.56h4.41v8.61h-8.61v-8.61zM52.09 19.56v8.61h8.61v-8.61h-4.19zM26.26 19.56v8.61h8.61v-8.61h-4.42z" }), hAsync("path", { d: "M.43 0L0 15l2.26.39c.42-4.42 1.58-7.7 3.48-9.84 2-2.24 4.75-3.41 8.29-3.51v31.39c0 2.74-.38 4.52-1.18 5.34-.68.7-1.83 1.13-3.45 1.29-.48.04-1.3.06-2.46.06v2.4h20.99v-2.4c-1.16 0-1.98-.02-2.46-.06-1.62-.16-2.77-.59-3.45-1.29-.8-.82-1.19-2.6-1.19-5.34V2.04c3.54.1 6.3 1.27 8.3 3.51 1.9 2.14 3.06 5.42 3.48 9.84l2.26-.39-.43-15H.43z" }), hAsync("path", { d: "M8.61 19.56H0v8.61h8.61z" })));
      case 'sk':
        return (hAsync("svg", { xmlns: "http://www.w3.org/2000/svg", height: this.size + 'px', viewBox: "0 0 262.23 42.52", fill: this.getColor(), role: this.role === 'link' ? null : 'img', "aria-labelledby": `logo-title-${i$9}` }, this.accessibilityTitle ? (hAsync("title", { id: `logo-title-${i$9}` }, this.accessibilityTitle)) : (hAsync("title", { id: `logo-title-${i$9}` }, `Telekom Logo - Life is for sharing ${this.role === 'link' ? '- Go to Start Page' : ''}`)), hAsync("path", { d: "M129.06 27.91v2.41h-8.1v-2.97l5.24-7.41v-.12h-5.04v-2.41h7.85v2.97l-5.24 7.41v.12zM137.78 27.83h-4.45l-.83 2.49h-2.65l4.41-12.92h2.61l4.41 12.92h-2.65l-.85-2.49zm-.81-2.44l-1.35-4h-.12l-1.35 4h2.82zM150.13 27.91v2.41h-8.1v-2.97l5.24-7.41v-.12h-5.05v-2.41h7.85v2.97l-5.24 7.41v.12zM147.07 13.19h2.38l-2.2 2.92h-2.28l-2.21-2.92h2.4l.89 1.2h.11zM151.96 17.41h2.61v12.91h-2.61zM169.69 17.41v12.91h-2.59v-7.29h-.12l-3.17 5.69h-.83l-3.15-5.69h-.12v7.29h-2.61V17.41h2.4l3.85 7.15h.11l3.83-7.15zM174.82 19.82v2.73h4.8v2.42h-4.8v2.94h4.99v2.41h-7.6V17.41h7.6v2.41zM185.06 17.41h9.23v2.41h-3.31v10.5h-2.61v-10.5h-3.31zM194.4 23.87c0-4.18 1.93-6.75 5.47-6.75s5.47 2.57 5.47 6.75-1.93 6.75-5.47 6.75c-3.54-.01-5.47-2.58-5.47-6.75zm8.23 0c0-2.82-.97-4.25-2.76-4.25-1.8 0-2.76 1.43-2.76 4.25s.97 4.25 2.76 4.25c1.8 0 2.76-1.43 2.76-4.25zM211.11 26.67h2.59c.23 1.08.95 1.51 1.9 1.51 1.12 0 1.68-.62 1.68-1.45 0-.81-.54-1.22-1.55-1.49l-1.49-.42c-2.07-.56-2.88-2.05-2.88-3.67 0-2.48 1.84-4.02 4.23-4.02 2.61 0 4.02 1.51 4.27 3.89h-2.55c-.17-.97-.72-1.45-1.72-1.45-.89 0-1.57.5-1.57 1.41 0 .91.6 1.24 1.32 1.43l1.49.41c1.91.5 3.11 1.91 3.11 3.77 0 2.59-1.91 4.04-4.35 4.04-2.66-.02-4.25-1.41-4.48-3.96zM230.75 21.7c0 2.75-1.76 4.27-4.27 4.27h-2.19v4.35h-2.61V17.41h4.79c2.52 0 4.28 1.54 4.28 4.29zm-2.71 0c0-1.22-.75-1.88-1.74-1.88h-2.01v3.73h2.01c.99.01 1.74-.65 1.74-1.85zM231.77 23.87c0-4.18 1.93-6.75 5.47-6.75s5.47 2.57 5.47 6.75-1.93 6.75-5.47 6.75c-3.54-.01-5.47-2.58-5.47-6.75zm8.24 0c0-2.82-.97-4.25-2.76-4.25-1.8 0-2.76 1.43-2.76 4.25s.97 4.25 2.76 4.25c1.79 0 2.76-1.43 2.76-4.25zM244.52 17.41h2.61v10.5h4.63v2.41h-7.24zM252.66 25.61v-8.2h2.59v7.85c0 2.01.62 2.86 2.2 2.86 1.57 0 2.2-.85 2.2-2.86v-7.85h2.57v8.2c0 3.23-1.72 5.01-4.78 5.01-3.06-.01-4.78-1.79-4.78-5.01z" }), hAsync("path", { d: "M82.12 19.56h4.41v8.61h-8.61v-8.61zM52.09 19.56v8.61h8.61v-8.61h-4.19zM26.26 19.56v8.61h8.61v-8.61h-4.42z" }), hAsync("path", { d: "M.43 0L0 15l2.26.39c.42-4.42 1.58-7.7 3.48-9.84 2-2.24 4.75-3.41 8.29-3.51v31.39c0 2.74-.38 4.52-1.18 5.34-.68.7-1.83 1.13-3.45 1.29-.48.04-1.3.06-2.46.06v2.4h20.99v-2.4c-1.16 0-1.98-.02-2.46-.06-1.62-.16-2.77-.59-3.45-1.29-.8-.82-1.19-2.6-1.19-5.34V2.04c3.54.1 6.3 1.27 8.3 3.51 1.9 2.14 3.06 5.42 3.48 9.84l2.26-.39-.43-15H.43z" }), hAsync("path", { d: "M8.61 19.56H0v8.61h8.61z" })));
    }
  }
  render() {
    {
      return this.renderPaths();
    }
  }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-logo-svg",
    "$members$": {
      "language": [1],
      "color": [1],
      "accessibilityTitle": [1, "accessibility-title"],
      "size": [2],
      "role": [1]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const appNavigationMainMobileCss = "app-navigation-main-mobile{--min-height:calc(100vh - 56px - 56px);--font-size:var(--scl-font-size-24);--font-weight:var(--scl-font-weight-extrabold);--line-height:3.333;--border-bottom:1px solid #efefef;--color:var(--scl-color-text-standard);--color-selected:var(--scl-color-primary);--font-size-child:var(--scl-font-size-24);--line-height-child:2.5;--font-weight-child:var(--scl-font-weight-regular);--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);width:100%}.main-navigation-mobile{width:100%;position:relative}.main-navigation-mobile__main-menu{width:100%;list-style:none;padding:0;margin:0;min-height:var(--min-height)}.main-navigation-mobile__item{font-size:var(--font-size);font-weight:var(--font-weight);line-height:var(--line-height)}.main-navigation-mobile__item-wrapper{box-sizing:border-box;width:calc(100% - 34px);display:flex;justify-content:space-between;margin-left:34px;border-bottom:var(--border-bottom);padding-right:34px;align-items:center}.main-navigation-mobile__item-link{text-decoration:none;color:var(--color);transition:var(--transition)}.main-navigation-mobile__item-link--selected{color:var(--color-selected);transition:var(--transition)}.main-navigation-mobile__item-link--selected .main-navigation-mobile__item{border-right:2px solid var(--color-selected)}.main-navigation-mobile__item-link--selected svg{margin-right:-2px}.main-navigation-mobile__child-menu{position:absolute;top:0;left:0;background:var(--scl-color-white);width:100%;min-height:var(--min-height)}.main-navigation-mobile__child-menu-current-item{line-height:var(--line-height)}.main-navigation-mobile__child-menu-current-item svg{margin-right:6px;margin-top:-4px}.main-navigation-mobile__child-menu-current{font-size:var(--scl-font-size-24);font-weight:var(--scl-font-weight-extrabold);color:var(--color-selected);text-decoration:none}.main-navigation-mobile__child-menu-current-wrapper{width:calc(100% - 34px);display:flex;align-items:center;border-bottom:var(--border-bottom);margin-left:34px}.main-navigation-mobile__child-menu-current app-icon{margin-right:var(--scl-spacing-8)}.main-navigation-mobile__child-menu-current .icon-back{fill:var(--color-selected)}.main-navigation-mobile__child-menu-items{list-style:none;margin:0;padding:0}.main-navigation-mobile__child-menu-item-link{text-decoration:none;color:var(--color)}.main-navigation-mobile__child-menu-item-link.selected{color:var(--color-selected)}.main-navigation-mobile__child-menu-item-link.selected .main-navigation-mobile__child-menu-item-wrapper{border-right:2px solid var(--color-selected)}.main-navigation-mobile__child-menu-item-link.selected svg{margin-right:38px}.main-navigation-mobile__child-menu-item{font-size:var(--font-size-child);line-height:var(--line-height-child);font-weight:var(--font-weight-child)}.main-navigation-mobile__child-menu-item-wrapper{width:calc(100% - 64px);display:flex;justify-content:space-between;align-items:center;border-bottom:var(--border-bottom);margin-left:var(--scl-spacing-64);box-sizing:border-box}.main-navigation-mobile__child-menu-item-wrapper svg{margin-right:var(--scl-spacing-40)}";

class MainNavigationMobile {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.closeMenu = createEvent$1(this, "closeMenu", 7);
    this.selected = undefined;
    this.parent = undefined;
  }
  handleActiveRoute(newValue) {
    this.selected = findSelected(this.navigation, newValue, null).selected;
    this.parent = findSelected(this.navigation, newValue).parent;
  }
  componentWillLoad() {
    this.selected = findSelected(this.navigation, this.activeRouteId, null).selected;
    this.parent = findSelected(this.navigation, this.activeRouteId).parent;
  }
  closeMenuHandler() {
    this.closeMenu.emit();
  }
  handlePrevSelected(event, item) {
    event.preventDefault();
    const selected = findSelected(this.navigation, item.id).parent;
    this.selected = selected;
    this.parent = selected;
  }
  handleSelect(event, item) {
    const { selected, parent } = findSelected(this.navigation, item.id);
    this.selected = selected;
    this.parent = parent;
    if (typeof item.onClick === 'function') {
      item.onClick(event);
    }
    if (!selected.children) {
      this.closeMenuHandler();
    }
  }
  childMenuPage() {
    const section = this.selected && this.selected.children ? this.selected : this.parent;
    const { selected, parent } = findSelected(this.navigation, this.activeRouteId);
    if (!section) {
      return hAsync("div", null);
    }
    const isActive = (child) => (selected && child.id === selected.id) ||
      (parent && parent.id === child.id);
    return (hAsync("div", { class: "main-navigation-mobile__child-menu" }, hAsync("a", { class: "main-navigation-mobile__child-menu-current", href: section.href || 'javascript:void(0);', onClick: (event) => {
        this.handlePrevSelected(event, section);
      }, tabIndex: 0, onKeyDown: (event) => {
        if (['Enter', ' '].includes(event.key)) {
          event.preventDefault();
          this.handlePrevSelected(event, section);
          if (!this.selected) {
            // focus first main navigation item to ease tab navigation
            this.mainNavigationWrapper.querySelector('a').focus();
          }
        }
        if (['Escape', 'Esc'].includes(event.key)) {
          this.hide();
        }
      } }, hAsync("div", { class: "main-navigation-mobile__child-menu-current-item" }, hAsync("div", { class: "main-navigation-mobile__child-menu-current-wrapper" }, hAsync("scale-icon-navigation-left", null), hAsync("div", null, section.name)))), hAsync("ul", { class: "main-navigation-mobile__child-menu-items", ref: (el) => {
        this.childrenWrapper = el;
      } }, section.children.map((child) => (hAsync("a", { "aria-current": isActive(child) ? 'true' : 'false', "aria-haspopup": child.children ? 'true' : 'false', class: `main-navigation-mobile__child-menu-item-link ${isActive(child) ? 'selected' : ''}`, href: child.href || 'javascript:void(0);', tabIndex: 0, onClick: (event) => {
        this.handleSelect(event, child);
      }, onKeyDown: (event) => {
        if (['Enter', ' '].includes(event.key)) {
          this.handleSelect(event, child);
          setTimeout(() => {
            // focus first child menu item link to ease tab navigation
            const firstChildren = this.childrenWrapper.querySelector('a');
            if (firstChildren) {
              this.childrenWrapper.querySelector('a').focus();
            }
          });
        }
        if (['Escape', 'Esc'].includes(event.key)) {
          this.hide();
        }
      } }, hAsync("li", { class: "main-navigation-mobile__child-menu-item" }, hAsync("div", { class: "main-navigation-mobile__child-menu-item-wrapper" }, hAsync("span", null, child.name), isActive(child) && hAsync("span", { class: "sr-only" }, "active"), child.children && (hAsync("scale-icon-navigation-right", null))))))))));
  }
  render() {
    const { selected } = findSelected(this.navigation, this.activeRouteId);
    const rootNode = selected && findRootNode(this.navigation, selected.id);
    const isActive = (itemId) => rootNode && rootNode.id === itemId;
    return (hAsync("div", { class: "main-navigation-mobile" }, this.childMenuPage(), hAsync("ul", { class: "main-navigation-mobile__main-menu", ref: (el) => {
        this.mainNavigationWrapper = el;
      } }, (this.navigation || []).map((item) => (hAsync("a", { "aria-current": isActive(item.id) ? 'true' : 'false', "aria-haspopup": item.children ? 'true' : 'false', class: `main-navigation-mobile__item-link${isActive(item.id)
        ? ' main-navigation-mobile__item-link--selected'
        : ''}`, href: item.href || 'javascript:void(0);', onClick: (event) => {
        this.handleSelect(event, item);
      }, onKeyDown: (event) => {
        if (['Enter', ' '].includes(event.key)) {
          this.handleSelect(event, item);
          setTimeout(() => {
            // focus first child menu item link to ease tab navigation
            const firstChildren = this.childrenWrapper.querySelector('a');
            if (firstChildren) {
              this.childrenWrapper.querySelector('a').focus();
            }
          });
        }
        if (['Escape', 'Esc'].includes(event.key)) {
          this.hide();
        }
      },
      // hide from tab navigation when on childMenuPage
      tabIndex: this.selected ? -1 : 0 }, hAsync("li", { class: "main-navigation-mobile__item" }, hAsync("div", { class: "main-navigation-mobile__item-wrapper" }, hAsync("span", null, item.name), isActive(item.id) && hAsync("span", { class: "sr-only" }, "active"), item.children && (hAsync("scale-icon-navigation-right", null))))))))));
  }
  static get watchers() { return {
    "activeRouteId": ["handleActiveRoute"]
  }; }
  static get style() { return appNavigationMainMobileCss; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "app-navigation-main-mobile",
    "$members$": {
      "hide": [16],
      "navigation": [16],
      "activeRouteId": [1, "active-route-id"],
      "selected": [32],
      "parent": [32]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const appMegaMenuCss = "app-mega-menu{--box-shadow:var(--scl-shadow-level-4);--spacing-y:34px;--spacing-right:var(--scl-spacing-16);--spacing-left:var(--scl-spacing-24);--background:var(--scl-color-white);--color-active:var(--scl-color-primary);--font-size-row-title:var(--scl-font-size-16);--spacing-bottom-row-title:18px;--font-weight-row-title:var(--scl-font-weight-extrabold);--color-row-title:var(--scl-color-text-standard);--font-size-row-item:var(--scl-font-size-16);--line-height-row-item:var(--scl-font-line-height-150);--font-weight-row-item:var(--scl-font-weight-medium);--color-row-item:var(--scl-color-text-standard);--spacing-bottom-row-item:var(--scl-spacing-8)}.mega-menu{width:100%;position:absolute;top:calc(var(--header-brand-height) * -1);left:0;border-radius:0 0 var(--header-border-radius) var(--header-border-radius);padding-top:calc(var(--header-nav-height) + var(--header-brand-height));display:none;pointer-events:none;transition:none;box-shadow:var(--box-shadow)}.mega-menu__wrapper{padding:var(--spacing-y) var(--spacing-right) var(--spacing-y)\n    var(--spacing-left);background:var(--background);pointer-events:none;border-bottom-left-radius:var(--header-border-radius);border-bottom-right-radius:var(--header-border-radius)}.mega-menu__container{max-width:1168px;margin:0 auto;display:grid;grid-template-columns:repeat(5, minmax(min-content, 240px));list-style:none;padding-left:var(--scl-spacing-32)}.mega-menu__row-title{cursor:default;font-size:var(--font-size-row-title);margin-bottom:var(--spacing-bottom-row-title);font-weight:var(--font-weight-row-title);color:var(--color-row-title)}.mega-menu__row-item{font-size:var(--font-size-row-item);line-height:var(--line-height-row-item);font-weight:var(--font-weight-row-item);color:var(--color-row-item);margin-bottom:var(--spacing-bottom-row-item);text-decoration:none;transition:color, border 0.15s ease-in-out;display:block}.mega-menu__row-item.active,.mega-menu__row-item:hover{color:var(--color-active);margin-bottom:7px}.mega-menu__row-item.active span,.mega-menu__row-item:hover span{padding-bottom:2px;margin-bottom:-2px;display:inline-block;border-bottom:1px solid var(--color-active)}.mega-menu__row li{list-style:none}.mega-menu__row ul{padding-inline-start:0}";

class MegaMenu {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.navigation = [];
  }
  componentWillLoad() {
    this.hasCustomBody = !!this.hostElement.querySelector('[slot="custom-body"]');
  }
  componentWillRender() {
    // make sure the deprecated props overwrite the actual ones if used
    // and show status note deprecated
    if (this.isActive !== undefined) {
      statusNote({
        tag: 'deprecated',
        message: 'Property "isActive" is deprecated. Please use the "active" property!',
        type: 'warn',
        source: this.hostElement,
      });
    }
  }
  render() {
    return (hAsync("div", { class: "mega-menu" }, hAsync("div", { class: "mega-menu__wrapper" }, this.hasCustomBody ? (hAsync("slot", { name: "custom-body" })) : (hAsync("ul", { class: "mega-menu__container" }, this.navigation.map((child) => (hAsync("li", { class: "mega-menu__row" }, hAsync("div", { class: "mega-menu__row-title" }, child.name), hAsync("ul", null, child.children &&
      child.children.length > 0 &&
      child.children.map((menuItem) => (hAsync("li", null, hAsync("a", { class: `mega-menu__row-item ${this.activeRouteId === menuItem.id ? 'active' : ''}`, "aria-current": this.activeRouteId === menuItem.id
          ? 'true'
          : 'false', href: menuItem.href || 'javascript:void(0);', tabIndex: this.active || this.isActive ? 0 : -1, onClick: (event) => {
          this.hide();
          if (typeof menuItem.onClick === 'function') {
            menuItem.onClick(event);
          }
        }, onKeyDown: (event) => {
          if (['Escape', 'Esc'].includes(event.key)) {
            this.hide();
          }
        } }, hAsync("span", null, menuItem.name), this.activeRouteId === menuItem.id && (hAsync("span", { class: "sr-only" }, "active")))))))))))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return appMegaMenuCss; }
  static get cmpMeta() { return {
    "$flags$": 4,
    "$tagName$": "app-mega-menu",
    "$members$": {
      "navigation": [16],
      "hide": [16],
      "activeRouteId": [1, "active-route-id"],
      "isActive": [4, "is-active"],
      "active": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const menuFlyoutCss = "/*!@:host*/.sc-scale-menu-flyout-h{--spacing-y-list:0;--spacing-x-list:0}";

const MENU_SELECTOR = '[role="menu"]';
const isButtonOrLink = (el) => {
  if (el.tagName.toUpperCase() === 'BUTTON' ||
    el.tagName.toUpperCase() === 'A' ||
    el.getAttribute('role') === 'button') {
    return el;
  }
};
class MenuFlyout {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) Determines whether the flyout should close when a menu item is selected */
    this.closeOnSelect = true;
    /** (optional) Set preference for where the menu appears, space permitting */
    this.direction = 'bottom-right';
    this.toggle = () => {
      const list = this.getListElement();
      // We could check for `list.opened === true` to do `closeAll`
      // but list close themselves with outside clicks, so `list.opened`
      // will always be `false` here…
      if (this.direction != null) {
        // Overwrite `direction` in list
        list.direction = this.direction;
      }
      list.trigger = () => this.trigger;
      list.open();
    };
  }
  handleScaleSelect({ detail }) {
    if (detail.closeOnSelect === false) {
      return;
    }
    if (this.closeOnSelect) {
      window.requestAnimationFrame(() => {
        this.closeAll();
      });
    }
  }
  handleScaleClose({ detail }) {
    const parent = detail.list != null
      ? detail.list.parentNode.closest(MENU_SELECTOR)
      : null;
    if (parent) {
      window.requestAnimationFrame(() => {
        parent.active = true;
        parent.setFocus();
      });
    }
  }
  handleWindowScroll() {
    this.closeAll();
  }
  handleOutsideClick(event) {
    if (isClickOutside(event, this.hostElement)) {
      this.closeAll();
    }
  }
  handleKeydown(event) {
    if ('Tab' === event.key) {
      this.closeAll();
      return;
    }
  }
  componentDidLoad() {
    const triggerSlot = this.hostElement.querySelector('[slot="trigger"]');
    if (triggerSlot && triggerSlot.tagName.toUpperCase() === 'SCALE-BUTTON') {
      this.trigger = triggerSlot.shadowRoot.querySelector('button');
    }
    else {
      this.trigger = triggerSlot;
    }
    this.lists = new Set(Array.from(this.hostElement.querySelectorAll(MENU_SELECTOR)));
    this.setTriggerAttributes();
  }
  setTriggerAttributes() {
    const triggers = Array.from(this.hostElement.querySelectorAll('[role="menuitem"]'))
      .filter((el) => el.querySelector('[slot="sublist"]') != null)
      .concat([isButtonOrLink(this.trigger)])
      .filter((x) => x != null);
    triggers.forEach((el) => {
      el.setAttribute('aria-haspopup', 'true');
      el.setAttribute('aria-expanded', 'false');
    });
  }
  closeAll() {
    this.lists.forEach(async (list) => {
      await list.close(); // Wait for `scale-close` event to fire
      list.active = false; // Make sure focus control is right while reopening
    });
  }
  getListElement() {
    // TODO use [role="menu"]?
    return Array.from(this.hostElement.children).find((el) => el.tagName.toUpperCase().startsWith('SCALE-MENU-FLYOUT'));
  }
  render() {
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync("div", { part: "trigger", onClick: this.toggle }, hAsync("slot", { name: "trigger" })), hAsync("slot", null)));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return menuFlyoutCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-menu-flyout",
    "$members$": {
      "closeOnSelect": [4, "close-on-select"],
      "direction": [1],
      "styles": [1]
    },
    "$listeners$": [[0, "scale-select", "handleScaleSelect"], [0, "scale-close", "handleScaleClose"], [9, "scroll", "handleWindowScroll"], [4, "click", "handleOutsideClick"], [0, "keydown", "handleKeydown"]],
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const menuFlyoutDividerCss = "/*!@:host*/.sc-scale-menu-flyout-divider-h{display:block;--color:var(--scl-color-grey-10)}/*!@.menu-flyout-divider*/.menu-flyout-divider.sc-scale-menu-flyout-divider{border-top:1px solid var(--color);margin:6px 0}";

class MenuFlyoutDivider {
  constructor(hostRef) {
    registerInstance(this, hostRef);
  }
  getCssClassMap() {
    return classnames('menu-flyout-divider');
  }
  render() {
    return (hAsync(Host$1, { role: "separator" }, this.styles && hAsync("style", null, this.styles), hAsync("div", { class: this.getCssClassMap(), part: "base", "aria-hidden": "true" })));
  }
  static get style() { return menuFlyoutDividerCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-menu-flyout-divider",
    "$members$": {
      "styles": [1]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const menuFlyoutItemCss = "/*!@:host*/.sc-scale-menu-flyout-item-h{--box-shadow-focus:0 0 0 var(--scl-spacing-2) var(--scl-color-focus);display:block;position:relative;outline-color:transparent;padding-left:var(--scl-spacing-2);padding-right:var(--scl-spacing-2)}/*!@**/*.sc-scale-menu-flyout-item{-webkit-tap-highlight-color:rgba(255, 255, 255, 0)}/*!@.menu-flyout-item*/.menu-flyout-item.sc-scale-menu-flyout-item{position:relative;display:flex;align-items:stretch;text-align:left;font-size:var(--scl-font-size-16);line-height:2.635em;padding:0 var(--scl-spacing-24);user-select:none;white-space:nowrap;border-radius:0;cursor:pointer;color:var(--scl-color-black);max-width:calc(100vw - 2 * var(--scl-spacing-24) - 2 * 10px);overflow:hidden;min-width:fit-content;min-width:-moz-fit-content}/*!@.menu-flyout-item:focus:not(.menu-flyout-item--disabled),\n.menu-flyout-item:hover:not(.menu-flyout-item--disabled)*/.menu-flyout-item.sc-scale-menu-flyout-item:focus:not(.menu-flyout-item--disabled),.menu-flyout-item.sc-scale-menu-flyout-item:hover:not(.menu-flyout-item--disabled){color:var(--scl-color-primary-hover)}/*!@:host(:focus) .menu-flyout-item:not(.menu-flyout-item--disabled)*/.sc-scale-menu-flyout-item-h:focus .menu-flyout-item.sc-scale-menu-flyout-item:not(.menu-flyout-item--disabled){color:var(--scl-color-primary-hover)}/*!@:host(:focus) .menu-flyout-item*/.sc-scale-menu-flyout-item-h:focus .menu-flyout-item.sc-scale-menu-flyout-item{box-shadow:var(--box-shadow-focus)}/*!@:host(:active) .menu-flyout-item:not(.menu-flyout-item--disabled)*/.sc-scale-menu-flyout-item-h:active .menu-flyout-item.sc-scale-menu-flyout-item:not(.menu-flyout-item--disabled){color:var(--scl-color-primary-active)}/*!@:host([aria-expanded='true']) .menu-flyout-item*/[aria-expanded='true'].sc-scale-menu-flyout-item-h .menu-flyout-item.sc-scale-menu-flyout-item{color:var(--scl-color-primary-active)}/*!@.menu-flyout-item--disabled*/.menu-flyout-item--disabled.sc-scale-menu-flyout-item{outline:none;color:#ccc;cursor:not-allowed}/*!@:host([active])::before*/[active].sc-scale-menu-flyout-item-h::before{content:'';display:block;position:absolute;top:0;left:0;height:100%;width:0;background-color:var(--scl-color-primary-active);border-left:var(--scl-spacing-2) solid transparent}/*!@.menu-flyout-item--active*/.menu-flyout-item--active.sc-scale-menu-flyout-item{color:var(--scl-color-primary-active)}@media screen and (forced-colors: active), (-ms-high-contrast: active){/*!@.menu-flyout-item--disabled:not(.menu-flyout-item--disabled),\n  .menu-flyout-item--active:not(.menu-flyout-item--disabled)*/.menu-flyout-item--disabled.sc-scale-menu-flyout-item:not(.menu-flyout-item--disabled),.menu-flyout-item--active.sc-scale-menu-flyout-item:not(.menu-flyout-item--disabled){color:white;stroke:white}}/*!@.menu-flyout-item__label*/.menu-flyout-item__label.sc-scale-menu-flyout-item{flex:1 1 0;overflow:hidden;text-overflow:ellipsis}/*!@.menu-flyout-item__prefix*/.menu-flyout-item__prefix.sc-scale-menu-flyout-item{flex:0 0 auto;display:flex;align-items:center}/*!@.menu-flyout-item__check,\nslot[name='prefix']::slotted(:last-of-type)*/.menu-flyout-item__check.sc-scale-menu-flyout-item,slot[name='prefix'].sc-scale-menu-flyout-item-s>:last-of-type{margin-right:var(--scl-spacing-8)}/*!@.menu-flyout-item__check*/.menu-flyout-item__check.sc-scale-menu-flyout-item{visibility:hidden}/*!@:host([aria-checked='true']) .menu-flyout-item__check*/[aria-checked='true'].sc-scale-menu-flyout-item-h .menu-flyout-item__check.sc-scale-menu-flyout-item{visibility:visible}/*!@.menu-flyout-item__suffix*/.menu-flyout-item__suffix.sc-scale-menu-flyout-item{flex:0 0 auto;display:flex;align-items:center}/*!@.menu-flyout-item__cascade,\nslot[name='suffix']::slotted(:first-of-type)*/.menu-flyout-item__cascade.sc-scale-menu-flyout-item,slot[name='suffix'].sc-scale-menu-flyout-item-s>:first-of-type{margin-left:var(--scl-spacing-16)}";

class MenuFlyoutItem {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.scaleSelect = createEvent$1(this, "scale-select", 7);
    this.scaleSelectLegacy = createEvent$1(this, "scaleSelect", 7);
    /** (optional) Set to true to display arrow icon suffix */
    this.cascade = false; // TODO rename to `hasMenu`?
    /** (optional) Mark as active */
    this.active = false;
    /** (optional) Set to true to display check prefix, false to display empty prefix */
    this.checked = false;
    /** (optional) Disabled */
    this.disabled = false;
    this.hasSlotSublist = false;
  }
  // TODO there is lot of room for improving this, aka edge-cases
  async triggerEvent(eventType, key, closeOnSelect = true) {
    if (this.disabled) {
      return;
    }
    if (key === 'ArrowRight' && !this.hasSlotSublist) {
      return;
    }
    if (this.hasSlotSublist) {
      this.openSublist();
      return;
    }
    const detail = { eventType, key, item: this.hostElement, closeOnSelect };
    emitEvent$1(this, 'scaleSelect', detail);
  }
  connectedCallback() {
    this.hasSlotSublist =
      this.hostElement.querySelector('[slot="sublist"]') != null;
    if (this.hasSlotSublist) {
      this.cascade = true;
    }
  }
  openSublist() {
    const sublist = this.hostElement.querySelector('[slot="sublist"]');
    if (sublist == null) {
      return;
    }
    sublist.trigger = () => this.hostElement;
    sublist.direction = 'right';
    sublist.open();
  }
  getCssClassMap() {
    return classnames('menu-flyout-item', this.disabled && 'menu-flyout-item--disabled', this.checkable != null && 'menu-flyout-item--checkable', this.active && 'menu-flyout-item--active');
  }
  render() {
    const checked = this.checked ? 'true' : 'false';
    return (hAsync(Host$1, { role: this.checkable ? `menuitem${this.checkable}` : 'menuitem', "aria-checked": this.checkable == null ? false : checked, "aria-disabled": this.disabled ? 'true' : undefined, tabindex: "-1" }, this.styles && hAsync("style", null, this.styles), hAsync("div", { class: this.getCssClassMap(), part: "base" }, hAsync("span", { part: "prefix", class: "menu-flyout-item__prefix" }, this.checkable == null ? (hAsync("slot", { name: "prefix" })) : (hAsync("scale-icon-action-success", { class: "menu-flyout-item__check", size: 16 }))), hAsync("span", { part: "label", class: "menu-flyout-item__label" }, hAsync("slot", null)), hAsync("span", { part: "suffix", class: "menu-flyout-item__suffix" }, this.cascade ? (hAsync("scale-icon-navigation-right", { class: "menu-flyout-item__cascade", size: 16 })) : (hAsync("slot", { name: "suffix" })))), hAsync("slot", { name: "sublist" })));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return menuFlyoutItemCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-menu-flyout-item",
    "$members$": {
      "cascade": [4],
      "active": [516],
      "checkable": [1],
      "checked": [1540],
      "disabled": [516],
      "value": [513],
      "styles": [1],
      "triggerEvent": [64]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["active", "active"], ["checked", "checked"], ["disabled", "disabled"], ["value", "value"]]
  }; }
}

const menuFlyoutListCss = "/*!@:host*/.sc-scale-menu-flyout-list-h{box-sizing:content-box;position:fixed;z-index:var(--scl-z-index-20);pointer-events:none}/*!@.menu-flyout-list*/.menu-flyout-list.sc-scale-menu-flyout-list{display:none;position:absolute;pointer-events:initial;z-index:var(--scl-z-index-20);background:var(--scl-color-white);border-radius:var(--scl-radius-12);box-shadow:var(--scl-shadow-level-4);overflow-y:hidden;margin-top:var(--spacing-y-list, 0);margin-bottom:var(--spacing-y-list, 0);margin-left:var(--spacing-x-list, 0);margin-right:var(--spacing-x-list, 0)}/*!@.menu-flyout-list::after*/.menu-flyout-list.sc-scale-menu-flyout-list::after{content:'';display:block;position:absolute;width:calc(100% - 2px);height:calc(100% - 2px);inset:0;border-radius:var(--scl-radius-8);border:1px solid transparent;pointer-events:none}/*!@.menu-flyout-list--opened*/.menu-flyout-list--opened.sc-scale-menu-flyout-list{display:flex}/*!@.menu-flyout-list__list*/.menu-flyout-list__list.sc-scale-menu-flyout-list{padding:20px 0;overflow-y:auto;overflow-y:overlay;overscroll-behavior:contain}/*!@.menu-flyout-list--flip-horizontal.menu-flyout-list--direction-bottom-left,\n.menu-flyout-list--flip-vertical.menu-flyout-list--direction-top-right,\n.menu-flyout-list--flip-horizontal.menu-flyout-list--flip-vertical.menu-flyout-list--direction-top-left,\n.menu-flyout-list--direction-bottom-right*/.menu-flyout-list--flip-horizontal.menu-flyout-list--direction-bottom-left.sc-scale-menu-flyout-list,.menu-flyout-list--flip-vertical.menu-flyout-list--direction-top-right.sc-scale-menu-flyout-list,.menu-flyout-list--flip-horizontal.menu-flyout-list--flip-vertical.menu-flyout-list--direction-top-left.sc-scale-menu-flyout-list,.menu-flyout-list--direction-bottom-right.sc-scale-menu-flyout-list{top:calc(100% + var(--scl-spacing-4));left:0;right:auto;bottom:auto}/*!@.menu-flyout-list--flip-horizontal.menu-flyout-list--direction-bottom-right,\n.menu-flyout-list--flip-vertical.menu-flyout-list--direction-top-left,\n.menu-flyout-list--flip-horizontal.menu-flyout-list--flip-vertical.menu-flyout-list--direction-top-right,\n.menu-flyout-list--direction-bottom-left*/.menu-flyout-list--flip-horizontal.menu-flyout-list--direction-bottom-right.sc-scale-menu-flyout-list,.menu-flyout-list--flip-vertical.menu-flyout-list--direction-top-left.sc-scale-menu-flyout-list,.menu-flyout-list--flip-horizontal.menu-flyout-list--flip-vertical.menu-flyout-list--direction-top-right.sc-scale-menu-flyout-list,.menu-flyout-list--direction-bottom-left.sc-scale-menu-flyout-list{top:calc(100% + var(--scl-spacing-4));right:0;left:auto;bottom:auto}/*!@.menu-flyout-list--flip-horizontal.menu-flyout-list--direction-top-left,\n.menu-flyout-list--flip-vertical.menu-flyout-list--direction-bottom-right,\n.menu-flyout-list--flip-horizontal.menu-flyout-list--flip-vertical.menu-flyout-list--direction-bottom-left,\n.menu-flyout-list--direction-top-right*/.menu-flyout-list--flip-horizontal.menu-flyout-list--direction-top-left.sc-scale-menu-flyout-list,.menu-flyout-list--flip-vertical.menu-flyout-list--direction-bottom-right.sc-scale-menu-flyout-list,.menu-flyout-list--flip-horizontal.menu-flyout-list--flip-vertical.menu-flyout-list--direction-bottom-left.sc-scale-menu-flyout-list,.menu-flyout-list--direction-top-right.sc-scale-menu-flyout-list{bottom:calc(100% + var(--scl-spacing-4));left:0;right:auto;top:auto}/*!@.menu-flyout-list--flip-horizontal.menu-flyout-list--direction-top-right,\n.menu-flyout-list--flip-vertical.menu-flyout-list--direction-bottom-left,\n.menu-flyout-list--flip-horizontal.menu-flyout-list--flip-vertical.menu-flyout-list--direction-bottom-right,\n.menu-flyout-list--direction-top-left*/.menu-flyout-list--flip-horizontal.menu-flyout-list--direction-top-right.sc-scale-menu-flyout-list,.menu-flyout-list--flip-vertical.menu-flyout-list--direction-bottom-left.sc-scale-menu-flyout-list,.menu-flyout-list--flip-horizontal.menu-flyout-list--flip-vertical.menu-flyout-list--direction-bottom-right.sc-scale-menu-flyout-list,.menu-flyout-list--direction-top-left.sc-scale-menu-flyout-list{bottom:calc(100% + var(--scl-spacing-4));right:0;left:auto;top:auto}/*!@.menu-flyout-list--flip-horizontal.menu-flyout-list--direction-left,\n.menu-flyout-list--direction-right*/.menu-flyout-list--flip-horizontal.menu-flyout-list--direction-left.sc-scale-menu-flyout-list,.menu-flyout-list--direction-right.sc-scale-menu-flyout-list{left:calc(100% - var(--scl-spacing-4));top:-20px;right:auto;bottom:auto}/*!@.menu-flyout-list--flip-horizontal.menu-flyout-list--direction-right,\n.menu-flyout-list--direction-left*/.menu-flyout-list--flip-horizontal.menu-flyout-list--direction-right.sc-scale-menu-flyout-list,.menu-flyout-list--direction-left.sc-scale-menu-flyout-list{right:calc(100% - var(--scl-spacing-4));top:-20px;left:auto;bottom:auto}/*!@.menu-flyout-list__scroll-up-indicator,\n.menu-flyout-list__scroll-down-indicator*/.menu-flyout-list__scroll-up-indicator.sc-scale-menu-flyout-list,.menu-flyout-list__scroll-down-indicator.sc-scale-menu-flyout-list{position:absolute;width:0;border:5px solid transparent;pointer-events:none;opacity:0;left:50%}/*!@.menu-flyout-list__scroll-up-indicator*/.menu-flyout-list__scroll-up-indicator.sc-scale-menu-flyout-list{top:var(--scl-spacing-8);border-bottom:5px solid var(--scl-color-grey-40);border-top:0}/*!@.menu-flyout-list__scroll-down-indicator*/.menu-flyout-list__scroll-down-indicator.sc-scale-menu-flyout-list{bottom:var(--scl-spacing-8);border-top:5px solid var(--scl-color-grey-40);border-bottom:0}/*!@.menu-flyout-list--can-scroll-up .menu-flyout-list__scroll-up-indicator*/.menu-flyout-list--can-scroll-up.sc-scale-menu-flyout-list .menu-flyout-list__scroll-up-indicator.sc-scale-menu-flyout-list{opacity:1}/*!@.menu-flyout-list--can-scroll-down .menu-flyout-list__scroll-down-indicator*/.menu-flyout-list--can-scroll-down.sc-scale-menu-flyout-list .menu-flyout-list__scroll-down-indicator.sc-scale-menu-flyout-list{opacity:1}";

const PAD = 10;
const ITEM_ROLES = ['menuitem', 'menuitemcheckbox', 'menuitemradio'];
class MenuFlyoutList {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.scaleOpen = createEvent$1(this, "scale-open", 7);
    this.scaleOpenLegacy = createEvent$1(this, "scaleOpen", 7);
    this.scaleClose = createEvent$1(this, "scale-close", 7);
    this.scaleCloseLegacy = createEvent$1(this, "scaleClose", 7);
    /** Used to force a re-render */
    this.forceRender = 0;
    /** */
    this.opened = false;
    /** (optional) Set preference for where the menu appears, space permitting */
    this.direction = 'bottom-right';
    /**  */
    this.active = false;
    /** (optional) Determines whether the flyout should close when a menu item is selected */
    this.closeOnSelect = true;
    /** Flags to know if content scrollable */
    this.canScrollUp = false;
    this.canScrollDown = false;
    /** When menu off the screen horizontally */
    this.flipHorizontal = false;
    /** When menu off the screen vertically */
    this.flipVertical = false;
    /** Set true when resize or when opened */
    this.needsCheckPlacement = true;
    this.handleScroll = () => {
      this.updateScrollIndicators();
    };
    this.handleWheel = (event) => {
      // TODO not sure this is doing anything atm
      this.stopWheelPropagation(event);
    };
  }
  get triggerRect() {
    return this.trigger().getBoundingClientRect();
  }
  componentDidRender() {
    if (this.opened && this.needsCheckPlacement) {
      this.setSize();
      this.checkPlacement();
    }
  }
  async open() {
    this.opened = true;
    emitEvent$1(this, 'scaleOpen', { list: this.hostElement });
  }
  async close(silent = false) {
    if (this.active && silent !== true) {
      emitEvent$1(this, 'scaleClose', { list: this.hostElement });
    }
    this.opened = false;
  }
  async setFocus() {
    if (this.focusedItemIndex != null) {
      this.focusItem();
    }
    else {
      this.setInitialItemsFocus();
    }
  }
  handleResize() {
    this.close();
  }
  handleKeydown(event) {
    if (!this.active) {
      return;
    }
    event.preventDefault();
    if ('ArrowDown' === event.key) {
      this.shiftItemsFocus();
      return;
    }
    if ('ArrowUp' === event.key) {
      this.shiftItemsFocus(-1);
      return;
    }
    if ('ArrowLeft' === event.key || 'Escape' === event.key) {
      this.close();
      return;
    }
    if (' ' === event.key ||
      'Enter' === event.key ||
      'ArrowRight' === event.key) {
      const item = this.items[this.focusedItemIndex];
      if (item != null) {
        item.triggerEvent('keydown', event.key, this.closeOnSelect);
      }
    }
  }
  /**
   * We handle item clicks here, to avoid setting up
   * listeners on every item
   */
  handleClick(event) {
    const roleSelector = ITEM_ROLES.map((role) => `[role="${role}"]`).join(',');
    const item = event.target.closest(roleSelector);
    if (item != null) {
      event.stopImmediatePropagation();
      item.triggerEvent('click', null, this.closeOnSelect);
    }
  }
  /**
   * Focus newly selected item
   */
  handleScaleSelect({ detail }) {
    if (this.active && this.opened) {
      const index = this.items.findIndex((x) => x === detail.item);
      if (index != null) {
        this.focusedItemIndex = index;
        this.focusItem();
      }
    }
  }
  /**
   * Set `active` to false when a descendant opens
   */
  handleScaleOpen({ detail }) {
    if (detail.list !== this.hostElement) {
      this.active = false;
    }
  }
  openedChanged() {
    if (!this.opened) {
      this.active = false;
      this.focusedItemIndex = null;
      // Reset checks for boundary-aware placement
      this.needsCheckPlacement = true;
      this.flipHorizontal = false;
      this.flipVertical = false;
      this.hostElement.style.marginLeft = '';
      this.hostElement.style.marginTop = '';
      this.hostElement.style.marginRight = '';
      this.hostElement.style.marginBottom = '';
    }
    if (this.opened) {
      this.active = true;
      this.setFocus();
      this.setWindowSize();
      this.setPosition();
      this.padForNonOverlayScrollbars();
      this.updateScrollIndicators();
    }
    this.updateTriggerAttributes();
  }
  setInitialItemsFocus() {
    this.items = this.getListItems();
    this.focusedItemIndex = -1;
    if (this.items.length > 0) {
      this.shiftItemsFocus();
    }
  }
  shiftItemsFocus(direction = 1) {
    let nextIndex = this.focusedItemIndex + direction;
    if (nextIndex === this.items.length) {
      nextIndex = 0;
    }
    else if (nextIndex < 0) {
      nextIndex = this.items.length - 1;
    }
    this.focusedItemIndex = nextIndex;
    this.focusItem();
  }
  focusItem() {
    window.requestAnimationFrame(() => {
      try {
        this.items[this.focusedItemIndex].focus();
      }
      catch (err) { }
    });
  }
  updateTriggerAttributes() {
    const trigger = this.trigger();
    if (trigger && trigger.getAttribute('aria-haspopup') === 'true') {
      trigger.setAttribute('aria-expanded', String(this.opened));
    }
  }
  setWindowSize() {
    this.windowWidth = window.innerWidth;
    this.windowHeight = window.innerHeight;
  }
  setPosition() {
    const { top, left } = this.triggerRect;
    this.hostElement.style.top = `${top}px`;
    this.hostElement.style.left = `${left}px`;
  }
  setSize() {
    const { width, height } = this.triggerRect;
    this.hostElement.style.height = `${height}px`;
    this.hostElement.style.width = `${width}px`;
  }
  checkPlacement() {
    this.needsCheckPlacement = false;
    let isOutOfBounds = false;
    const rect = this.base.getBoundingClientRect();
    // Check horizontal flips
    if (rect.left < PAD) {
      // console.log('off left edge');
      isOutOfBounds = true;
      if (this.direction.includes('left')) {
        this.flipHorizontal = true;
      }
    }
    if (rect.right > this.windowWidth - PAD) {
      // console.log('off right edge');
      isOutOfBounds = true;
      if (this.direction.includes('right')) {
        this.flipHorizontal = true;
      }
    }
    // Check vertical flips
    if (rect.top < PAD) {
      // console.log('off top edge');
      isOutOfBounds = true;
      if (this.direction.includes('top')) {
        this.flipVertical = true;
      }
    }
    if (rect.bottom > this.windowHeight - PAD) {
      // console.log('off bottom edge');
      isOutOfBounds = true;
      if (this.direction.includes('bottom')) {
        this.flipVertical = true;
      }
    }
    if (isOutOfBounds) {
      this.furtherAdjustPlacement();
    }
  }
  furtherAdjustPlacement() {
    // Apply flip class changes immediately to avoid frame flash
    this.base.className = this.getCssClassMap();
    // Force layout and style recalculation
    window.getComputedStyle(this.base);
    const rect = this.base.getBoundingClientRect();
    // TODO: add more functionality for order of priority of which edge to snap to
    // Shift to be snapped to a padded edge
    // Note can't use transform as it creates
    // a relative parent for nested position fixed elements
    let left = 0;
    let top = 0;
    if (rect.left < PAD) {
      // console.log('still off left edge');
      left = PAD - rect.left;
    }
    else if (rect.right > this.windowWidth - PAD) {
      // console.log('still off right edge');
      left = this.windowWidth - PAD - rect.right;
    }
    if (rect.top < PAD) {
      // console.log('still off top edge');
      top = PAD - rect.top;
    }
    else if (rect.bottom > this.windowHeight - PAD) {
      // console.log('still off bottom edge');
      top = this.windowHeight - PAD - rect.bottom;
    }
    this.hostElement.style.marginLeft = `${left}px`;
    this.hostElement.style.marginTop = `${top}px`;
    this.hostElement.style.marginRight = `${-left}px`;
    this.hostElement.style.marginBottom = `${-top}px`;
    // Re-render visibly next frame with correct placement to update vdom
    setTimeout(() => this.forceRender++);
  }
  /**
   * Add scrollbar width to menu, to avoid horizontal scrollbars
   * or scrollbar forcing text-overflow.
   * (This affects Firefox and Safari, where non-overlay scrollbars
   * eat into content width rather than add)
   */
  padForNonOverlayScrollbars() {
    this.base.style.paddingRight = `0px`;
    const scrollbarWidth = this.base.offsetWidth - this.base.clientWidth;
    this.base.style.paddingRight = `${scrollbarWidth}px`;
  }
  updateScrollIndicators() {
    // Reset
    this.canScrollDown = false;
    this.canScrollUp = false;
    const diff = this.list.scrollHeight - this.list.clientHeight;
    // Not scrollable
    if (diff) {
      if (this.list.scrollTop > 0) {
        this.canScrollUp = true;
      }
      if (this.list.scrollTop < diff) {
        this.canScrollDown = true;
      }
    }
    this.forceRender++;
  }
  /**
   * Check if going in a direction with content to reach, otherwise stop
   */
  stopWheelPropagation(event) {
    // This is enough for Chrome
    event.stopPropagation();
    // Needed for Safari and Firefox to prevent scrolling on non-scrollable lists
    if (!this.canScrollDown && !this.canScrollUp) {
      event.preventDefault();
    }
    // Needed for Safari to prevent scrolling past the end of a scrollable list
    if (event.deltaY > 0 && !this.canScrollDown) {
      event.preventDefault();
    }
    if (event.deltaY < 0 && !this.canScrollUp) {
      event.preventDefault();
    }
  }
  getListItems() {
    return Array.from(this.hostElement.children).filter((el) => ITEM_ROLES.includes(el.getAttribute('role')));
  }
  getCssClassMap() {
    return classnames('menu-flyout-list', `menu-flyout-list--direction-${this.direction}`, this.opened && 'menu-flyout-list--opened', this.canScrollUp && 'menu-flyout-list--can-scroll-up', this.canScrollDown && 'menu-flyout-list--can-scroll-down', this.flipHorizontal && `menu-flyout-list--flip-horizontal`, this.flipVertical && `menu-flyout-list--flip-vertical`);
  }
  render() {
    return (hAsync(Host$1, { role: "menu" }, this.styles && hAsync("style", null, this.styles), hAsync("div", { class: this.getCssClassMap(), ref: (el) => (this.base = el), part: "base", style: { maxHeight: `calc(${this.windowHeight}px - 20px)` }, onWheelCapture: this.handleWheel }, hAsync("div", { class: "menu-flyout-list__list", ref: (el) => (this.list = el), onScroll: this.handleScroll }, hAsync("slot", null)), hAsync("div", { "aria-hidden": "true", class: "menu-flyout-list__scroll-up-indicator" }), hAsync("div", { "aria-hidden": "true", class: "menu-flyout-list__scroll-down-indicator" }))));
  }
  get hostElement() { return getElement$1(this); }
  static get watchers() { return {
    "opened": ["openedChanged"]
  }; }
  static get style() { return menuFlyoutListCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-menu-flyout-list",
    "$members$": {
      "opened": [1540],
      "trigger": [16],
      "direction": [1025],
      "active": [1540],
      "closeOnSelect": [4, "close-on-select"],
      "styles": [1],
      "forceRender": [32],
      "open": [64],
      "close": [64],
      "setFocus": [64]
    },
    "$listeners$": [[9, "resize", "handleResize"], [0, "keydown", "handleKeydown"], [0, "click", "handleClick"], [0, "scale-select", "handleScaleSelect"], [0, "scale-open", "handleScaleOpen"]],
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["opened", "opened"], ["active", "active"]]
  }; }
}

/**
 * Copy/pasted from https://github.com/andreasbm/focus-trap
 */
/**
 * Traverses the slots of the open shadowroots and returns all children matching the query.
 * We need to traverse each child-depth one at a time because if an element should be skipped
 * (for example because it is hidden) we need to skip all of it's children. If we use querySelectorAll("*")
 * the information of whether the children is within a hidden parent is lost.
 * @param {ShadowRoot | HTMLElement} root
 * @param skipNode
 * @param isMatch
 * @param {number} maxDepth
 * @param {number} depth
 * @returns {HTMLElement[]}
 */
function queryShadowRoot(root, skipNode, isMatch, maxDepth = 20, depth = 0) {
  const matches = [];
  // If the depth is above the max depth, abort the searching here.
  if (depth >= maxDepth) {
    return matches;
  }
  // Traverses a slot element
  const traverseSlot = ($slot) => {
    // Only check nodes that are of the type Node.ELEMENT_NODE
    // Read more here https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType
    const assignedNodes = $slot
      .assignedNodes()
      .filter((node) => node.nodeType === 1);
    if (assignedNodes.length > 0) {
      const $slotParent = assignedNodes[0].parentElement;
      return queryShadowRoot($slotParent, skipNode, isMatch, maxDepth, depth + 1);
    }
    return [];
  };
  // Go through each child and continue the traversing if necessary
  // Even though the typing says that children can't be undefined, Edge 15 sometimes gives an undefined value.
  // Therefore we fallback to an empty array if it is undefined.
  const children = Array.from(root.children || []);
  for (const $child of children) {
    // Check if the element and its descendants should be skipped
    if (skipNode($child)) {
      // console.log('-- SKIP', $child);
      continue;
    }
    // console.log('$child', $child);
    // If the element matches we always add it
    if (isMatch($child)) {
      matches.push($child);
    }
    if ($child.shadowRoot != null) {
      // If the element has a shadow root we need to traverse it
      matches.push(...queryShadowRoot($child.shadowRoot, skipNode, isMatch, maxDepth, depth + 1));
    }
    else if ($child.tagName === 'SLOT') {
      // If the child is a slot we need to traverse each assigned node
      matches.push(...traverseSlot($child));
    }
    else {
      // Traverse the children of the element
      matches.push(...queryShadowRoot($child, skipNode, isMatch, maxDepth, depth + 1));
    }
  }
  return matches;
}
/**
 * Returns whether the element is hidden.
 * @param $elem
 */
function isHidden($elem) {
  return ($elem.hasAttribute('hidden') ||
    ($elem.hasAttribute('aria-hidden') &&
      $elem.getAttribute('aria-hidden') !== 'false') ||
    // A quick and dirty way to check whether the element is hidden.
    // For a more fine-grained check we could use "window.getComputedStyle" but we don't because of bad performance.
    // If the element has visibility set to "hidden" or "collapse", display set to "none" or opacity set to "0" through CSS
    // we won't be able to catch it here. We accept it due to the huge performance benefits.
    $elem.style.display === `none` ||
    $elem.style.opacity === `0` ||
    $elem.style.visibility === `hidden` ||
    $elem.style.visibility === `collapse`);
  // If offsetParent is null we can assume that the element is hidden
  // https://stackoverflow.com/questions/306305/what-would-make-offsetparent-null
  // || $elem.offsetParent == null;
}
/**
 * Returns whether the element is disabled.
 * @param $elem
 */
function isDisabled($elem) {
  return ($elem.hasAttribute('disabled') ||
    ($elem.hasAttribute('aria-disabled') &&
      $elem.getAttribute('aria-disabled') !== 'false'));
}
/**
 * Determines whether an element is focusable.
 * Read more here: https://stackoverflow.com/questions/1599660/which-html-elements-can-receive-focus/1600194#1600194
 * Or here: https://stackoverflow.com/questions/18261595/how-to-check-if-a-dom-element-is-focusable
 * @param $elem
 */
function isFocusable($elem) {
  // Discard elements that are removed from the tab order.
  if ($elem.getAttribute('tabindex') === '-1' ||
    isHidden($elem) ||
    isDisabled($elem)) {
    return false;
  }
  return (
  // At this point we know that the element can have focus (eg. won't be -1) if the tabindex attribute exists
  $elem.hasAttribute('tabindex') ||
    // Anchor tags or area tags with a href set
    (($elem instanceof HTMLAnchorElement || $elem instanceof HTMLAreaElement) &&
      $elem.hasAttribute('href')) ||
    // Form elements which are not disabled
    $elem instanceof HTMLButtonElement ||
    $elem instanceof HTMLInputElement ||
    $elem instanceof HTMLTextAreaElement ||
    $elem instanceof HTMLSelectElement ||
    // IFrames
    $elem instanceof HTMLIFrameElement);
}

/**
 * @license
 * Scale https://github.com/telekom/scale
 *
 * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
/**
 * @see https://www.youtube.com/watch?v=9-6CKCz58A8
 */
function animateTo(element, keyframes, options) {
  const anim = element.animate(keyframes, Object.assign(Object.assign({}, options), { fill: 'both' }));
  anim.addEventListener('finish', () => {
    // @ts-ignore
    anim.commitStyles();
    anim.cancel();
  });
  return anim;
}
const keyframeDefaults = {
  easing: 'cubic-bezier(0.390, 0.575, 0.565, 1.000)',
};
const KEYFRAMES = {
  fadeIn: [
    Object.assign(Object.assign({ offset: 0 }, keyframeDefaults), { opacity: 0 }),
    Object.assign(Object.assign({ offset: 1 }, keyframeDefaults), { opacity: 1 }),
  ],
  fadeOut: [
    Object.assign(Object.assign({ offset: 0 }, keyframeDefaults), { opacity: 1 }),
    Object.assign(Object.assign({ offset: 1 }, keyframeDefaults), { opacity: 0 }),
  ],
  fadeInTop: [
    Object.assign(Object.assign({ offset: 0 }, keyframeDefaults), { opacity: 0, transform: 'translateY(-3rem)' }),
    Object.assign(Object.assign({ offset: 1 }, keyframeDefaults), { opacity: 1, transform: 'translateY(0)' }),
  ],
};

const modalCss = "/*!@:host*/.sc-scale-modal-h{--spacing-x:var(--scl-spacing-16);--background-overlay:var(\n    --scl-color-background-overlay,\n    rgba(108, 108, 108, 0.7)\n  );--max-height-window:calc(100vh - (2 * var(--scl-spacing-80)));--radius-window:var(--scl-radius-12);--box-shadow-window:var(--scl-shadow-level-5);--size-window-small:calc(\n    (6 * var(--scl-spacing-56, 3.5rem)) + (5 * var(--scl-spacing-32))\n  );--size-window-default:calc(\n    (8 * var(--scl-spacing-56, 3.5rem)) + (7 * var(--scl-spacing-32))\n  );--size-window-large:calc(\n    (12 * var(--scl-spacing-56, 3.5rem)) + (11 * var(--scl-spacing-32))\n  );--spacing-x-header:var(--scl-spacing-24);--spacing-y-header:var(--scl-spacing-24);--border-bottom-header-has-scroll:var(--scl-spacing-1) solid\n    var(--scl-color-grey-20);--font-family-heading:var(--scl-font-family-sans);--font-size-heading:var(--scl-font-size-20);--font-weight-heading:var(--scl-font-weight-extrabold);--spacing-close-button:var(--scl-spacing-8);--radius-close-button:var(--scl-radius-8);--transition-close-button:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);--box-shadow-close-button-focus:0 0 0 var(--scl-spacing-2)\n    var(--scl-color-focus);--color-close-button-hover:var(--scl-color-primary-hover);--color-close-button-active:var(--scl-color-primary-active);--spacing-x-body-wrapper:var(--scl-spacing-24);--spacing-y-body:var(--scl-spacing-24);--spacing-actions:var(--scl-spacing-24);--spacing-x-actions-slotted:var(--scl-spacing-8);--background-actions-has-scroll:var(--scl-color-background-light)}/*!@.modal*/.modal.sc-scale-modal{top:0;left:0;width:100%;bottom:0;display:none;z-index:100;position:fixed;background:var(--background-overlay);box-sizing:border-box;align-items:center;justify-content:center;padding-left:var(--spacing-x);padding-right:var(--spacing-x)}/*!@.modal.modal--is-open*/.modal.modal--is-open.sc-scale-modal{display:flex}/*!@.modal__backdrop*/.modal__backdrop.sc-scale-modal{top:0;left:0;width:100%;height:100%;z-index:0;position:absolute}/*!@.modal__window*/.modal__window.sc-scale-modal{width:100%;height:auto;display:flex;z-index:1;position:relative;overflow-y:auto;flex-direction:column;background-color:white;max-height:var(--max-height-window);border-radius:var(--radius-window);box-shadow:var(--box-shadow-window)}/*!@.modal__window .modal__body-wrapper*/.modal__window.sc-scale-modal .modal__body-wrapper.sc-scale-modal{overflow-y:auto;flex-shrink:1}/*!@.modal--size-small .modal__window*/.modal--size-small.sc-scale-modal .modal__window.sc-scale-modal{max-width:var(--size-window-small)}/*!@.modal--size-default .modal__window*/.modal--size-default.sc-scale-modal .modal__window.sc-scale-modal{max-width:var(--size-window-default)}/*!@.modal--size-large .modal__window*/.modal--size-large.sc-scale-modal .modal__window.sc-scale-modal{max-width:var(--size-window-large)}@media (max-height: 30em){/*!@.modal__window*/.modal__window.sc-scale-modal{max-height:calc(100vh - var(--scl-spacing-24))}}/*!@.modal__window:after*/.modal__window.sc-scale-modal:after{top:0;left:0;width:100%;border:1px solid transparent;height:100%;content:'';display:block;position:absolute;box-sizing:border-box;pointer-events:none;border-radius:var(--radius-window)}/*!@.modal__header*/.modal__header.sc-scale-modal{display:flex;align-items:flex-start;flex-shrink:0;justify-content:space-between;margin-left:var(--spacing-x-header);margin-right:var(--spacing-x-header);padding-top:var(--spacing-y-header);padding-bottom:var(--spacing-y-header)}/*!@.modal--has-scroll .modal__header*/.modal--has-scroll.sc-scale-modal .modal__header.sc-scale-modal{border-bottom:var(--border-bottom-header-has-scroll)}/*!@.modal__heading*/.modal__heading.sc-scale-modal{margin:0;font-family:var(--font-family-heading);font-size:var(--font-size-heading);font-weight:var(--font-weight-heading)}/*!@.modal__close-button*/.modal__close-button.sc-scale-modal{box-sizing:border-box;display:inline-flex;align-items:center;justify-content:center;padding:var(--spacing-close-button);margin-bottom:calc(-2 * var(--spacing-close-button));border:0;border-radius:var(--radius-close-button);outline:none;background:transparent;transition:var(--transition-close-button);transform:translate(\n    var(--spacing-close-button),\n    calc(-1 * var(--spacing-close-button))\n  );appearance:none;cursor:pointer;user-select:none}/*!@.modal__close-button:focus*/.modal__close-button.sc-scale-modal:focus{box-shadow:var(--box-shadow-close-button-focus)}/*!@.modal__close-button:hover*/.modal__close-button.sc-scale-modal:hover{color:var(--color-close-button-hover)}/*!@.modal__close-button:active*/.modal__close-button.sc-scale-modal:active{color:var(--color-close-button-active)}/*!@.modal__body-wrapper*/.modal__body-wrapper.sc-scale-modal{padding-left:var(--spacing-x-body-wrapper);padding-right:var(--spacing-x-body-wrapper)}/*!@.modal--has-body .modal__body-wrapper*/.modal--has-body.sc-scale-modal .modal__body-wrapper.sc-scale-modal{min-height:var(--scl-spacing-48)}/*!@.modal--has-body .modal__body*/.modal--has-body.sc-scale-modal .modal__body.sc-scale-modal{margin-top:var(--spacing-y-body);margin-bottom:var(--spacing-y-body)}/*!@.modal__actions*/.modal__actions.sc-scale-modal{display:none;flex-shrink:0;justify-content:flex-end;padding:var(--spacing-actions)}/*!@.modal__actions ::slotted(*)*/.modal__actions .sc-scale-modal-s>*{margin-left:var(--spacing-x-actions-slotted)}/*!@.modal--has-actions .modal__actions*/.modal--has-actions.sc-scale-modal .modal__actions.sc-scale-modal{display:flex}/*!@.modal--align-actions-left .modal__actions*/.modal--align-actions-left.sc-scale-modal .modal__actions.sc-scale-modal{justify-content:flex-start}/*!@.modal--has-scroll .modal__actions*/.modal--has-scroll.sc-scale-modal .modal__actions.sc-scale-modal{background-color:var(--background-actions-has-scroll)}";

const supportsResizeObserver = 'ResizeObserver' in window;
/*
  TODO
  ====
  - [ ] save focus of last element previous to opening the modal
  - [ ] put animations in tokens
 */
class Modal {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.scaleOpen = createEvent$1(this, "scale-open", 7);
    this.scaleOpenLegacy = createEvent$1(this, "scaleOpen", 7);
    this.scaleBeforeClose = createEvent$1(this, "scale-before-close", 7);
    this.scaleBeforeCloseLegacy = createEvent$1(this, "scaleBeforeClose", 7);
    this.scaleClose = createEvent$1(this, "scale-close", 7);
    this.scaleCloseLegacy = createEvent$1(this, "scaleClose", 7);
    /** (optional) Custom class */
    this.customClass = '';
    /** (optional) Modal size */
    this.size = 'default';
    /** (optional) If `true`, the Modal is open. */
    this.opened = false;
    /** (optional) Transition duration */
    this.duration = 200;
    /** (optional) Label for close button */
    this.closeButtonLabel = 'Close Pop-up';
    /** (optional) Alignment of action buttons */
    this.alignActions = 'right';
    /** What actually triggers opening/closing the modal */
    this.isOpen = this.opened || false;
    /** Check wheter there are actions slots, style accordingly */
    this.hasActionsSlot = false;
    /** Check wheter there's content in the body, style accordingly */
    this.hasBody = false;
    /** Useful for toggling scroll-specific styles */
    this.hasScroll = false;
    this.focusableElements = [];
    this.handleTopFocus = () => {
      this.attemptFocus(this.getLastFocusableElement());
    };
    this.handleBottomFocus = () => {
      this.attemptFocus(this.getFirstFocusableElement());
    };
  }
  handleKeypress(event) {
    if (!this.isOpen) {
      return;
    }
    if (event.key === 'Escape') {
      this.emitBeforeClose('ESCAPE_KEY');
    }
  }
  disconnectedCallback() {
    if (this.resizeObserver) {
      this.resizeObserver.disconnect();
    }
  }
  /**
   * Set `hasActionsSlot` and `hasBody`.
   */
  componentWillRender() {
    const actionSlots = this.hostElement.querySelectorAll('[slot="action"]');
    const bodySlot = Array.from(this.hostElement.shadowRoot.querySelectorAll('slot')).find((x) => !x.name);
    this.hasActionsSlot = actionSlots.length > 0;
    if (bodySlot != null) {
      this.hasBody = bodySlot.assignedElements().length > 0;
    }
  }
  emitBeforeClose(trigger) {
    const emittedEvents = emitEvent$1(this, 'scaleBeforeClose', { trigger });
    const prevented = emittedEvents.some((event) => event.defaultPrevented);
    if (!prevented) {
      this.opened = false;
    }
  }
  componentDidLoad() {
    // Query all focusable elements and store them in `focusableElements`.
    // Needed for the "focus trap" functionality.
    this.focusableElements = queryShadowRoot(this.hostElement.shadowRoot, (el) => isHidden(el) || el.matches('[data-focus-trap-edge]'), isFocusable);
    // Set `hasScroll` state dynamically on resize.
    if (supportsResizeObserver) {
      // @ts-ignore
      this.resizeObserver = new ResizeObserver(() => {
        this.setHasScroll();
      });
      this.resizeObserver.observe(this.modalBody);
    }
    this.setHasScroll();
  }
  setHasScroll() {
    const container = this.modalBody;
    this.hasScroll = container.scrollHeight > container.clientHeight;
  }
  getFirstFocusableElement() {
    return this.focusableElements[0];
  }
  getLastFocusableElement() {
    return this.focusableElements[this.focusableElements.length - 1];
  }
  attemptFocus(element) {
    if (element == null) {
      this.closeButton.focus();
      return;
    }
    element.focus();
  }
  openedChanged(newValue) {
    if (newValue === true) {
      this.open();
    }
    else {
      this.close();
    }
  }
  open() {
    this.isOpen = true;
    try {
      animateTo(this.modalWindow, KEYFRAMES.fadeInTop, {
        duration: this.duration,
        delay: this.duration * 0.5,
      });
      const anim = animateTo(this.modalContainer, KEYFRAMES.fadeIn, {
        duration: this.duration,
      });
      anim.addEventListener('finish', () => {
        this.attemptFocus(this.getFirstFocusableElement());
        emitEvent$1(this, 'scaleOpen');
      });
    }
    catch (err) {
      emitEvent$1(this, 'scaleOpen');
    }
  }
  close() {
    try {
      const anim = animateTo(this.modalContainer, KEYFRAMES.fadeOut, {
        duration: this.duration,
      });
      anim.addEventListener('finish', () => {
        this.isOpen = false;
        emitEvent$1(this, 'scaleClose');
      });
    }
    catch (err) {
      this.isOpen = false;
      emitEvent$1(this, 'scaleClose');
    }
  }
  render() {
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync("div", { ref: (el) => (this.modalContainer = el), class: this.getCssClassMap(), part: classnames('base', this.isOpen && 'open') }, hAsync("div", { class: "modal__backdrop", part: "backdrop", onClick: () => this.emitBeforeClose('BACKDROP') }), hAsync("div", { "data-focus-trap-edge": true, onFocus: this.handleTopFocus, tabindex: "0" }), hAsync("div", { class: "modal__window", part: classnames('window', this.size && `size-${this.size}`), ref: (el) => (this.modalWindow = el), role: "dialog", "aria-modal": "true", "aria-label": this.heading, title: this.heading }, hAsync("div", { class: "modal__header", part: classnames('header', this.hasScroll && 'has-scroll') }, hAsync("h2", { class: "modal__heading", part: "heading" }, this.heading), hAsync("button", { ref: (el) => (this.closeButton = el), class: "modal__close-button", part: "close-button", onClick: () => this.emitBeforeClose('CLOSE_BUTTON'), "aria-label": this.closeButtonLabel }, hAsync("slot", { name: "close-icon" }, hAsync("scale-icon-action-circle-close", { decorative: true })))), hAsync("div", { ref: (el) => (this.modalBody = el), class: "modal__body-wrapper", part: classnames('body-wrapper', this.hasBody && 'has-body') }, hAsync("div", { class: "modal__body", part: classnames('body', this.hasBody && 'has-body') }, hAsync("slot", null))), hAsync("div", { class: "modal__actions", part: classnames('actions', `align-${this.alignActions}`, this.hasActionsSlot && 'has-actions', this.hasScroll && 'has-scroll') }, hAsync("slot", { name: "action" }))), hAsync("div", { "data-focus-trap-edge": true, onFocus: this.handleBottomFocus, tabindex: "0" }))));
  }
  getCssClassMap() {
    return classnames('modal', this.isOpen && 'modal--is-open', this.hasActionsSlot && 'modal--has-actions', `modal--align-actions-${this.alignActions}`, this.hasScroll && 'modal--has-scroll', this.hasBody && 'modal--has-body', this.size && `modal--size-${this.size}`);
  }
  get hostElement() { return getElement$1(this); }
  static get watchers() { return {
    "opened": ["openedChanged"]
  }; }
  static get style() { return modalCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-modal",
    "$members$": {
      "customClass": [1, "custom-class"],
      "heading": [1],
      "size": [1],
      "opened": [1540],
      "duration": [2],
      "closeButtonLabel": [1, "close-button-label"],
      "alignActions": [1, "align-actions"],
      "styles": [1],
      "isOpen": [32],
      "hasActionsSlot": [32],
      "hasBody": [32],
      "hasScroll": [32]
    },
    "$listeners$": [[8, "keydown", "handleKeypress"]],
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["opened", "opened"]]
  }; }
}

const navIconCss = "scale-nav-icon{--spacing-mobile:0 6px;--font-size-mobile:var(--scl-font-size-10);--line-height-mobile:var(--scl-font-line-height-120);--font-weight-mobile:var(--scl-font-weight-bold);--spacing-desktop:0 0 0 var(--scl-spacing-16);--font-size-desktop:var(--scl-font-size-12);--line-height-desktop:var(--scl-font-line-height-133);--color:var(--scl-color-primary);--color-hover:var(--scl-color-primary-hover);--color-active:var(--scl-color-primary-active)}.meta-navigation__item-link{color:var(--scl-color-text-standard);display:flex;transition:all 0.2s ease-in-out;align-items:center;font-weight:var(--font-weight-mobile);text-decoration:none;height:var(--header-nav-height)}.meta-navigation__item--selected .meta-navigation__item-link{color:var(--color)}@media screen and (forced-colors: active), (-ms-high-contrast: active){.meta-navigation__item-link{color:var(--scl-color-white)}}.meta-navigation__item-link:hover{color:var(--color-hover)}.meta-navigation__item-link:active{color:var(--color-active)}@media (max-width: 1023px){.meta-navigation__item-link{min-width:24px;height:auto}.meta-navigation__item-link{margin:var(--spacing-mobile);font-size:var(--font-size-mobile);line-height:var(--line-height-mobile);flex-direction:column}.meta-navigation__item.mobile-menu{width:50px;text-align:center;cursor:pointer}.meta-navigation__item-link .meta-navigation__item-link-icon{width:18px;height:18px;margin-bottom:4px}}@media (min-width: 1024px){.meta-navigation__item scale-menu-flyout{height:24px}.meta-navigation__item-link{margin:var(--spacing-desktop);font-size:var(--font-size-desktop);line-height:var(--line-height-desktop)}.meta-navigation__item-link .meta-navigation__item-link-icon{margin-right:6px}}";

class NavIcon {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) href value */
    this.href = 'javascript:void(0);';
    // DEPRECATED - mobileMenuOpen should replace isMobileMenuOpen
    this.isMobileMenuOpen = false;
    this.mobileMenuOpen = false;
    this.badge = false;
  }
  componentWillRender() {
    // make sure the deprecated props overwrite the actual ones if used
    // and show status note deprecated
    if (this.isActive !== undefined) {
      statusNote({
        tag: 'deprecated',
        message: 'Property "isActive" is deprecated. Please use the "active" property!',
        type: 'warn',
        source: this.host,
      });
    }
    if (this.isMobileMenuOpen !== false) {
      statusNote({
        tag: 'deprecated',
        message: 'Property "isMobileMenuOpen" is deprecated. Please use the "mobileMenuOpen" property!',
        type: 'warn',
        source: this.host,
      });
    }
  }
  render() {
    return (hAsync("li", { class: this.getCssClassMap() }, hAsync("a", { class: "meta-navigation__item-link", ref: this.refMobileMenuToggle ||
        this.refMobileUserMenuToggle ||
        this.refUserMenuToggle, href: this.href, onClick: this.clickLink, onKeyDown: (event) => {
        if (!this.refMobileMenuToggle) {
          return;
        }
        if (['Enter', ' ', 'Escape', 'Esc'].includes(event.key)) {
          event.preventDefault();
          this.clickLink(event);
        }
      } }, this.badge || (this.badgeLabel && this.badge) || this.badgeLabel ? (hAsync("scale-notification-badge", { label: this.badgeLabel, type: "nav-icon" }, renderIcon({
      tag: `scale-icon-${this.icon}`,
      attributes: {
        class: 'meta-navigation__item-link-icon',
        selected: this.active || this.isActive,
      },
    }))) : (renderIcon({
      tag: `scale-icon-${this.icon}`,
      attributes: {
        class: 'meta-navigation__item-link-icon',
        selected: this.active || this.isActive,
      },
    })), hAsync("span", { class: "meta-navigation__item-label" }, hAsync("slot", null)))));
  }
  getCssClassMap() {
    return classnames('meta-navigation__item', (this.active ||
      this.isActive ||
      this.mobileMenuOpen ||
      this.isMobileMenuOpen) &&
      'meta-navigation__item--selected', !!this.refMobileMenuToggle && 'mobile-menu');
  }
  get host() { return getElement$1(this); }
  static get style() { return navIconCss; }
  static get cmpMeta() { return {
    "$flags$": 4,
    "$tagName$": "scale-nav-icon",
    "$members$": {
      "isActive": [4, "is-active"],
      "active": [4],
      "href": [1],
      "clickLink": [8, "click-link"],
      "icon": [1],
      "isMobileMenuOpen": [4, "is-mobile-menu-open"],
      "mobileMenuOpen": [4, "mobile-menu-open"],
      "refMobileMenuToggle": [8, "ref-mobile-menu-toggle"],
      "refMobileUserMenuToggle": [8, "ref-mobile-user-menu-toggle"],
      "refUserMenuToggle": [8, "ref-user-menu-toggle"],
      "badge": [4],
      "badgeLabel": [2, "badge-label"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const navMainCss = "scale-nav-main{--spacing-x:var(--scl-font-size-16);--color:var(--scl-color-text-standard);--color-hover:var(--scl-color-primary-hover);--color-active:var(--scl-color-primary-hover);--color-selected:var(--scl-color-primary);--font-size:var(--scl-font-variant-body-large-size);--font-weight:var(--scl-font-weight-extrabold);--line-height:var(--scl-font-line-height-120)}.main-navigation__item{height:100%;padding-left:var(--spacing-x);padding-right:var(--spacing-x)}.main-navigation__item:has(a[href]){cursor:pointer}.main-navigation__item-link-text{white-space:nowrap}.main-navigation__item.mega-menu--visible .mega-menu{display:block}.main-navigation__item.mega-menu--visible .mega-menu__wrapper{pointer-events:visible}.main-navigation__item .main-navigation__item-link{display:flex;height:100%;color:var(--color);font-size:var(--font-size);font-weight:var(--font-weight);line-height:var(--line-height);transition:color, border 0.2s ease-in-out;align-items:center;text-decoration:none}.main-navigation__item:hover .main-navigation__item-link{color:var(--color-hover)}.main-navigation__item:hover .main-navigation__item-link-text{border-bottom:2px solid var(--color-hover);margin-bottom:-2px;height:calc(100% - 4px);display:flex;align-items:center}.main-navigation__item:active .main-navigation__item-link{color:var(--color-active)}.main-navigation__item:active .main-navigation__item-link-text{border-bottom:2px solid var(--color-active);margin-bottom:-2px;height:calc(100% - 4px);display:flex;align-items:center}.main-navigation__item.selected .main-navigation__item-link{color:var(--color-selected)}.main-navigation__item.mega-menu--visible .main-navigation__item-link{color:var(--color-selected)}.main-navigation__item.selected .main-navigation__item-link-text{border-bottom:2px solid var(--color-selected);margin-bottom:-2px;height:calc(100% - 4px);display:flex;align-items:center}.main-navigation__item.mega-menu--visible .main-navigation__item-link-text{border-bottom:2px solid var(--color-selected);margin-bottom:-2px;height:calc(100% - 4px);display:flex;align-items:center}.sr-only{position:absolute;left:-10000px;overflow:hidden}";

class NavMain {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    // DEPRECATED - megaMenuVisible should replace isMegaMenuVisible
    this.isMegaMenuVisible = false;
    /** (optional) if this mega-menu is visible */
    this.megaMenuVisible = false;
    /** (optional) href value */
    this.href = 'javascript:void(0);';
  }
  componentWillLoad() {
    this.hasPopup =
      this.popup || !!this.hostElement.querySelector('app-mega-menu');
  }
  componentWillRender() {
    // make sure the deprecated props overwrite the actual ones if used
    // and show status note deprecated
    if (this.isMegaMenuVisible !== false) {
      statusNote({
        tag: 'deprecated',
        message: 'Property "isMegaMenuVisible" is deprecated. Please use the "megaMenuVisible" property!',
        type: 'warn',
        source: this.hostElement,
      });
    }
    if (this.isActive !== undefined) {
      statusNote({
        tag: 'deprecated',
        message: 'Property "isActive" is deprecated. Please use the "active" property!',
        type: 'warn',
        source: this.hostElement,
      });
    }
  }
  render() {
    return (hAsync(Host$1, null, hAsync("li", { class: this.getCssClassMap() }, hAsync("a", { class: "main-navigation__item-link", href: this.href, "aria-current": this.active || this.isActive ? 'true' : 'false', "aria-haspopup": this.hasPopup ? 'true' : 'false', onClick: this.clickLink }, hAsync("span", { class: "main-navigation__item-link-text" }, this.name), (this.active || this.isActive) && (hAsync("span", { class: "sr-only" }, "active"))), hAsync("slot", null))));
  }
  getCssClassMap() {
    return classnames('main-navigation__item', (this.megaMenuVisible || this.isMegaMenuVisible) && 'mega-menu--visible', (this.active || this.isActive) && 'selected');
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return navMainCss; }
  static get cmpMeta() { return {
    "$flags$": 4,
    "$tagName$": "scale-nav-main",
    "$members$": {
      "isActive": [4, "is-active"],
      "active": [4],
      "popup": [4],
      "isMegaMenuVisible": [4, "is-mega-menu-visible"],
      "megaMenuVisible": [4, "mega-menu-visible"],
      "href": [1],
      "name": [1],
      "clickLink": [8, "click-link"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const navSegmentCss = "scale-nav-segment{--transition:all 0.2s ease-in-out;--color:var(--scl-color-white);--spacing-y:var(--scl-spacing-4);--font-size:var(--scl-font-size-14);--font-weight:var(--scl-font-weight-extrabold);--line-height:var(--scl-font-line-height-114);--border-bottom:1px solid var(--scl-color-white)}.sr-only{position:absolute;left:-10000px;overflow:hidden}.segment-navigation__item{list-style:none}.segment-navigation__item-link{color:var(--color);padding:var(--spacing-y) 0;font-size:var(--font-size);font-weight:var(--font-weight);line-height:var(--line-height);transition:var(--transition);text-decoration:none}.segment-navigation__item-link:hover,.segment-navigation__item-link.active{border-bottom:var(--border-bottom);transition:var(--transition)}";

class NavSegment {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) href value */
    this.href = 'javascript:void(0);';
  }
  componentWillRender() {
    // make sure the deprecated props overwrite the actual ones if used
    // and show status note deprecated
    if (this.isActive !== undefined) {
      statusNote({
        tag: 'deprecated',
        message: 'Property "isActive" is deprecated. Please use the "active" property!',
        type: 'warn',
        source: this.host,
      });
    }
  }
  render() {
    return (hAsync("li", { class: this.getCssClassMap() }, hAsync("a", { class: classnames('segment-navigation__item-link', (this.active || this.isActive) && 'active'), href: this.href, onFocus: () => {
        window.scrollTo({ top: 0 });
      }, "aria-current": this.active || this.isActive ? 'true' : 'false' }, hAsync("slot", null), (this.active || this.isActive) && (hAsync("span", { class: "sr-only" }, "active")))));
  }
  getCssClassMap() {
    return classnames('segment-navigation__item');
  }
  get host() { return getElement$1(this); }
  static get style() { return navSegmentCss; }
  static get cmpMeta() { return {
    "$flags$": 4,
    "$tagName$": "scale-nav-segment",
    "$members$": {
      "isActive": [4, "is-active"],
      "active": [4],
      "href": [1]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const iconCss$_ = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class NavigationCircleTopUp {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M19.25 4.75a10.255 10.255 0 10-14.506 14.5A10.255 10.255 0 0019.25 4.75zm-4.3 9L12 10.6l-2.95 3.16-1.1-1L12 8.4l4.05 4.34z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M4.2 4.2c4.3-4.25 11.3-4.25 15.6 0 4.25 4.3 4.25 11.3 0 15.6-2.15 2.15-5 3.2-7.8 3.2s-5.65-1.1-7.8-3.2C-.05 15.5-.05 8.5 4.2 4.2zm14.55 1.1C15.05 1.6 9 1.6 5.3 5.3S1.6 15 5.25 18.7c3.7 3.7 9.75 3.7 13.45 0s3.7-9.7.05-13.4zM12 8.4l4.05 4.35c.25.3.25.75-.05 1.05-.3.25-.75.25-1.05-.05L12 10.6l-2.95 3.15c-.25.3-.75.35-1.05.05a.725.725 0 01-.05-1.05z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$_; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-navigation-circle-top-up",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$Z = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class NavigationCollapseDown {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 17.83l-9-9a1.252 1.252 0 011.77-1.77L12 14.29l7.235-7.235A1.25 1.25 0 0121 8.825z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M20.65 7.4c-.3-.3-.75-.3-1.05 0L12 15 4.4 7.4c-.3-.3-.75-.3-1.05 0s-.3.75 0 1.05L12 17.1l8.65-8.65c.3-.25.3-.75 0-1.05z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$Z; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-navigation-collapse-down",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$Y = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class NavigationCollapseUp {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M20.12 17.31c-.332.001-.65-.13-.885-.365L12 9.71l-7.235 7.235A1.25 1.25 0 113 15.175l9-9 9 9a1.26 1.26 0 010 1.77c-.233.234-.55.365-.88.365z" }))) : (hAsync("g", null, hAsync("path", { d: "M20.1 16.8c-.2 0-.4-.05-.55-.2L12 9l-7.6 7.6c-.3.3-.75.3-1.05 0s-.3-.75 0-1.05L12 6.9l8.65 8.65c.3.3.3.75 0 1.05-.15.15-.35.2-.55.2z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$Y; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-navigation-collapse-up",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$X = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class NavigationExternalLink {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M13.355 3l2.585 2.585-6.835 6.835a1.75 1.75 0 002.475 2.475l6.835-6.835L21 10.645V18a3 3 0 01-3 3H6a3 3 0 01-3-3V3h10.355zm9.3-1.655L21 9.24l-2.585-2.595-7.54 7.54a.74.74 0 01-.53.22.725.725 0 01-.53-.22.745.745 0 010-1.06l7.54-7.53L14.76 3l7.895-1.655z" }))) : (hAsync("g", null, hAsync("path", { d: "M12.65 3l1.5 1.5H4.5V18c0 .85.65 1.5 1.5 1.5h12c.85 0 1.5-.65 1.5-1.5V9.85l1.5 1.5V18c0 1.65-1.35 3-3 3H6c-1.65 0-3-1.35-3-3V3zM22.7 1.35l-1.65 7.9-2.6-2.6-7.55 7.55c-.15.15-.35.2-.55.2s-.4-.05-.55-.2c-.3-.3-.3-.75 0-1.05l7.55-7.55-2.6-2.6 7.95-1.65z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$X; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-navigation-external-link",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$W = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class NavigationInternalLink {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M18.525 3L13.07 8.44 9.875 5.245 9.5 7.055 7.865 14.95l-.315 1.5 1.5-.315 7.895-1.635 1.81-.39-3.195-3.195L21 5.5V18a3 3 0 01-3 3H6a3 3 0 01-3-3V3h15.525zm2.63-.906c.2 0 .39.08.53.221a.745.745 0 010 1.06l-7.54 7.53L16.74 13.5l-7.895 1.655L10.5 7.26l2.585 2.595 7.54-7.54a.745.745 0 01.53-.221z" }))) : (hAsync("g", null, hAsync("path", { d: "M17.8 3l-1.5 1.5H4.5V18c0 .85.65 1.5 1.5 1.5h12c.85 0 1.5-.65 1.5-1.5V7.7L21 6.2V18c0 1.65-1.35 3-3 3H6c-1.65 0-3-1.35-3-3V3zm2.85-.7c.3-.3.75-.3 1.05 0s.3.8 0 1.05l-7.55 7.55 2.6 2.6-7.9 1.65 1.65-7.9 2.6 2.6z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$W; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-navigation-internal-link",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$V = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class NavigationLeft {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M16 20.75a1.26 1.26 0 01-.775-.25L4.5 12l10.725-8.5a1.265 1.265 0 111.55 2L8.5 12l8.275 6.5A1.25 1.25 0 0116 20.75z" }))) : (hAsync("g", null, hAsync("path", { d: "M15.55 20.1L5.3 12l10.25-8.1c.35-.25.8-.2 1.05.1.25.35.2.8-.1 1.05L7.7 12l8.75 6.9c.35.25.4.75.1 1.05-.2.35-.7.4-1 .15z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$V; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-navigation-left",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$U = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class NavigationLocation {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M17.76 2.945A8.145 8.145 0 004.955 12.79l5.545 9.54a1.75 1.75 0 003.03 0l5.515-9.54a8.14 8.14 0 00-1.285-9.845zM12 11.5a3 3 0 110-6 3 3 0 010 6z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M12 .55c2.1 0 4.15.8 5.75 2.4a8.17 8.17 0 011.3 9.85l-5.55 9.55c-.3.55-.9.85-1.5.85-.55 0-1.15-.25-1.5-.85L4.95 12.8a8.17 8.17 0 011.3-9.85C7.85 1.35 9.9.55 12 .55zm0 1.5c-1.8 0-3.45.7-4.7 1.95a6.663 6.663 0 00-1.05 8.05l5.55 9.55c.05.05.1.1.2.1s.15 0 .2-.1l5.55-9.55c1.5-2.6 1.1-5.9-1.05-8.05A6.577 6.577 0 0012 2.05zm0 3.45a3 3 0 110 6 3 3 0 010-6z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$U; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-navigation-location",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$T = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class NavigationMyLocation {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M12 1a.75.75 0 01.75.75v1.79a8.5 8.5 0 017.71 7.71h1.79a.75.75 0 110 1.5h-1.79a8.5 8.5 0 01-7.71 7.71v1.79a.75.75 0 11-1.5 0v-1.79a8.5 8.5 0 01-7.71-7.71H1.75a.75.75 0 110-1.5h1.79a8.5 8.5 0 017.71-7.71V1.75A.75.75 0 0112 1zm0 9a2 2 0 100 4 2 2 0 000-4z" }))) : (hAsync("g", null, hAsync("path", { d: "M12 1c.4 0 .75.35.75.75v1.8c4.1.35 7.35 3.6 7.7 7.7h1.8c.4 0 .75.35.75.75s-.35.75-.75.75h-1.8c-.35 4.1-3.6 7.35-7.7 7.7v1.8c0 .4-.35.75-.75.75s-.75-.35-.75-.75v-1.8c-4.1-.35-7.35-3.6-7.7-7.7h-1.8c-.4 0-.75-.35-.75-.75s.35-.75.75-.75h1.8c.35-4.1 3.6-7.35 7.7-7.7v-1.8c0-.4.35-.75.75-.75zm0 4c-3.85 0-7 3.15-7 7s3.15 7 7 7 7-3.15 7-7-3.15-7-7-7zm0 5a2 2 0 110 4 2 2 0 010-4z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$T; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-navigation-my-location",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$S = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class NavigationRight {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M8 20.75a1.25 1.25 0 01-.775-2.25L15.5 12 7.225 5.5a1.265 1.265 0 111.55-2L19.5 12 8.775 20.5a1.26 1.26 0 01-.775.25z" }))) : (hAsync("g", null, hAsync("path", { d: "M7.4 19.95c-.25-.35-.2-.8.1-1.05l8.8-6.9-8.75-6.9a.691.691 0 01-.1-1.05c.25-.3.75-.4 1.05-.1L18.7 12 8.45 20.1c-.3.25-.8.2-1.05-.15z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$S; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-navigation-right",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const appNavigationSectorMobileCss = "app-navigation-sector-mobile{--border-bottom:1px solid #efefef;--color:var(--scl-color-text-standard);--font-weight:var(--scl-font-weight-bold);--font-size:var(--scl-font-size-16);--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);--border-bottom-selected:1px solid var(--scl-color-primary);--color-selected:var(--scl-color-primary);width:100%}.sector-navigation-mobile{display:flex;width:100%;list-style:none;padding:0;margin:0;border-bottom:var(--border-bottom)}.sector-navigation-mobile__item{width:100%}.sector-navigation-mobile__item-link{color:var(--color);text-decoration:none;font-weight:var(--font-weight);font-size:var(--font-size);width:100%;height:54px;display:flex;align-items:center;justify-content:center;transition:var(--transition)}.sector-navigation-mobile__item-link--selected{border-bottom:var(--border-bottom-selected);color:var(--color-selected);transition:var(--transition)}";

class NavigationSectorMobile {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    // @ts-ignore
    this.selected = this.navigation
      ? // @ts-ignore
        this.navigation.find(({ id }) => id === this.activeSectorId) ||
          // @ts-ignore
          this.navigation[0]
      : {};
  }
  handleActiveSegment(newValue) {
    this.selected =
      this.navigation.find(({ id }) => id === newValue) || this.navigation[0];
  }
  handleSelected(event, item) {
    this.selected = item;
    if (typeof item.onClick === 'function') {
      item.onClick(event);
    }
  }
  render() {
    return (hAsync("ul", { class: "sector-navigation-mobile" }, (this.navigation || []).map((item) => (hAsync("li", { class: "sector-navigation-mobile__item" }, hAsync("a", { class: `sector-navigation-mobile__item-link${this.selected.id === item.id
        ? ' sector-navigation-mobile__item-link--selected'
        : ''}`, href: item.href || 'javascript:void(0);', onClick: (event) => this.handleSelected(event, item), onKeyDown: (event) => {
        if (['Escape', 'Esc'].includes(event.key)) {
          this.hide();
        }
      }, "aria-current": this.selected.id === item.id ? 'true' : 'false' }, item.name, this.selected.id === item.id && (hAsync("span", { class: "sr-only" }, "active"))))))));
  }
  static get watchers() { return {
    "activeSectorId": ["handleActiveSegment"]
  }; }
  static get style() { return appNavigationSectorMobileCss; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "app-navigation-sector-mobile",
    "$members$": {
      "hide": [16],
      "navigation": [16],
      "activeSectorId": [1, "active-sector-id"],
      "selected": [32]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const iconCss$R = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class NavigationStart {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12.19 22.87l-2.56-8.5-8.5-2.56a.05.05 0 010-.09l20.13-9.045a.05.05 0 01.065.065L12.28 22.88a.05.05 0 01-.09-.01z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M21.85 2.15c-.25-.25-.6-.3-.9-.15L.8 11.05c-.3.15-.5.45-.5.8s.25.6.55.7L8.95 15l2.45 8.1c.1.3.4.55.7.55h.05c.3 0 .6-.2.75-.45L22 3.05c.15-.3.1-.65-.15-.9zm-9.5 18.7l-2.15-7.1-7.05-2.1 16.75-7.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$R; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-navigation-start",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$Q = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class NavigationTopUp {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M20.12 17.31c-.332.001-.65-.13-.885-.365L12 9.71l-7.235 7.235A1.25 1.25 0 113 15.175l9-9 9 9a1.26 1.26 0 010 1.77c-.233.234-.55.365-.88.365z" }))) : (hAsync("g", null, hAsync("path", { d: "M20.65 15.55L12 6.9l-8.65 8.65c-.3.3-.3.75 0 1.05s.75.3 1.05 0L12 9l7.6 7.6c.3.3.75.3 1.05 0s.3-.8 0-1.05z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$Q; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-navigation-top-up",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const notificationBadgeCss = "/*!@:host*/.sc-scale-notification-badge-h{--padding-type-text-after-badge-slot:0 0 0 12px;--padding-type-icon-after-badge-slot:0 0 0 7px;--background-color-circle:var(--scl-color-primary);--color-circle:var(--scl-color-white);--font-size-circle:12px;--font-weight-circle:bold;--border-radius-circle:20px;--color-notification-badge-border-focus:#009de0;--color-notification-badge-border-hover:var(--scl-color-primary-hover);--line-width-notification-badge-border-focus:2px;--padding-notification-badge-border:8px 5px 0 5px;--margin-notification-badge-border:-8px -5px 0 -5px}/*!@.notification-badge-border*/.notification-badge-border.sc-scale-notification-badge{display:inline-block;border:var(--line-width-notification-badge-border-focus) solid transparent;padding:var(--padding-notification-badge-border);margin:var(--margin-notification-badge-border)}/*!@.notification-badge-border:hover*/.notification-badge-border.sc-scale-notification-badge:hover{color:var(--color-notification-badge-border-hover);cursor:pointer}/*!@.notification-badge-border:focus*/.notification-badge-border.sc-scale-notification-badge:focus{border:var(--line-width-notification-badge-border-focus) solid\n    var(--color-notification-badge-border-focus);outline:none;padding:var(--padding-notification-badge-border);border-radius:3px}/*!@.notification-badge*/.notification-badge.sc-scale-notification-badge{display:flex;align-items:center}/*!@.notification-badge__wrapper*/.notification-badge__wrapper.sc-scale-notification-badge{text-decoration:none;position:relative;display:inline-block;justify-content:center}/*!@.notification-badge--nav-icon .notification-badge__wrapper*/.notification-badge--nav-icon.sc-scale-notification-badge .notification-badge__wrapper.sc-scale-notification-badge{margin-bottom:-5px}/*!@.notification-badge__circle*/.notification-badge__circle.sc-scale-notification-badge{display:flex;position:absolute;font-size:var(--font-size-circle);font-weight:var(--font-weight-circle);border-radius:var(--border-radius-circle);background-color:var(--background-color-circle);color:var(--color-circle);align-items:center;justify-content:center}/*!@.notification-badge.notification-badge--label .notification-badge__circle*/.notification-badge.notification-badge--label.sc-scale-notification-badge .notification-badge__circle.sc-scale-notification-badge{padding:0 2px}/*!@::slotted([slot='after-badge'])*/.sc-scale-notification-badge-s>[slot='after-badge']{padding:var(--padding-type-icon-after-badge-slot)}/*!@.notification-badge.notification-badge--text ::slotted([slot='after-badge'])*/.notification-badge.notification-badge--text .sc-scale-notification-badge-s>[slot='after-badge']{padding:var(--padding-type-text-after-badge-slot)}@media (min-width: 1024px){/*!@.notification-badge.notification-badge--icon .notification-badge__circle*/.notification-badge.notification-badge--icon.sc-scale-notification-badge .notification-badge__circle.sc-scale-notification-badge{top:-4px;right:-2px;height:8px;min-width:8px}/*!@.notification-badge.notification-badge--label.notification-badge--icon\n    .notification-badge__circle*/.notification-badge.notification-badge--label.notification-badge--icon.sc-scale-notification-badge .notification-badge__circle.sc-scale-notification-badge{top:-8px;right:-5px;height:14px;min-width:10px}/*!@.notification-badge.notification-badge--nav-icon .notification-badge__circle*/.notification-badge.notification-badge--nav-icon.sc-scale-notification-badge .notification-badge__circle.sc-scale-notification-badge{top:-5px;right:4px;height:8px;min-width:8px}/*!@.notification-badge.notification-badge--label.notification-badge--nav-icon\n    .notification-badge__circle*/.notification-badge.notification-badge--label.notification-badge--nav-icon.sc-scale-notification-badge .notification-badge__circle.sc-scale-notification-badge{top:-8px;right:1px;height:14px;min-width:10px}/*!@.notification-badge.notification-badge--text .notification-badge__circle*/.notification-badge.notification-badge--text.sc-scale-notification-badge .notification-badge__circle.sc-scale-notification-badge{top:-5px;right:-10px;height:8px;min-width:8px}/*!@.notification-badge.notification-badge--label.notification-badge--text\n    .notification-badge__circle*/.notification-badge.notification-badge--label.notification-badge--text.sc-scale-notification-badge .notification-badge__circle.sc-scale-notification-badge{top:-10px;right:-15px;height:14px;min-width:10px}}@media (max-width: 1023px){/*!@.notification-badge.notification-badge--icon .notification-badge__circle*/.notification-badge.notification-badge--icon.sc-scale-notification-badge .notification-badge__circle.sc-scale-notification-badge{top:-4px;right:-1px;height:8px;min-width:8px}/*!@.notification-badge.notification-badge--label.notification-badge--icon\n    .notification-badge__circle*/.notification-badge.notification-badge--label.notification-badge--icon.sc-scale-notification-badge .notification-badge__circle.sc-scale-notification-badge{top:-6px;right:-4px;height:14px;min-width:10px}/*!@.notification-badge.notification-badge--nav-icon .notification-badge__circle*/.notification-badge.notification-badge--nav-icon.sc-scale-notification-badge .notification-badge__circle.sc-scale-notification-badge{top:0px;right:-1px;height:6px;min-width:6px}/*!@.notification-badge.notification-badge--label.notification-badge--nav-icon\n    .notification-badge__circle*/.notification-badge.notification-badge--label.notification-badge--nav-icon.sc-scale-notification-badge .notification-badge__circle.sc-scale-notification-badge{top:-3px;right:-4.5px;height:12px;min-width:8px}/*!@.notification-badge.notification-badge--text .notification-badge__circle*/.notification-badge.notification-badge--text.sc-scale-notification-badge .notification-badge__circle.sc-scale-notification-badge{top:-4px;right:-10px;height:6px;min-width:6px}/*!@.notification-badge.notification-badge--label.notification-badge--text\n    .notification-badge__circle*/.notification-badge.notification-badge--label.notification-badge--text.sc-scale-notification-badge .notification-badge__circle.sc-scale-notification-badge{top:-6px;right:-15px;height:14px;min-width:10px}}";

class NotificationBadge {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) Maximal number of characters displayed in the badge */
    this.maxCharacters = 3;
    /** (optional) Setting/Slotcontent in which the badge is used */
    this.type = 'icon';
  }
  connectedCallback() {
    statusNote({ source: this.hostElement, tag: 'beta' });
  }
  getBadgeLabel() {
    if (this.label) {
      if (!isNaN(this.label)) {
        let labelNumber = '' + this.label;
        if (labelNumber.length > this.maxCharacters) {
          const SI_SYMBOL = ['', 'k', 'M', 'G', 'T', 'P', 'E'];
          const tier = Math.floor(Math.log10(Number(this.label)) / 3) || 0;
          if (tier > 0) {
            const scaled = Number(this.label) / Math.pow(10, tier * 3);
            labelNumber = scaled.toFixed(1).replace('.0', '') + SI_SYMBOL[tier];
          }
        }
        return labelNumber;
      }
      return this.label;
    }
  }
  getRender() {
    return (hAsync("div", { class: this.getCssClassMap() }, hAsync("a", { class: "notification-badge__wrapper" }, hAsync("slot", null), hAsync("span", { class: "notification-badge__circle" }, this.getBadgeLabel())), hAsync("slot", { name: "after-badge" })));
  }
  render() {
    return (hAsync(Host$1, null, this.type !== 'nav-icon' ? (hAsync("div", { class: "notification-badge-border", tabIndex: 0, onClick: this.clickHandler }, this.getRender())) : (this.getRender())));
  }
  getCssClassMap() {
    return classnames(`notification-badge`, this.label && `notification-badge--label`, this.type && `notification-badge--${this.type}`);
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return notificationBadgeCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-notification-badge",
    "$members$": {
      "label": [2],
      "maxCharacters": [2, "max-characters"],
      "type": [1],
      "clickHandler": [8, "click-handler"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const notificationMessageCss = "/*!@:host*/.sc-scale-notification-message-h{--width:100%;--radius:var(--scl-radius-8);--border:1px solid var(--scl-color-white);--background-error:hsla(353.79999999999995, 100%, 88.6%, 0.35);--background-warning:hsla(33.5, 100%, 75.1%, 0.3);--background-informational:hsla(190.20000000000005, 100%, 92%, 0.75);--background-success:hsl(98.80000000000001, 49.7%, 61%, 0.2)}/*!@.notification-message*/.notification-message.sc-scale-notification-message{border:var(--border);border-radius:var(--radius);width:var(--width);position:relative}/*!@.notification-message--variant-error*/.notification-message--variant-error.sc-scale-notification-message{background:var(--background-error)}/*!@.notification-message--variant-warning*/.notification-message--variant-warning.sc-scale-notification-message{background-color:var(--background-warning)}/*!@.notification-message--variant-informational*/.notification-message--variant-informational.sc-scale-notification-message{background-color:var(--background-informational)}/*!@.notification-message--variant-success*/.notification-message--variant-success.sc-scale-notification-message{background-color:var(--background-success)}/*!@.notification-message__heading*/.notification-message__heading.sc-scale-notification-message{margin:14px 48px 14px 48px;font-weight:var(--scl-font-weight-bold);line-height:var(--scl-font-line-height-125)}/*!@.notification-message__text*/.notification-message__text.sc-scale-notification-message{margin:8px 48px 15px 48px}/*!@::slotted(*)*/.sc-scale-notification-message-s>*{font-weight:var(--scl-font-weight-regular)}/*!@.notification-message__icon-close*/.notification-message__icon-close.sc-scale-notification-message{position:absolute;top:9.5px;right:13.5px;color:black}/*!@.notification-message__icon-close svg*/.notification-message__icon-close.sc-scale-notification-message svg.sc-scale-notification-message{height:19px;width:19px;padding:6.5px;border-radius:20%}/*!@.notification-message__icon-close:hover svg*/.notification-message__icon-close.sc-scale-notification-message:hover svg.sc-scale-notification-message{background-color:white;color:var(--scl-color-primary-hover)}/*!@.notification-message__icon-success*/.notification-message__icon-success.sc-scale-notification-message{position:absolute;top:15px;left:17px;height:20px;width:20px;color:var(--scl-color-background-success)}/*!@.notification-message__icon-error*/.notification-message__icon-error.sc-scale-notification-message{position:absolute;top:13px;left:17px;height:20px;width:20px;color:var(--scl-color-background-error)}/*!@.notification-message__icon-information*/.notification-message__icon-information.sc-scale-notification-message{position:absolute;top:13px;left:17px;height:20px;width:20px;color:var(--scl-color-text-info)}@media screen and (forced-colors: active), (-ms-high-contrast: active){/*!@.notification-message__icon-close*/.notification-message__icon-close.sc-scale-notification-message{color:white}}";

const TIMEOUT = 3000;
class NotificationMessage {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.variant = 'informational';
    this.dismissible = false;
    this.timeout = false;
    this.close = () => {
      this.opened = false;
    };
  }
  componentDidLoad() {
    this.hasSlotText = !!this.hostElement.querySelector("p[slot='text']");
  }
  componentDidRender() {
    if (this.timeout) {
      const timeout = this.timeout === true ? TIMEOUT : this.timeout;
      setTimeout(this.close, timeout);
    }
  }
  connectedCallback() {
    statusNote({ source: this.hostElement, type: 'warn' });
  }
  async open() {
    this.opened = true;
  }
  handleIcons() {
    if (this.variant) {
      switch (this.variant) {
        case 'success':
          return (hAsync("scale-notification-message-svg", { class: "notification-message__icon-success", "accessibility-title": "success" }));
        case 'informational':
          return (hAsync("scale-icon-alert-information", { class: "notification-message__icon-information", "accessibility-title": "information" }));
        case 'error':
          return (hAsync("scale-icon-alert-warning", { class: "notification-message__icon-error", "accessibility-title": "error" }));
        case 'warning':
          return (hAsync("scale-icon-alert-information", { class: "notification-message__icon-information", color: "#AE461C", "accessibility-title": "information" }));
      }
    }
    return;
  }
  render() {
    if (!this.opened) {
      return null;
    }
    return (hAsync(Host$1, null, hAsync("div", { part: this.getBasePartMap(), class: this.getCssClassMap(), tabindex: "0" }, hAsync("div", { part: "container", class: "notification-message__container" }, this.handleIcons(), hAsync("div", { part: "heading", class: "notification-message__heading" }, hAsync("slot", null, "\u2003"), this.dismissible && (hAsync("scale-icon-action-circle-close", { tabindex: "0", class: "notification-message__icon-close", onClick: () => {
        this.close();
      }, onKeyDown: (e) => {
        if (e.key === 'Enter') {
          this.close();
        }
      }, "accessibility-title": "close" }))), this.hasSlotText && (hAsync("div", { part: "text", class: "notification-message__text" }, hAsync("slot", { name: "text" })))))));
  }
  getBasePartMap() {
    return this.getCssOrBasePartMap('basePart');
  }
  getCssClassMap() {
    return this.getCssOrBasePartMap('css');
  }
  getCssOrBasePartMap(mode) {
    const name = 'notification-message';
    const prefix = mode === 'basePart' ? '' : `${name}--`;
    return classnames(name, this.variant && `${prefix}variant-${this.variant}`);
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return notificationMessageCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-notification-message",
    "$members$": {
      "variant": [1],
      "dismissible": [4],
      "opened": [516],
      "timeout": [8],
      "open": [64]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["opened", "opened"]]
  }; }
}

class NotificationMessageSvg {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), this.selected ? (hAsync("g", { fill: "#187431", "fill-rule": "nonzero" }, hAsync("path", { d: "M10 .833a9.167 9.167 0 1 0 0 18.334A9.167 9.167 0 0 0 10 .833Zm0 17.084c-4.365 0-7.917-3.552-7.917-7.917S5.635 2.083 10 2.083 17.917 5.635 17.917 10 14.365 17.917 10 17.917Z" }), hAsync("path", { d: "M13.725 6.863 8.889 11.7 6.275 9.086a.625.625 0 1 0-.883.884l3.497 3.497 5.72-5.72a.625.625 0 1 0-.884-.884Z" }))) : (hAsync("g", { fill: "#187431", "fill-rule": "nonzero" }, hAsync("path", { d: "M10 .833a9.167 9.167 0 1 0 0 18.334A9.167 9.167 0 0 0 10 .833Zm0 17.084c-4.365 0-7.917-3.552-7.917-7.917S5.635 2.083 10 2.083 17.917 5.635 17.917 10 14.365 17.917 10 17.917Z" }), hAsync("path", { d: "M13.725 6.863 8.889 11.7 6.275 9.086a.625.625 0 1 0-.883.884l3.497 3.497 5.72-5.72a.625.625 0 1 0-.884-.884Z" }))))));
  }
  get hostElement() { return getElement$1(this); }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-notification-message-svg",
    "$members$": {
      "size": [514],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const paginationCss = "/*!@:host*/.sc-scale-pagination-h{--color:var(--scl-color-black);--radius:var(--scl-radius-12);--font-size:var(--scl-font-size-12);--border:1px solid var(--scl-color-grey-10);--color-hover:var(--scl-color-primary-hover);--color-active:var(--scl-color-primary-active);--color-button:var(--scl-color-grey-10);--border-button:var(--border);--box-shadow-focus:inset 0 0 0 2px var(--scl-color-focus);--radius-first-prompt:var(--radius) 0 0 var(--radius);--radius-last-prompt:0 var(--radius) var(--radius) 0;--radius-first-prompt-stack:0 0 0 var(--radius);--radius-last-prompt-stack:0 0 var(--radius) 0;--stroke-svg:var(--scl-color-black);--stroke-svg-high-contrast:var(--scl-color-white);--width-button:42px;--padding-info:var(--scl-spacing-8);--height-button:56px;--height-button-small:40px;--line-height-info:calc(var(--height-button) - 2px);--line-height-info-small:calc(var(--height-button-small) - 2px)}/*!@.pagination*/.pagination.sc-scale-pagination{display:flex;overflow:auto;flex-wrap:wrap}/*!@.pagination__info,\n.pagination__info-responsive*/.pagination__info.sc-scale-pagination,.pagination__info-responsive.sc-scale-pagination{color:var(--color);text-align:center;font-size:var(--font-size);line-height:var(--line-height-info);padding:0 var(--padding-info);border:var(--border);flex-shrink:0;border-left:0;border-right:0;white-space:nowrap;order:1}/*!@.pagination__info-responsive*/.pagination__info-responsive.sc-scale-pagination{display:none}/*!@.pagination--small .pagination__info,\n.pagination--small .pagination__info-responsive*/.pagination--small.sc-scale-pagination .pagination__info.sc-scale-pagination,.pagination--small.sc-scale-pagination .pagination__info-responsive.sc-scale-pagination{line-height:var(--line-height-info-small)}/*!@.pagination__info span,\n.pagination__info-responsive span*/.pagination__info.sc-scale-pagination span.sc-scale-pagination,.pagination__info-responsive.sc-scale-pagination span.sc-scale-pagination{font-weight:bold}/*!@button*/button.sc-scale-pagination{display:flex;flex-shrink:0;justify-content:center;align-items:center;padding:0;margin:0;height:var(--height-button);width:var(--width-button);color:var(--color-button);background:none;border:var(--border-button)}/*!@.pagination--small button*/.pagination--small.sc-scale-pagination button.sc-scale-pagination{height:var(--height-button-small)}/*!@button:focus*/button.sc-scale-pagination:focus{outline:none;box-shadow:var(--box-shadow-focus)}/*!@.pagination__first-prompt*/.pagination__first-prompt.sc-scale-pagination{border-radius:var(--radius-first-prompt);margin-right:-1px}/*!@.pagination__last-prompt*/.pagination__last-prompt.sc-scale-pagination{border-radius:var(--radius-last-prompt);margin-left:-1px;order:2}/*!@.pagination__next-prompt*/.pagination__next-prompt.sc-scale-pagination{order:2}/*!@button svg*/button.sc-scale-pagination svg.sc-scale-pagination{display:block}/*!@button:not(:disabled)*/button.sc-scale-pagination:not(:disabled){cursor:pointer}/*!@button:not(:disabled) svg*/button.sc-scale-pagination:not(:disabled) svg.sc-scale-pagination{stroke:var(--stroke-svg)}/*!@button:not(:disabled):hover*/button.sc-scale-pagination:not(:disabled):hover{border-color:var(--color-hover);z-index:1}/*!@button:not(:disabled):hover svg*/button.sc-scale-pagination:not(:disabled):hover svg.sc-scale-pagination{stroke:var(--color-hover)}/*!@button:not(:disabled):active*/button.sc-scale-pagination:not(:disabled):active{border-color:var(--color-active);z-index:1}/*!@button:not(:disabled):active svg*/button.sc-scale-pagination:not(:disabled):active svg.sc-scale-pagination{stroke:var(--color-active)}/*!@.pagination--hide-borders .pagination__info,\n.pagination--hide-borders .pagination__info-responsive*/.pagination--hide-borders.sc-scale-pagination .pagination__info.sc-scale-pagination,.pagination--hide-borders.sc-scale-pagination .pagination__info-responsive.sc-scale-pagination{border:0}/*!@.pagination--hide-borders .pagination__info-responsive*/.pagination--hide-borders.sc-scale-pagination .pagination__info-responsive.sc-scale-pagination{border-bottom:var(--border)}/*!@.pagination--hide-borders button*/.pagination--hide-borders.sc-scale-pagination button.sc-scale-pagination{border-radius:0;border-top-width:0;border-bottom-width:0}/*!@.pagination--hide-borders button:not(:disabled):hover*/.pagination--hide-borders.sc-scale-pagination button.sc-scale-pagination:not(:disabled):hover{border-width:1px;border-color:var(--color-hover)}/*!@.pagination__button-wrapper*/.pagination__button-wrapper.sc-scale-pagination{display:flex}@media screen and (forced-colors: active), (-ms-high-contrast: active){/*!@button:not(:disabled) svg*/button.sc-scale-pagination:not(:disabled) svg.sc-scale-pagination{stroke:var(--stroke-svg-high-contrast)}}@media screen and (max-width: 639px){/*!@:host*/.sc-scale-pagination-h{width:100%}/*!@.pagination*/.pagination.sc-scale-pagination{flex-direction:column}/*!@.pagination__info-responsive*/.pagination__info-responsive.sc-scale-pagination{display:initial;order:0;overflow:auto;border-left:var(--border);border-right:var(--border);border-bottom:0;border-radius:var(--radius) var(--radius) 0 0;line-height:var(--line-height-info-small)}/*!@.pagination__info*/.pagination__info.sc-scale-pagination{display:none;line-height:var(--line-height-info-small)}/*!@.pagination__first-prompt*/.pagination__first-prompt.sc-scale-pagination{border-radius:var(--radius-first-prompt-stack)}/*!@.pagination__last-prompt*/.pagination__last-prompt.sc-scale-pagination{border-radius:var(--radius-last-prompt-stack)}/*!@.pagination__next-prompt*/.pagination__next-prompt.sc-scale-pagination{margin-left:-1px}/*!@button*/button.sc-scale-pagination{flex:1;height:var(--height-button-small)}/*!@.pagination--hide-borders .pagination__first-prompt*/.pagination--hide-borders.sc-scale-pagination .pagination__first-prompt.sc-scale-pagination{border-left-width:0}/*!@.pagination--hide-borders .pagination__last-prompt*/.pagination--hide-borders.sc-scale-pagination .pagination__last-prompt.sc-scale-pagination{border-right-width:0}}";

/*
  TODO
  ====
  [ ] Support pages text as well as elements eg `page 1 / 5` vs `1 - 12 / 100`
  [ ] Add Pages drop-down (awaiting menu and menu-list components)
  [ ] Add text input option for choosing currernt page/start element
  [ ] Add events for specific button interactions (first, prev, next, last)
  [ ] Add :focus-visible support to avoid focus upon click in chrome
  [ ] Add accessibility attributes
  [ ] Add icons to the icon components ?
*/
const name = 'pagination';
class Pagination {
  /* 6. Lifecycle Events (call order) */
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.scalePagination = createEvent$1(this, "scale-pagination", 7);
    this.scalePaginationLegacy = createEvent$1(this, "scalePagination", 7);
    /* 2. State Variables (alphabetical) */
    /* 3. Public Properties (alphabetical) */
    /** (optional) Deprecated; hideBorder should replace hideBorders */
    this.hideBorders = false;
    /** (optional) Set to true to hide top and bottom borders */
    this.hideBorder = false;
    /** (optional) Set number of rows/elements to show per page */
    this.pageSize = 10;
    /** (optional) Index of first element to display */
    this.startElement = 0;
    /** (optional) Total number of rows/elements used to calculate page displays */
    this.totalElements = 1;
    /** @deprecated - size should replace small */
    this.small = false;
    /** (optional) size  */
    this.size = 'large';
    /** (optional) translation to 'Go to first page'  */
    this.ariaLabelFirstPage = 'Go to first page';
    /** (optional) translation to 'Go to next page'  */
    this.ariaLabelNextPage = 'Go to next page';
    /** (optional) translation to 'Go to previous page'  */
    this.ariaLabelPreviousPage = 'Go to previous page';
    /** (optional) translation to 'Go to last page'  */
    this.ariaLabelLastPage = 'Go to last page';
    /* 5. Private Properties (alphabetical) */
    /** Calculated width of largest text so buttons don't move while changing pages */
    this.maxWidth = 100;
  }
  componentWillLoad() {
    this.calculateWidth();
  }
  componentWillUpdate() { }
  componentDidRender() {
    if (this.hideBorders !== false) {
      statusNote({
        tag: 'deprecated',
        message: 'Property "hideBorders" is deprecated. Please use the "hideBorder" property!',
        type: 'warn',
        source: this.hostElement,
      });
    }
    if (this.small !== false) {
      statusNote({
        tag: 'deprecated',
        message: 'Property "small" is deprecated. Please use the "size" property!',
        type: 'warn',
        source: this.hostElement,
      });
    }
  }
  componentDidLoad() { }
  componentDidUpdate() { }
  disconnectedCallback() { }
  /* 7. Listeners */
  calculateWidth() {
    // calculate max possible width
    this.maxWidth = (this.totalElements.toString().length * 3 + 3) * 9;
  }
  /* 8. Public Methods */
  /* 9. Local Methods */
  goFirstPage() {
    this.startElement = 0;
    this.emitUpdate();
  }
  goPreviousPage() {
    // Min to prevent going below 0
    this.startElement -= Math.min(this.pageSize, this.startElement);
    this.emitUpdate();
  }
  goNextPage() {
    this.startElement += this.pageSize;
    this.emitUpdate();
  }
  goLastPage() {
    const p = this.pageSize;
    // Make sure startElement is multiple of pageSize
    this.startElement = Math.ceil((this.totalElements - p) / p) * p;
    this.emitUpdate();
  }
  emitUpdate() {
    const data = {
      startElement: this.startElement,
    };
    emitEvent$1(this, 'scalePagination', data);
  }
  /* 10. Render */
  render() {
    const total = this.totalElements;
    const start = this.startElement + 1;
    const end = Math.min(this.startElement + this.pageSize, total);
    const isAtStart = start === 1;
    const isAtEnd = end === total;
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync("div", { part: this.getBasePartMap(), class: this.getCssClassMap() }, hAsync("div", { part: "info-responsive", class: `${name}__info-responsive` }, hAsync("span", null, start, "-", end), ' ', "/ ", total), hAsync("div", { class: `${name}__button-wrapper` }, hAsync("div", { part: "info", class: `${name}__info`, style: { width: `${this.maxWidth}px` } }, hAsync("span", null, start, "-", end), ' ', "/ ", total), hAsync("button", { class: `${name}__first-prompt`, part: "first-prompt", disabled: isAtStart, onClick: () => this.goFirstPage(), "aria-label": this.ariaLabelFirstPage }, hAsync("svg", { height: "12", viewBox: "0 0 48 52", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "#cacaca" }, hAsync("path", { d: "M44.5 48.5L21.5 26L44.5 3.5M27.5 48.5L4.5 26L27.5 3.5", "stroke-width": "6", "stroke-linecap": "round" }))), hAsync("button", { class: `${name}__prev-prompt`, part: "prev-prompt", disabled: isAtStart, onClick: () => this.goPreviousPage(), "aria-label": this.ariaLabelPreviousPage }, hAsync("svg", { height: "12", viewBox: "0 0 37 52", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "#cacaca" }, hAsync("path", { d: "M33 48L6 26L33 4", "stroke-width": "7", "stroke-linecap": "round" }))), hAsync("button", { class: `${name}__next-prompt`, part: "next-prompt", disabled: isAtEnd, onClick: () => this.goNextPage(), "aria-label": this.ariaLabelNextPage }, hAsync("svg", { height: "12", viewBox: "0 0 37 52", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "#cacaca" }, hAsync("path", { d: "M4 4L31 26L4 48", "stroke-width": "7", "stroke-linecap": "round" }))), hAsync("button", { class: `${name}__last-prompt`, part: "last-prompt", disabled: isAtEnd, onClick: () => this.goLastPage(), "aria-label": this.ariaLabelLastPage }, hAsync("svg", { height: "12", viewBox: "0 0 48 52", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "#cacaca" }, hAsync("path", { d: "M3.5 3.5L26.5 26L3.5 48.5M20.5 3.5L43.5 26L20.5 48.5", "stroke-width": "6", "stroke-linecap": "round" })))))));
  }
  getBasePartMap() {
    return this.getCssOrBasePartMap('basePart');
  }
  getCssClassMap() {
    return this.getCssOrBasePartMap('css');
  }
  getCssOrBasePartMap(mode) {
    const prefix = mode === 'basePart' ? '' : `${name}--`;
    return classnames(name, (this.hideBorder || this.hideBorders) && `${prefix}hide-borders`, (this.size === 'small' || this.small) && `${prefix}small`);
  }
  get hostElement() { return getElement$1(this); }
  static get watchers() { return {
    "totalElements": ["calculateWidth"]
  }; }
  static get style() { return paginationCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-pagination",
    "$members$": {
      "hideBorders": [4, "hide-borders"],
      "hideBorder": [4, "hide-border"],
      "pageSize": [2, "page-size"],
      "startElement": [2, "start-element"],
      "totalElements": [2, "total-elements"],
      "styles": [1],
      "small": [4],
      "size": [1],
      "ariaLabelFirstPage": [1, "aria-label-first-page"],
      "ariaLabelNextPage": [1, "aria-label-next-page"],
      "ariaLabelPreviousPage": [1, "aria-label-previous-page"],
      "ariaLabelLastPage": [1, "aria-label-last-page"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const iconCss$P = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ProcessOrderStatus {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M17.25.498A3.25 3.25 0 0118 6.91v2.73a2.235 2.235 0 010 4.22v2.73a3.25 3.25 0 01-.75 6.41l-.182-.006a3.25 3.25 0 01-.568-6.404v-2.73a2.235 2.235 0 010-4.22V6.91a3.25 3.25 0 01.75-6.412zM7.5 8.15l5.5 3.6-5.5 3.6V13H2a1.25 1.25 0 010-2.5h5.5V8.15z" }))) : (hAsync("g", null, hAsync("path", { d: "M17.25.5c1.8 0 3.25 1.45 3.25 3.25 0 1.55-1.05 2.8-2.5 3.15v2.75c.95.35 1.5 1.2 1.5 2.1s-.55 1.75-1.5 2.1v2.75c1.45.35 2.5 1.6 2.5 3.15 0 1.8-1.45 3.25-3.25 3.25S14 21.55 14 19.75c0-1.55 1.05-2.8 2.5-3.15v-2.75c-.95-.35-1.5-1.2-1.5-2.1s.55-1.75 1.5-2.1V6.9C15.05 6.55 14 5.3 14 3.75 14 1.95 15.45.5 17.25.5zm0 17.5c-.95 0-1.75.8-1.75 1.75s.8 1.75 1.75 1.75S19 20.7 19 19.75 18.2 18 17.25 18zM7.5 8.15l5.5 3.6-5.5 3.6V12.5H2c-.4 0-.75-.35-.75-.75S1.6 11 2 11h5.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$P; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-process-order-status",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$O = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ProcessProcessing {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M1.5 13.215l6.11 2.68-2 1.32a8.255 8.255 0 004.585 2.835v.01a1.25 1.25 0 01-.545 2.44 10.765 10.765 0 01-6.15-3.915l-2 1.305v-6.675zm19.394-.404A1.255 1.255 0 0122.5 14.35a10.765 10.765 0 01-3.915 6.15l1.305 2h-6.675l2.685-6.11 1.32 2a8.24 8.24 0 002.835-4.585c.073-.462.396-.845.839-.994zM10.785 1.5l-2.68 6.11-1.32-2a8.24 8.24 0 00-2.835 4.585 1.255 1.255 0 01-1.495.945A1.245 1.245 0 011.5 9.65 10.745 10.745 0 015.415 3.5l-1.305-2h6.675zm2.359.37a1.255 1.255 0 011.206-.37 10.78 10.78 0 016.15 3.915l2-1.305v6.675l-6.11-2.68 2-1.32a8.24 8.24 0 00-4.585-2.835 1.255 1.255 0 01-.661-2.08z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M20.55 13.9c.1-.4.5-.65.9-.55.4.1.65.5.5.9-.55 2.35-1.85 4.4-3.7 5.85l1.6 2.4H13.2l2.7-6.15 1.6 2.45c1.5-1.25 2.6-2.95 3.05-4.9zM1.5 13.2l6.15 2.7-2.45 1.6c1.25 1.5 2.95 2.6 4.9 3.05.4.1.65.5.55.85-.1.4-.5.65-.9.55-2.35-.55-4.4-1.85-5.85-3.7l-2.4 1.6V13.2zM13.35 2.55c.1-.4.5-.65.9-.55 2.3.5 4.4 1.85 5.8 3.7l2.45-1.55v6.65l-6.15-2.7 2.45-1.6c-1.25-1.5-2.95-2.6-4.9-3.05-.4-.1-.65-.5-.55-.9zM10.8 1.5L8.1 7.65 6.5 5.2C5 6.45 3.9 8.15 3.45 10.1A.745.745 0 112 9.75c.5-2.3 1.85-4.4 3.7-5.8L4.1 1.5h6.7z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$O; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-process-processing",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const progressBarCss = "/*!@:host*/.sc-scale-progress-bar-h{--color-error:var(--scl-color-text-error);--color-disabled:var(--scl-color-grey-50);--background:var(--scl-color-primary);--color-inner-status:var(--scl-color-background-standard);--font-size-inner-status:var(--scl-font-size-12);--font-size-status:var(--scl-font-size-12);--font-weight-status:var(--scl-font-weight-extrabold);--color-status:var(--scl-color-grey-60);--color-status-description:var(--scl-color-grey-60);--font-size-status-description:var(--scl-font-size-12);--font-weight-status-description:var(--scl-font-weight-bold);--spacing-label:var(--scl-spacing-8) 0;--border:1px solid var(--scl-color-grey-60)}/*!@.progress-bar*/.progress-bar.sc-scale-progress-bar{width:100%;max-width:30rem}/*!@.progress-bar--has-error .progress-bar__outer*/.progress-bar--has-error.sc-scale-progress-bar .progress-bar__outer.sc-scale-progress-bar{border:1px solid var(--color-error)}/*!@.progress-bar--has-error .progress-bar__status-description*/.progress-bar--has-error.sc-scale-progress-bar .progress-bar__status-description.sc-scale-progress-bar{color:var(--color-error)}/*!@.progress-bar--disabled*/.progress-bar--disabled.sc-scale-progress-bar{cursor:not-allowed;opacity:0.5}/*!@.progress-bar--disabled .progress-bar__label*/.progress-bar--disabled.sc-scale-progress-bar .progress-bar__label.sc-scale-progress-bar{color:var(--color-disabled)}/*!@.progress-bar__label*/.progress-bar__label.sc-scale-progress-bar{display:block;padding:var(--spacing-label)}/*!@.progress-bar-wrapper*/.progress-bar-wrapper.sc-scale-progress-bar{width:100%;display:flex;box-sizing:border-box;align-items:center}/*!@.progress-bar__outer*/.progress-bar__outer.sc-scale-progress-bar{width:100%;height:var(--scl-spacing-8);margin:var(--scl-spacing-8);margin-left:0;overflow:hidden;position:relative;border-radius:100px;border:var(--border)}/*!@.progress-bar__inner*/.progress-bar__inner.sc-scale-progress-bar{top:0;left:0;height:100%;display:flex;position:absolute;align-items:center;white-space:nowrap;justify-content:flex-end;animation-fill-mode:both;background:var(--background)}/*!@.progress-bar__inner-status*/.progress-bar__inner-status.sc-scale-progress-bar{color:var(--color-inner-status);padding:0 12px;font-size:var(--font-size-inner-status)}/*!@.progress-bar__status*/.progress-bar__status.sc-scale-progress-bar{display:inline-block;font-size:var(--font-size-status);font-weight:var(--font-weight-status);color:var(--color-status)}/*!@.progress-bar__icon*/.progress-bar__icon.sc-scale-progress-bar{height:16px}/*!@.progress-bar__status-description*/.progress-bar__status-description.sc-scale-progress-bar{color:var(--color-status-description);font-size:var(--font-size-status-description);font-weight:var(--font-weight-status-description)}/*!@.progress-bar__aria-live*/.progress-bar__aria-live.sc-scale-progress-bar{clip:rect(0 0 0 0);width:1px;border:0;height:1px;margin:-1px;padding:0;overflow:hidden;position:absolute}";

let i$8 = 0;
class ProgressBar {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) Progress bar busy switch */
    this.busy = false;
    /** (required) Progress bar percentage */
    this.percentage = 0;
    /** (optional) Progress bar stroke width */
    this.strokeWidth = 6;
    this.transitions = (width) => `
    @keyframes showProgress {
      from {
        width: 0;
      }
      to {
        width: ${width}%;
      }
    }
  `;
    this.progressStyle = () => {
      return {
        width: `${this.percentage}%`,
        border: '1px solid transparent',
        background: this.customColor ? this.customColor : `var(--background)`,
        animation: 'showProgress 3s ease-in-out',
      };
    };
  }
  componentWillLoad() {
    if (this.progressBarId == null) {
      this.progressBarId = 'progress-bar-' + i$8++;
    }
  }
  componentWillUpdate() { }
  disconnectedCallback() { }
  componentDidRender() {
    if (this.customColor !== undefined) {
      statusNote({
        tag: 'deprecated',
        message: `Property "customColor" is deprecated. 
          Please use css variable "--background" to set the progress bar background color;
          e.g. <scale-progress-bar percentage="20" style="--background: green"></scale-progress-bar>`,
        type: 'warn',
        source: this.hostElement,
      });
    }
  }
  render() {
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync("style", null, this.transitions(this.percentage)), hAsync("div", { part: this.getBasePartMap(), class: this.getCssClassMap() }, !!this.label && (hAsync("label", { part: "label", class: "progress-bar__label", htmlFor: this.progressBarId }, this.label)), hAsync("div", { part: "wrapper", class: "progress-bar-wrapper" }, hAsync("div", { part: "outer", class: "progress-bar__outer", style: { height: `${this.strokeWidth}px` }, role: "progressbar", "aria-valuemin": 0, "aria-valuemax": 100, "aria-valuenow": this.percentage, "aria-busy": this.busy, "aria-valuetext": `${this.percentage}%`, "aria-label": this.label, id: this.progressBarId }, hAsync("div", { part: "inner", class: "progress-bar__inner", style: this.progressStyle() }, !!this.statusInside && (hAsync("div", { part: "inner-status", class: "progress-bar__inner-status", "aria-hidden": "true" }, this.percentage, "%")))), !!this.showStatus && (hAsync("div", { part: "status", class: "progress-bar__status", "aria-hidden": "true" }, this.percentage, "%")), hAsync("slot", { name: "icon" }))), !!this.statusDescription && (hAsync("div", { part: "status-description", class: "progress-bar__status-description", role: "alert" }, this.statusDescription)), !this.mute && (hAsync("span", { "aria-live": "polite", class: "progress-bar__aria-live" }, this.percentage !== Math.round(this.percentage / 10) * 10
      ? `${Math.round(this.percentage / 10) * 10}%`
      : null))));
  }
  getBasePartMap() {
    return this.getCssOrBasePartMap('basePart');
  }
  getCssClassMap() {
    return this.getCssOrBasePartMap('css');
  }
  getCssOrBasePartMap(mode) {
    const component = 'progress-bar';
    const prefix = mode === 'basePart' ? '' : `${component}--`;
    return classnames(component, this.hasError && `${prefix}has-error`, this.disabled && `${prefix}disabled`);
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return progressBarCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-progress-bar",
    "$members$": {
      "busy": [4],
      "percentage": [2],
      "customColor": [1, "custom-color"],
      "strokeWidth": [2, "stroke-width"],
      "showStatus": [4, "show-status"],
      "icon": [1],
      "statusDescription": [1, "status-description"],
      "statusInside": [4, "status-inside"],
      "hasError": [4, "has-error"],
      "disabled": [4],
      "progressBarId": [1, "progress-bar-id"],
      "label": [1],
      "mute": [4],
      "styles": [1]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const radioButtonCss = "scale-radio-button{--color-disabled:var(--scl-color-background-disabled);--background-disabled:var(--scl-color-white);--color-error:var(--scl-color-text-error);--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);--color-primary:var(--scl-color-primary, #e20074);--color-primary-hover:var(--scl-color-primary-hover, #f90984);--color-primary-active:var(--scl-color-primary-active);--color-focus:var(--scl-color-focus);--color-text:var(--scl-color-text-standard);--transition-helper-text:var(--transition);--font-size-helper-text:var(--scl-font-size-12);--font-weight-helper-text:var(--scl-font-weight-bold);--line-height-helper-text:var(--scl-font-line-height-133);--color-helper-text:var(--scl-color-blue-70);--spacing-left-helper-text:var(--scl-spacing-24);--spacing-top-helper-text:var(--scl-spacing-4);--transition-label:var(--transition);--font-weight-label:var(--scl-font-weight-medium);--color-label:var(--color-text);--width-control:var(--scl-spacing-16);--height-control:var(--scl-spacing-16);--transition-control:var(--transition);--spacing-control:0 var(--scl-spacing-8) 0 0;--background-color-control:var(--scl-color-white);--border-control:var(--scl-spacing-1) solid var(--color-text);--border-control-checked:calc(0.5 * var(--scl-spacing-12)) solid\n    var(--color-primary);--border-control-checked-active:calc(0.5 * var(--scl-spacing-12)) solid\n    var(--color-primary-active, #cb0068);--border-control-checked-disabled:calc(0.5 * var(--scl-spacing-12)) solid\n    var(--color-disabled);--background-control-checked-disabled:var(--scl-color-grey-30);--border-control-active:var(--scl-spacing-8) solid\n    var(--color-primary-active);--border-control-disabled:var(--scl-spacing-1) solid var(--color-disabled);--border-control-error:var(--scl-spacing-2) solid\n    var(--scl-color-background-error);--box-shadow-control-focus:0 0 0 var(--scl-spacing-2) var(--color-focus)}.radio-button{position:relative;display:flex;flex-wrap:wrap;align-items:center;cursor:pointer}.radio-button .radio-button__meta{width:100%;display:flex;justify-content:space-between}.radio-button .radio-button__helper-text{transition:var(--transition-helper-text);font-size:var(--font-size-helper-text);font-weight:var(--font-weight-helper-text);line-height:var(--line-height-helper-text);color:var(--color-helper-text);margin-top:var(--spacing-top-helper-text);padding-left:var(--spacing-left-helper-text)}.radio-button--status-error .radio-button__helper-text{color:var(--color-error)}.radio-button label{color:var(--color-label);transition:var(--transition-label);font-weight:var(--font-weight-label);cursor:pointer}.radio-button input{width:var(--width-control);height:var(--height-control);transition:var(--transition-control);border-radius:50%;-webkit-appearance:none;background-color:var(--background-color-control);border:var(--border-control);margin:var(--spacing-control);cursor:pointer}.radio-button input:focus{outline:none;box-shadow:var(--box-shadow-control-focus)}.radio-button:hover input:not(:checked):not([disabled]){box-shadow:none;border-color:var(--color-primary-hover)}.radio-button:hover input:not(:checked):not([disabled])~label{color:var(--color-primary-hover)}.radio-button input:active{border:var(--border-control-active)}.radio-button input:not(:checked):not([disabled]):active~label{color:var(--color-primary-active)}.radio-button input:disabled{border:var(--border-control-disabled)}.radio-button input:disabled~label{color:var(--color-disabled)}.radio-button.radio-button--status-error input{border:var(--border-control-error)}.radio-button input:checked{border:var(--border-control-checked)}.radio-button input:checked:active{border:var(--border-control-checked-active)}.radio-button input:checked:disabled{background:var(--background-control-checked-disabled);border:var(--border-control-checked-disabled)}.radio-button input:checked:disabled~label{color:var(--color-disabled)}.radio-button--disabled label,.radio-button--disabled .radio-button__label,.radio-button--disabled input,.radio-button--disabled .radio-button__helper-text{cursor:not-allowed;border-color:var(--color-disabled);color:var(--color-disabled);background:var(--scl-color-white)}";

let i$7 = 0;
class RadioButton {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.scaleChange = createEvent$1(this, "scale-change", 7);
    this.scaleChangeLegacy = createEvent$1(this, "scaleChange", 7);
    /** (optional) Input name */
    this.name = '';
    /** (optional) Input label */
    this.label = '';
    /** (optional) Input helper text */
    this.helperText = '';
    /** @deprecated - invalid should replace status */
    this.status = '';
    /** (optional) Input status */
    this.invalid = false;
    /** (optional) Input checked */
    this.checked = false;
    /** (optional) Input value */
    this.value = '';
    this.handleCheckedChange = (event) => {
      this.checked = event.target.checked;
      // I don't think this is ever going to be `false` but well...
      if (this.checked) {
        this.uncheckSiblings();
      }
      emitEvent$1(this, 'scaleChange', {
        value: this.value == null ? this.value : this.value.toString(),
      });
    };
    // Prevent click event being fired twice when the target is the label.
    this.handleLabelClick = (event) => {
      event.stopPropagation();
    };
  }
  componentWillLoad() {
    if (this.inputId == null) {
      this.inputId = 'input-' + i$7++;
    }
  }
  componentDidRender() {
    if (this.status !== '') {
      statusNote({
        tag: 'deprecated',
        message: 'Property "status" is deprecated. Please use the "invalid" property!',
        type: 'warn',
        source: this.hostElement,
      });
    }
  }
  // We manually set `checked` to false on sibling <scale-radio-button> elements,
  // otherwise they stayed `checked` after being clicked once, forever.
  uncheckSiblings() {
    this.getSiblingRadios().forEach((radio) => {
      radio.checked = false;
    });
  }
  getSiblingRadios() {
    return Array.from(document.querySelectorAll(`scale-radio-button[name="${this.name}"]`)).filter((radio) => radio.inputId !== this.inputId);
  }
  render() {
    const ariaInvalidAttr = this.status === 'error' || this.invalid ? { 'aria-invalid': true } : {};
    const helperTextId = `helper-message-${i$7}`;
    const ariaDescribedByAttr = { 'aria-describedBy': helperTextId };
    return (hAsync(Host$1, null, hAsync("div", { class: this.getCssClassMap() }, hAsync("input", Object.assign({ type: "radio", name: this.name, id: this.inputId, onChange: this.handleCheckedChange, value: this.value, checked: this.checked, disabled: this.disabled }, ariaInvalidAttr, (this.helperText ? ariaDescribedByAttr : {}))), hAsync("label", { htmlFor: this.inputId, onClick: this.handleLabelClick }, this.label), !!this.helperText && (hAsync("div", { class: "radio-button__meta", id: helperTextId, "aria-live": "polite", "aria-relevant": "additions removals" }, hAsync("div", { class: "radio-button__helper-text" }, this.helperText))))));
  }
  getCssClassMap() {
    return classnames('radio-button', this.checked && `radio-button--checked`, this.disabled && `radio-button--disabled`, this.status && `radio-button--status-${this.status}`, this.invalid && `radio-button--status-error`);
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return radioButtonCss; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-radio-button",
    "$members$": {
      "name": [1],
      "label": [1],
      "helperText": [1, "helper-text"],
      "status": [1],
      "invalid": [4],
      "disabled": [4],
      "checked": [516],
      "value": [1032],
      "inputId": [1, "input-id"],
      "styles": [1]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["checked", "checked"]]
  }; }
}

const radioButtonGroupCss = "/*!@:host*/.sc-scale-radio-button-group-h{--font-weight-label:var(--scl-font-weight-medium);--font-size-label:var(--scl-font-size-16);--font-size-helper-text:var(--scl-font-size-12);--color-helper-text:var(--scl-color-blue-70);--padding-bottom-helper-text:var(--scl-spacing-8);--margin-top-helper-text:var(--scl-spacing-4);--font-weight-helper-text:var(--scl-font-weight-medium);--font-size-error-helper-text:var(--scl-font-size-12);--color-error-helper-text:var(--scl-color-red-60);--padding-bottom-error-helper-text:var(--scl-spacing-8);--margin-top-error-helper-text:var(--scl-spacing-4);--font-weight-error-helper-text:var(--scl-font-weight-medium);--color-error-helper-text-hcm:var(--scl-color-white);--font-size-title:var(--font-size-label);--font-weight-title:var(--scl-font-weight-medium);--padding-bottom-title:var(--scl-spacing-4);--margin-left-title:var(--scl-spacing-2);--margin-top-slotted-item:var(--scl-spacing-4)}/*!@.radio-button-group*/.radio-button-group.sc-scale-radio-button-group{display:inline-flex;flex-direction:column;border:0}/*!@.radio-button-group__container*/.radio-button-group__container.sc-scale-radio-button-group{display:flex;flex-direction:column}/*!@.radio-button-group__helper-text*/.radio-button-group__helper-text.sc-scale-radio-button-group{color:var(--color-helper-text);font-size:var(--font-size-helper-text);margin-top:calc(var(--margin-top-helper-text) * +1);padding-bottom:calc(var(--padding-bottom-helper-text) * -1);font-weight:var(--font-weight-helper-text)}/*!@.radio-button-group__helper-text--status-error*/.radio-button-group__helper-text--status-error.sc-scale-radio-button-group{color:var(--color-error-helper-text);font-size:var(--font-size-error-helper-text);margin-top:calc(var(--margin-top-error-helper-text) * +1);padding-bottom:calc(var(--padding-bottom-error-helper-text) * -1);font-weight:var(--font-weight-error-helper-text)}/*!@.radio-button-group__title-label*/.radio-button-group__title-label.sc-scale-radio-button-group{font-size:var(--font-size-title);font-weight:var(--font-weight-title);padding-bottom:var(--padding-bottom-title);margin-left:calc(var(--margin-left-title) * -1.5)}/*!@::slotted(*)*/.sc-scale-radio-button-group-s>*{margin-top:var(--margin-top-slotted-item)}@media screen and (forced-colors: active), (-ms-high-contrast: active){/*!@.radio-button-group__helper-text--status-error*/.radio-button-group__helper-text--status-error.sc-scale-radio-button-group{color:var(--color-error-helper-text-hcm)}}";

class RadioButtonGroup {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) Input label */
    this.label = '';
    /** (optional) Input helper text */
    this.helperText = '';
    /** @deprecated - invalid should replace status */
    this.status = '';
    /** (optional) Input status */
    this.invalid = false;
  }
  componentDidRender() {
    if (this.status !== '') {
      statusNote({
        tag: 'deprecated',
        message: 'Property "status" is deprecated. Please use the "invalid" property!',
        type: 'warn',
        source: this.hostElement,
      });
    }
  }
  render() {
    return (hAsync("form", null, hAsync("fieldset", { class: "radio-button-group" }, hAsync("legend", { class: "radio-button-group__title" }, hAsync("label", { class: "radio-button-group__title-label", "aria-label": this.label }, this.label), this.helperText ? (hAsync("div", { role: "text", class: this.getCssClassMap(), "aria-label": this.helperText }, this.helperText)) : null), hAsync("div", { class: "radio-button-group__container" }, hAsync("slot", null)))));
  }
  getCssClassMap() {
    return classnames('radio-button-group__helper-text', (this.status === 'error' || this.invalid) &&
      `radio-button-group__helper-text--status-error`);
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return radioButtonGroupCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-radio-button-group",
    "$members$": {
      "label": [1],
      "helperText": [1, "helper-text"],
      "status": [1],
      "invalid": [4]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const ratingStarsCss = "/*!@:host*/.sc-scale-rating-stars-h{--stars-color:var(--scl-color-primary);--stars-hover-color:var(--scl-color-primary-hover);--stars-active-color:var(--scl-color-primary-active);--stars-inactive-color:transparent;--stars-placeholder-color:var(--scl-color-black);--stars-placeholder-revert-color:var(--scl-color-black);--stars-disabled-color:var(--scl-color-grey-50);--stars-spacing:var(--scl-spacing-2);--stars-transition:color 0.1s;--stars-size:24px;--font-weight-medium:var(--scl-font-weight-medium);--font-size-small:var(--scl-font-size-12);--infotext-color:var(--scl-color-text-additional)}/*!@:host([star-size='small'])*/[star-size='small'].sc-scale-rating-stars-h{--stars-size:16px;font-size:var(--font-size-small)}/*!@[part='container']*/[part='container'].sc-scale-rating-stars{display:inline-flex;flex-direction:column;position:relative}/*!@[part='range-slider']*/[part='range-slider'].sc-scale-rating-stars{position:absolute;border:0;margin:0;left:calc(-1 * var(--stars-size));bottom:0;z-index:2;width:calc(100% + var(--stars-size) * 2);opacity:0;height:var(--stars-size)}@media (hover: hover){/*!@[part='range-slider']*/[part='range-slider'].sc-scale-rating-stars{clip:rect(0 0 0 0);clip-path:inset(50%);height:1px;overflow:hidden;white-space:nowrap;width:1px}}/*!@input[type='range']::-webkit-slider-thumb*/input[type='range'].sc-scale-rating-stars::-webkit-slider-thumb{-webkit-appearance:none;border:0;height:var(--stars-size);width:var(--stars-size);border-radius:50%;background:#ffffff;cursor:pointer;margin-left:0px;margin-top:0}/*!@[part='content']*/[part='content'].sc-scale-rating-stars{display:flex}/*!@[part='wrapper']*/[part='wrapper'].sc-scale-rating-stars{display:inline-flex;border-radius:var(--scl-spacing-4);margin-left:calc(-1 * var(--stars-spacing))}/*!@[part='wrapper']:hover [part='star'] [part='selected-star']*/[part='wrapper'].sc-scale-rating-stars:hover [part='star'].sc-scale-rating-stars [part='selected-star'].sc-scale-rating-stars{opacity:1}/*!@[part='star'] > **/[part='star'].sc-scale-rating-stars>*.sc-scale-rating-stars{pointer-events:none}/*!@[part='label']*/[part='label'].sc-scale-rating-stars{margin-bottom:var(--scl-spacing-8);white-space:nowrap}/*!@[part='infotext']*/[part='infotext'].sc-scale-rating-stars{margin-left:var(--scl-spacing-8);display:flex;align-items:center;font-weight:var(--font-weight-medium);color:var(--infotext-color);white-space:nowrap}/*!@[part='star']*/[part='star'].sc-scale-rating-stars{--decimal-width:100%;display:inline-flex;position:relative;color:var(--stars-color);cursor:pointer;padding:0 var(--stars-spacing)}/*!@[part='placeholder-star']*/[part='placeholder-star'].sc-scale-rating-stars{display:inline-flex;color:var(--stars-placeholder-color);transition:var(--stars-transition)}/*!@[part='selected-star']*/[part='selected-star'].sc-scale-rating-stars{color:var(--stars-inactive-color);margin-left:0px;position:relative;transition:var(--stars-transition)}/*!@.icon-clip*/.icon-clip.sc-scale-rating-stars{overflow:hidden;position:absolute;width:var(--decimal-width);height:100%}/*!@[part='star'][data-half]*/[part='star'][data-half].sc-scale-rating-stars{--decimal-width:calc(50% - var(--stars-spacing))}/*!@[part='star'][data-selected]*/[part='star'][data-selected].sc-scale-rating-stars{--stars-placeholder-color:transparent}/*!@[part='star'][data-half]*/[part='star'][data-half].sc-scale-rating-stars{--stars-placeholder-color:currentColor}/*!@[part='star'][data-selected] [part='selected-star']*/[part='star'][data-selected].sc-scale-rating-stars [part='selected-star'].sc-scale-rating-stars{color:var(--stars-color)}@media (hover: hover){/*!@[part='wrapper']:hover*/[part='wrapper'].sc-scale-rating-stars:hover{--stars-color:var(--stars-hover-color);--stars-placeholder-color:transparent}/*!@[part='wrapper']:hover [part='star']*/[part='wrapper'].sc-scale-rating-stars:hover [part='star'].sc-scale-rating-stars{--decimal-width:100%}/*!@[part='wrapper']:hover [part='star'][data-half]*/[part='wrapper'].sc-scale-rating-stars:hover [part='star'][data-half].sc-scale-rating-stars{--stars-placeholder-color:transparent}/*!@[part='wrapper']:hover [part='selected-star']*/[part='wrapper'].sc-scale-rating-stars:hover [part='selected-star'].sc-scale-rating-stars{color:var(--stars-color)}/*!@[part='star']:hover ~ [part='star'] [part='selected-star']*/[part='star'].sc-scale-rating-stars:hover~[part='star'].sc-scale-rating-stars [part='selected-star'].sc-scale-rating-stars{color:var(--stars-inactive-color)}/*!@[part='star']:hover ~ [part='star'] [part='placeholder-star']*/[part='star'].sc-scale-rating-stars:hover~[part='star'].sc-scale-rating-stars [part='placeholder-star'].sc-scale-rating-stars{--stars-placeholder-color:var(--stars-placeholder-revert-color)}}/*!@[part='wrapper']:active*/[part='wrapper'].sc-scale-rating-stars:active{--stars-color:var(--stars-active-color)}/*!@:host(:focus-within) [part='wrapper'],\n[part='wrapper']:focus*/.sc-scale-rating-stars-h:focus-within [part='wrapper'].sc-scale-rating-stars,[part='wrapper'].sc-scale-rating-stars:focus{box-shadow:0 0 0 var(--scl-spacing-2) var(--scl-color-focus);outline:none}/*!@:host(.readonly) [part='wrapper']*/.readonly.sc-scale-rating-stars-h [part='wrapper'].sc-scale-rating-stars{--stars-placeholder-color:var(--stars-disabled-color);pointer-events:none}/*!@:host(.disabled) [part='label'],\n:host(.disabled) [part='infotext']*/.disabled.sc-scale-rating-stars-h [part='label'].sc-scale-rating-stars,.disabled.sc-scale-rating-stars-h [part='infotext'].sc-scale-rating-stars{color:var(--stars-disabled-color)}/*!@:host(.disabled) [part='wrapper']*/.disabled.sc-scale-rating-stars-h [part='wrapper'].sc-scale-rating-stars{--stars-color:var(--stars-disabled-color);--stars-placeholder-color:var(--stars-disabled-color);pointer-events:none}/*!@:host(.hideLabel) [part='label']*/.hideLabel.sc-scale-rating-stars-h [part='label'].sc-scale-rating-stars{visibility:hidden;height:0;margin-bottom:0}@media screen and (forced-colors: active), (-ms-high-contrast: active){/*!@[part='star'] [part='placeholder-star']*/[part='star'].sc-scale-rating-stars [part='placeholder-star'].sc-scale-rating-stars{color:var(--scl-color-white)}/*!@[part='star'][data-selected] [part='placeholder-star']*/[part='star'][data-selected].sc-scale-rating-stars [part='placeholder-star'].sc-scale-rating-stars{color:var(--stars-inactive-color)}/*!@[part='star']:hover ~ [part='star'] [part='placeholder-star']*/[part='star'].sc-scale-rating-stars:hover~[part='star'].sc-scale-rating-stars [part='placeholder-star'].sc-scale-rating-stars{color:var(--scl-color-white)}/*!@[part='wrapper']:hover [part='placeholder-star']*/[part='wrapper'].sc-scale-rating-stars:hover [part='placeholder-star'].sc-scale-rating-stars{color:var(--stars-inactive-color)}}";

const sizes = {
  small: 16,
  large: 24,
};
let ratingStarCount = 0;
class RatingStars {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.scaleChange = createEvent$1(this, "scale-change", 7);
    this.scaleChangeLegacy = createEvent$1(this, "scaleChange", 7);
    this.ratingStarId = `scale-rating-star-${ratingStarCount++}`;
    /** @deprecated; size should be used instead of starSize */
    this.starSize = 'large';
    /** size of the stars  */
    this.size = 'large';
    /** @deprecated; The lower limit of the rating */
    this.minRating = 0;
    /** @deprecated; max should be used instead of maxRating */
    this.maxRating = 5;
    /** The upper limit of the rating */
    this.max = 5;
    /** Represents the current value of the rating */
    this.rating = 0;
    /** makes the rating non-interactive (but still accessible)  */
    this.readonly = false;
    /** disables input  */
    this.disabled = false;
    /** a11y text for getting meaningful value. `$rating` and `$max` (deprecated `$maxRating`) are template variables and will be replaces by their corresponding properties.  */
    this.ariaLabelTranslation = '$rating out of $max stars';
    /** (optional) rating label */
    this.label = 'Rating';
    /** (optional) info text */
    this.hideLabel = false;
    this.handleInput = (ev) => {
      const input = ev.composedPath()[0];
      const value = Number(input.value);
      switch (true) {
        case value < this.minRating:
          input.value = this.minRating.toString();
          break;
        case value > this.max:
          input.value = this.max.toString();
          break;
      }
      this.rating = Number(input.value);
      emitEvent$1(this, 'scaleChange', { value: this.rating });
    };
    this.handleStarClick = (ev) => {
      const star = ev.composedPath()[0];
      const starValue = Number(star.dataset.value);
      // set focus on input to make arrow keys work to select stars
      const input = this.host.shadowRoot.querySelector('input');
      input.focus();
      if (starValue === 1 && this.rating === 1 && this.minRating === 0) {
        this.rating = this.minRating;
      }
      else {
        this.rating = starValue;
      }
      emitEvent$1(this, 'scaleChange', { value: this.rating });
    };
  }
  componentWillRender() {
    // make sure the deprecated props overwrite the actual ones if used
    // and show status note deprecated
    if (this.maxRating !== 5) {
      this.max = this.maxRating;
      statusNote({
        tag: 'deprecated',
        message: 'Property "maxRating" is deprecated. Please use the "max" property!',
        type: 'warn',
        source: this.host,
      });
    }
    if (this.minRating !== 0) {
      statusNote({
        tag: 'deprecated',
        message: 'Property "minRating" is deprecated and will be deleted upon the next release',
        type: 'warn',
        source: this.host,
      });
    }
    if (this.starSize !== 'large') {
      this.size = this.starSize;
      statusNote({
        tag: 'deprecated',
        message: 'Property "starSize" is deprecated. Please use the "size" property!',
        type: 'warn',
        source: this.host,
      });
    }
    // deactivate showing half stars while keeping the code
    this.rating = Math.round(this.rating);
  }
  // constructs the aria message for the current rating
  getRatingText() {
    const filledText = this.ariaLabelTranslation
      .replace(/\$rating/g, `${this.rating}`)
      // TODO: remove when `maxRating` is also being removed
      .replace(/\$maxRating/g, `${this.max}`)
      .replace(/\$max/g, `${this.max}`);
    return filledText;
  }
  renderStar(index, selected = false, rating) {
    const size = sizes[this.size];
    const isWholeNumber = rating % 1 === 0;
    const isLastNumber = Math.ceil(rating) === index;
    return (hAsync("div", { part: "star", "data-value": index, "data-selected": selected, "data-half": isLastNumber && !isWholeNumber, onMouseUp: !this.readonly && this.handleStarClick,
      // sets up first star to be the resetter above the input element
      style: { zIndex: index === 1 ? '5' : 'auto' } }, hAsync("scale-icon-action-favorite", { size: size, part: "placeholder-star" }), hAsync("div", { class: "icon-clip" }, hAsync("scale-icon-action-favorite", { size: size, selected: true, part: "selected-star" }))));
  }
  renderRating() {
    const stars = [];
    const roundedRating = Math.ceil(this.rating);
    const max = this.max;
    for (let index = 1; index <= max; index++) {
      const isSelected = roundedRating >= index;
      stars.push(this.renderStar(index, isSelected, this.rating));
    }
    return stars;
  }
  render() {
    return (hAsync(Host$1, { class: {
        hideLabel: this.hideLabel,
        disabled: this.disabled,
        readonly: this.readonly,
      } }, hAsync("div", { part: "container" }, hAsync("label", { id: `${this.ratingStarId}-label`, part: "label", htmlFor: this.ratingStarId }, this.label), hAsync("div", { part: "content" }, hAsync("div", { part: "wrapper", "aria-valuetext": this.getRatingText(), "aria-orientation": "horizontal", "aria-describedby": this.infoText ? `${this.ratingStarId}-infotext` : false }, hAsync("input", { disabled: this.disabled, readonly: this.readonly, part: "range-slider", type: this.readonly ? 'number' : 'range', id: this.ratingStarId, min: 0, max: this.max + 1, value: this.rating, step: "1", "aria-labelledby": `${this.ratingStarId}-label`, "aria-readonly": this.readonly ? 'true' : false, "aria-valuemin": this.minRating, "aria-valuemax": this.max, "aria-valuenow": this.rating, "aria-valuetext": this.getRatingText(), onInput: !this.readonly && this.handleInput }), this.renderRating()), this.infoText && (hAsync("div", { part: "infotext", id: `${this.ratingStarId}-infotext` }, this.infoText))))));
  }
  get host() { return getElement$1(this); }
  static get style() { return ratingStarsCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-rating-stars",
    "$members$": {
      "starSize": [1, "star-size"],
      "size": [1537],
      "minRating": [2, "min-rating"],
      "maxRating": [2, "max-rating"],
      "max": [1538],
      "rating": [1538],
      "readonly": [516],
      "disabled": [516],
      "ariaLabelTranslation": [1, "aria-label-translation"],
      "label": [513],
      "hideLabel": [516, "hide-label"],
      "infoText": [1, "info-text"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["max", "max"], ["rating", "rating"], ["readonly", "readonly"], ["disabled", "disabled"], ["label", "label"], ["hideLabel", "hide-label"]]
  }; }
}

const iconCss$N = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ServiceDevicesService {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M6.84 14.95a5.04 5.04 0 012.66-.295l4.625.735a1.435 1.435 0 011.185 1.685 1 1 0 01-.05.175h.1l5.71-1.135a1.36 1.36 0 011.5.71 1.42 1.42 0 01-.65 1.945l-6.53 3.095a7 7 0 01-4.6.5l-3.06-.735a16.9 16.9 0 00-3-.44L1.285 21v-3.815zM13.18 0l.32 1.635a.59.59 0 00.895.365l1.365-.93 1.685 1.67-.945 1.365a.59.59 0 00.37.895l1.63.32V7.7l-1.635.3a.59.59 0 00-.365.895l.93 1.38-1.67 1.67L14.395 11a.59.59 0 00-.915.385l-.3 1.63h-2.36l-.3-1.63A.59.59 0 009.605 11l-1.38.93-1.67-1.67.945-1.365a.59.59 0 00-.37-.935l-1.63-.3V5.3L7.13 5a.59.59 0 00.37-.895L6.57 2.74l1.67-1.67L9.605 2a.59.59 0 00.895-.37L10.82 0h2.36zM12 4.5a2 2 0 100 4 2 2 0 000-4z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M6.6 14.25c.95-.4 2-.5 3.05-.35l4.6.75c.6.1 1.1.4 1.45.9.15.25.3.5.35.8 1.25-.2 3.55-.7 4.9-.95.95-.2 1.85.25 2.3 1.1.25.5.35 1.15.15 1.7-.2.55-.6 1-1.15 1.25l-6.55 3.1c-1.05.5-2.15.75-3.3.75-.6 0-1.2-.05-1.8-.2l-3.05-.75c-.9-.2-1.9-.35-2.85-.4L.5 21.7v-5zm2.8 1.15c-.75-.1-1.55-.05-2.25.25L2 17.7v2.55l2.75.2c1.05.05 2.1.2 3.15.45l3.05.75c1.35.3 2.85.15 4.1-.45l6.55-3.1c.35-.15.5-.6.3-.95-.1-.2-.4-.35-.65-.3-1.55.35-4.55.9-5.45 1.1-.4.65-1.1 1.05-1.9 1.05H8.55v-1.5h5.35c.35 0 .6-.25.65-.55.1-.35-.15-.75-.55-.8zM13.2 0l.3 1.6c.05.45.55.65.9.4l1.35-.9 1.65 1.65-.95 1.35c-.2.35 0 .8.4.9l1.7.35V7.7L16.9 8c-.45.05-.65.55-.4.9l.8 1.35-1.65 1.65-1.35-.95c-.35-.2-.8 0-.9.4L13.1 13h-2.35l-.3-1.65a.567.567 0 00-.9-.4l-1.35.95-1.65-1.65.95-1.35c.25-.35.05-.85-.35-.95l-1.65-.3V5.3L7.1 5c.45-.05.65-.55.4-.9l-.9-1.35L8.25 1.1l1.35.95c.35.2.8 0 .9-.4L10.85 0h2.35zM12 4.5c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$N; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-service-devices-service",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$M = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ServiceMaintanance {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M22.09 6.715l-4.5 2.36-1.285-1-.105-1.64 4.5-2.36c-2.03-2.5-5.43-3.42-8.18-2S8.63 6.68 9.43 9.725L2.325 16.83a3.5 3.5 0 004.95 4.95l6.885-6.89a6.205 6.205 0 004.89-.33c2.755-1.44 3.95-4.745 3.04-7.845z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M22.1 6.7l-4.5 2.35-1.3-1-.1-1.65 4.5-2.35c-1.35-1.7-3.35-2.65-5.35-2.65-.95 0-1.9.2-2.8.7-1.6.85-2.65 2.3-3.1 3.95-.3 1.15-.3 2.45 0 3.7l-7.1 7.1C1 18.2 1 20.45 2.35 21.8s3.6 1.35 4.95 0l6.9-6.9c1.6.55 3.35.5 4.9-.35 2.7-1.45 3.9-4.75 3-7.85zm-3.75 6.55c-2.05 1.1-3.9.15-4.6-.05L6.2 20.7c-.8.8-2.05.8-2.85 0s-.8-2.05 0-2.85l7.7-7.7c-.2-.75-.65-1.95-.3-3.5.3-1.4 1.15-2.6 2.4-3.25.65-.35 1.35-.5 2.1-.5.95 0 1.95.3 2.8.85l-3.45 1.8.2 3.3 2.55 2.05 3.45-1.8c0 1.7-.9 3.35-2.45 4.15z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$M; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-service-maintanance",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$L = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ServiceServices {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M18.535 3.09a8.405 8.405 0 00-14.745 7l1.34 6.525a2.715 2.715 0 00.775 5.2l4.04.42a2.155 2.155 0 10.155-1.5l-4.04-.415a1.215 1.215 0 01-.19-2.385l1.655-.34 1.775-.35a1.5 1.5 0 001.2-1.745l-.74-3.72A1.5 1.5 0 008 10.595l-1.5.29-.265-1.295a5.905 5.905 0 1111.565 0l-.265 1.295-1.47-.29A1.5 1.5 0 0014.3 11.77l-.735 3.73a1.5 1.5 0 001.18 1.765l1.76.35 2.12.435 1.63-7.945a8.39 8.39 0 00-1.72-7.015z" }))) : (hAsync("g", null, hAsync("path", { d: "M18.15 3.4C16.65 1.55 14.4.5 12 .5S7.4 1.55 5.9 3.4A7.844 7.844 0 004.3 10l1.35 6.45c-1.25.25-2.15 1.4-2.15 2.65 0 1.4 1.05 2.55 2.45 2.7l4.05.4c.25.95 1.05 1.6 2.1 1.6 1.2 0 2.15-.95 2.15-2.15s-.95-2.15-2.15-2.15c-.85 0-1.55.5-1.9 1.2l-4.05-.4c-.6-.05-1.1-.6-1.1-1.2 0-.55.4-1.05.95-1.2l3.4-.7c.8-.15 1.35-.95 1.2-1.75l-.75-3.7a1.52 1.52 0 00-1.75-1.2L6 11l-.25-1.3c-.4-1.9.1-3.85 1.3-5.35C8.3 2.85 10.1 2 12 2s3.75.85 4.95 2.35 1.7 3.45 1.3 5.35l-.2 1.3-1.95-.4c-.8-.15-1.6.35-1.75 1.2l-.8 3.7c-.15.8.35 1.6 1.2 1.75l3.4.7 1.6-7.95c.5-2.35-.1-4.75-1.6-6.6z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$L; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-service-services",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$K = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ServiceSettings {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M20.235 14.5L23 14v-4l-2.765-.5a1 1 0 01-.64-1.555l1.595-2.31-2.825-2.825-2.31 1.595a1 1 0 01-1.555-.64L14 1h-4l-.5 2.76a1 1 0 01-1.555.645L5.635 2.81 2.81 5.635l1.595 2.31a1 1 0 01-.64 1.555L1 10v4l2.76.5a1 1 0 01.645 1.555l-1.595 2.31 2.825 2.825 2.31-1.595a1 1 0 011.555.64L10 23h4l.5-2.765a1 1 0 011.555-.64l2.31 1.595 2.825-2.825-1.595-2.31a1 1 0 01.64-1.555zM12 15a3 3 0 110-6 3 3 0 010 6z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M14 1l.5 2.75c.15.75.95 1.05 1.55.65l2.3-1.6 2.85 2.85-1.6 2.3c-.4.6-.05 1.4.65 1.55L23 10v4l-2.75.5a.994.994 0 00-.65 1.55l1.6 2.3-2.85 2.85-2.3-1.6c-.6-.4-1.4-.05-1.55.65L14 23h-4l-.5-2.75c-.15-.7-.95-1.05-1.55-.65l-2.3 1.6-2.85-2.85 1.6-2.3c.4-.6.05-1.4-.65-1.55L1 14v-4l2.75-.5a.994.994 0 00.65-1.55l-1.6-2.3L5.65 2.8l2.3 1.6c.6.4 1.4.05 1.55-.65L10 1h4zm-1.25 1.5h-1.5l-.3 1.5c-.2 1.2-1.25 2.05-2.45 2.05-.5 0-1-.15-1.4-.45l-1.3-.9-1.05 1.05.9 1.3c.5.7.6 1.6.25 2.4-.3.8-1 1.35-1.85 1.5l-1.55.3v1.5l1.55.25c.85.15 1.5.7 1.85 1.5.35.8.25 1.7-.25 2.4l-.9 1.3 1.05 1.05 1.3-.9c.4-.3.9-.45 1.4-.45 1.2 0 2.25.85 2.45 2.05l.3 1.55h1.5l.3-1.55c.2-1.2 1.25-2.05 2.45-2.05.5 0 1 .15 1.4.45l1.3.9 1.05-1.05-.9-1.3c-.5-.7-.55-1.6-.25-2.3.3-.8 1-1.35 1.85-1.5l1.55-.3v-1.5l-1.55-.3c-.85-.15-1.5-.7-1.85-1.5-.35-.8-.25-1.7.25-2.4l.9-1.3-1.05-1.05-1.3.9c-.4.3-.9.45-1.4.45-1.2 0-2.25-.85-2.45-2.05l-.3-1.55zM12 9a3 3 0 110 6 3 3 0 010-6z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$K; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-service-settings",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$J = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class ServiceSupport {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M12 1.75C6.34 1.75 1.75 6.34 1.75 12S6.34 22.25 12 22.25 22.25 17.66 22.25 12A10.25 10.25 0 0012 1.75zM12 2a10.03 10.03 0 012.245.265L13.34 5.9A6.255 6.255 0 0012 5.75a6.17 6.17 0 00-1.335.15l-.91-3.635A10.03 10.03 0 0112 2zM5.9 13.34l-3.635.905a9.64 9.64 0 010-4.5l3.635.905a6.06 6.06 0 000 2.68v.01zM12 22a10.03 10.03 0 01-2.245-.265l.91-3.635a6.17 6.17 0 001.335.15c.45-.002.9-.052 1.34-.15l.905 3.635A10.03 10.03 0 0112 22zm0-4.25a5.75 5.75 0 11.01-11.5 5.75 5.75 0 01-.01 11.5zm6.1-4.41c.2-.882.2-1.798 0-2.68l3.635-.905a9.64 9.64 0 010 4.5L18.1 13.34z" }))) : (hAsync("g", null, hAsync("path", { d: "M12 1C5.95 1 1 5.95 1 12s4.95 11 11 11 11-4.95 11-11S18.05 1 12 1zm2.4 1.8c3.3.85 5.95 3.5 6.8 6.8l-2.95.5c-.65-2.1-2.3-3.75-4.35-4.35zm-4.8 0l.5 2.95C8 6.4 6.35 8.05 5.75 10.1L2.8 9.6c.9-3.3 3.5-5.9 6.8-6.8zm0 18.4c-3.3-.85-5.95-3.5-6.8-6.8l2.95-.5c.65 2.1 2.3 3.75 4.35 4.35zM7 12c0-2.75 2.25-5 5-5s5 2.25 5 5-2.25 5-5 5-5-2.25-5-5zm7.4 9.2l-.5-2.95c2.1-.65 3.75-2.3 4.35-4.35l2.95.5c-.9 3.3-3.5 5.9-6.8 6.8z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$J; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-service-support",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const appShellCss = "/*!@:host*/.sc-scale-app-shell-h{--background:var(--scl-color-background-standard, #fff);--spacing-x:var(--scl-spacing-24);--min-height:100vh}/*!@.sr-only*/.sr-only.sc-scale-app-shell{position:absolute;left:-10000px;overflow:hidden}/*!@.shell*/.shell.sc-scale-app-shell{display:flex;min-height:var(--min-height);flex-direction:column}/*!@.shell .content*/.shell.sc-scale-app-shell .content.sc-scale-app-shell{background:var(--background);padding-left:var(--spacing-x);padding-right:var(--spacing-x);flex:1}@media (min-width: 1552px){/*!@.shell .content*/.shell.sc-scale-app-shell .content.sc-scale-app-shell{max-width:var(--header-max-width)}}";

class Shell {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.portalName = '';
    this.claimLang = 'de';
    this.mainNavigation = [];
    this.iconNavigation = [];
    this.userNavigation = [];
    this.sectorNavigation = [];
    this.addonNavigation = [];
    this.activeRouteId = '';
    this.activeSectorId = '';
    this.scrolled = false;
  }
  componentWillLoad() {
    this.hasSlotHeader = !!this.hostElement.querySelector('[slot="header"]');
  }
  render() {
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync("div", { part: "base", class: "shell" }, this.hasSlotHeader ? (hAsync("slot", { name: "header" })) : (hAsync("scale-app-header", { logoClick: this.logoClick, logoHref: this.logoHref, logoTitle: this.logoTitle, portalName: this.portalName, mainNavigation: this.mainNavigation, iconNavigation: this.iconNavigation, userNavigation: this.userNavigation, sectorNavigation: this.sectorNavigation, addonNavigation: this.addonNavigation, activeRouteId: this.activeRouteId, activeSectorId: this.activeSectorId, claimLang: this.claimLang })), hAsync("main", { class: "content" }, hAsync("slot", null)), hAsync("slot", { name: "footer" }))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return appShellCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-app-shell",
    "$members$": {
      "portalName": [1, "portal-name"],
      "claimLang": [1, "claim-lang"],
      "logoHref": [1, "logo-href"],
      "logoTitle": [1, "logo-title"],
      "logoClick": [8, "logo-click"],
      "mainNavigation": [8, "main-navigation"],
      "iconNavigation": [8, "icon-navigation"],
      "userNavigation": [8, "user-navigation"],
      "sectorNavigation": [8, "sector-navigation"],
      "addonNavigation": [8, "addon-navigation"],
      "activeRouteId": [1, "active-route-id"],
      "activeSectorId": [1, "active-sector-id"],
      "styles": [1],
      "scrolled": [32]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const sidebarNavCss = "/*!@:host*/.sc-scale-sidebar-nav-h{--max-width:15rem;--spacing-indent:var(--scl-spacing-24);--spacing-collapsible:var(--scl-spacing-16);--opacity-chevron:0;--left-current-border:0;--color:var(--scl-color-primary);--color-active:var(--scl-color-primary-active);--box-shadow-focus:inset 0 0 0 var(--scl-spacing-2) var(--scl-color-focus);--color-toggle-button:var(--scl-color-grey-60);--border-y-toggle-button:1px solid var(--scl-color-grey-10);--radius-toggle-button:var(--scl-radius-2)}/*!@.sidebar-nav--collapsible*/.sidebar-nav--collapsible.sc-scale-sidebar-nav{--max-width:none;--spacing-indent:0;--opacity-chevron:1;--left-current-border:calc(-1 * var(--spacing-collapsible));padding-right:var(--spacing-collapsible);padding-left:var(--spacing-collapsible)}/*!@.sidebar-nav__list*/.sidebar-nav__list.sc-scale-sidebar-nav{list-style:none;max-width:var(--max-width);padding-left:0;margin-top:0;margin-bottom:0}/*!@.sidebar-nav__toggle-button*/.sidebar-nav__toggle-button.sc-scale-sidebar-nav{box-sizing:border-box;appearance:none;border:0;background-color:transparent;color:var(--color-toggle-button);width:100%;display:flex;justify-content:space-between;align-items:center;text-align:left;text-decoration:none;font-family:inherit;font-size:1rem;padding-top:1rem;padding-right:calc(0.5 * var(--spacing-indent));padding-bottom:1rem;padding-left:var(--spacing-indent);border-radius:var(--radius-toggle-button);border-bottom:var(--border-y-toggle-button);border-top:var(--border-y-toggle-button);cursor:pointer}/*!@.sidebar-nav__toggle-button:hover*/.sidebar-nav__toggle-button.sc-scale-sidebar-nav:hover{color:var(--color)}/*!@.sidebar-nav__toggle-button:active*/.sidebar-nav__toggle-button.sc-scale-sidebar-nav:active{color:var(--color-active)}/*!@.sidebar-nav__toggle-button:focus*/.sidebar-nav__toggle-button.sc-scale-sidebar-nav:focus{outline:none;box-shadow:var(--box-shadow-focus)}/*!@[aria-expanded='true'] .sidebar-nav__icon*/[aria-expanded='true'].sc-scale-sidebar-nav .sidebar-nav__icon.sc-scale-sidebar-nav{transform:rotate(0.5turn)}";

class SidebarNav {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** Set to `true` to make the sidebar toggleable (useful for small screens) */
    this.collapsible = false;
    /** Automatically set `collapsible` based on this media query */
    this.collapsibleMediaQuery = '(max-width: 30em)';
    /** Label for toggle button */
    this.collapsibleLabel = 'Menu';
    this.collapsed = true;
    this.handleMediaQueryChange = (event) => {
      this.collapsible = event.matches;
    };
    this.toggle = () => {
      this.collapsed = !this.collapsed;
    };
  }
  componentDidLoad() {
    this.setNestingLevelOnChildren();
    this.setMatchMedia();
  }
  disconnectedCallback() {
    if (this.mq != null) {
      this.mq.removeListener(this.handleMediaQueryChange);
    }
  }
  /**
   * Set `nesting-level` and `condensed` attributes in
   * <scale-sidebar-nav-collapsible> and <scale-sidebar-nav-item> children,
   * so styling different levels "automatically" is possible.
   */
  setNestingLevelOnChildren() {
    function setNestingLevel(el, level = 1) {
      Array.from(el.children).forEach((child) => {
        if (child.tagName.toUpperCase() === 'SCALE-SIDEBAR-NAV-COLLAPSIBLE') {
          setNestingLevel(child, level + 1);
          if (!child.hasAttribute('nesting-level')) {
            child.setAttribute('nesting-level', String(level));
          }
          if (level === 2 && !child.hasAttribute('condensed')) {
            child.setAttribute('condensed', 'true');
          }
        }
        if (child.tagName.toUpperCase() === 'SCALE-SIDEBAR-NAV-ITEM') {
          if (!child.hasAttribute('nesting-level')) {
            child.setAttribute('nesting-level', String(level));
          }
          if (level === 3 && !child.hasAttribute('condensed')) {
            child.setAttribute('condensed', 'true');
          }
        }
      });
    }
    setNestingLevel(this.el);
  }
  setMatchMedia() {
    if (this.collapsibleMediaQuery) {
      this.mq = window.matchMedia(this.collapsibleMediaQuery);
      // Recent versions of Safari throw with `addEventListener`
      // https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList/addListener
      this.mq.addListener(this.handleMediaQueryChange);
    }
  }
  render() {
    const label = this.ariaLabel ? { 'aria-label': this.ariaLabel } : {};
    const hidden = this.collapsible ? { hidden: this.collapsed } : {};
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync("div", { part: this.getBasePartMap(), class: this.getCssClassMap() }, this.collapsible === true && (hAsync("button", { part: "toggle-button", class: "sidebar-nav__toggle-button", "aria-expanded": this.collapsed ? 'false' : 'true', onClick: this.toggle }, this.collapsibleLabel, hAsync("scale-icon-navigation-collapse-down", { part: "icon", class: "sidebar-nav__icon", size: 16 }))), hAsync("nav", Object.assign({ part: "nav" }, label, hidden), hAsync("ul", { part: "list", class: "sidebar-nav__list", role: "list" }, hAsync("slot", null))))));
  }
  getBasePartMap() {
    return this.getCssOrBasePartMap('basePart');
  }
  getCssClassMap() {
    return this.getCssOrBasePartMap('css');
  }
  getCssOrBasePartMap(mode) {
    const component = 'sidebar-nav';
    const prefix = mode === 'basePart' ? '' : `${component}--`;
    return classnames(component, this.collapsible && `${prefix}collapsible`);
  }
  get el() { return getElement$1(this); }
  static get style() { return sidebarNavCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-sidebar-nav",
    "$members$": {
      "ariaLabel": [1, "aria-label"],
      "collapsible": [1540],
      "collapsibleMediaQuery": [1, "collapsible-media-query"],
      "collapsibleLabel": [1, "collapsible-label"],
      "styles": [1],
      "collapsed": [32]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["collapsible", "collapsible"]]
  }; }
}

const sidebarNavCollapsibleCss = "/*!@:host*/.sc-scale-sidebar-nav-collapsible-h{--border-bottom-color:var(--scl-color-grey-10);--border-left-color-third-nesting:var(--scl-color-grey-70);--color-active:var(--scl-color-primary-active);--color-primary:var(--scl-color-primary);--background-color-before-active:var(--color-primary);--font-weight-bold:var(--scl-font-weight-bold);--box-shadow-focus:inset 0 0 0 var(--scl-spacing-2) var(--scl-color-focus)}/*!@.sidebar-nav-collapsible*/.sidebar-nav-collapsible.sc-scale-sidebar-nav-collapsible{margin:0;border-bottom-color:var(--border-bottom-color);border-bottom-style:solid;border-bottom-width:0}/*!@.sidebar-nav-collapsible--condensed*/.sidebar-nav-collapsible--condensed.sc-scale-sidebar-nav-collapsible{border-bottom-width:1px}/*!@.sidebar-nav-collapsible__wrapper*/.sidebar-nav-collapsible__wrapper.sc-scale-sidebar-nav-collapsible{border-bottom-color:var(--border-bottom-color);border-bottom-style:solid;border-bottom-width:1px}/*!@.sidebar-nav-collapsible--condensed .sidebar-nav-collapsible__wrapper*/.sidebar-nav-collapsible--condensed.sc-scale-sidebar-nav-collapsible .sidebar-nav-collapsible__wrapper.sc-scale-sidebar-nav-collapsible{border-bottom-width:0}/*!@.sidebar-nav-collapsible__button*/.sidebar-nav-collapsible__button.sc-scale-sidebar-nav-collapsible{color:currentColor;width:100%;display:flex;box-sizing:border-box;text-align:left;align-items:center;padding-top:1rem;padding-right:calc(0.5 * var(--spacing-indent));padding-bottom:1rem;padding-left:var(--spacing-indent);justify-content:space-between;text-decoration:none;font-family:inherit;border-radius:var(--scl-radius-2)}/*!@.sidebar-nav-collapsible__button:hover*/.sidebar-nav-collapsible__button.sc-scale-sidebar-nav-collapsible:hover{color:var(--color-primary)}/*!@.sidebar-nav-collapsible__button:active*/.sidebar-nav-collapsible__button.sc-scale-sidebar-nav-collapsible:active{color:var(--color-active)}/*!@.sidebar-nav-collapsible__button:focus*/.sidebar-nav-collapsible__button.sc-scale-sidebar-nav-collapsible:focus{outline:none;box-shadow:var(--box-shadow-focus)}/*!@.sidebar-nav-collapsible--active .sidebar-nav-collapsible__button*/.sidebar-nav-collapsible--active.sc-scale-sidebar-nav-collapsible .sidebar-nav-collapsible__button.sc-scale-sidebar-nav-collapsible{position:relative;color:var(--color-primary)}/*!@.sidebar-nav-collapsible--active .sidebar-nav-collapsible__button::before*/.sidebar-nav-collapsible--active.sc-scale-sidebar-nav-collapsible .sidebar-nav-collapsible__button.sc-scale-sidebar-nav-collapsible::before{content:'';display:block;position:absolute;top:0;left:var(--left-current-border, 0);width:0;height:100%;background-color:var(--color-primary);border-left:2px solid transparent}/*!@:host([nesting-level='1']) .sidebar-nav-collapsible__button,\n.sidebar-nav-collapsible--bold .sidebar-nav-collapsible__button*/[nesting-level='1'].sc-scale-sidebar-nav-collapsible-h .sidebar-nav-collapsible__button.sc-scale-sidebar-nav-collapsible,.sidebar-nav-collapsible--bold.sc-scale-sidebar-nav-collapsible .sidebar-nav-collapsible__button.sc-scale-sidebar-nav-collapsible{font-weight:var(--font-weight-bold)}/*!@:host([nesting-level='2']) .sidebar-nav-collapsible__button*/[nesting-level='2'].sc-scale-sidebar-nav-collapsible-h .sidebar-nav-collapsible__button.sc-scale-sidebar-nav-collapsible{padding-left:calc(var(--spacing-indent) + 0.75rem)}/*!@.sidebar-nav-collapsible__icon*/.sidebar-nav-collapsible__icon.sc-scale-sidebar-nav-collapsible{transition:opacity 150ms}/*!@[aria-expanded='true'] .sidebar-nav-collapsible__icon*/[aria-expanded='true'].sc-scale-sidebar-nav-collapsible .sidebar-nav-collapsible__icon.sc-scale-sidebar-nav-collapsible{transform:rotate(0.5turn)}@media (hover: hover){/*!@[aria-expanded='false'] .sidebar-nav-collapsible__icon*/[aria-expanded='false'].sc-scale-sidebar-nav-collapsible .sidebar-nav-collapsible__icon.sc-scale-sidebar-nav-collapsible{opacity:var(--opacity-chevron, 1)}/*!@.sidebar-nav-collapsible__button:hover .sidebar-nav-collapsible__icon*/.sidebar-nav-collapsible__button.sc-scale-sidebar-nav-collapsible:hover .sidebar-nav-collapsible__icon.sc-scale-sidebar-nav-collapsible{opacity:1}/*!@.sidebar-nav-collapsible__button:focus .sidebar-nav-collapsible__icon*/.sidebar-nav-collapsible__button.sc-scale-sidebar-nav-collapsible:focus .sidebar-nav-collapsible__icon.sc-scale-sidebar-nav-collapsible{opacity:1}}/*!@.sidebar-nav-collapsible__list*/.sidebar-nav-collapsible__list.sc-scale-sidebar-nav-collapsible{list-style:none;padding-left:0;margin-top:0;margin-bottom:0;border-bottom-width:1px}/*!@.sidebar-nav-collapsible--condensed .sidebar-nav-collapsible__list*/.sidebar-nav-collapsible--condensed.sc-scale-sidebar-nav-collapsible .sidebar-nav-collapsible__list.sc-scale-sidebar-nav-collapsible{margin-top:1em;margin-left:var(--spacing-indent);margin-bottom:2em}";

class SidebarNavCollapsible {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** The parent wrapper */
    this.tag = 'li';
    /** The URL where the link should point to */
    this.href = '#';
    /** Label and icon get the active color */
    this.active = false;
    /** Bold label and icon */
    this.bold = false;
    /** Used normally for third level items */
    this.condensed = false;
    this.handleClick = (event) => {
      event.preventDefault();
      this.expanded = !this.expanded;
    };
    /**
     * Simulate a <button> allowing using the Space key for toggling the menu.
     */
    this.handleKeydown = (event) => {
      if (event.metaKey || event.ctrlKey || event.shiftKey) {
        return;
      }
      if (event.defaultPrevented) {
        return;
      }
      if (event.code === 'Space') {
        this.expanded = !this.expanded;
      }
    };
  }
  nestingLevelChanged(newValue) {
    if (newValue === 1) {
      this.bold = true;
    }
  }
  render() {
    const Tag = this.tag;
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync(Tag, { part: this.getBasePartMap(), class: this.getCssClassMap(), role: "listitem" }, hAsync("div", { class: "sidebar-nav-collapsible__wrapper", part: "wrapper" }, hAsync("a", { href: this.href, class: "sidebar-nav-collapsible__button", onClick: this.handleClick, onKeyDown: this.handleKeydown, role: "button", "aria-expanded": this.expanded ? 'true' : 'false', part: classnames('button', this.active && 'button-active') }, this.label, hAsync("scale-icon-navigation-collapse-down", { class: "sidebar-nav-collapsible__icon", selected: this.bold, size: 16, part: "icon" }))), hAsync("ul", { hidden: !this.expanded, class: "sidebar-nav-collapsible__list", part: "list" }, hAsync("slot", null)))));
  }
  getBasePartMap() {
    return this.getCssOrBasePartMap('basePart');
  }
  getCssClassMap() {
    return this.getCssOrBasePartMap('css');
  }
  getCssOrBasePartMap(mode) {
    const component = 'sidebar-nav-collapsible';
    const prefix = mode === 'basePart' ? '' : `${component}--`;
    return classnames(component, this.condensed && `${prefix}condensed`, this.active && `${prefix}active`);
  }
  get el() { return getElement$1(this); }
  static get watchers() { return {
    "nestingLevel": ["nestingLevelChanged"]
  }; }
  static get style() { return sidebarNavCollapsibleCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-sidebar-nav-collapsible",
    "$members$": {
      "tag": [1],
      "label": [1],
      "href": [1],
      "expanded": [1540],
      "active": [4],
      "bold": [4],
      "condensed": [4],
      "nestingLevel": [2, "nesting-level"],
      "styles": [1]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["expanded", "expanded"]]
  }; }
}

const sidebarNavItemCss = "/*!@:host*/.sc-scale-sidebar-nav-item-h{--border-bottom-color:var(--scl-color-grey-10);--border-left-color-third-nesting:var(--scl-color-grey-70);--color-active:var(--scl-color-primary-active);--color-primary:var(--scl-color-primary);--background-color-before-active:var(--color-primary);--font-weight-bold:var(--scl-font-weight-bold);--box-shadow-focus:inset 0 0 0 var(--scl-spacing-2) var(--scl-color-focus)}/*!@.sidebar-nav-item*/.sidebar-nav-item.sc-scale-sidebar-nav-item{border-bottom-style:solid;border-bottom-width:1px;border-bottom-color:var(--border-bottom-color)}/*!@.sidebar-nav-item--active*/.sidebar-nav-item--active.sc-scale-sidebar-nav-item{position:relative;color:var(--color-primary)}/*!@.sidebar-nav-item--active::before*/.sidebar-nav-item--active.sc-scale-sidebar-nav-item::before{content:'';display:block;position:absolute;top:0;left:var(--left-current-border, 0);width:0;height:100%;background-color:var(--background-color-before-active);border-left:2px solid transparent}/*!@.sidebar-nav-item--condensed.sidebar-nav-item--active::before*/.sidebar-nav-item--condensed.sidebar-nav-item--active.sc-scale-sidebar-nav-item::before{left:-1px}/*!@:host([nesting-level='1']) .sidebar-nav-item,\n.sidebar-nav-item--bold*/[nesting-level='1'].sc-scale-sidebar-nav-item-h .sidebar-nav-item.sc-scale-sidebar-nav-item,.sidebar-nav-item--bold.sc-scale-sidebar-nav-item{font-weight:var(--font-weight-bold)}/*!@:host([nesting-level='3']) .sidebar-nav-item*/[nesting-level='3'].sc-scale-sidebar-nav-item-h .sidebar-nav-item.sc-scale-sidebar-nav-item{border-left-color:var(--border-left-color-third-nesting);border-left-style:solid;border-left-width:0.0625rem}/*!@::slotted(a)*/.sc-scale-sidebar-nav-item-s>a{color:currentColor;display:block;padding-top:1rem;padding-right:1rem;padding-bottom:1rem;padding-left:var(--spacing-indent);border-radius:var(--scl-radius-2);text-decoration:none;outline:none}/*!@:host([nesting-level='2']) ::slotted(a)*/.sc-scale-sidebar-nav-item-h[nesting-level='2'] .sc-scale-sidebar-nav-item-s>a{padding-left:calc(var(--spacing-indent) + 0.75rem)}/*!@::slotted(a:hover)*/.sc-scale-sidebar-nav-item-s>a:hover{color:var(--color-primary)}/*!@::slotted(a:focus)*/.sc-scale-sidebar-nav-item-s>a:focus{box-shadow:var(--box-shadow-focus)}/*!@::slotted(a:active)*/.sc-scale-sidebar-nav-item-s>a:active{color:var(--color-active)}/*!@.sidebar-nav-item--condensed*/.sidebar-nav-item--condensed.sc-scale-sidebar-nav-item{border-bottom-width:0}/*!@.sidebar-nav-item--condensed ::slotted(a)*/.sidebar-nav-item--condensed .sc-scale-sidebar-nav-item-s>a{padding-top:0.5rem;padding-left:0.75rem;padding-right:0.5rem;padding-bottom:0.5rem}";

const SR_ACTIVE_TEXT = ' Zurzeit aktiv';
const isActive = (current) => {
  try {
    return !!JSON.parse(current);
  }
  catch (e) {
    if (typeof current === 'string') {
      return true;
    }
    return !!current;
  }
};
const getScreenReaderText = (current) => {
  let text;
  try {
    text = JSON.parse(current);
  }
  catch (e) {
    text = current;
  }
  return typeof text === 'string' && text.length > 0
    ? ` ${text}`
    : SR_ACTIVE_TEXT;
};
class SidebarNavItem {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** Used normally for third level items, remove the bottom border */
    this.condensed = false;
    /** Bold text */
    this.bold = false;
    /** Text gets the active color */
    this.active = false;
    /**
     * Mark the child link as "current" with `aria-current=page`.
     * Provide the text hint if needed, default is: "Zurzeit aktiv"
     */
    this.current = null;
  }
  nestingLevelChanged(newValue) {
    if (newValue === 1) {
      this.bold = true;
    }
  }
  currentChanged(newValue) {
    this.handleAriaCurrentInSlottedA(newValue);
    this.syncActiveToCurrent(newValue);
  }
  componentDidLoad() {
    this.handleAriaCurrentInSlottedA(this.current);
    if (this.current) {
      this.syncActiveToCurrent(this.current);
    }
  }
  /**
   * If an item is `current`, it should be `active` as well
   */
  syncActiveToCurrent(newValue) {
    this.active = isActive(newValue);
  }
  /**
   * When `current` is set, this will:
   * - set the aria-current=page attribute on the link
   * - append a text-only hint for screen readers
   * so we end up with something like this:
   * <a href="..." aria-current="page">
   *    Example<span style="...visible to SR only..."> Active link</span>
   * </a>
   * @param current this.current
   */
  handleAriaCurrentInSlottedA(current) {
    const a = this.el.querySelector('a');
    if (this.srOnlyElement != null) {
      a.removeChild(this.srOnlyElement);
      this.srOnlyElement = null;
    }
    if (a != null) {
      a.removeAttribute('aria-current');
    }
    if (isActive(current) && a != null) {
      this.srOnlyElement = this.createScreenReaderOnlySpan();
      a.appendChild(this.srOnlyElement);
      a.setAttribute('aria-current', 'page');
    }
  }
  createScreenReaderOnlySpan() {
    const text = getScreenReaderText(this.current);
    const span = document.createElement('span');
    // .sr-only but inline
    Object.assign(span.style, {
      position: 'absolute',
      left: '-10000px',
      overflow: 'hidden',
    });
    span.textContent = text;
    return span;
  }
  render() {
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync("li", { part: this.getBasePartMap(), class: this.getCssClassMap(), role: "listitem" }, hAsync("slot", null))));
  }
  getBasePartMap() {
    return this.getCssOrBasePartMap('basePart');
  }
  getCssClassMap() {
    return this.getCssOrBasePartMap('css');
  }
  getCssOrBasePartMap(mode) {
    const component = 'sidebar-nav-item';
    const prefix = mode === 'basePart' ? '' : `${component}--`;
    return classnames(component, this.bold && `${prefix}bold`, this.condensed && `${prefix}condensed`, this.active && `${prefix}active`);
  }
  get el() { return getElement$1(this); }
  static get watchers() { return {
    "nestingLevel": ["nestingLevelChanged"],
    "current": ["currentChanged"]
  }; }
  static get style() { return sidebarNavItemCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-sidebar-nav-item",
    "$members$": {
      "condensed": [4],
      "bold": [4],
      "active": [1540],
      "current": [8],
      "nestingLevel": [2, "nesting-level"],
      "styles": [1]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["active", "active"]]
  }; }
}

const sliderCss = "/*!@:host*/.sc-scale-slider-h{--border:1px solid var(--scl-color-grey-60);--background-bar:var(--scl-color-primary);--border-color-thumb:var(--scl-color-grey-60);--box-shadow-thumb:var(--scl-shadow-level-0);--border-color-thumb-hover:var(--scl-color-primary-hover);--border-color-thumb-active:var(--scl-color-primary-active);--box-shadow-thumb-focus:0 0 0 var(--scl-spacing-2) var(--scl-color-focus);--color-display-value:var(--scl-color-grey-60);--font-weight-display-value:var(--scl-font-weight-bold);--font-size-display-value:var(--scl-font-size-12);--background-track:var(--scl-color-grey-50);--background-bar-disabled:var(--scl-color-grey-50);--color-label-disabled:var(--scl-color-grey-50)}/*!@.slider*/.slider.sc-scale-slider{width:100%;display:block;align-items:center}/*!@.slider .slider__track-wrapper*/.slider.sc-scale-slider .slider__track-wrapper.sc-scale-slider{display:flex;align-items:center}/*!@.slider .slider__track*/.slider.sc-scale-slider .slider__track.sc-scale-slider{width:303px;border:var(--border);height:6px;margin:16px 0;display:flex;position:relative;box-sizing:border-box;align-items:center;border-radius:100px}/*!@.slider .slider__bar*/.slider.sc-scale-slider .slider__bar.sc-scale-slider{height:6px;z-index:-1;position:absolute;border-radius:100px;background-color:var(--background-bar)}/*!@.slider .slider__thumb-wrapper*/.slider.sc-scale-slider .slider__thumb-wrapper.sc-scale-slider{width:32px;height:32px;display:flex;z-index:1;position:absolute;text-align:center;align-items:center;margin-left:-16px;justify-content:center;background-color:transparent}/*!@.slider .slider__thumb*/.slider.sc-scale-slider .slider__thumb.sc-scale-slider{width:16px;border:1px solid;height:16px;outline:none;box-sizing:border-box;border-color:var(--border-color-thumb);border-radius:50%;background-color:#fff;box-shadow:var(--scl-shadow-level-0)}/*!@.slider .slider__display-value*/.slider.sc-scale-slider .slider__display-value.sc-scale-slider{color:var(--color-display-value);margin-left:24px;font-weight:var(--font-weight-display-value);font-size:var(--font-size-display-value)}/*!@.slider .slider__thumb:hover*/.slider.sc-scale-slider .slider__thumb.sc-scale-slider:hover{border-color:var(--border-color-thumb-hover)}/*!@.slider .slider__thumb:active*/.slider.sc-scale-slider .slider__thumb.sc-scale-slider:active{border-color:var(--border-color-thumb-active)}/*!@.slider .slider__thumb:focus*/.slider.sc-scale-slider .slider__thumb.sc-scale-slider:focus{box-shadow:var(--box-shadow-thumb-focus)}/*!@.slider .slider__thumb-wrapper:hover*/.slider.sc-scale-slider .slider__thumb-wrapper.sc-scale-slider:hover{cursor:grab}/*!@.slider .slider__thumb-wrapper:active*/.slider.sc-scale-slider .slider__thumb-wrapper.sc-scale-slider:active{cursor:grabbing}/*!@.slider--track-small .slider__track*/.slider--track-small.sc-scale-slider .slider__track.sc-scale-slider{border:none;height:1px;border-top:1px solid transparent;background-color:var(--background-track)}/*!@.slider--track-small .slider__bar*/.slider--track-small.sc-scale-slider .slider__bar.sc-scale-slider{border:1px solid transparent;height:3px;z-index:1;box-sizing:border-box}/*!@.slider--thumb-large .slider__thumb*/.slider--thumb-large.sc-scale-slider .slider__thumb.sc-scale-slider{width:24px;height:24px}/*!@.slider--disabled .slider__track-wrapper*/.slider--disabled.sc-scale-slider .slider__track-wrapper.sc-scale-slider{cursor:not-allowed}/*!@.slider--disabled .slider__bar*/.slider--disabled.sc-scale-slider .slider__bar.sc-scale-slider{background-color:var(--background-bar-disabled)}/*!@.slider--disabled .slider__thumb*/.slider--disabled.sc-scale-slider .slider__thumb.sc-scale-slider{display:none}/*!@.slider--disabled .slider__label*/.slider--disabled.sc-scale-slider .slider__label.sc-scale-slider{color:var(--color-label-disabled)}/*!@.slider--disabled .slider__thumb-wrapper:hover*/.slider--disabled.sc-scale-slider .slider__thumb-wrapper.sc-scale-slider:hover{cursor:not-allowed}";

let i$6 = 0;
class Slider {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.scaleChange = createEvent$1(this, "scale-change", 7);
    this.scaleChangeLegacy = createEvent$1(this, "scaleChange", 7);
    this.scaleInput = createEvent$1(this, "scale-input", 7);
    this.scaleInputLegacy = createEvent$1(this, "scaleInput", 7);
    /** t(optional) he minimal value of the slider */
    this.min = 0;
    /** (optional) the maximal value of the slider */
    this.max = 100;
    /** (optional) the step size to increase or decrease when dragging slider */
    this.step = 1;
    /** (optional) slider display value */
    this.showValue = true;
    /** (optional) slider value unit */
    this.unit = '%';
    /** (optional) number of decimal places */
    this.decimals = 0;
    /** (optional) disabled  */
    this.disabled = false;
    /** (optional) smaller track */
    this.trackSmall = false;
    /** (optional) larger thumb */
    this.thumbLarge = false;
    this.onButtonDown = () => {
      if (this.disabled) {
        return;
      }
      this.onDragStart();
      this.addGlobalListeners();
    };
    this.onKeyDown = (event) => {
      let steps = 0;
      if (['ArrowRight', 'ArrowLeft'].includes(event.key)) {
        steps = event.key === 'ArrowRight' ? this.step : -this.step;
      }
      if (['ArrowUp', 'ArrowDown'].includes(event.key)) {
        steps = event.key === 'ArrowUp' ? this.step * 10 : -this.step * 10;
      }
      this.setValue(this.value + steps);
    };
    this.onDragStart = () => {
      this.dragging = true;
      this.offsetLeft = this.sliderTrack.getBoundingClientRect().left;
    };
    this.onDragging = (event) => {
      const { dragging, offsetLeft } = this;
      if (dragging) {
        const currentX = this.handleTouchEvent(event).clientX;
        const position = ((currentX - offsetLeft) / this.sliderTrack.offsetWidth) * 100;
        const nextValue = (position * (this.max - this.min)) / 100 + this.min;
        // https://stackoverflow.com/q/14627566
        const roundedNextValue = Math.ceil(nextValue / this.step) * this.step;
        this.setValue(roundedNextValue);
      }
    };
    this.onDragEnd = () => {
      this.dragging = false;
      emitEvent$1(this, 'scaleChange', this.value);
      this.removeGlobalListeners();
    };
    this.setValue = (nextValue) => {
      this.value = this.clamp(nextValue);
      emitEvent$1(this, 'scaleInput', this.value);
    };
    this.setPosition = () => {
      if (!this.value) {
        this.position = 0;
        return;
      }
      const clampedValue = this.clamp(this.value);
      // https://stackoverflow.com/a/25835683
      this.position = ((clampedValue - this.min) * 100) / (this.max - this.min);
    };
    this.clamp = (val) => {
      return Math.min(Math.max(val, this.min), this.max);
    };
    this.onDragging = this.onDragging.bind(this);
    this.onDragEnd = this.onDragEnd.bind(this);
  }
  componentWillLoad() {
    if (this.sliderId == null) {
      this.sliderId = 'slider-' + i$6++;
    }
    this.setPosition();
  }
  disconnectedCallback() {
    this.removeGlobalListeners();
  }
  componentDidLoad() {
    if (this.customColor !== undefined) {
      statusNote({
        tag: 'deprecated',
        message: `Property "customColor" is deprecated. 
          Please use css variable "--background-bar" to set the slider-bar color;
          e.g. <scale-slider value="20" style="--background-bar: green"></scale-slider>`,
        type: 'warn',
        source: this.hostElement,
      });
    }
  }
  handleTouchEvent(event) {
    return event.type.indexOf('touch') === 0 ? event.touches[0] : event;
  }
  handleValueChange() {
    this.setPosition();
  }
  addGlobalListeners() {
    window.addEventListener('mousemove', this.onDragging.bind(this));
    window.addEventListener('mouseup', this.onDragEnd.bind(this));
    window.addEventListener('touchmove', this.onDragging.bind(this));
    window.addEventListener('touchend', this.onDragEnd.bind(this));
  }
  removeGlobalListeners() {
    window.removeEventListener('mousemove', this.onDragging);
    window.removeEventListener('mouseup', this.onDragEnd);
    window.removeEventListener('touchmove', this.onDragging);
    window.removeEventListener('touchend', this.onDragEnd);
  }
  render() {
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync("div", { part: this.getBasePartMap(), class: this.getCssClassMap() }, !!this.label && (hAsync("label", { part: "label", class: "slider__label", id: `${this.sliderId}-label`, htmlFor: this.sliderId }, this.label)), hAsync("div", { part: "track-wrapper", class: "slider__track-wrapper" }, hAsync("div", { part: "track", class: "slider__track", ref: (el) => (this.sliderTrack = el) }, hAsync("div", { part: "bar", class: "slider__bar", style: {
        width: `${this.position}%`,
        backgroundColor: this.customColor
          ? this.customColor
          : this.disabled
            ? `var(--background-bar-disabled)`
            : `var(--background-bar)`,
      } }), hAsync("div", { part: "thumb-wrapper", class: "slider__thumb-wrapper", style: { left: `${this.position}%` }, onMouseDown: this.onButtonDown, onTouchStart: this.onButtonDown }, hAsync("div", { part: "thumb", class: "slider__thumb", tabindex: "0", role: "slider", id: this.sliderId, "aria-valuemin": this.min, "aria-valuenow": this.value, "aria-valuemax": this.max, "aria-valuetext": `${this.value}`, "aria-labelledby": `${this.sliderId}-label`, "aria-orientation": "horizontal", "aria-disabled": this.disabled, onKeyDown: this.onKeyDown }))), this.showValue && (hAsync("div", { part: "display-value", class: "slider__display-value" }, this.value != null && this.value.toFixed(this.decimals), this.value != null && this.unit))))));
  }
  getBasePartMap() {
    return this.getCssOrBasePartMap('basePart');
  }
  getCssClassMap() {
    return this.getCssOrBasePartMap('css');
  }
  getCssOrBasePartMap(mode) {
    const component = 'slider';
    const prefix = mode === 'basePart' ? '' : `${component}--`;
    return classnames(component, this.disabled && `${prefix}disabled`, this.trackSmall && `${prefix}track-small`, this.thumbLarge && `${prefix}thumb-large`);
  }
  get hostElement() { return getElement$1(this); }
  static get watchers() { return {
    "value": ["handleValueChange"]
  }; }
  static get style() { return sliderCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-slider",
    "$members$": {
      "value": [2],
      "min": [2],
      "max": [2],
      "step": [2],
      "label": [1],
      "showValue": [4, "show-value"],
      "unit": [1],
      "decimals": [2],
      "customColor": [1, "custom-color"],
      "disabled": [4],
      "trackSmall": [4, "track-small"],
      "thumbLarge": [4, "thumb-large"],
      "sliderId": [1, "slider-id"],
      "styles": [1],
      "position": [32]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

class SsrSlotFix {
  constructor(hostRef) {
    registerInstance(this, hostRef);
  }
  render() {
    return (hAsync(Host$1, null, hAsync("slot", null)));
  }
  static get cmpMeta() { return {
    "$flags$": 4,
    "$tagName$": "scale-ssr-slot-fix",
    "$members$": undefined,
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const switchCss = ".switch{--size:20px;--offset:2px;--color-off:var(--scl-color-text-standard);--color-on:var(--scl-color-primary);--color-active:var(--scl-color-primary-active);--color-hover:var(--scl-color-primary-hover);--color-disabled:var(--scl-color-background-disabled);--color-state:var(--color-off);--color-state-contrast:var(--scl-color-background-standard);--color-background:var(--color-state-contrast);--color-toggle:var(--color-state);--color-text:var(--color-state);--transition-duration:var(--scl-motion-duration-fast);--transition-timing-function:var(--scl-motion-easing-standard);--box-shadow-focus:0 0 0 var(--scl-spacing-2) var(--scl-color-focus);--spacing-left:var(--scl-spacing-8);--font-weight:var(--scl-font-weight-medium);display:inline-block;position:relative}.switch label{cursor:pointer}.switch input{width:0;height:0;opacity:0;position:absolute}.switch .switch__wrapper{position:relative;border:1px solid var(--color-state);border-radius:calc(var(--size) / 2);width:calc(2 * var(--size) - var(--offset));height:calc(var(--size) - var(--offset));display:inline-flex;justify-content:space-between;background:var(--color-background);transition-property:background;transition-duration:var(--transition-duration);transition-timing-function:var(--transition-timing-function)}.switch .switch__text{display:flex;width:100%;color:var(--color-text);justify-content:space-evenly;font-size:var(--scl-font-size-12);line-height:calc(var(--size) - var(--offset));transition-property:color;transition-duration:var(--transition-duration);transition-timing-function:var(--transition-timing-function)}.switch .switch__text:before{content:'I'}.switch .switch__text:after{content:'0';position:relative;right:-1px}.switch .switch__toggle{position:absolute;border-radius:50%;padding:calc(0.5 * var(--size) - var(--offset));margin:calc(-0.5 * var(--size) + var(--offset));background:var(--color-toggle);left:calc(0.5 * var(--size) - 0.5 * var(--offset));top:50%;transition-property:transform, background;transition-duration:var(--transition-duration);transition-timing-function:var(--transition-timing-function)}.switch input:checked:disabled+.switch__wrapper .switch__toggle,.switch input:not(:checked):not(:disabled):active+.switch__wrapper .switch__toggle,.switch input:checked:not(:disabled):not(:active)+.switch__wrapper .switch__toggle{transform:translateX(var(--size))}.switch .switch__label{cursor:inherit;color:var(--color-text);margin-left:var(--spacing-left);font-weight:var(--font-weight);transition-property:color;transition-duration:var(--transition-duration);transition-timing-function:var(--transition-timing-function)}.switch--focus-visible-not-supported input:focus~.switch__wrapper{box-shadow:var(--box-shadow-focus)}.switch--focus-visible-supported input:focus-visible~.switch__wrapper{box-shadow:var(--box-shadow-focus)}.switch input:checked~.switch__wrapper{--color-state:var(--color-on);--color-background:var(--color-state);--color-toggle:var(--color-state-contrast);--color-text:var(--color-state-contrast)}.switch:hover,.switch:hover input~.switch__wrapper{--color-state:var(--color-hover)}.switch input:not(:disabled):active~.switch__wrapper{--color-state:var(--color-active);--color-background:var(--color-state);--color-toggle:var(--color-state-contrast);--color-text:var(--color-state-contrast)}.switch input:checked:not(:disabled):active~.switch__wrapper{--color-state:var(--color-active);--color-background:var(--color-state-contrast);--color-toggle:var(--color-active);--color-text:var(--color-active)}.switch input:not(:disabled):active~.switch__label{--color-text:var(--color-active)}.switch.switch--disabled{--color-state:var(--color-disabled);--color-hover:var(--color-disabled);--color-toggle:var(--color-disabled);--color-text:var(--color-disabled)}.switch.switch--disabled label{cursor:not-allowed}.switch.switch--disabled input:checked~.switch__wrapper{--color-state:var(--color-disabled);--color-toggle:var(--color-state-contrast);--color-text:var(--color-state-contrast)}";

let i$5 = 0;
// For chrome that applies :focus upon click, and :focus-visible isn't widely supported
const isFocusVisibleSupported = isPseudoClassSupported(':focus-visible');
class Switch {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.scaleChange = createEvent$1(this, "scale-change", 7);
    this.scaleChangeLegacy = createEvent$1(this, "scaleChange", 7);
    /** (optional) Active switch */
    this.checked = false;
    /** (optional) Disabled switch */
    this.disabled = false;
  }
  componentWillLoad() {
    if (this.inputId == null) {
      this.inputId = 'switch-' + i$5++;
    }
  }
  render() {
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync("div", { class: this.getCssClassMap() }, hAsync("label", { id: `${this.inputId}-label` }, hAsync("input", { type: "checkbox", name: this.name, checked: this.checked, disabled: this.disabled, "aria-labelledby": `${this.inputId}-label`, id: this.inputId, onChange: (e) => {
        this.checked = e.target.checked;
        // bubble event through the shadow dom
        emitEvent$1(this, 'scaleChange', { value: this.checked });
      } }), hAsync("div", { class: "switch__wrapper" }, hAsync("div", { class: "switch__toggle" }), hAsync("div", { class: "switch__text" })), this.label && hAsync("span", { class: "switch__label" }, this.label)))));
  }
  getCssClassMap() {
    return classnames('switch', this.disabled && 'switch--disabled', isFocusVisibleSupported && 'switch--focus-visible-supported', !isFocusVisibleSupported && 'switch--focus-visible-not-supported');
  }
  static get style() { return switchCss; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-switch",
    "$members$": {
      "checked": [1540],
      "disabled": [4],
      "name": [1],
      "inputId": [1025, "input-id"],
      "label": [1],
      "styles": [1]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["checked", "checked"]]
  }; }
}

const iconCss$I = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class TProductMagentaCloud {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M20.575 9.265A6.86 6.86 0 009.405 6.21 3.915 3.915 0 008.12 6a3.96 3.96 0 00-3.955 3.865 4.375 4.375 0 002.25 8.37 8.225 8.225 0 005.335 2V15.03H8.43l4.07-5 4.075 5H13.25v5.09a8.23 8.23 0 003.61-1.62 5 5 0 003.715-9.245v.01z" }))) : (hAsync("g", null, hAsync("path", { d: "M20.7 8.75c-.45-1.3-1.25-2.4-2.25-3.25-1.35-1.15-3.05-1.8-4.95-1.8-1.75 0-3.45.6-4.8 1.7-.35-.1-.75-.15-1.1-.15-2.4 0-4.4 1.8-4.65 4.15-1.65.9-2.7 2.6-2.7 4.5 0 1.7.8 3.15 2.05 4.1 1 .75 2.2 1.1 3.35 1 1.6 1.3 3.6 2 5.65 2 1.9 0 3.65-.55 5.2-1.65.5.15 1 .2 1.5.2 3.15 0 5.75-2.6 5.75-5.75 0-2.1-1.2-4.1-3.05-5.05zm-2.7 9.3c-.9 0-1.55-.3-1.8-.4-.3.2-1.3 1.25-3.45 1.7V15h3.3L12 10l-4.05 5h3.3v4.5c-.85 0-1.65-.15-2.45-.45a7.49 7.49 0 01-2.65-1.65c-.6.05-1.95.3-3.25-.9-.7-.65-1.2-1.6-1.2-2.65 0-2.75 2.6-3.5 2.65-3.55.05-.2-.2-1.65 1.1-2.8C6.4 6.7 7.7 6.45 9 7c1.55-1.55 3.35-1.9 4.45-1.9 1.5 0 2.85.5 3.95 1.4 1.5 1.25 1.9 2.85 2 3.2 0 0 2.8 1 2.8 4 .05 2.45-1.85 4.35-4.2 4.35z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$I; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-t-product-magenta-cloud",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$H = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class TProductMagentaTv {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M22.825 10.75L18.5 3.25A2.5 2.5 0 0016.33 2H7.67A2.5 2.5 0 005.5 3.25l-4.33 7.5a2.5 2.5 0 000 2.5l4.33 7.5A2.5 2.5 0 007.67 22h8.66a2.5 2.5 0 002.17-1.25l4.33-7.5a2.5 2.5 0 00-.005-2.5zM9.5 16.33V7.67L17 12l-7.5 4.33z" }))) : (hAsync("g", null, hAsync("path", { d: "M16.35 2c.85 0 1.7.5 2.15 1.25l4.35 7.5c.4.75.4 1.75-.05 2.5l-4.35 7.5C18 21.5 17.2 22 16.3 22H7.65c-.9 0-1.7-.5-2.15-1.25l-4.35-7.5c-.45-.75-.45-1.75 0-2.5l4.35-7.5C5.95 2.5 6.75 2 7.65 2zm-.05 1.5H7.65c-.35 0-.65.2-.85.5l-4.35 7.5c-.2.3-.2.7 0 1L6.8 20c.15.3.5.5.85.5h8.7c.35 0 .65-.2.85-.5l4.35-7.5c.15-.3.15-.7-.05-1L17.15 4c-.15-.3-.5-.5-.85-.5zM9.5 7.65L17 12l-7.5 4.35z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$H; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-t-product-magenta-tv",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$G = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class TProductMagentaone {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M12.315 15.1a1.255 1.255 0 00.885 2.135c.331-.001.65-.132.885-.365l2.05-2.05c.234-.235.365-.553.365-.885V1.75c0-.69-.56-1.25-1.25-1.25h-6a1.25 1.25 0 00-1 .5L3.07 8.265A1.25 1.25 0 003.375 10l4 2.77A1.24 1.24 0 009 12.625v9.625c0 .69.56 1.25 1.25 1.25h5c.69 0 1.25-.56 1.25-1.25v-3.04a1.25 1.25 0 10-2.5 0V21h-2.5V8.08c0-.04-.025-.08-.035-.125l-.04-.105a.775.775 0 00-.06-.11.695.695 0 00-.13-.195c-.03-.03-.05-.065-.08-.09l-.08-.07-.115-.085-.075-.035a1.05 1.05 0 00-.13-.065l-.11-.035-.145-.05h-.225a1.15 1.15 0 00-.13 0 .8.8 0 00-.115 0 .585.585 0 00-.1.03 1 1 0 00-.13.045.345.345 0 00-.095.05.855.855 0 00-.205.135l-.095.085a.5.5 0 00-.065.08.5.5 0 00-.09.115L7.735 10 5.84 8.695 9.915 3H14v10.415L12.315 15.1z" }))) : (hAsync("g", null, hAsync("path", { d: "M12.65 16.55c-.3.3-.3.75 0 1.05s.75.3 1.05 0l2.05-2.05c.15-.15.2-.35.2-.55V1.75c.05-.4-.3-.75-.7-.75h-6c-.25 0-.45.1-.6.3L3.5 8.55c-.1.15-.15.35-.15.55.05.2.15.35.3.5l4 2.75c.15.1.4.15.6.1s.4-.15.5-.35l.75-1.2v11.3c0 .4.35.75.75.75h5c.4 0 .75-.35.75-.75v-3.05c0-.4-.35-.75-.75-.75s-.75.4-.75.8v2.3H11V8.55l.8-1.3a.8.8 0 00-.25-1.05.8.8 0 00-1.05.25l-2.65 4.2-2.75-1.9 4.5-6.3h4.9V14.7z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$G; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-t-product-magentaone",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$F = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class TProductMeasureInternetSpeed {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M12 1.75a10.24 10.24 0 00-6.695 18h13.39A10.24 10.24 0 0012 1.75zM6 12H4.5a7.5 7.5 0 0113.8-4.055 2 2 0 00-.45.125l-1 .425A6 6 0 006 12zm13-1.605l-4.5 3.69a2.5 2.5 0 11-1.435-2.345l5.38-2.285a.555.555 0 01.555.94zm.5 1.535V12h-.09l.09-.07z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M12 1c6.05 0 11 4.95 11 11 0 2.6-.95 5.1-2.6 7.1-.6.7-1.1 1.1-1.45 1.4H5c-.35-.3-.85-.7-1.45-1.45C1.9 17.05 1 14.6 1 12 1 5.95 5.95 1 12 1zm0 1.5c-5.25 0-9.5 4.25-9.5 9.5 0 2.65 1.1 5.2 3.1 7h12.8c2-1.8 3.1-4.35 3.1-7 0-5.25-4.25-9.5-9.5-9.5zm6.45 7c.25-.15.55 0 .7.2l.03.081c.055.203-.005.488-.18.619l-4.5 3.7a2.487 2.487 0 01-2.5 2.4c-1.4 0-2.5-1.1-2.5-2.5s1.1-2.5 2.5-2.5c.4 0 .75.1 1.05.3zM12 4.5c2.6 0 4.9 1.35 6.25 3.4l-1.4.6C15.75 7 14 6 12 6c-3.3 0-6 2.7-6 6H4.5c0-4.15 3.35-7.5 7.5-7.5z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$F; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-t-product-measure-internet-speed",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$E = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class TProductSeamlessConnectivity {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M21.005 5.102a4.195 4.195 0 00-4.651.922l-.927.926-8.64 8.64-.921.922a2.227 2.227 0 01-3.807-1.574V9.043a2.203 2.203 0 011.378-2.059c.277-.114.574-.173.873-.173.586 0 1.148.237 1.556.658l3.724 3.725 1.44-1.44-3.724-3.725a4.205 4.205 0 00-4.656-.922A4.196 4.196 0 000 9.043v5.914a4.21 4.21 0 002.635 3.945 4.214 4.214 0 004.656-.926l.922-.926 8.64-8.64.921-.922A2.227 2.227 0 0121.6 9.043v5.914a2.227 2.227 0 01-3.806 1.574l-3.725-3.725-1.44 1.44 3.73 3.73a4.214 4.214 0 002.99 1.262 4.32 4.32 0 001.66-.336 4.21 4.21 0 002.636-3.945V9.043a4.195 4.195 0 00-2.64-3.94z" }))) : (hAsync("g", null, hAsync("path", { d: "M21.45 5.1c-1.6-.65-3.3-.3-4.5.9L6 16.95c-.9.9-2.1.9-2.85.55-.8-.3-1.65-1.1-1.65-2.4V8.9c0-1.3.85-2.1 1.65-2.45.9-.4 2.05-.25 2.85.55l3.9 3.9 1.05-1.05L7.05 6c-1.2-1.2-2.95-1.55-4.5-.9S0 7.2 0 8.9v6.15c0 1.7 1 3.15 2.55 3.8s3.3.3 4.5-.9L18 7.05c.9-.9 2.1-.9 2.85-.55.8.35 1.65 1.15 1.65 2.45v6.15c0 1.3-.85 2.1-1.65 2.45S18.9 17.9 18 17l-3.9-3.9-1.05 1.05 3.9 3.9c1.2 1.2 2.95 1.55 4.5.9s2.55-2.1 2.55-3.8V8.9c0-1.7-1-3.15-2.55-3.8z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$E; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-t-product-seamless-connectivity",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$D = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class TProductTelekomShopB {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M22.884 5.302h-.837V.558H1.953v4.744h-.837C.5 5.302 0 5.802 0 6.42v3.348h1.674v13.396h20.652V9.767H24V6.42c0-.617-.5-1.117-1.116-1.117zM3.628 2.232h16.744v3.07H3.628v-3.07zm10.437 18.42h-4.13v-.475c.244.008.49-.007.731-.045a.72.72 0 00.603-.558 2.79 2.79 0 00.067-.714v-6.18a2.182 2.182 0 00-1.641.715 3.349 3.349 0 00-.692 1.937l-.447-.072.084-2.959h6.698l.083 2.959-.446.072a3.349 3.349 0 00-.675-1.937 2.233 2.233 0 00-1.675-.692v6.151c-.047.369.038.743.24 1.055.192.162.435.251.687.251h.49l.023.491zM8.567 17.86v-1.73h1.714v1.73H8.567zm6.888 0H13.74v-1.73h1.714v1.73z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M21 1.5V5h.75c.95 0 1.75.8 1.75 1.75V9H22v13.5H2V9H.5V6.75C.5 5.8 1.3 5 2.25 5H3V1.5h18zM20.5 9h-17v12h17V9zM15 11l.1 2.65-.4.05c-.05-.8-.25-1.35-.6-1.75-.4-.4-.85-.6-1.5-.6v5.55c0 .5.05.8.2.95.1.15.3.2.6.25h.45v.4h-3.7v-.35c.3 0 .5 0 .65-.05.3-.05.5-.25.55-.5.05-.15.05-.35.05-.65V11.4c-.6 0-1.1.2-1.45.6-.35.35-.55.95-.6 1.7l-.4-.05L9 11h6zm.1 3.45v1.5h-1.55v-1.5h1.55zm-4.65 0v1.5H8.9v-1.5h1.55zM19.5 3h-15v2h15V3z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$D; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-t-product-telekom-shop-b",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$C = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class TProductUsage {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M12 1.75C6.34 1.75 1.75 6.34 1.75 12S6.34 22.25 12 22.25 22.25 17.66 22.25 12A10.25 10.25 0 0012 1.75zM7.5 12h-3c0-1.21.295-2.4.86-3.47l.05.06 2.245 2.25A4.67 4.67 0 007.5 12zm4.5 1.5a1.5 1.5 0 01-1.5-1.5c.003-.13.021-.26.055-.385L6.47 7.53a.75.75 0 011.06-1.06l4.085 4.085c.126-.034.255-.052.385-.055a1.5 1.5 0 010 3zm4.5-1.5A4.5 4.5 0 0012 7.5a4.67 4.67 0 00-1.16.155L8.59 5.41l-.06-.05A7.43 7.43 0 0112 4.5a7.5 7.5 0 017.5 7.5h-3z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M12 1c6.05 0 11 4.95 11 11s-4.95 11-11 11S1 18.05 1 12 5.95 1 12 1zm0 1.5c-5.25 0-9.5 4.25-9.5 9.5s4.25 9.5 9.5 9.5 9.5-4.25 9.5-9.5-4.25-9.5-9.5-9.5zM6.45 6.45c.3-.3.75-.3 1.05 0l4.1 4.1c.15-.05.25-.05.4-.05.85 0 1.5.65 1.5 1.5s-.65 1.5-1.5 1.5-1.5-.65-1.5-1.5c0-.15 0-.25.05-.4l-4.1-4.1c-.3-.3-.3-.75 0-1.05zm-1.1 2.1l2.3 2.3c-.1.35-.15.75-.15 1.15h-3c0-1.25.3-2.45.85-3.45zM12 4.5c4.15 0 7.5 3.35 7.5 7.5h-3c0-2.5-2-4.5-4.5-4.5-.4 0-.8.05-1.15.15l-2.3-2.3c1-.55 2.2-.85 3.45-.85z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$C; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-t-product-usage",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const tabHeaderCss = "/*!@:host*/.sc-scale-tab-header-h{outline:none;--font-family:var(--scl-font-family-sans, TeleNeoWeb);--font-weight:var(--scl-font-weight-bold);--height-small:2rem;--color-hover:var(--scl-color-primary-hover);--color-selected:var(--scl-color-primary);--background-underline-hover:var(--scl-color-primary-hover);--background-underline-active:var(--scl-color-primary-active);--color-active:var(--scl-color-primary-active);--box-shadow-focus:0 0 0 var(--scl-spacing-2) var(--scl-color-focus);--spacing-right-slotted:var(--scl-spacing-8);--color-disabled:var(--scl-color-background-disabled)}/*!@.tab-header*/.tab-header.sc-scale-tab-header{cursor:pointer;display:inline-flex;outline:none;position:relative;box-sizing:border-box;align-items:center;padding-left:0;height:var(--tab-height);margin-right:var(--tab-spacing);padding-right:var(--tab-spacing);font-family:var(--font-family);font-size:calc(var(--tab-height) / 2);font-weight:var(--scl-font-weight-bold);border-radius:var(--tab-radius)}/*!@.tab-header--small*/.tab-header--small.sc-scale-tab-header{--tab-height:var(--height-small)}/*!@.tab-header--disabled*/.tab-header--disabled.sc-scale-tab-header{cursor:auto;color:var(--color-disabled)}/*!@.tab-header--disabled:active*/.tab-header--disabled.sc-scale-tab-header:active{color:var(--color-disabled)}/*!@.tab-header--disabled:hover*/.tab-header--disabled.sc-scale-tab-header:hover{color:var(--color-disabled) !important}/*!@.tab-header--disabled:hover:after*/.tab-header--disabled.sc-scale-tab-header:hover:after{background-color:var(--color-disabled) !important}/*!@.tab-header:after*/.tab-header.sc-scale-tab-header:after{left:0;right:0;width:100%;bottom:0;content:'';display:block;position:absolute;height:var(--tab-border-size);background-color:var(--tab-border-color)}/*!@.tab-header:before*/.tab-header.sc-scale-tab-header:before{left:0;right:0;width:100%;bottom:0;height:0;content:'';display:block;z-index:1;position:absolute;border-top:1px solid transparent}/*!@.tab-header:hover*/.tab-header.sc-scale-tab-header:hover{color:var(--color-hover)}/*!@.tab-header:hover:after*/.tab-header.sc-scale-tab-header:hover:after{background-color:var(--background-underline-hover)}/*!@.tab-header:active*/.tab-header.sc-scale-tab-header:active{color:var(--color-active)}/*!@.tab-header:active:after*/.tab-header.sc-scale-tab-header:active:after{background-color:var(--background-underline-active)}/*!@.tab-header ::slotted(*)*/.tab-header .sc-scale-tab-header-s>*{margin-right:var(--spacing-right-slotted)}/*!@.tab-header--has-focus*/.tab-header--has-focus.sc-scale-tab-header{box-shadow:var(--box-shadow-focus)}/*!@.tab-header--selected*/.tab-header--selected.sc-scale-tab-header{color:var(--color-selected)}/*!@.tab-header--selected:after*/.tab-header--selected.sc-scale-tab-header:after{border-top-left-radius:var(--scl-radius-8);border-top-right-radius:var(--scl-radius-8);height:var(--tab-border-size-selected);background-color:var(--color-selected)}/*!@.tab-header--selected:before*/.tab-header--selected.sc-scale-tab-header:before{border-top:var(--tab-border-size-selected) solid transparent}";

let i$4 = 0;
class TabHeader {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.generatedId = i$4++;
    /** True for a disabled Tabnavigation */
    this.disabled = false;
    /** True for smaller height and font size */
    // DEPRECATED - size should replace small
    this.small = false;
    /** (optional) size  */
    this.size = 'large';
    this.hasFocus = false;
  }
  selectedChanged(newValue) {
    if (!this.disabled) {
      if (newValue === true) {
        // Having focus on the host element, and not on inner elements,
        // is required because screen readers.
        this.el.focus();
      }
      this.updateSlottedIcon();
    }
  }
  componentDidRender() {
    if (this.small !== false) {
      statusNote({
        tag: 'deprecated',
        message: 'Property "small" is deprecated. Please use the "size" property!',
        type: 'warn',
        source: this.el,
      });
    }
  }
  /**
   * Find slotted icons, and if any, add the `selected` attribute accordingly.
   */
  updateSlottedIcon() {
    const slot = this.container.querySelector('slot');
    if (slot === null) {
      return;
    }
    const children = Array.from(slot.assignedNodes())
      .filter((node) => node.nodeType === 1)
      .filter((node) => node.nodeName.toUpperCase().indexOf('ICON') > -1);
    if (children.length === 0) {
      return;
    }
    const action = this.selected ? 'setAttribute' : 'removeAttribute';
    children.forEach((child) => child[action]('selected', ''));
  }
  render() {
    return (hAsync(Host$1, { id: `scale-tab-header-${this.generatedId}`, role: this.disabled ? false : 'tab', "aria-selected": this.selected ? 'true' : 'false', tabindex: this.disabled ? false : this.selected ? '0' : '-1', onFocus: () => (this.hasFocus = true), onBlur: () => (this.hasFocus = false) }, this.styles && hAsync("style", null, this.styles), hAsync("span", { part: this.getBasePartMap(), ref: (el) => (this.container = el), class: this.getCssClassMap() }, hAsync("slot", null))));
  }
  getBasePartMap() {
    return this.getCssOrBasePartMap('basePart');
  }
  getCssClassMap() {
    return this.getCssOrBasePartMap('css');
  }
  getCssOrBasePartMap(mode) {
    const component = 'tab-header';
    const prefix = mode === 'basePart' ? '' : `${component}--`;
    return classnames(component, this.selected && `${prefix}selected`, (this.size === 'small' || this.small) && `${prefix}small`, this.hasFocus && `${prefix}has-focus`, this.disabled && `${prefix}disabled`);
  }
  get el() { return getElement$1(this); }
  static get watchers() { return {
    "selected": ["selectedChanged"]
  }; }
  static get style() { return tabHeaderCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-tab-header",
    "$members$": {
      "disabled": [4],
      "small": [4],
      "size": [1],
      "styles": [1],
      "selected": [4],
      "hasFocus": [32]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const tabNavCss = "/*!@:host*/.sc-scale-tab-nav-h{--tab-height:var(--scl-spacing-40);--tab-spacing:var(--scl-spacing-24);--tab-radius:var(--scl-radius-4);--tab-border-size:var(--scl-spacing-2);--tab-border-size-selected:var(--scl-spacing-4);--tab-border-color:var(--scl-color-grey-20)}";

/**
 * @see https://github.com/GoogleChromeLabs/howto-components/blob/master/elements/howto-tabs/howto-tabs.js
 */
const ARROW_LEFT = 'ArrowLeft';
const ARROW_RIGHT = 'ArrowRight';
const HOME = 'Home';
const END = 'End';
class TabNav {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** True for smaller height and font size in tab headers. */
    /** @deprecated - size should replace small */
    this.small = false;
    /** (optional) size  */
    this.size = 'large';
  }
  smallChanged() {
    this.propagateSizeToTabs();
  }
  handleClick(event) {
    const nextTab = event.target;
    if (nextTab.getAttribute('role') !== 'tab') {
      return;
    }
    this.selectTab(nextTab);
  }
  handleKeydown(event) {
    const target = event.target;
    let nextTab;
    if (target.getAttribute('role') !== 'tab') {
      return;
    }
    // Do not handle modifier shortcuts typically used by assistive technology
    if (event.altKey) {
      return;
    }
    switch (event.key) {
      case ARROW_LEFT:
        nextTab = this.getPreviousTab();
        break;
      case ARROW_RIGHT:
        nextTab = this.getNextTab();
        break;
      case HOME:
        nextTab = this.getFirstTab();
        break;
      case END:
        nextTab = this.getLastTab();
        break;
      default:
        return;
    }
    event.preventDefault();
    this.selectTab(nextTab);
  }
  connectedCallback() {
    if (!this.el.hasAttribute('role')) {
      this.el.setAttribute('role', 'tablist');
    }
  }
  componentDidRender() {
    Promise.all([
      customElements.whenDefined('scale-tab-header'),
      customElements.whenDefined('scale-tab-panel'),
    ]).then(() => {
      this.linkPanels();
      this.propagateSizeToTabs();
    });
    if (this.small !== false) {
      statusNote({
        tag: 'deprecated',
        message: 'Property "small" is deprecated. Please use the "size" property!',
        type: 'warn',
        source: this.el,
      });
    }
  }
  getAllTabs() {
    return Array.from(this.el.querySelectorAll('scale-tab-header'));
  }
  getAllEnabledTabs() {
    return Array.from(this.el.querySelectorAll('scale-tab-header:not([disabled])'));
  }
  getAllPanels() {
    return Array.from(this.el.querySelectorAll('scale-tab-panel'));
  }
  getPreviousTab() {
    const tabs = this.getAllEnabledTabs();
    const index = tabs.findIndex((tab) => tab.selected) - 1;
    return tabs[(index + tabs.length) % tabs.length];
  }
  getNextTab() {
    const tabs = this.getAllEnabledTabs();
    const index = tabs.findIndex((tab) => tab.selected) + 1;
    return tabs[index % tabs.length];
  }
  getFirstTab() {
    const tabs = this.getAllEnabledTabs();
    return tabs[0];
  }
  getLastTab() {
    const tabs = this.getAllEnabledTabs();
    return tabs[tabs.length - 1];
  }
  linkPanels() {
    const tabs = this.getAllEnabledTabs();
    const selectedTab = tabs.find((x) => x.selected) || tabs[0];
    tabs.forEach((tab) => {
      const panel = tab.nextElementSibling;
      tab.setAttribute('aria-controls', panel.id);
      panel.setAttribute('aria-labelledby', tab.id);
    });
    this.selectTab(selectedTab);
  }
  reset() {
    const tabs = this.getAllEnabledTabs();
    const panels = this.getAllPanels();
    tabs.forEach((tab) => (tab.selected = false));
    panels.forEach((panel) => (panel.hidden = true));
  }
  findPanelForTab(tab) {
    const panelId = tab.getAttribute('aria-controls');
    return this.el.querySelector(`#${panelId}`);
  }
  selectTab(nextTab) {
    const nextPanel = this.findPanelForTab(nextTab);
    this.reset();
    nextPanel.hidden = false;
    nextTab.selected = true;
  }
  /**
   * Sets or removes the `small` prop in `scale-tab-header` and `scale-tab-panel` children.
   */
  propagateSizeToTabs() {
    const action = this.size === 'small' || this.small ? 'setAttribute' : 'removeAttribute';
    const tabs = this.getAllTabs();
    const panels = this.getAllPanels();
    [...tabs, ...panels].forEach((child) => child[action]('small', ''));
  }
  render() {
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync("div", { part: this.getBasePartMap(), class: this.getCssClassMap() }, hAsync("slot", { name: "tab" }), hAsync("slot", { name: "panel" }))));
  }
  getBasePartMap() {
    return this.getCssOrBasePartMap('basePart');
  }
  getCssClassMap() {
    return this.getCssOrBasePartMap('css');
  }
  getCssOrBasePartMap(mode) {
    const component = 'tab-nav';
    const prefix = mode === 'basePart' ? '' : `${component}--`;
    return classnames(component, (this.size === 'small' || this.small) && `${prefix}small`);
  }
  get el() { return getElement$1(this); }
  static get watchers() { return {
    "small": ["smallChanged"]
  }; }
  static get style() { return tabNavCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-tab-nav",
    "$members$": {
      "small": [4],
      "size": [1],
      "styles": [1]
    },
    "$listeners$": [[0, "click", "handleClick"], [0, "keydown", "handleKeydown"]],
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const tabPanelCss = "/*!@:host*/.sc-scale-tab-panel-h{--spacing-top:var(--scl-spacing-24);--spacing-top-small:var(--scl-spacing-16)}/*!@.tab-panel*/.tab-panel.sc-scale-tab-panel{margin-top:var(--spacing-top)}/*!@.tab-panel--small*/.tab-panel--small.sc-scale-tab-panel{margin-top:var(--spacing-top-small)}";

let i$3 = 0;
class TabPanel {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.generatedId = i$3++;
    /** True for smaller height and font size */
    // DEPRECATED - size should replace small
    this.small = false;
    /** (optional) size  */
    this.size = 'large';
  }
  componentDidRender() {
    if (this.small !== false) {
      statusNote({
        tag: 'deprecated',
        message: 'Property "small" is deprecated. Please use the "size" property!',
        type: 'warn',
        source: this.el,
      });
    }
  }
  render() {
    return (hAsync(Host$1, { id: `scale-tab-panel-${this.generatedId}`, role: "tabpanel" }, this.styles && hAsync("style", null, this.styles), hAsync("div", { part: this.getBasePartMap(), class: this.getCssClassMap() }, hAsync("slot", null))));
  }
  getBasePartMap() {
    return this.getCssOrBasePartMap('basePart');
  }
  getCssClassMap() {
    return this.getCssOrBasePartMap('css');
  }
  getCssOrBasePartMap(mode) {
    const component = 'tab-panel';
    const prefix = mode === 'basePart' ? '' : `${component}--`;
    return classnames(component, (this.size === 'small' || this.small) && `${prefix}small`);
  }
  get el() { return getElement$1(this); }
  static get style() { return tabPanelCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-tab-panel",
    "$members$": {
      "small": [4],
      "size": [1],
      "styles": [1]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const tableCss = "scale-table{--radius:var(--scl-radius-8) var(--scl-radius-8) 0 0;--background:var(--scl-color-background-light);--color:var(--scl-color-text-standard);--color-hover:var(--scl-color-primary-hover);--color-active:var(--scl-color-primary-active);--font-size:var(--scl-font-size-12);--spacing-tbody-td:16px 8px;--border-bottom-tbody-td:1px solid var(--scl-color-grey-20);--background-tbody:var(--scl-color-background-standard);--background-tbody-tr-hover:#ededed;--background-tfoot:var(--scl-color-background-standard);--border-bottom-tfoot-td:1px solid var(--scl-color-text-standard);--spacing-th-sortable:0 8px 0 0;--background-th-sortable-hover:#ededed;--background-th-sortable-active:#dcdcdc;--box-shadow-th-sortable-focus:inset 0 0 0 var(--scl-spacing-2)\n    var(--scl-color-focus);--background-tr-striped:var(--scl-color-grey-0)}.table{display:block;overflow:auto;border-radius:var(--radius);background:var(--background);color:var(--color)}.table table{width:100%;white-space:nowrap;border-spacing:0;border-collapse:collapse}.table th{padding:0 8px;text-align:left;line-height:32px;color:var(--color);font-size:var(--font-size)}.table td{padding:0 8px}.table tbody tr td{padding:8px}.table tbody td{border-bottom:var(--border-bottom-tbody-td)}.table thead tr th:last-of-type,.table tbody tr td:last-of-type,.table tfoot tr td:last-of-type{padding-right:12px}.table tfoot{background:var(--background-tfoot)}.table tbody{background:var(--background-tbody)}.table tfoot tr td{padding:8px;font-weight:600;border-bottom:var(--border-bottom-tfoot-td)}.table .scale-sort-indicator svg{display:none}.table tbody tr:hover{background:var(--background-tbody-tr-hover)}.table th:focus{outline:none}.table--size-default tbody tr td{padding:var(--spacing-tbody-td)}.table--sortable th{cursor:pointer;padding:var(--spacing-th-sortable);border-radius:var(--radius)}.table--sortable th:hover{padding:var(--spacing-th-sortable);background:var(--background-th-sortable-hover)}.table--sortable th:active{background:var(--background-th-sortable-active)}.table--sortable th:focus{box-shadow:var(--box-shadow-th-sortable-focus)}.table--sortable th .scale-sort-indicator svg{display:block}.table--sortable th[aria-disabled]{padding:0 8px;pointer-events:none}.table--sortable th:not([aria-sort]){padding:0 8px}.table--sortable th[aria-sort='none']{padding:0 8px}.table--sortable th[aria-sort='ascending'] .scale-sort-indicator polygon:first-of-type{fill:var(--color)}.table--sortable th:hover .scale-sort-indicator polygon:first-of-type{fill:var(--color-hover)}.table--sortable th:hover[aria-sort='ascending'] .scale-sort-indicator polygon:first-of-type{fill:var(--color-hover)}.table--sortable th:active[aria-sort='ascending'] .scale-sort-indicator polygon:first-of-type{fill:var(--color-active)}.table--sortable th[aria-sort='ascending'] .scale-sort-indicator polygon{fill:transparent}.table--sortable th:hover[aria-sort='ascending'] .scale-sort-indicator polygon{fill:transparent}.table--sortable th:active[aria-sort='ascending'] .scale-sort-indicator polygon{fill:transparent}.table--sortable th[aria-sort='descending'] .scale-sort-indicator polygon:first-of-type{fill:transparent}.table--sortable th:hover[aria-sort='descending'] .scale-sort-indicator polygon:first-of-type{fill:transparent}.table--sortable th:active[aria-sort='descending'] .scale-sort-indicator polygon:first-of-type{fill:transparent}.table--sortable th[aria-sort='descending'] .scale-sort-indicator polygon{fill:var(--color)}.table--sortable th:hover[aria-sort='descending'] .scale-sort-indicator polygon{fill:var(--color-hover)}.table--sortable th:active[aria-sort='descending'] .scale-sort-indicator polygon{fill:var(--color-active)}.table--sortable th .scale-sort-indicator{width:16px;height:16px;margin:0 0 0 4px;display:inline-block;position:relative}.table--sortable th .scale-sort-indicator>svg{top:4px;left:0;width:16px;height:16px;position:absolute}.table--sortable th .scale-sort-indicator polygon{fill:transparent}.table--sortable th[aria-sort='none']:hover{padding:0 8px 0 0}.table--sortable th[aria-sort='none'] .scale-sort-indicator{display:none}.table--sortable th:not([aria-sort]):hover{padding:0 8px 0 0}.table--sortable th:not([aria-sort]) .scale-sort-indicator{display:none}.table--sortable th:hover .scale-sort-indicator{display:inline-block}.table--striped table tr:nth-child(even){background:var(--background-tr-striped)}";

class Table {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) Display sort arrows on/off */
    this.showSort = false;
    /** (optional) Visual size */
    this.size = 'default';
    /** (optional) Striped Table */
    this.striped = false;
    /** object of the slots in use */
    this.slots = {};
  }
  componentWillLoad() {
    this.hostElement.querySelectorAll('th').forEach((th) => {
      th.insertAdjacentHTML('afterbegin', `
          <span class="scale-sort-indicator" aria-hidden="true">
            <svg viewBox="0 0 16 16">
             <polygon transform="translate(8.242641, 10.242641) rotate(45.000000) translate(-8.242641, -10.242641) " points="5.24264069 7.24264069 11.2426407 7.24264069 5.24264069 13.2426407"/></polygon>
             <polygon transform="translate(8.242641, 6.242641) scale(1, -1) rotate(45.000000) translate(-8.242641, -6.242641) " points="5.24264069 3.24264069 11.2426407 3.24264069 5.24264069 9.24264069"/>
            </svg>
          </span>`);
    });
  }
  render() {
    return (hAsync(Host$1, { class: this.getCssClassMap() }, this.styles && hAsync("style", null, this.styles), hAsync("slot", null)));
  }
  getCssClassMap() {
    return classnames('table', this.size && `table--size-${this.size}`, this.showSort && 'table--sortable', this.striped && 'table--striped');
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return tableCss; }
  static get cmpMeta() { return {
    "$flags$": 4,
    "$tagName$": "scale-table",
    "$members$": {
      "showSort": [4, "show-sort"],
      "size": [1],
      "striped": [4],
      "styles": [1]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const tagCss = "/*!@:host*/.sc-scale-tag-h{--background:var(--scl-color-text-standard);--color:var(--scl-color-white);--font-size:var(--scl-font-variant-body-size);--line-height:var(--scl-font-variant-body-line-height);--font-weight:var(--scl-font-weight-bold);--radius:var(--scl-radius-4);--box-shadow-focus:0 0 0 var(--scl-spacing-2) var(--scl-color-focus);--icon-color:var(--color);--icon-color-hover:var(--scl-color-primary-active);--background-secondary:var(--scl-color-teal-80);--background-disabled:var(--scl-color-background-disabled);--color-disabled:var(--scl-color-grey-60);--spacing-left-dismissable:var(--scl-spacing-2);--border-button-dismissable-focus:1px solid\n    var(--scl-color-background-standard);--box-shadow-button-dismissable-focus:var(--box-shadow-focus);--background-button-dismissable-hover:var(--scl-color-white);--height-button-dismissable-small:20px;--spacing-small:0 var(--scl-spacing-8);--font-size-small:var(--scl-font-size-12);--line-height-small:var(--scl-font-line-height-160)}/*!@.tag*/.tag.sc-scale-tag{border:1px solid transparent;display:inline-flex;outline:none;padding:0 10px;text-align:center;transition:all 0.15s ease-in-out;align-items:center;white-space:nowrap;border-radius:var(--scl-radius-4);vertical-align:baseline;justify-content:center;font-size:var(--font-size);line-height:var(--line-height);font-weight:var(--font-weight);background:var(--background);color:var(--color);cursor:default}/*!@.tag--variant-secondary*/.tag--variant-secondary.sc-scale-tag{background:var(--background-secondary)}/*!@.tag scale-icon-action-close*/.tag.sc-scale-tag scale-icon-action-close.sc-scale-tag{color:var(--icon-color);transition:all 0.15s ease-in-out}/*!@.tag:not(.tag--disabled) scale-icon-action-close:hover*/.tag.sc-scale-tag:not(.tag--disabled) scale-icon-action-close.sc-scale-tag:hover{color:var(--icon-color-hover)}/*!@.tag--dismissable*/.tag--dismissable.sc-scale-tag{padding-right:0}/*!@.tag--dismissable button*/.tag--dismissable.sc-scale-tag button.sc-scale-tag{border:none;cursor:pointer;height:24px;margin:0;outline:none;padding:0;background:transparent;margin-left:var(--spacing-left-dismissable);border-radius:var(--radius)}/*!@.tag--dismissable button:focus*/.tag--dismissable.sc-scale-tag button.sc-scale-tag:focus{border:var(--border-button-dismissable-focus);background:var(--background-button-dismissable-focus);box-shadow:var(--box-shadow-button-dismissable-focus)}/*!@.tag--dismissable button:hover*/.tag--dismissable.sc-scale-tag button.sc-scale-tag:hover{background:var(--background-button-dismissable-hover)}/*!@.tag--dismissable button:focus scale-icon-action-close*/.tag--dismissable.sc-scale-tag button.sc-scale-tag:focus scale-icon-action-close.sc-scale-tag{top:-1px;position:relative}/*!@.tag--size-small*/.tag--size-small.sc-scale-tag{padding:var(--spacing-small);font-size:var(--font-size-small);line-height:var(--line-height-small)}/*!@.tag--size-small.tag--dismissable*/.tag--size-small.tag--dismissable.sc-scale-tag{padding-right:0}/*!@.tag--size-small.tag--dismissable button*/.tag--size-small.tag--dismissable.sc-scale-tag button.sc-scale-tag{height:var(--height-button-dismissable-small)}/*!@.tag--variant-secondary.tag--dismissable*/.tag--variant-secondary.tag--dismissable.sc-scale-tag{background:var(--background-secondary)}/*!@.tag--variant-secondary.tag--disabled*/.tag--variant-secondary.tag--disabled.sc-scale-tag{opacity:0.5}/*!@.tag--link*/.tag--link.sc-scale-tag{text-decoration:none}/*!@.tag--link:focus*/.tag--link.sc-scale-tag:focus{border:1px solid white;box-shadow:var(--box-shadow-focus)}/*!@.tag--link.tag--variant-secondary*/.tag--link.tag--variant-secondary.sc-scale-tag{background:var(--background-secondary)}/*!@.tag--link.tag--variant-secondary:hover*/.tag--link.tag--variant-secondary.sc-scale-tag:hover{background:var(--background-secondary)}/*!@.tag--link.tag--variant-secondary:focus*/.tag--link.tag--variant-secondary.sc-scale-tag:focus{border:1px solid white}/*!@.tag--disabled*/.tag--disabled.sc-scale-tag{background:var(--background-disabled);color:var(--color-disabled);cursor:not-allowed;color:var(--color-disabled)}/*!@.tag--disabled scale-icon-action-close*/.tag--disabled.sc-scale-tag scale-icon-action-close.sc-scale-tag{color:var(--color-disabled)}/*!@.tag--disabled button*/.tag--disabled.sc-scale-tag button.sc-scale-tag{cursor:not-allowed}/*!@.tag--disabled button:hover*/.tag--disabled.sc-scale-tag button.sc-scale-tag:hover{cursor:not-allowed;background:var(--background-disabled)}";

class Tag {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.scaleClose = createEvent$1(this, "scale-close", 7);
    this.scaleCloseLegacy = createEvent$1(this, "scaleClose", 7);
    /** (optional) Tag href */
    this.href = '';
    /** (optional) Tag target */
    this.target = '_self';
    /** (optional) Tag dismissable */
    this.dismissable = false;
    /** (optional) Tag disabled */
    this.disabled = false;
    /** (optional) Dismiss label */
    this.dismissText = 'dismiss';
    this.handleClose = (event) => {
      event.preventDefault();
      event.stopPropagation();
      if (this.disabled) {
        return;
      }
      emitEvent$1(this, 'scaleClose', event);
    };
  }
  componentWillUpdate() { }
  disconnectedCallback() { }
  render() {
    const Element = !!this.href && !this.disabled ? 'a' : 'span';
    const linkProps = !!this.href
      ? {
        href: this.href,
        target: this.target,
      }
      : {};
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync(Element, Object.assign({ part: this.getBasePartMap(), class: this.getCssClassMap() }, linkProps), hAsync("slot", null), this.dismissable && (hAsync("button", { part: "button-dismissable", disabled: this.disabled, "aria-label": this.dismissText, onClick: this.handleClose }, hAsync("scale-icon-action-close", { part: "icon-dismissable", size: this.size === 'small' ? 20 : 24 }))))));
  }
  getBasePartMap() {
    return this.getCssOrBasePartMap('basePart');
  }
  getCssClassMap() {
    return this.getCssOrBasePartMap('css');
  }
  getCssOrBasePartMap(mode) {
    const component = 'tag';
    const prefix = mode === 'basePart' ? '' : `${component}--`;
    return classnames(mode === 'basePart' ? 'base' : component, this.size && `${prefix}size-${this.size}`, this.variant && `${prefix}variant-${this.variant}`, !!this.href && `${prefix}link`, !!this.dismissable && `${prefix}dismissable`, !!this.disabled && `${prefix}disabled`);
  }
  static get style() { return tagCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-tag",
    "$members$": {
      "size": [1],
      "variant": [1],
      "href": [1],
      "target": [1],
      "dismissable": [4],
      "disabled": [4],
      "dismissText": [1, "dismiss-text"],
      "styles": [1]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const textFieldCss = "scale-text-field{--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);--radius:var(--scl-radius-8);--border:var(--scl-spacing-1) solid var(--scl-color-text-standard);--border-error:var(--scl-spacing-2) solid var(--scl-color-background-error);--border-color-hover:var(--scl-color-primary-hover, #f90984);--border-color-focus:var(--scl-color-primary-hover, #f90984);--box-shadow-focus:0 0 0 var(--scl-spacing-2) var(--scl-color-focus);--height:var(--scl-spacing-48);--height-small:var(--scl-spacing-40);--spacing-x:var(--scl-spacing-12);--color-disabled:var(--scl-color-background-disabled);--background-disabled:var(--scl-color-white);--border-color-readonly:var(--scl-color-grey-0);--background-readonly:var(--scl-color-grey-0);--font-weight-meta:var(--scl-font-weight-bold);--font-size-meta:var(--scl-font-size-12);--line-height-meta:var(--scl-font-line-height-133);--spacing-y-meta:var(--scl-spacing-4);--color-meta:var(--scl-color-text-standard);--color-meta-error:var(--scl-color-text-error);--spacing-control:var(--scl-spacing-12) var(--spacing-x) 0\n    calc(var(--spacing-x) - 1px);--transition-control:var(--transition);--font-size-control:var(--scl-font-size-16);--transition-counter:var(--transition);--font-size-counter:var(--font-size-meta);--line-height-counter:var(--line-height-meta);--color-counter-error:var(--color-meta-error);--transition-helper-text:var(--transition);--font-size-helper-text:var(--font-size-meta);--line-height-helper-text:var(--line-height-meta);--color-helper-text:var(--scl-color-blue-70);--color-helper-text-error:var(--color-meta-error);--transition-placeholder:var(--transition);--color-placeholder:var(--scl-color-grey-60);--color-label:var(--scl-color-grey-60);--color-label-readonly:var(--scl-color-text-standard);--z-index-label:var(--scl-z-index-10);--transition-label:var(--transition);--font-size-label:var(--scl-font-size-16);--font-weight-label:var(--scl-font-weight-medium);--font-size-label-small:var(--scl-font-size-16);--font-weight-label-small:var(--scl-font-weight-medium);--font-size-label-focus:var(--scl-font-size-10);--font-weight-label-focus:var(--scl-font-weight-bold)}.text-field{position:relative}.text-field .text-field__helper-text,.text-field .text-field__counter{font-weight:var(--font-weight-meta)}.text-field .text-field__control{width:100%;height:var(--height);margin:0;display:flex;outline:none;padding:var(--spacing-control);z-index:1;box-sizing:border-box;transition:var(--transition-control);font-family:inherit;font-size:var(--font-size-control);border-radius:var(--radius);border:var(--border)}.text-field .text-field__counter{display:flex;transition:var(--transition-counter);margin-left:auto;padding-right:var(--spacing-x);justify-content:flex-end;font-size:var(--font-size-counter);line-height:var(--line-height-counter);color:inherit}.text-field .text-field__helper-text{transition:var(--transition-helper-text);padding-left:var(--spacing-x);font-size:var(--font-size-helper-text);line-height:var(--line-height-helper-text);color:var(--color-helper-text)}.text-field .text-field__meta{display:flex;justify-content:space-between;margin-top:var(--spacing-y-meta);color:var(--color-meta)}.text-field:not(.text-field--disabled):not(.text-field--readonly) .text-field__control:hover{border-color:var(--border-color-hover)}.text-field:not(.text-field--disabled):not(.text-field--readonly) .text-field__control:focus{border-color:var(--border-color-focus);box-shadow:var(--box-shadow-focus)}.text-field:not(.text-field--disabled) .text-field__control:focus::placeholder{color:var(--color-placeholder)}.text-field .text-field__control::placeholder,.text-field ::placeholder{color:transparent;transition:var(--transition-placeholder)}.text-field__label{top:0;left:0;color:var(--color-label);display:flex;z-index:var(--z-index-label);position:absolute;transition:var(--transition-label);pointer-events:none;font-size:var(--font-size-label);transform:translate(\n    var(--spacing-x),\n    calc((var(--height) - var(--font-size-label)) / 2)\n  );font-weight:var(--font-weight-label)}.text-field--has-focus:not(.text-field--readonly) .text-field__label,.animated .text-field__label{line-height:var(--scl-font-variant-label-size);transform:translate(var(--spacing-x), var(--scl-spacing-8));font-size:var(--font-size-label-focus);font-weight:var(--font-weight-label-focus)}.text-field--status-error .text-field__control{border:var(--border-error)}.text-field--status-error .text-field__helper-text{color:var(--color-helper-text-error)}.text-field--status-error .text-field__counter{color:var(--color-counter-error)}.text-field--size-small .text-field__control{height:var(--height-small)}.text-field--size-small .text-field__label{font-size:var(--font-size-label-small);transform:translate(\n    var(--spacing-x),\n    calc((var(--height-small) - var(--font-size-label-small)) / 2)\n  );font-weight:var(--font-weight-label-small)}.text-field--size-small.text-field--has-focus:not(.text-field--readonly) .text-field__label,.text-field--size-small.animated .text-field__label{line-height:var(--scl-font-variant-label-size);transform:translate(var(--spacing-x), var(--scl-spacing-4));font-size:var(--font-size-label-focus)}.text-field--transparent .text-field__control{background-color:transparent}.text-field--readonly input,.text-field--readonly .text-field__control{color:var(--color-label-readonly);border-color:var(--border-color-readonly);background:var(--background-readonly)}.text-field--readonly .text-field__control:focus{box-shadow:var(--box-shadow-focus)}.text-field--disabled label,.text-field--disabled .text-field__label,.text-field--disabled input,.text-field--disabled .text-field__control,.text-field--disabled .text-field__meta,.text-field--disabled .text-field__counter,.text-field--disabled .text-field__helper-text{cursor:not-allowed;border-color:var(--color-disabled);color:var(--color-disabled);background:var(--scl-color-white)}.text-field--disabled.animated label.text-field__label{color:var(--color-disabled)}input::-webkit-outer-spin-button,input::-webkit-inner-spin-button{-webkit-appearance:none}input[type='number']{-moz-appearance:textfield}";

let i$2 = 0;
class TextField {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.scaleInput = createEvent$1(this, "scale-input", 7);
    this.scaleInputLegacy = createEvent$1(this, "scaleInput", 7);
    this.scaleChange = createEvent$1(this, "scale-change", 7);
    this.scaleChangeLegacy = createEvent$1(this, "scaleChange", 7);
    this.scaleFocus = createEvent$1(this, "scale-focus", 7);
    this.scaleFocusLegacy = createEvent$1(this, "scaleFocus", 7);
    this.scaleBlur = createEvent$1(this, "scale-blur", 7);
    this.scaleBlurLegacy = createEvent$1(this, "scaleBlur", 7);
    this.scaleKeyDown = createEvent$1(this, "scale-keydown", 7);
    this.scaleKeyDownLegacy = createEvent$1(this, "scaleKeydown", 7);
    /** (optional) Input type */
    this.type = 'text';
    /** (optional) Input name */
    this.name = '';
    /** (optional) Input label */
    this.label = '';
    /** (optional) Input size */
    this.size = '';
    /** (optional) Input helper text */
    this.helperText = '';
    /** @deprecated - invalid should replace status */
    this.status = '';
    /** (optional) Input status */
    this.invalid = false;
    /** (optional) Input placeHolder */
    this.placeholder = '';
    /** (optional) Input value */
    this.value = '';
    /** (optional) the step attribute specifies the interval between legal numbers in an <input type="number"> element. */
    this.step = '1';
    /** Whether the input element has focus */
    this.hasFocus = false;
    this.handleInput = (event) => {
      const target = event.target;
      if (target) {
        this.value = target.value || '';
        this.emitChange();
      }
      emitEvent$1(this, 'scaleInput', event);
    };
    this.handleChange = (event) => {
      const target = event.target;
      if (target) {
        this.value = target.value || '';
        this.emitChange();
      }
    };
    this.handleFocus = () => {
      emitEvent$1(this, 'scaleFocus');
      this.hasFocus = true;
    };
    this.handleBlur = () => {
      emitEvent$1(this, 'scaleBlur');
      this.hasFocus = false;
    };
    this.handleKeyDown = (event) => {
      emitEvent$1(this, 'scaleKeyDown', event);
    };
  }
  componentWillLoad() {
    if (this.inputId == null) {
      this.inputId = 'input-text-field' + i$2++;
    }
  }
  componentDidRender() {
    if (this.status !== '') {
      statusNote({
        tag: 'deprecated',
        message: 'Property "status" is deprecated. Please use the "invalid" property!',
        type: 'warn',
        source: this.hostElement,
      });
    }
  }
  // We're not watching `value` like we used to
  // because we get unwanted `scaleChange` events
  // because how we keep this.value up-to-date for type="select"
  // `this.value = selectedValue`
  emitChange() {
    emitEvent$1(this, 'scaleChange', {
      value: this.value == null ? this.value : this.value.toString(),
    });
  }
  render() {
    const ariaInvalidAttr = this.status === 'error' || this.invalid ? { 'aria-invalid': true } : {};
    const helperTextId = `helper-message-${i$2}`;
    const ariaDescribedByAttr = { 'aria-describedBy': helperTextId };
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync("div", { class: this.getCssClassMap() }, hAsync("label", { class: "text-field__label", htmlFor: this.inputId }, this.label), hAsync("input", Object.assign({ type: this.type, class: "text-field__control", value: this.value }, (!!this.name ? { name: this.name } : {}), { required: this.required, minLength: this.minLength, maxLength: this.maxLength, id: this.inputId, list: this.list, onInput: this.handleInput, onChange: this.handleChange, onFocus: this.handleFocus, onBlur: this.handleBlur, onKeyDown: this.handleKeyDown }, (!!this.placeholder ? { placeholder: this.placeholder } : {}), { disabled: this.disabled, readonly: this.readonly }, ariaInvalidAttr, (this.helperText ? ariaDescribedByAttr : {}), (this.type === 'number' ? { step: this.step } : {}))), (!!this.helperText || !!this.counter) && (hAsync("div", { class: "text-field__meta", id: helperTextId, "aria-live": "polite", "aria-relevant": "additions removals" }, !!this.helperText && (hAsync("div", { class: "text-field__helper-text" }, this.helperText)), this.counter && (hAsync("div", { class: "text-field__counter" }, !!this.value ? String(this.value).length : 0, " /", ' ', this.maxLength)))))));
  }
  getCssClassMap() {
    // input[type="date"] will print a placeholder in some browsers
    const animated = (this.value != null && this.value !== '') || this.type === 'date';
    return classnames('text-field', this.type && `text-field--type-${this.type}`, this.hasFocus && 'text-field--has-focus', this.disabled && `text-field--disabled`, this.transparent && 'text-field--transparent', this.status && `text-field--status-${this.status}`, this.invalid && `text-field--status-error`, this.size && `text-field--size-${this.size}`, this.readonly && `text-field--readonly`, animated && 'animated');
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return textFieldCss; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-text-field",
    "$members$": {
      "type": [1],
      "name": [1],
      "label": [1],
      "size": [1],
      "helperText": [1, "helper-text"],
      "status": [1],
      "invalid": [4],
      "maxLength": [2, "max-length"],
      "minLength": [2, "min-length"],
      "placeholder": [1],
      "disabled": [4],
      "readonly": [4],
      "required": [4],
      "counter": [4],
      "value": [1032],
      "inputId": [1, "input-id"],
      "transparent": [4],
      "step": [1],
      "list": [1],
      "styles": [1],
      "hasFocus": [32]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

const textareaCss = "scale-textarea{--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);--radius:var(--scl-radius-8);--border:var(--scl-spacing-1) solid var(--scl-color-text-standard);--border-error:var(--scl-spacing-2) solid var(--scl-color-background-error);--border-color-hover:var(--scl-color-primary-hover, #f90984);--border-color-focus:var(--scl-color-primary-hover, #f90984);--box-shadow-focus:0 0 0 var(--scl-spacing-2) var(--scl-color-focus);--spacing-x:var(--scl-spacing-12);--color-disabled:var(--scl-color-background-disabled);--background-disabled:var(--scl-color-white);--border-color-readonly:var(--scl-color-grey-0);--background-readonly:var(--scl-color-grey-0);--font-weight-meta:var(--scl-font-weight-bold);--font-size-meta:var(--scl-font-size-12);--line-height-meta:var(--scl-font-line-height-133);--spacing-y-meta:var(--scl-spacing-4);--color-meta:var(--scl-color-text-standard);--color-meta-error:var(--scl-color-text-error);--spacing-control:var(--scl-spacing-24) var(--spacing-x)\n    var(--scl-spacing-12) calc(var(--spacing-x) - 1px);--transition-control:var(--transition);--font-size-control:var(--scl-font-size-16);--transition-counter:var(--transition);--font-size-counter:var(--font-size-meta);--line-height-counter:var(--line-height-meta);--color-counter-error:var(--color-meta-error);--transition-helper-text:var(--transition);--font-size-helper-text:var(--font-size-meta);--line-height-helper-text:var(--line-height-meta);--color-helper-text:var(--scl-color-blue-70);--color-helper-text-error:var(--color-meta-error);--transition-placeholder:var(--transition);--color-placeholder:var(--scl-color-grey-60);--color-label:var(--scl-color-grey-60);--color-label-readonly:var(--scl-color-text-standard);--z-index-label:var(--scl-z-index-10);--transition-label:var(--transition);--font-size-label:var(--scl-font-size-16);--font-weight-label:var(--scl-font-weight-medium);--font-size-label-focus:var(--scl-font-size-10);--font-weight-label-focus:var(--scl-font-weight-bold)}.textarea{position:relative}.textarea .textarea__control{width:100%;margin:0;resize:vertical;display:flex;outline:none;padding:var(--spacing-control);z-index:1;box-sizing:border-box;transition:var(--transition-control);font-family:inherit;font-size:var(--font-size-control);border-radius:var(--radius);border:var(--border)}.textarea .textarea__helper-text,.textarea .textarea__counter{font-weight:var(--scl-font-weight-bold)}.textarea .textarea__counter{display:flex;transition:var(--transition-counter);margin-left:auto;padding-right:var(--scl-spacing-12);justify-content:flex-end;font-size:var(--scl-font-size-12);line-height:var(--scl-font-line-height-133);color:inherit}.textarea .textarea__helper-text{transition:var(--transition-helper-text);padding-left:var(--spacing-x);font-size:var(--font-size-helper-text);line-height:var(--line-height-helper-text);color:var(--color-helper-text)}.textarea .textarea__meta{display:flex;justify-content:space-between;margin-top:var(--spacing-y-meta);color:var(--color-meta)}.textarea:not(.textarea--disabled):not(.textarea--readonly) .textarea__control:hover{border-color:var(--border-color-hover)}.textarea:not(.textarea--disabled):not(.textarea--readonly) .textarea__control:focus{border-color:var(--border-color-focus);box-shadow:var(--box-shadow-focus)}.textarea:not(.textarea--disabled) .textarea__control:focus::placeholder{color:var(--color-placeholder)}.textarea .textarea__control::placeholder,.textarea ::placeholder{color:transparent;transition:var(--transition-placeholder)}.textarea__label{top:0;left:0;color:var(--color-label);display:flex;z-index:var(--z-index-label);position:absolute;transition:var(--transition-label);pointer-events:none;font-size:var(--font-size-label);font-weight:var(--font-weight-label);transform:translate(\n    var(--spacing-x),\n    calc((var(--scl-spacing-48) - var(--font-size-label)) / 2)\n  )}.textarea--has-focus .textarea__label,.animated .textarea__label{transform:translate(var(--spacing-x), var(--scl-spacing-8));font-size:var(--font-size-label-focus);font-weight:var(--font-weight-label-focus)}.textarea--status-error .textarea__control{border:var(--border-error)}.textarea--status-error .textarea__helper-text{color:var(--color-helper-text-error)}.textarea--status-error .textarea__counter{color:var(--color-counter-error)}.textarea--transparent .textarea__control{background-color:transparent}.textarea__label-safety-background{top:var(--scl-spacing-2);left:var(--scl-spacing-2);right:var(--scl-spacing-2);position:absolute;pointer-events:none;border-radius:var(--scl-radius-8);height:var(--scl-spacing-24);background-color:var(--scl-color-background-standard, #ffffff)}.textarea--transparent .textarea__label-safety-background,.textarea--readonly .textarea__label-safety-background,.textarea--disabled .textarea__label-safety-background{background-color:transparent}.textarea--readonly textarea,.textarea--readonly .textarea__control{color:var(--color-label-readonly);border-color:var(--border-color-readonly);background:var(--background-readonly)}.textarea--readonly .textarea__control:focus{box-shadow:var(--box-shadow-focus)}.textarea--disabled label,.textarea--disabled .textarea__label,.textarea--disabled textarea,.textarea--disabled .textarea__control,.textarea--disabled .textarea__meta,.textarea--disabled .textarea__helper-text{cursor:not-allowed;border-color:var(--color-disabled);color:var(--color-disabled);background:var(--scl-color-white)}";

let i$1 = 0;
class Textarea {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.scaleInput = createEvent$1(this, "scale-input", 7);
    this.scaleInputLegacy = createEvent$1(this, "scaleInput", 7);
    this.scaleChange = createEvent$1(this, "scale-change", 7);
    this.scaleChangeLegacy = createEvent$1(this, "scaleChange", 7);
    this.scaleFocus = createEvent$1(this, "scale-focus", 7);
    this.scaleFocusLegacy = createEvent$1(this, "scaleFocus", 7);
    this.scaleBlur = createEvent$1(this, "scale-blur", 7);
    this.scaleBlurLegacy = createEvent$1(this, "scaleBlur", 7);
    this.scaleKeyDown = createEvent$1(this, "scale-keydown", 7);
    this.scaleKeyDownLegacy = createEvent$1(this, "scaleKeyDown", 7);
    /** (optional) Input name */
    this.name = '';
    /** (optional) Input label */
    this.label = '';
    /** (optional) Input helper text */
    this.helperText = '';
    /** @deprecated - invalid should replace status */
    this.status = '';
    /** (optional) Input status */
    this.invalid = false;
    /** (optional) Input placeHolder */
    this.placeholder = '';
    /** (optional) Input value */
    this.value = '';
    /** Whether the input element has focus */
    this.hasFocus = false;
    this.handleInput = (event) => {
      const target = event.target;
      if (target) {
        this.value = target.value || '';
        this.emitChange();
      }
      emitEvent$1(this, 'scaleInput', event);
    };
    this.handleChange = (event) => {
      const target = event.target;
      if (target) {
        this.value = target.value || '';
        this.emitChange();
      }
    };
    this.handleFocus = () => {
      emitEvent$1(this, 'scaleFocus');
      this.hasFocus = true;
    };
    this.handleBlur = () => {
      emitEvent$1(this, 'scaleBlur');
      this.hasFocus = false;
    };
    this.handleKeyDown = (event) => {
      emitEvent$1(this, 'scaleKeyDown', event);
    };
  }
  componentWillLoad() {
    if (this.inputId == null) {
      this.inputId = 'input-textarea' + i$1++;
    }
  }
  componentDidRender() {
    if (this.status !== '') {
      statusNote({
        tag: 'deprecated',
        message: 'Property "status" is deprecated. Please use the "invalid" property!',
        type: 'warn',
        source: this.hostElement,
      });
    }
  }
  // We're not watching `value` like we used to
  // because we get unwanted `scaleChange` events
  // because how we keep this.value up-to-date for type="select"
  // `this.value = selectedValue`
  emitChange() {
    emitEvent$1(this, 'scaleChange', {
      value: this.value == null ? this.value : this.value.toString(),
    });
  }
  render() {
    const ariaInvalidAttr = this.status === 'error' || this.invalid ? { 'aria-invalid': true } : {};
    const helperTextId = `helper-message-${i$1}`;
    const ariaDescribedByAttr = { 'aria-describedBy': helperTextId };
    const readonlyAttr = this.readonly ? { readonly: 'readonly' } : {};
    return (hAsync(Host$1, null, hAsync("div", { class: this.getCssClassMap() }, hAsync("label", { class: "textarea__label", htmlFor: this.inputId }, this.label), hAsync("textarea", Object.assign({ class: "textarea__control", style: !!this.resize && { resize: this.resize }, value: this.value }, (!!this.name ? { name: this.name } : {}), { required: this.required, minLength: this.minLength, maxLength: this.maxLength, id: this.inputId, onInput: this.handleInput, onChange: this.handleChange, onFocus: this.handleFocus, onBlur: this.handleBlur, onKeyDown: this.handleKeyDown }, (!!this.placeholder ? { placeholder: this.placeholder } : {}), { disabled: this.disabled }, readonlyAttr, (!!this.rows ? { rows: this.rows } : {}), (!!this.cols ? { cols: this.cols } : {}), ariaInvalidAttr, (this.helperText ? ariaDescribedByAttr : {}))), hAsync("span", { class: "textarea__label-safety-background", "aria-hidden": "true" }), (!!this.helperText || !!this.counter) && (hAsync("div", { class: "textarea__meta", id: helperTextId, "aria-live": "polite", "aria-relevant": "additions removals" }, !!this.helperText && (hAsync("div", { class: "textarea__helper-text" }, this.helperText)), this.counter && (hAsync("div", { class: "textarea__counter" }, !!this.value ? String(this.value).length : 0, " /", ' ', this.maxLength)))))));
  }
  getCssClassMap() {
    return classnames('textarea', this.hasFocus && 'textarea--has-focus', this.resize && `textarea--resize-${this.resize}`, this.disabled && `textarea--disabled`, this.transparent && 'textarea--transparent', this.status && `textarea--status-${this.status}`, this.invalid && `textarea--status-error`, this.readonly && `textarea--readonly`, this.value != null && this.value !== '' && 'animated');
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return textareaCss; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-textarea",
    "$members$": {
      "name": [1],
      "label": [1],
      "rows": [2],
      "cols": [2],
      "helperText": [1, "helper-text"],
      "status": [1],
      "invalid": [4],
      "maxLength": [2, "max-length"],
      "minLength": [2, "min-length"],
      "placeholder": [1],
      "disabled": [4],
      "readonly": [4],
      "required": [4],
      "counter": [4],
      "resize": [1],
      "value": [1032],
      "inputId": [1, "input-id"],
      "transparent": [4],
      "styles": [1],
      "hasFocus": [32]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

function toInteger(dirtyNumber) {
  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
    return NaN;
  }

  var number = Number(dirtyNumber);

  if (isNaN(number)) {
    return number;
  }

  return number < 0 ? Math.ceil(number) : Math.floor(number);
}

function requiredArgs(required, args) {
  if (args.length < required) {
    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');
  }
}

/**
 * @name toDate
 * @category Common Helpers
 * @summary Convert the given argument to an instance of Date.
 *
 * @description
 * Convert the given argument to an instance of Date.
 *
 * If the argument is an instance of Date, the function returns its clone.
 *
 * If the argument is a number, it is treated as a timestamp.
 *
 * If the argument is none of the above, the function returns Invalid Date.
 *
 * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.
 *
 * @param {Date|Number} argument - the value to convert
 * @returns {Date} the parsed date in the local time zone
 * @throws {TypeError} 1 argument required
 *
 * @example
 * // Clone the date:
 * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))
 * //=> Tue Feb 11 2014 11:30:30
 *
 * @example
 * // Convert the timestamp to date:
 * const result = toDate(1392098430000)
 * //=> Tue Feb 11 2014 11:30:30
 */

function toDate(argument) {
  requiredArgs(1, arguments);
  var argStr = Object.prototype.toString.call(argument); // Clone the date

  if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {
    // Prevent the date to lose the milliseconds when passed to new Date() in IE10
    return new Date(argument.getTime());
  } else if (typeof argument === 'number' || argStr === '[object Number]') {
    return new Date(argument);
  } else {
    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {
      // eslint-disable-next-line no-console
      console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"); // eslint-disable-next-line no-console

      console.warn(new Error().stack);
    }

    return new Date(NaN);
  }
}

/**
 * @name addMilliseconds
 * @category Millisecond Helpers
 * @summary Add the specified number of milliseconds to the given date.
 *
 * @description
 * Add the specified number of milliseconds to the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the milliseconds added
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Add 750 milliseconds to 10 July 2014 12:45:30.000:
 * var result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
 * //=> Thu Jul 10 2014 12:45:30.750
 */

function addMilliseconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var timestamp = toDate(dirtyDate).getTime();
  var amount = toInteger(dirtyAmount);
  return new Date(timestamp + amount);
}

var MILLISECONDS_IN_MINUTE = 60000;

function getDateMillisecondsPart(date) {
  return date.getTime() % MILLISECONDS_IN_MINUTE;
}
/**
 * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.
 * They usually appear for dates that denote time before the timezones were introduced
 * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891
 * and GMT+01:00:00 after that date)
 *
 * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,
 * which would lead to incorrect calculations.
 *
 * This function returns the timezone offset in milliseconds that takes seconds in account.
 */


function getTimezoneOffsetInMilliseconds(dirtyDate) {
  var date = new Date(dirtyDate.getTime());
  var baseTimezoneOffset = Math.ceil(date.getTimezoneOffset());
  date.setSeconds(0, 0);
  var hasNegativeUTCOffset = baseTimezoneOffset > 0;
  var millisecondsPartOfTimezoneOffset = hasNegativeUTCOffset ? (MILLISECONDS_IN_MINUTE + getDateMillisecondsPart(date)) % MILLISECONDS_IN_MINUTE : getDateMillisecondsPart(date);
  return baseTimezoneOffset * MILLISECONDS_IN_MINUTE + millisecondsPartOfTimezoneOffset;
}

/**
 * @name addSeconds
 * @category Second Helpers
 * @summary Add the specified number of seconds to the given date.
 *
 * @description
 * Add the specified number of seconds to the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of seconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the seconds added
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Add 30 seconds to 10 July 2014 12:45:00:
 * var result = addSeconds(new Date(2014, 6, 10, 12, 45, 0), 30)
 * //=> Thu Jul 10 2014 12:45:30
 */

function addSeconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addMilliseconds(dirtyDate, amount * 1000);
}

/**
 * @name compareAsc
 * @category Common Helpers
 * @summary Compare the two dates and return -1, 0 or 1.
 *
 * @description
 * Compare the two dates and return 1 if the first date is after the second,
 * -1 if the first date is before the second or 0 if dates are equal.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} dateLeft - the first date to compare
 * @param {Date|Number} dateRight - the second date to compare
 * @returns {Number} the result of the comparison
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Compare 11 February 1987 and 10 July 1989:
 * var result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))
 * //=> -1
 *
 * @example
 * // Sort the array of dates:
 * var result = [
 *   new Date(1995, 6, 2),
 *   new Date(1987, 1, 11),
 *   new Date(1989, 6, 10)
 * ].sort(compareAsc)
 * //=> [
 * //   Wed Feb 11 1987 00:00:00,
 * //   Mon Jul 10 1989 00:00:00,
 * //   Sun Jul 02 1995 00:00:00
 * // ]
 */

function compareAsc(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  var diff = dateLeft.getTime() - dateRight.getTime();

  if (diff < 0) {
    return -1;
  } else if (diff > 0) {
    return 1; // Return 0 if diff is 0; return NaN if diff is NaN
  } else {
    return diff;
  }
}

/**
 * @name differenceInCalendarMonths
 * @category Month Helpers
 * @summary Get the number of calendar months between the given dates.
 *
 * @description
 * Get the number of calendar months between the given dates.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} dateLeft - the later date
 * @param {Date|Number} dateRight - the earlier date
 * @returns {Number} the number of calendar months
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // How many calendar months are between 31 January 2014 and 1 September 2014?
 * var result = differenceInCalendarMonths(
 *   new Date(2014, 8, 1),
 *   new Date(2014, 0, 31)
 * )
 * //=> 8
 */

function differenceInCalendarMonths(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();
  var monthDiff = dateLeft.getMonth() - dateRight.getMonth();
  return yearDiff * 12 + monthDiff;
}

/**
 * @name differenceInMilliseconds
 * @category Millisecond Helpers
 * @summary Get the number of milliseconds between the given dates.
 *
 * @description
 * Get the number of milliseconds between the given dates.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} dateLeft - the later date
 * @param {Date|Number} dateRight - the earlier date
 * @returns {Number} the number of milliseconds
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // How many milliseconds are between
 * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?
 * var result = differenceInMilliseconds(
 *   new Date(2014, 6, 2, 12, 30, 21, 700),
 *   new Date(2014, 6, 2, 12, 30, 20, 600)
 * )
 * //=> 1100
 */

function differenceInMilliseconds(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  return dateLeft.getTime() - dateRight.getTime();
}

/**
 * @name differenceInMonths
 * @category Month Helpers
 * @summary Get the number of full months between the given dates.
 *
 * @description
 * Get the number of full months between the given dates.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} dateLeft - the later date
 * @param {Date|Number} dateRight - the earlier date
 * @returns {Number} the number of full months
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // How many full months are between 31 January 2014 and 1 September 2014?
 * var result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))
 * //=> 7
 */

function differenceInMonths(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var dateLeft = toDate(dirtyDateLeft);
  var dateRight = toDate(dirtyDateRight);
  var sign = compareAsc(dateLeft, dateRight);
  var difference = Math.abs(differenceInCalendarMonths(dateLeft, dateRight));
  dateLeft.setMonth(dateLeft.getMonth() - sign * difference); // Math.abs(diff in full months - diff in calendar months) === 1 if last calendar month is not full
  // If so, result must be decreased by 1 in absolute value

  var isLastMonthNotFull = compareAsc(dateLeft, dateRight) === -sign;
  var result = sign * (difference - isLastMonthNotFull); // Prevent negative zero

  return result === 0 ? 0 : result;
}

/**
 * @name differenceInSeconds
 * @category Second Helpers
 * @summary Get the number of seconds between the given dates.
 *
 * @description
 * Get the number of seconds between the given dates.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} dateLeft - the later date
 * @param {Date|Number} dateRight - the earlier date
 * @returns {Number} the number of seconds
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // How many seconds are between
 * // 2 July 2014 12:30:07.999 and 2 July 2014 12:30:20.000?
 * var result = differenceInSeconds(
 *   new Date(2014, 6, 2, 12, 30, 20, 0),
 *   new Date(2014, 6, 2, 12, 30, 7, 999)
 * )
 * //=> 12
 */

function differenceInSeconds(dirtyDateLeft, dirtyDateRight) {
  requiredArgs(2, arguments);
  var diff = differenceInMilliseconds(dirtyDateLeft, dirtyDateRight) / 1000;
  return diff > 0 ? Math.floor(diff) : Math.ceil(diff);
}

var formatDistanceLocale = {
  lessThanXSeconds: {
    one: 'less than a second',
    other: 'less than {{count}} seconds'
  },
  xSeconds: {
    one: '1 second',
    other: '{{count}} seconds'
  },
  halfAMinute: 'half a minute',
  lessThanXMinutes: {
    one: 'less than a minute',
    other: 'less than {{count}} minutes'
  },
  xMinutes: {
    one: '1 minute',
    other: '{{count}} minutes'
  },
  aboutXHours: {
    one: 'about 1 hour',
    other: 'about {{count}} hours'
  },
  xHours: {
    one: '1 hour',
    other: '{{count}} hours'
  },
  xDays: {
    one: '1 day',
    other: '{{count}} days'
  },
  aboutXWeeks: {
    one: 'about 1 week',
    other: 'about {{count}} weeks'
  },
  xWeeks: {
    one: '1 week',
    other: '{{count}} weeks'
  },
  aboutXMonths: {
    one: 'about 1 month',
    other: 'about {{count}} months'
  },
  xMonths: {
    one: '1 month',
    other: '{{count}} months'
  },
  aboutXYears: {
    one: 'about 1 year',
    other: 'about {{count}} years'
  },
  xYears: {
    one: '1 year',
    other: '{{count}} years'
  },
  overXYears: {
    one: 'over 1 year',
    other: 'over {{count}} years'
  },
  almostXYears: {
    one: 'almost 1 year',
    other: 'almost {{count}} years'
  }
};
function formatDistance$1(token, count, options) {
  options = options || {};
  var result;

  if (typeof formatDistanceLocale[token] === 'string') {
    result = formatDistanceLocale[token];
  } else if (count === 1) {
    result = formatDistanceLocale[token].one;
  } else {
    result = formatDistanceLocale[token].other.replace('{{count}}', count);
  }

  if (options.addSuffix) {
    if (options.comparison > 0) {
      return 'in ' + result;
    } else {
      return result + ' ago';
    }
  }

  return result;
}

function buildFormatLongFn(args) {
  return function (dirtyOptions) {
    var options = dirtyOptions || {};
    var width = options.width ? String(options.width) : args.defaultWidth;
    var format = args.formats[width] || args.formats[args.defaultWidth];
    return format;
  };
}

var dateFormats = {
  full: 'EEEE, MMMM do, y',
  long: 'MMMM do, y',
  medium: 'MMM d, y',
  short: 'MM/dd/yyyy'
};
var timeFormats = {
  full: 'h:mm:ss a zzzz',
  long: 'h:mm:ss a z',
  medium: 'h:mm:ss a',
  short: 'h:mm a'
};
var dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: '{{date}}, {{time}}',
  short: '{{date}}, {{time}}'
};
var formatLong = {
  date: buildFormatLongFn({
    formats: dateFormats,
    defaultWidth: 'full'
  }),
  time: buildFormatLongFn({
    formats: timeFormats,
    defaultWidth: 'full'
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats,
    defaultWidth: 'full'
  })
};

var formatRelativeLocale = {
  lastWeek: "'last' eeee 'at' p",
  yesterday: "'yesterday at' p",
  today: "'today at' p",
  tomorrow: "'tomorrow at' p",
  nextWeek: "eeee 'at' p",
  other: 'P'
};
function formatRelative(token, _date, _baseDate, _options) {
  return formatRelativeLocale[token];
}

function buildLocalizeFn(args) {
  return function (dirtyIndex, dirtyOptions) {
    var options = dirtyOptions || {};
    var context = options.context ? String(options.context) : 'standalone';
    var valuesArray;

    if (context === 'formatting' && args.formattingValues) {
      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
      var width = options.width ? String(options.width) : defaultWidth;
      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
    } else {
      var _defaultWidth = args.defaultWidth;

      var _width = options.width ? String(options.width) : args.defaultWidth;

      valuesArray = args.values[_width] || args.values[_defaultWidth];
    }

    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
    return valuesArray[index];
  };
}

var eraValues = {
  narrow: ['B', 'A'],
  abbreviated: ['BC', 'AD'],
  wide: ['Before Christ', 'Anno Domini']
};
var quarterValues = {
  narrow: ['1', '2', '3', '4'],
  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
  wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter'] // Note: in English, the names of days of the week and months are capitalized.
  // If you are making a new locale based on this one, check if the same is true for the language you're working on.
  // Generally, formatted dates should look like they are in the middle of a sentence,
  // e.g. in Spanish language the weekdays and months should be in the lowercase.

};
var monthValues = {
  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
  abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
  wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
};
var dayValues = {
  narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
  short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
  abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
  wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
};
var dayPeriodValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'mi',
    noon: 'n',
    morning: 'morning',
    afternoon: 'afternoon',
    evening: 'evening',
    night: 'night'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'morning',
    afternoon: 'afternoon',
    evening: 'evening',
    night: 'night'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'morning',
    afternoon: 'afternoon',
    evening: 'evening',
    night: 'night'
  }
};
var formattingDayPeriodValues = {
  narrow: {
    am: 'a',
    pm: 'p',
    midnight: 'mi',
    noon: 'n',
    morning: 'in the morning',
    afternoon: 'in the afternoon',
    evening: 'in the evening',
    night: 'at night'
  },
  abbreviated: {
    am: 'AM',
    pm: 'PM',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'in the morning',
    afternoon: 'in the afternoon',
    evening: 'in the evening',
    night: 'at night'
  },
  wide: {
    am: 'a.m.',
    pm: 'p.m.',
    midnight: 'midnight',
    noon: 'noon',
    morning: 'in the morning',
    afternoon: 'in the afternoon',
    evening: 'in the evening',
    night: 'at night'
  }
};

function ordinalNumber(dirtyNumber, _dirtyOptions) {
  var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,
  // if they are different for different grammatical genders,
  // use `options.unit`:
  //
  //   var options = dirtyOptions || {}
  //   var unit = String(options.unit)
  //
  // where `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
  // 'day', 'hour', 'minute', 'second'

  var rem100 = number % 100;

  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + 'st';

      case 2:
        return number + 'nd';

      case 3:
        return number + 'rd';
    }
  }

  return number + 'th';
}

var localize = {
  ordinalNumber: ordinalNumber,
  era: buildLocalizeFn({
    values: eraValues,
    defaultWidth: 'wide'
  }),
  quarter: buildLocalizeFn({
    values: quarterValues,
    defaultWidth: 'wide',
    argumentCallback: function (quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues,
    defaultWidth: 'wide'
  }),
  day: buildLocalizeFn({
    values: dayValues,
    defaultWidth: 'wide'
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues,
    defaultWidth: 'wide',
    formattingValues: formattingDayPeriodValues,
    defaultFormattingWidth: 'wide'
  })
};

function buildMatchPatternFn(args) {
  return function (dirtyString, dirtyOptions) {
    var string = String(dirtyString);
    var options = dirtyOptions || {};
    var matchResult = string.match(args.matchPattern);

    if (!matchResult) {
      return null;
    }

    var matchedString = matchResult[0];
    var parseResult = string.match(args.parsePattern);

    if (!parseResult) {
      return null;
    }

    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
    value = options.valueCallback ? options.valueCallback(value) : value;
    return {
      value: value,
      rest: string.slice(matchedString.length)
    };
  };
}

function buildMatchFn(args) {
  return function (dirtyString, dirtyOptions) {
    var string = String(dirtyString);
    var options = dirtyOptions || {};
    var width = options.width;
    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
    var matchResult = string.match(matchPattern);

    if (!matchResult) {
      return null;
    }

    var matchedString = matchResult[0];
    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
    var value;

    if (Object.prototype.toString.call(parsePatterns) === '[object Array]') {
      value = findIndex(parsePatterns, function (pattern) {
        return pattern.test(matchedString);
      });
    } else {
      value = findKey(parsePatterns, function (pattern) {
        return pattern.test(matchedString);
      });
    }

    value = args.valueCallback ? args.valueCallback(value) : value;
    value = options.valueCallback ? options.valueCallback(value) : value;
    return {
      value: value,
      rest: string.slice(matchedString.length)
    };
  };
}

function findKey(object, predicate) {
  for (var key in object) {
    if (object.hasOwnProperty(key) && predicate(object[key])) {
      return key;
    }
  }
}

function findIndex(array, predicate) {
  for (var key = 0; key < array.length; key++) {
    if (predicate(array[key])) {
      return key;
    }
  }
}

var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern = /\d+/i;
var matchEraPatterns = {
  narrow: /^(b|a)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(before christ|before common era|anno domini|common era)/i
};
var parseEraPatterns = {
  any: [/^b/i, /^(a|c)/i]
};
var matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](th|st|nd|rd)? quarter/i
};
var parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
};
var parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns = {
  narrow: /^[smtwf]/i,
  short: /^(su|mo|tu|we|th|fr|sa)/i,
  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
};
var parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
var matchDayPeriodPatterns = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};
var match = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: function (value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseEraPatterns,
    defaultParseWidth: 'any'
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: 'any',
    valueCallback: function (index) {
      return index + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: 'any'
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: 'wide',
    parsePatterns: parseDayPatterns,
    defaultParseWidth: 'any'
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: 'any',
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: 'any'
  })
};

/**
 * @type {Locale}
 * @category Locales
 * @summary English locale (United States).
 * @language English
 * @iso-639-2 eng
 * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}
 * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}
 */

var locale = {
  code: 'en-US',
  formatDistance: formatDistance$1,
  formatLong: formatLong,
  formatRelative: formatRelative,
  localize: localize,
  match: match,
  options: {
    weekStartsOn: 0
    /* Sunday */
    ,
    firstWeekContainsDate: 1
  }
};

function assign(target, dirtyObject) {
  if (target == null) {
    throw new TypeError('assign requires that input parameter not be null or undefined');
  }

  dirtyObject = dirtyObject || {};

  for (var property in dirtyObject) {
    if (dirtyObject.hasOwnProperty(property)) {
      target[property] = dirtyObject[property];
    }
  }

  return target;
}

function cloneObject(dirtyObject) {
  return assign({}, dirtyObject);
}

var MINUTES_IN_DAY = 1440;
var MINUTES_IN_ALMOST_TWO_DAYS = 2520;
var MINUTES_IN_MONTH = 43200;
var MINUTES_IN_TWO_MONTHS = 86400;
/**
 * @name formatDistance
 * @category Common Helpers
 * @summary Return the distance between the given dates in words.
 *
 * @description
 * Return the distance between the given dates in words.
 *
 * | Distance between dates                                            | Result              |
 * |-------------------------------------------------------------------|---------------------|
 * | 0 ... 30 secs                                                     | less than a minute  |
 * | 30 secs ... 1 min 30 secs                                         | 1 minute            |
 * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |
 * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |
 * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |
 * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |
 * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |
 * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |
 * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |
 * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |
 * | 1 yr ... 1 yr 3 months                                            | about 1 year        |
 * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |
 * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |
 * | N yrs ... N yrs 3 months                                          | about N years       |
 * | N yrs 3 months ... N yrs 9 months                                 | over N years        |
 * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |
 *
 * With `options.includeSeconds == true`:
 * | Distance between dates | Result               |
 * |------------------------|----------------------|
 * | 0 secs ... 5 secs      | less than 5 seconds  |
 * | 5 secs ... 10 secs     | less than 10 seconds |
 * | 10 secs ... 20 secs    | less than 20 seconds |
 * | 20 secs ... 40 secs    | half a minute        |
 * | 40 secs ... 60 secs    | less than a minute   |
 * | 60 secs ... 90 secs    | 1 minute             |
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * - The function was renamed from `distanceInWords ` to `formatDistance`
 *   to make its name consistent with `format` and `formatRelative`.
 *
 * - The order of arguments is swapped to make the function
 *   consistent with `differenceIn...` functions.
 *
 *   ```javascript
 *   // Before v2.0.0
 *
 *   distanceInWords(
 *     new Date(1986, 3, 4, 10, 32, 0),
 *     new Date(1986, 3, 4, 11, 32, 0),
 *     { addSuffix: true }
 *   ) //=> 'in about 1 hour'
 *
 *   // v2.0.0 onward
 *
 *   formatDistance(
 *     new Date(1986, 3, 4, 11, 32, 0),
 *     new Date(1986, 3, 4, 10, 32, 0),
 *     { addSuffix: true }
 *   ) //=> 'in about 1 hour'
 *   ```
 *
 * @param {Date|Number} date - the date
 * @param {Date|Number} baseDate - the date to compare with
 * @param {Object} [options] - an object with options.
 * @param {Boolean} [options.includeSeconds=false] - distances less than a minute are more detailed
 * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first
 * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
 * @returns {String} the distance in words
 * @throws {TypeError} 2 arguments required
 * @throws {RangeError} `date` must not be Invalid Date
 * @throws {RangeError} `baseDate` must not be Invalid Date
 * @throws {RangeError} `options.locale` must contain `formatDistance` property
 *
 * @example
 * // What is the distance between 2 July 2014 and 1 January 2015?
 * var result = formatDistance(new Date(2014, 6, 2), new Date(2015, 0, 1))
 * //=> '6 months'
 *
 * @example
 * // What is the distance between 1 January 2015 00:00:15
 * // and 1 January 2015 00:00:00, including seconds?
 * var result = formatDistance(
 *   new Date(2015, 0, 1, 0, 0, 15),
 *   new Date(2015, 0, 1, 0, 0, 0),
 *   { includeSeconds: true }
 * )
 * //=> 'less than 20 seconds'
 *
 * @example
 * // What is the distance from 1 January 2016
 * // to 1 January 2015, with a suffix?
 * var result = formatDistance(new Date(2015, 0, 1), new Date(2016, 0, 1), {
 *   addSuffix: true
 * })
 * //=> 'about 1 year ago'
 *
 * @example
 * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?
 * import { eoLocale } from 'date-fns/locale/eo'
 * var result = formatDistance(new Date(2016, 7, 1), new Date(2015, 0, 1), {
 *   locale: eoLocale
 * })
 * //=> 'pli ol 1 jaro'
 */

function formatDistance(dirtyDate, dirtyBaseDate, dirtyOptions) {
  requiredArgs(2, arguments);
  var options = dirtyOptions || {};
  var locale$1 = options.locale || locale;

  if (!locale$1.formatDistance) {
    throw new RangeError('locale must contain formatDistance property');
  }

  var comparison = compareAsc(dirtyDate, dirtyBaseDate);

  if (isNaN(comparison)) {
    throw new RangeError('Invalid time value');
  }

  var localizeOptions = cloneObject(options);
  localizeOptions.addSuffix = Boolean(options.addSuffix);
  localizeOptions.comparison = comparison;
  var dateLeft;
  var dateRight;

  if (comparison > 0) {
    dateLeft = toDate(dirtyBaseDate);
    dateRight = toDate(dirtyDate);
  } else {
    dateLeft = toDate(dirtyDate);
    dateRight = toDate(dirtyBaseDate);
  }

  var seconds = differenceInSeconds(dateRight, dateLeft);
  var offsetInSeconds = (getTimezoneOffsetInMilliseconds(dateRight) - getTimezoneOffsetInMilliseconds(dateLeft)) / 1000;
  var minutes = Math.round((seconds - offsetInSeconds) / 60);
  var months; // 0 up to 2 mins

  if (minutes < 2) {
    if (options.includeSeconds) {
      if (seconds < 5) {
        return locale$1.formatDistance('lessThanXSeconds', 5, localizeOptions);
      } else if (seconds < 10) {
        return locale$1.formatDistance('lessThanXSeconds', 10, localizeOptions);
      } else if (seconds < 20) {
        return locale$1.formatDistance('lessThanXSeconds', 20, localizeOptions);
      } else if (seconds < 40) {
        return locale$1.formatDistance('halfAMinute', null, localizeOptions);
      } else if (seconds < 60) {
        return locale$1.formatDistance('lessThanXMinutes', 1, localizeOptions);
      } else {
        return locale$1.formatDistance('xMinutes', 1, localizeOptions);
      }
    } else {
      if (minutes === 0) {
        return locale$1.formatDistance('lessThanXMinutes', 1, localizeOptions);
      } else {
        return locale$1.formatDistance('xMinutes', minutes, localizeOptions);
      }
    } // 2 mins up to 0.75 hrs

  } else if (minutes < 45) {
    return locale$1.formatDistance('xMinutes', minutes, localizeOptions); // 0.75 hrs up to 1.5 hrs
  } else if (minutes < 90) {
    return locale$1.formatDistance('aboutXHours', 1, localizeOptions); // 1.5 hrs up to 24 hrs
  } else if (minutes < MINUTES_IN_DAY) {
    var hours = Math.round(minutes / 60);
    return locale$1.formatDistance('aboutXHours', hours, localizeOptions); // 1 day up to 1.75 days
  } else if (minutes < MINUTES_IN_ALMOST_TWO_DAYS) {
    return locale$1.formatDistance('xDays', 1, localizeOptions); // 1.75 days up to 30 days
  } else if (minutes < MINUTES_IN_MONTH) {
    var days = Math.round(minutes / MINUTES_IN_DAY);
    return locale$1.formatDistance('xDays', days, localizeOptions); // 1 month up to 2 months
  } else if (minutes < MINUTES_IN_TWO_MONTHS) {
    months = Math.round(minutes / MINUTES_IN_MONTH);
    return locale$1.formatDistance('aboutXMonths', months, localizeOptions);
  }

  months = differenceInMonths(dateRight, dateLeft); // 2 months up to 12 months

  if (months < 12) {
    var nearestMonth = Math.round(minutes / MINUTES_IN_MONTH);
    return locale$1.formatDistance('xMonths', nearestMonth, localizeOptions); // 1 year up to max Date
  } else {
    var monthsSinceStartOfYear = months % 12;
    var years = Math.floor(months / 12); // N years up to 1 years 3 months

    if (monthsSinceStartOfYear < 3) {
      return locale$1.formatDistance('aboutXYears', years, localizeOptions); // N years 3 months up to N years 9 months
    } else if (monthsSinceStartOfYear < 9) {
      return locale$1.formatDistance('overXYears', years, localizeOptions); // N years 9 months up to N year 12 months
    } else {
      return locale$1.formatDistance('almostXYears', years + 1, localizeOptions);
    }
  }
}

/**
 * @name subSeconds
 * @category Second Helpers
 * @summary Subtract the specified number of seconds from the given date.
 *
 * @description
 * Subtract the specified number of seconds from the given date.
 *
 * ### v2.0.0 breaking changes:
 *
 * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
 *
 * @param {Date|Number} date - the date to be changed
 * @param {Number} amount - the amount of seconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
 * @returns {Date} the new date with the seconds subtracted
 * @throws {TypeError} 2 arguments required
 *
 * @example
 * // Subtract 30 seconds from 10 July 2014 12:45:00:
 * var result = subSeconds(new Date(2014, 6, 10, 12, 45, 0), 30)
 * //=> Thu Jul 10 2014 12:44:30
 */

function subSeconds(dirtyDate, dirtyAmount) {
  requiredArgs(2, arguments);
  var amount = toInteger(dirtyAmount);
  return addSeconds(dirtyDate, -amount);
}

const toastCss = "/*!@:host*/.sc-scale-toast-h{--width:400px;--radius:var(--scl-radius-4);--background:var(--scl-color-background-standard);--box-shadow:var(--scl-shadow-level-0);--spacing:var(--scl-spacing-16);--border-header:1px solid var(--scl-color-grey-20);--font-size-header:var(--scl-font-variant-heading-4-size);--font-size-header-small:var(--scl-font-variant-smaller-size);--height-progress:var(--scl-spacing-2)}/*!@.toast*/.toast.sc-scale-toast{width:var(--width);display:flex;opacity:0;z-index:1;position:fixed;background:var(--background);box-shadow:var(--box-shadow);box-sizing:border-box;border-radius:var(--radius);flex-direction:column;justify-content:space-between}/*!@.toast__body*/.toast__body.sc-scale-toast{padding:var(--spacing)}/*!@.toast__header*/.toast__header.sc-scale-toast{margin:0;display:flex;padding:var(--spacing);border-bottom:var(--border-header);justify-content:space-between;font-size:var(--font-size-header)}/*!@.toast__header a*/.toast__header.sc-scale-toast a.sc-scale-toast{cursor:pointer}/*!@.toast__header small*/.toast__header.sc-scale-toast small.sc-scale-toast{margin-top:5px;margin-left:120px;font-size:var(--font-size-header-small)}/*!@.toast__progress*/.toast__progress.sc-scale-toast{left:0;bottom:0;height:var(--height-progress);display:block;overflow:hidden;position:absolute;background:red}";

class Toast {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) Toast size */
    this.size = '';
    /** (optional) Toast variant */
    this.variant = '';
    /** (optional) Toast autohide time */
    this.autoHide = false;
    /** (optional) Animated toast */
    this.animated = true;
    /** (optional) Toast position at the top */
    this.positionTop = 12;
    /** (optional) Toast position right */
    this.positionRight = 12;
    /** (optional) Toast fade duration */
    this.fadeDuration = 500;
    /** (optional) Toast state progress */
    this.progress = 0;
    /** (optional) Toast state height with offset */
    this.toastHeightWithOffset = 0;
    this.hideToast = false;
    this.timerId = null;
    this.close = () => {
      clearInterval(this.timerId);
      this.hideToast = true;
      setTimeout(() => {
        this.timerId = null;
        this.opened = false;
        this.progress = 0;
      }, this.fadeDuration);
    };
    this.getTime = () => {
      const formattedTime = this.time &&
        formatDistance(subSeconds(this.time, 3), new Date(), { addSuffix: true });
      return formattedTime;
    };
    this.setToastTimeout = () => {
      if (this.opened && this.autoHide !== false && !this.timerId) {
        this.timerId = setInterval(() => {
          this.progress += 1 / (this.getAutoHide() / 1000);
          if (this.progress >= 100) {
            this.close();
          }
        }, 10);
      }
    };
    this.transitions = (offset) => `
    @keyframes fadeIn {
      from {
        opacity: 0;
        top: -${offset}px;
      }
      to {
        opacity: 1;
        top: ${this.positionTop}px;
      }
    }

    @keyframes fadeOut {
      from {
        opacity: 1;
        top: ${this.positionTop}px;
      }
      to {
        opacity: 0;
        top: -${offset}px;
      }
    }
  `;
    this.animationStyle = (offset) => {
      return `
      .toast--show {
        right: ${this.positionRight}px;
        animation: fadeIn ${this.fadeDuration / 1000}s ease-in-out;
        top: ${this.positionTop}px;
        opacity: 1;
      },
      .toast--show {
        right: ${this.positionRight}px;
        animation: fadeOut ${this.fadeDuration / 1000}s ease-in-out;
        top: -${offset}px;
        opacity: 0;
      }
    `;
    };
  }
  connectedCallback() {
    statusNote({ source: this.element, type: 'warn' });
  }
  disconnectedCallback() {
    if (this.timerId) {
      clearTimeout(this.timerId);
      this.timerId = null;
      this.opened = false;
      this.progress = 0;
    }
  }
  /** Toast method: open() */
  async open() {
    this.opened = true;
    this.hideToast = false;
  }
  render() {
    this.setToastTimeout();
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync("style", null, this.transitions(this.toastHeightWithOffset)), hAsync("style", null, this.animationStyle(this.toastHeightWithOffset)), hAsync("div", { class: this.getCssClassMap(), part: this.getBasePartMap() }, hAsync("div", { part: "header", class: "toast__header" }, hAsync("slot", { name: "header" }), hAsync("small", null, this.getTime()), hAsync("a", { onClick: this.close }, hAsync("span", { "aria-hidden": "true" }, "\u00D7"))), this.autoHide && (hAsync("div", { part: "progress", class: "toast__progress", style: { width: `${this.progress}%` } }, "\u00A0")), hAsync("div", { part: "body", class: "toast__body" }, hAsync("slot", null)))));
  }
  getToastHeightWithOffset() {
    const toastHeight = this.element.shadowRoot.querySelector('.toast')
      .scrollHeight;
    this.toastHeightWithOffset = toastHeight + this.positionTop;
  }
  getAutoHide() {
    if (typeof this.autoHide === 'number' ||
      typeof this.autoHide === 'string') {
      return Number(this.autoHide);
    }
    else {
      return 0;
    }
  }
  getBasePartMap() {
    return this.getCssOrBasePartMap('basePart');
  }
  getCssClassMap() {
    return this.getCssOrBasePartMap('css');
  }
  getCssOrBasePartMap(mode) {
    const component = 'toast';
    const prefix = mode === 'basePart' ? '' : `${component}`;
    return classnames(mode === 'basePart' ? 'base' : component, this.size && `${prefix}--size-${this.size}`, this.variant && `${prefix}--variant-${this.variant}`, !!this.opened && `${prefix}--opened`, !!!this.hideToast && `${prefix}--show`, !!this.hideToast && `${prefix}--hide`);
  }
  get element() { return getElement$1(this); }
  static get style() { return toastCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-toast",
    "$members$": {
      "size": [1],
      "variant": [1],
      "opened": [516],
      "autoHide": [8, "auto-hide"],
      "animated": [4],
      "time": [2],
      "positionTop": [2, "position-top"],
      "positionRight": [2, "position-right"],
      "fadeDuration": [2, "fade-duration"],
      "styles": [513],
      "progress": [32],
      "toastHeightWithOffset": [32],
      "open": [64]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["opened", "opened"], ["styles", "styles"]]
  }; }
}

const toggleButtonCss = "/*!@:host*/.sc-scale-toggle-button-h{--width:auto;--spacing-x:var(--scl-spacing-24);--spacing-x-icon-only:var(--scl-spacing-8);--min-height:var(--scl-spacing-24);--height-xs:var(--scl-spacing-24);--height-small:var(--scl-spacing-32);--height-regular:var(--scl-spacing-40);--height-large:var(--scl-spacing-48);--radius:var(--scl-radius-4);--transition:all var(--scl-motion-duration-fast)\n      var(--scl-motion-easing-standard),\n    border-radius 0ms;--box-shadow-focus:inset 0 0 0 var(--scl-spacing-2) var(--scl-color-focus);--font-weight:var(--scl-font-weight-bold);--font-size-large:var(--scl-font-size-16);--font-size-small:var(--scl-font-size-14);--font-size-xs:var(--scl-font-size-12);--line-height:var(--scl-font-line-height-150);--spacing-icon-x:var(--scl-spacing-8);--vertical-align:middle;--border-color:var(--scl-color-grey-90);--border-color-disabled:var(--scl-color-background-disabled);--font-size-small:var(--scl-font-size-12);--line-height-small:var(--scl-font-line-height-133);--min-height-small:var(--scl-spacing-32);--radius-primary:var(--radius);--background-primary:var(--scl-color-grey-10);--background-primary-disabled:var(--scl-color-grey-0);--color-primary:var(--scl-color-grey-90);--color-primary-hover:var(--scl-color-primary-hover);--color-primary-active:var(--scl-color-primary-active);--color-primary-disabled:var(--scl-color-grey-20);--background-secondary:var(--scl-color-white);--color-selected:var(--scl-color-white);--background-selected-light:var(--scl-color-primary);--background-selected-hover-light:var(--color-primary-hover);--background-selected-active-light:var(--scl-color-primary-active);--background-selected-dark:var(--scl-color-grey-90);--background-selected-hover-dark:var(--scl-color-grey-70);--background-selected-active-dark:var(--scl-color-black);--color-high-contrast:var(--scl-color-white)}/*!@.toggle-button*/.toggle-button.sc-scale-toggle-button{box-sizing:border-box;display:inline-flex;align-items:center;position:relative;border:0;outline:none;cursor:pointer;user-select:none;font-family:inherit;word-spacing:inherit;letter-spacing:inherit;justify-content:center;text-decoration:none;font-weight:var(--font-weight);font-size:var(--font-size);line-height:var(--line-height);min-height:var(--min-height);width:var(--width);padding-left:var(--spacing-x);padding-right:var(--spacing-x);vertical-align:var(--vertical-align);transition:var(--transition);margin:0}/*!@.toggle-button--primary*/.toggle-button--primary.sc-scale-toggle-button{background:var(--background-primary)}/*!@.toggle-button--secondary*/.toggle-button--secondary.sc-scale-toggle-button{background:var(--background-secondary)}/*!@.toggle-button--icon-before ::slotted(*)*/.toggle-button--icon-before .sc-scale-toggle-button-s>*{margin-right:var(--spacing-icon-x);pointer-events:none}/*!@.toggle-button--icon-after ::slotted(*)*/.toggle-button--icon-after .sc-scale-toggle-button-s>*{margin-left:var(--spacing-icon-x);pointer-events:none}/*!@.toggle-button--icon-only ::slotted(*)*/.toggle-button--icon-only .sc-scale-toggle-button-s>*{pointer-events:none}/*!@.toggle-button--xs*/.toggle-button--xs.sc-scale-toggle-button{height:var(--height-xs);font-size:var(--font-size-xs)}/*!@.toggle-button--small*/.toggle-button--small.sc-scale-toggle-button{height:var(--height-small);font-size:var(--font-size-small)}/*!@.toggle-button--regular*/.toggle-button--regular.sc-scale-toggle-button{height:var(--height-regular);font-size:var(--font-size-large)}/*!@.toggle-button--large*/.toggle-button--large.sc-scale-toggle-button{height:var(--height-large);font-size:var(--font-size-large)}/*!@.toggle-button:not(.button--disabled):focus*/.toggle-button.sc-scale-toggle-button:not(.button--disabled):focus{box-shadow:var(--box-shadow-focus)}/*!@.toggle-button:not(.button--disabled):hover*/.toggle-button.sc-scale-toggle-button:not(.button--disabled):hover{color:var(--color-primary-hover)}/*!@.toggle-button:not(.button--disabled):active*/.toggle-button.sc-scale-toggle-button:not(.button--disabled):active{color:var(--scl-color-primary-active)}/*!@.toggle-button:disabled*/.toggle-button.sc-scale-toggle-button:disabled{color:var(--color-primary-disabled);pointer-events:none;border:1px solid var(--border-color-disabled)}/*!@.toggle-button:disabled.toggle-button--primary*/.toggle-button.sc-scale-toggle-button:disabled.toggle-button--primary{background:var(--background-primary-disabled)}/*!@.toggle-button--selected.toggle-button--color*/.toggle-button--selected.toggle-button--color.sc-scale-toggle-button{color:var(--color-selected);background:var(--background-selected-light)}/*!@.toggle-button--selected:not(.button--disabled).toggle-button--color:hover*/.toggle-button--selected.sc-scale-toggle-button:not(.button--disabled).toggle-button--color:hover{color:var(--color-selected);background:var(--background-selected-hover-light)}/*!@.toggle-button--selected:not(.button--disabled).toggle-button--color:active*/.toggle-button--selected.sc-scale-toggle-button:not(.button--disabled).toggle-button--color:active{color:var(--color-selected);background:var(--background-selected-active-light)}/*!@.toggle-button--selected.toggle-button--monochrome*/.toggle-button--selected.toggle-button--monochrome.sc-scale-toggle-button{color:var(--color-selected);background:var(--background-selected-dark)}/*!@.toggle-button--selected:not(.button--disabled).toggle-button--monochrome:hover*/.toggle-button--selected.sc-scale-toggle-button:not(.button--disabled).toggle-button--monochrome:hover{color:var(--color-selected);background:var(--background-selected-hover-dark)}/*!@.toggle-button--selected:not(.button--disabled).toggle-button--monochrome:active*/.toggle-button--selected.sc-scale-toggle-button:not(.button--disabled).toggle-button--monochrome:active{color:var(--color-selected);background:var(--background-selected-active-dark)}/*!@.toggle-button--border*/.toggle-button--border.sc-scale-toggle-button{border:1px solid var(--border-color)}/*!@.toggle-button--left,\n.toggle-button--left:disabled*/.toggle-button--left.sc-scale-toggle-button,.toggle-button--left.sc-scale-toggle-button:disabled{border-right:0;border-radius:var(--radius-primary) 0 0 var(--radius-primary)}/*!@.toggle-button--right,\n.toggle-button--right:disabled*/.toggle-button--right.sc-scale-toggle-button,.toggle-button--right.sc-scale-toggle-button:disabled{border-left:0;border-radius:0 var(--radius-primary) var(--radius-primary) 0}/*!@.toggle-button--both,\n.toggle-button--both:disabled*/.toggle-button--both.sc-scale-toggle-button,.toggle-button--both.sc-scale-toggle-button:disabled{border-radius:var(--radius-primary)}/*!@.toggle-button--neither,\n.toggle-button--neither:disabled*/.toggle-button--neither.sc-scale-toggle-button,.toggle-button--neither.sc-scale-toggle-button:disabled{border-right:0;border-left:0;border-radius:0}@media screen and (forced-colors: active), (-ms-high-contrast: active){/*!@.toggle-button*/.toggle-button.sc-scale-toggle-button{color:var(--color-high-contrast)}}";

var iconSizes;
(function (iconSizes) {
  iconSizes["xs"] = "12";
  iconSizes["small"] = "16";
  iconSizes["regular"] = "22";
  iconSizes["large"] = "24";
})(iconSizes || (iconSizes = {}));
let i = 0;
class ToggleButton {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.scaleClick = createEvent$1(this, "scale-click", 7);
    this.scaleClickLegacy = createEvent$1(this, "scaleClick", 7);
    /** (optional) The size of the button */
    this.size = 'regular';
    /** (optional) Button background */
    this.background = 'white';
    /** @deprecated - variant should replace colorScheme */
    this.colorScheme = 'color';
    /** (optional) background variant of a selected toggle-button */
    this.variant = 'color';
    /** (optional) If `true`, the button is disabled */
    this.disabled = false;
    /** (optional) If `true`, the button is selected */
    this.selected = false;
    /** (optional) Button type */
    this.iconOnly = false;
    /** (optional) Icon position related to the label */
    this.iconPosition = 'before';
    /** (optional) set the border-radius left, right or both */
    this.radius = null;
    /** (optional) translation of 'selected */
    this.ariaLangSelected = 'selected';
    /** (optional) translation of 'deselected */
    this.ariaLangDeselected = 'deselected';
    /** a11y text for getting meaningful value. `$buttonNumber` and `$selected` are template variables and will be replaces by their corresponding properties.  */
    this.ariaDescriptionTranslation = '$selected';
    this.hasScaleIcon = false;
    this.handleClick = (event) => {
      event.preventDefault();
      this.selected = !this.selected;
      this.handleIconShape();
      this.scaleClick.emit({ id: this.toggleButtonId, selected: this.selected });
      emitEvent$1(this, 'scaleClick', {
        id: this.toggleButtonId,
        selected: this.selected,
      });
    };
    this.handleIconShape = () => {
      if (this.hasScaleIcon) {
        Array.from(this.hostElement.children).forEach((node) => {
          if (node.nodeName.substr(0, 10) === 'SCALE-ICON') {
            if (this.selected) {
              node.setAttribute('selected', 'true');
            }
            else {
              node.removeAttribute('selected');
            }
          }
        });
      }
    };
  }
  connectedCallback() {
    this.setIconPositionProp();
    this.handleIconShape();
  }
  componentDidLoad() {
    this.handleIconSize();
  }
  componentDidRender() {
    this.handleIconSize();
  }
  componentWillLoad() {
    if (this.toggleButtonId == null) {
      this.toggleButtonId = 'toggle-button-' + i++;
    }
  }
  getAriaDescriptionTranslation() {
    const replaceSelected = this.selected
      ? this.ariaLangSelected
      : this.ariaLangDeselected;
    const filledText = this.ariaDescriptionTranslation
      .replace(/\$position/g, `${this.position}`)
      .replace(/\$selected/g, `${replaceSelected}`);
    return filledText;
  }
  handleIconSize() {
    Array.from(this.hostElement.children).forEach((child) => {
      if (child.tagName.substr(0, 10) === 'SCALE-ICON') {
        child.setAttribute('size', iconSizes[this.size]);
      }
    });
  }
  /**
   * Detect whether a child node is a scale icon and contains text.
   * If so, we set `iconPosition` to `after`, if the icon comes after the text.
   */
  setIconPositionProp() {
    const nodes = Array.from(this.hostElement.childNodes).filter((node) => {
      if (node.nodeName.substr(0, 10) === 'SCALE-ICON') {
        this.hasScaleIcon = true;
      }
      // ignore empty text nodes, which are probably due to formatting
      return !(node.nodeType === 3 && node.nodeValue.trim() === '');
    });
    if (!this.iconOnly &&
      nodes &&
      nodes.length &&
      nodes[nodes.length - 1] &&
      nodes[nodes.length - 1].nodeName.substr(0, 10) === 'SCALE-ICON') {
      this.iconPosition = 'after';
    }
  }
  render() {
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync("button", { class: this.getCssClassMap(), id: this.toggleButtonId, onClick: this.handleClick, disabled: this.disabled, type: "button", "aria-label": this.ariaLabel, "aria-pressed": this.selected, part: this.getBasePartMap(), "aria-description": this.getAriaDescriptionTranslation() }, hAsync("slot", null))));
  }
  getBasePartMap() {
    return this.getCssOrBasePartMap('basePart');
  }
  getCssClassMap() {
    return this.getCssOrBasePartMap('css');
  }
  getCssOrBasePartMap(mode) {
    const prefix = mode === 'basePart' ? '' : 'toggle-button--';
    return classnames('toggle-button', this.size && `${prefix}${this.size}`, this.background &&
      `${prefix}${this.background === 'grey' ? 'primary' : 'secondary'}`, !this.iconOnly &&
      this.iconPosition &&
      `toggle-button--icon-${this.iconPosition}`, this.iconOnly && `${prefix}icon-only`, !this.disabled && this.selected && `${prefix}selected`, this.radius && `${prefix}${this.radius}`, this.colorScheme && `${prefix}${this.colorScheme}`, this.variant && `${prefix}${this.variant}`, !this.hideBorder && `${prefix}border`);
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return toggleButtonCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-toggle-button",
    "$members$": {
      "size": [1],
      "background": [1],
      "colorScheme": [1, "color-scheme"],
      "variant": [1],
      "disabled": [4],
      "selected": [1028],
      "iconOnly": [4, "icon-only"],
      "iconPosition": [1537, "icon-position"],
      "hideBorder": [4, "hide-border"],
      "radius": [1],
      "toggleButtonId": [513, "toggle-button-id"],
      "ariaLabel": [1, "aria-label"],
      "styles": [1],
      "position": [2],
      "ariaLangSelected": [1, "aria-lang-selected"],
      "ariaLangDeselected": [1, "aria-lang-deselected"],
      "ariaDescriptionTranslation": [1, "aria-description-translation"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["iconPosition", "icon-position"], ["toggleButtonId", "toggle-button-id"]]
  }; }
}

const toggleGroupCss = "/*!@:host*/.sc-scale-toggle-group-h{--border-color:var(--scl-color-grey-90);--border-color-disabled:var(--scl-color-background-disabled);--border:var(--scl-spacing-1) solid var(--border-color);--border-disabled:var(--scl-spacing-1) solid var(--border-color-disabled);--radius:var(--scl-radius-8)}/*!@.toggle-group--inline*/.toggle-group--inline.sc-scale-toggle-group{display:inline-flex}/*!@.toggle-group--block*/.toggle-group--block.sc-scale-toggle-group{display:flex}/*!@.toggle-group--block ::slotted(*)*/.toggle-group--block .sc-scale-toggle-group-s>*{flex-grow:1}";

class ToggleGroup {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.scaleChange = createEvent$1(this, "scale-change", 7);
    this.scaleChangeLegacy = createEvent$1(this, "scaleChange", 7);
    /** toggle button position within group */
    this.position = 0;
    /** number of slotted toggle-buttons */
    this.slottedButtons = 0;
    /** state */
    this.status = [];
    /** (optional) The size of the button */
    this.size = 'regular';
    /** (optional) Button Group background */
    this.background = 'white';
    /** (optional) 100% width */
    this.fullWidth = false;
    /** (optional) If `true`, the button is disabled */
    this.disabled = false;
    /** (optional) If `true`, the group has a border */
    this.hideBorder = false;
    /** (optional) more than one button selected possible */
    this.singleSelect = false;
    /** (optional) aria-label attribute needed for icon-only buttons */
    this.ariaLabelTranslation = `toggle button group with $slottedButtons buttons`;
    /** @deprecated - variant should replace colorScheme */
    this.colorScheme = 'color';
    /** (optional) background variant of a selected toggle-button */
    this.variant = 'color';
  }
  scaleClickHandler(ev) {
    let tempState;
    if (this.singleSelect) {
      if (!ev.detail.selected) {
        tempState = this.status.map((obj) => ev.detail.id === obj.id ? ev.detail : Object.assign({}, obj));
        /* clicked button has now selected state */
      }
      else {
        tempState = this.status.map((obj) => ev.detail.id === obj.id ? ev.detail : Object.assign(Object.assign({}, obj), { selected: false }));
      }
    }
    else {
      tempState = this.status.map((obj) => ev.detail.id === obj.id ? ev.detail : Object.assign({}, obj));
    }
    this.setNewState(tempState);
  }
  componentDidLoad() {
    const tempState = [];
    const toggleButtons = Array.from(this.hostElement.querySelectorAll('scale-toggle-button'));
    this.slottedButtons = toggleButtons.length;
    toggleButtons.forEach((toggleButton) => {
      this.position++;
      tempState.push({
        id: toggleButton.getAttribute('toggle-button-id'),
        selected: toggleButton.hasAttribute('selected'),
      });
      toggleButton.setAttribute('size', this.size);
      toggleButton.setAttribute('background', this.background);
      toggleButton.setAttribute('disabled', this.disabled && 'disabled');
      toggleButton.setAttribute('position', this.position.toString());
      toggleButton.setAttribute('aria-description-translation', '$position $selected');
      /** DEPRECATED */
      // if attribute variant is set it overrides color-scheme
      toggleButton.setAttribute('color-scheme', this.variant !== 'color' ? this.variant : this.colorScheme);
      // if attribute color-scheme is set it overrides variant
      toggleButton.setAttribute('variant', this.colorScheme !== 'color' ? this.colorScheme : this.variant);
      toggleButton.setAttribute('hide-border', this.hideBorder ? 'true' : 'false');
    });
    this.position = 0;
    this.status = tempState;
  }
  getAriaLabelTranslation() {
    const filledText = this.ariaLabelTranslation.replace(/\$slottedButtons/g, `${this.slottedButtons}`);
    return filledText;
  }
  componentDidRender() {
    if (this.fullWidth) {
      this.setButtonWidth();
    }
    this.setChildrenCorners();
    if (this.colorScheme !== 'color') {
      statusNote({
        tag: 'deprecated',
        message: 'Property "colorScheme" is deprecated. Please use the "variant" property!',
        type: 'warn',
        source: this.hostElement,
      });
    }
  }
  setNewState(tempState) {
    const toggleButtons = Array.from(this.hostElement.querySelectorAll('scale-toggle-button'));
    toggleButtons.forEach((button, i) => {
      button.setAttribute('selected', tempState[i].selected ? 'true' : 'false');
    });
    this.status = tempState;
    emitEvent$1(this, 'scaleChange', this.status);
  }
  setButtonWidth() {
    Array.from(this.hostElement.children).forEach((child) => {
      const button = child.shadowRoot.querySelector('button');
      button.style.width = '100%';
    });
  }
  setChildrenCorners() {
    const children = Array.from(this.hostElement.children);
    for (let i = 0; i < children.length; i++) {
      if (i === 0) {
        children[i].setAttribute('radius', 'left');
      }
      if (i > 0 && i < children.length - 1) {
        children[i].setAttribute('radius', 'neither');
      }
      if (i === children.length - 1) {
        children[i].setAttribute('radius', 'right');
      }
    }
  }
  render() {
    return (hAsync(Host$1, null, this.styles && hAsync("style", null, this.styles), hAsync("div", { class: this.getCssClassMap(), part: this.getBasePartMap(), "aria-label": this.getAriaLabelTranslation(), role: "group" }, hAsync("slot", null))));
  }
  getBasePartMap() {
    return this.getCssOrBasePartMap('basePart');
  }
  getCssClassMap() {
    return this.getCssOrBasePartMap('css');
  }
  getCssOrBasePartMap(mode) {
    const prefix = mode === 'basePart' ? '' : 'toggle-group--';
    return classnames('toggle-group', this.fullWidth && `${prefix}block`, !this.fullWidth && `${prefix}inline`, this.disabled && `${prefix}disabled`);
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return toggleGroupCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-toggle-group",
    "$members$": {
      "size": [1],
      "background": [1],
      "fullWidth": [4, "full-width"],
      "disabled": [4],
      "hideBorder": [4, "hide-border"],
      "singleSelect": [4, "single-select"],
      "ariaLabelTranslation": [1, "aria-label-translation"],
      "colorScheme": [1, "color-scheme"],
      "variant": [1],
      "styles": [1],
      "status": [32]
    },
    "$listeners$": [[0, "scaleClick", "scaleClickHandler"]],
    "$lazyBundleId$": "-",
    "$attrsToReflect$": []
  }; }
}

var top = 'top';
var bottom = 'bottom';
var right = 'right';
var left = 'left';
var auto = 'auto';
var basePlacements = [top, bottom, right, left];
var start = 'start';
var end = 'end';
var clippingParents = 'clippingParents';
var viewport = 'viewport';
var popper = 'popper';
var reference = 'reference';
var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
  return acc.concat([placement + "-" + start, placement + "-" + end]);
}, []);
var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
}, []); // modifiers that need to read the DOM

var beforeRead = 'beforeRead';
var read = 'read';
var afterRead = 'afterRead'; // pure-logic modifiers

var beforeMain = 'beforeMain';
var main = 'main';
var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

var beforeWrite = 'beforeWrite';
var write = 'write';
var afterWrite = 'afterWrite';
var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

function getNodeName(element) {
  return element ? (element.nodeName || '').toLowerCase() : null;
}

/*:: import type { Window } from '../types'; */

/*:: declare function getWindow(node: Node | Window): Window; */
function getWindow(node) {
  if (node.toString() !== '[object Window]') {
    var ownerDocument = node.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView || window : window;
  }

  return node;
}

/*:: declare function isElement(node: mixed): boolean %checks(node instanceof
  Element); */

function isElement(node) {
  var OwnElement = getWindow(node).Element;
  return node instanceof OwnElement || node instanceof Element;
}
/*:: declare function isHTMLElement(node: mixed): boolean %checks(node instanceof
  HTMLElement); */


function isHTMLElement(node) {
  var OwnElement = getWindow(node).HTMLElement;
  return node instanceof OwnElement || node instanceof HTMLElement;
}
/*:: declare function isShadowRoot(node: mixed): boolean %checks(node instanceof
  ShadowRoot); */


function isShadowRoot(node) {
  var OwnElement = getWindow(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}

// and applies them to the HTMLElements such as popper and arrow

function applyStyles(_ref) {
  var state = _ref.state;
  Object.keys(state.elements).forEach(function (name) {
    var style = state.styles[name] || {};
    var attributes = state.attributes[name] || {};
    var element = state.elements[name]; // arrow is optional + virtual elements

    if (!isHTMLElement(element) || !getNodeName(element)) {
      return;
    } // Flow doesn't support to extend this property, but it's the most
    // effective way to apply styles to an HTMLElement
    // $FlowFixMe[cannot-write]


    Object.assign(element.style, style);
    Object.keys(attributes).forEach(function (name) {
      var value = attributes[name];

      if (value === false) {
        element.removeAttribute(name);
      } else {
        element.setAttribute(name, value === true ? '' : value);
      }
    });
  });
}

function effect$2(_ref2) {
  var state = _ref2.state;
  var initialStyles = {
    popper: {
      position: state.options.strategy,
      left: '0',
      top: '0',
      margin: '0'
    },
    arrow: {
      position: 'absolute'
    },
    reference: {}
  };
  Object.assign(state.elements.popper.style, initialStyles.popper);

  if (state.elements.arrow) {
    Object.assign(state.elements.arrow.style, initialStyles.arrow);
  }

  return function () {
    Object.keys(state.elements).forEach(function (name) {
      var element = state.elements[name];
      var attributes = state.attributes[name] || {};
      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

      var style = styleProperties.reduce(function (style, property) {
        style[property] = '';
        return style;
      }, {}); // arrow is optional + virtual elements

      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      }

      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function (attribute) {
        element.removeAttribute(attribute);
      });
    });
  };
} // eslint-disable-next-line import/no-unused-modules


var applyStyles$1 = {
  name: 'applyStyles',
  enabled: true,
  phase: 'write',
  fn: applyStyles,
  effect: effect$2,
  requires: ['computeStyles']
};

function getBasePlacement(placement) {
  return placement.split('-')[0];
}

// Returns the layout rect of an element relative to its offsetParent. Layout
// means it doesn't take into account transforms.
function getLayoutRect(element) {
  return {
    x: element.offsetLeft,
    y: element.offsetTop,
    width: element.offsetWidth,
    height: element.offsetHeight
  };
}

function contains(parent, child) {
  var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

  if (parent.contains(child)) {
    return true;
  } // then fallback to custom implementation with Shadow DOM support
  else if (rootNode && isShadowRoot(rootNode)) {
      var next = child;

      do {
        if (next && parent.isSameNode(next)) {
          return true;
        } // $FlowFixMe[prop-missing]: need a better way to handle this...


        next = next.parentNode || next.host;
      } while (next);
    } // Give up, the result is false


  return false;
}

function getComputedStyle(element) {
  return getWindow(element).getComputedStyle(element);
}

function isTableElement(element) {
  return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;
}

function getDocumentElement(element) {
  // $FlowFixMe[incompatible-return]: assume body is always available
  return ((isElement(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]
  element.document) || window.document).documentElement;
}

function getParentNode(element) {
  if (getNodeName(element) === 'html') {
    return element;
  }

  return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle
    // $FlowFixMe[incompatible-return]
    // $FlowFixMe[prop-missing]
    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
    element.parentNode || // DOM Element detected
    // $FlowFixMe[incompatible-return]: need a better way to handle this...
    element.host || // ShadowRoot detected
    // $FlowFixMe[incompatible-call]: HTMLElement is a Node
    getDocumentElement(element) // fallback

  );
}

function getTrueOffsetParent(element) {
  if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
  getComputedStyle(element).position === 'fixed') {
    return null;
  }

  var offsetParent = element.offsetParent;

  if (offsetParent) {
    var html = getDocumentElement(offsetParent);

    if (getNodeName(offsetParent) === 'body' && getComputedStyle(offsetParent).position === 'static' && getComputedStyle(html).position !== 'static') {
      return html;
    }
  }

  return offsetParent;
} // `.offsetParent` reports `null` for fixed elements, while absolute elements
// return the containing block


function getContainingBlock(element) {
  var currentNode = getParentNode(element);

  while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {
    var css = getComputedStyle(currentNode); // This is non-exhaustive but covers the most common CSS properties that
    // create a containing block.

    if (css.transform !== 'none' || css.perspective !== 'none' || css.willChange && css.willChange !== 'auto') {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }

  return null;
} // Gets the closest ancestor positioned element. Handles some edge cases,
// such as table ancestors and cross browser bugs.


function getOffsetParent(element) {
  var window = getWindow(element);
  var offsetParent = getTrueOffsetParent(element);

  while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === 'static') {
    offsetParent = getTrueOffsetParent(offsetParent);
  }

  if (offsetParent && getNodeName(offsetParent) === 'body' && getComputedStyle(offsetParent).position === 'static') {
    return window;
  }

  return offsetParent || getContainingBlock(element) || window;
}

function getMainAxisFromPlacement(placement) {
  return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
}

function within(min, value, max) {
  return Math.max(min, Math.min(value, max));
}

function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}

function mergePaddingObject(paddingObject) {
  return Object.assign(Object.assign({}, getFreshSideObject()), paddingObject);
}

function expandToHashMap(value, keys) {
  return keys.reduce(function (hashMap, key) {
    hashMap[key] = value;
    return hashMap;
  }, {});
}

function arrow(_ref) {
  var _state$modifiersData$;

  var state = _ref.state,
      name = _ref.name;
  var arrowElement = state.elements.arrow;
  var popperOffsets = state.modifiersData.popperOffsets;
  var basePlacement = getBasePlacement(state.placement);
  var axis = getMainAxisFromPlacement(basePlacement);
  var isVertical = [left, right].indexOf(basePlacement) >= 0;
  var len = isVertical ? 'height' : 'width';

  if (!arrowElement || !popperOffsets) {
    return;
  }

  var paddingObject = state.modifiersData[name + "#persistent"].padding;
  var arrowRect = getLayoutRect(arrowElement);
  var minProp = axis === 'y' ? top : left;
  var maxProp = axis === 'y' ? bottom : right;
  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
  var startDiff = popperOffsets[axis] - state.rects.reference[axis];
  var arrowOffsetParent = getOffsetParent(arrowElement);
  var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
  // outside of the popper bounds

  var min = paddingObject[minProp];
  var max = clientSize - arrowRect[len] - paddingObject[maxProp];
  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  var offset = within(min, center, max); // Prevents breaking syntax highlighting...

  var axisProp = axis;
  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
}

function effect$1(_ref2) {
  var state = _ref2.state,
      options = _ref2.options,
      name = _ref2.name;
  var _options$element = options.element,
      arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element,
      _options$padding = options.padding,
      padding = _options$padding === void 0 ? 0 : _options$padding;

  if (arrowElement == null) {
    return;
  } // CSS selector


  if (typeof arrowElement === 'string') {
    arrowElement = state.elements.popper.querySelector(arrowElement);

    if (!arrowElement) {
      return;
    }
  }

  if (!contains(state.elements.popper, arrowElement)) {

    return;
  }

  state.elements.arrow = arrowElement;
  state.modifiersData[name + "#persistent"] = {
    padding: mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements))
  };
} // eslint-disable-next-line import/no-unused-modules


var arrow$1 = {
  name: 'arrow',
  enabled: true,
  phase: 'main',
  fn: arrow,
  effect: effect$1,
  requires: ['popperOffsets'],
  requiresIfExists: ['preventOverflow']
};

var unsetSides = {
  top: 'auto',
  right: 'auto',
  bottom: 'auto',
  left: 'auto'
}; // Round the offsets to the nearest suitable subpixel based on the DPR.
// Zooming can change the DPR, but it seems to report a value that will
// cleanly divide the values into the appropriate subpixels.

function roundOffsetsByDPR(_ref) {
  var x = _ref.x,
      y = _ref.y;
  var win = window;
  var dpr = win.devicePixelRatio || 1;
  return {
    x: Math.round(x * dpr) / dpr || 0,
    y: Math.round(y * dpr) / dpr || 0
  };
}

function mapToStyles(_ref2) {
  var _Object$assign2;

  var popper = _ref2.popper,
      popperRect = _ref2.popperRect,
      placement = _ref2.placement,
      offsets = _ref2.offsets,
      position = _ref2.position,
      gpuAcceleration = _ref2.gpuAcceleration,
      adaptive = _ref2.adaptive,
      roundOffsets = _ref2.roundOffsets;

  var _ref3 = roundOffsets ? roundOffsetsByDPR(offsets) : offsets,
      _ref3$x = _ref3.x,
      x = _ref3$x === void 0 ? 0 : _ref3$x,
      _ref3$y = _ref3.y,
      y = _ref3$y === void 0 ? 0 : _ref3$y;

  var hasX = offsets.hasOwnProperty('x');
  var hasY = offsets.hasOwnProperty('y');
  var sideX = left;
  var sideY = top;
  var win = window;

  if (adaptive) {
    var offsetParent = getOffsetParent(popper);

    if (offsetParent === getWindow(popper)) {
      offsetParent = getDocumentElement(popper);
    } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it

    /*:: offsetParent = (offsetParent: Element); */


    if (placement === top) {
      sideY = bottom;
      y -= offsetParent.clientHeight - popperRect.height;
      y *= gpuAcceleration ? 1 : -1;
    }

    if (placement === left) {
      sideX = right;
      x -= offsetParent.clientWidth - popperRect.width;
      x *= gpuAcceleration ? 1 : -1;
    }
  }

  var commonStyles = Object.assign({
    position: position
  }, adaptive && unsetSides);

  if (gpuAcceleration) {
    var _Object$assign;

    return Object.assign(Object.assign({}, commonStyles), {}, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) < 2 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
  }

  return Object.assign(Object.assign({}, commonStyles), {}, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
}

function computeStyles(_ref4) {
  var state = _ref4.state,
      options = _ref4.options;
  var _options$gpuAccelerat = options.gpuAcceleration,
      gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
      _options$adaptive = options.adaptive,
      adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
      _options$roundOffsets = options.roundOffsets,
      roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;

  var commonStyles = {
    placement: getBasePlacement(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration: gpuAcceleration
  };

  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign(Object.assign({}, state.styles.popper), mapToStyles(Object.assign(Object.assign({}, commonStyles), {}, {
      offsets: state.modifiersData.popperOffsets,
      position: state.options.strategy,
      adaptive: adaptive,
      roundOffsets: roundOffsets
    })));
  }

  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign(Object.assign({}, state.styles.arrow), mapToStyles(Object.assign(Object.assign({}, commonStyles), {}, {
      offsets: state.modifiersData.arrow,
      position: 'absolute',
      adaptive: false,
      roundOffsets: roundOffsets
    })));
  }

  state.attributes.popper = Object.assign(Object.assign({}, state.attributes.popper), {}, {
    'data-popper-placement': state.placement
  });
} // eslint-disable-next-line import/no-unused-modules


var computeStyles$1 = {
  name: 'computeStyles',
  enabled: true,
  phase: 'beforeWrite',
  fn: computeStyles,
  data: {}
};

var passive = {
  passive: true
};

function effect(_ref) {
  var state = _ref.state,
      instance = _ref.instance,
      options = _ref.options;
  var _options$scroll = options.scroll,
      scroll = _options$scroll === void 0 ? true : _options$scroll,
      _options$resize = options.resize,
      resize = _options$resize === void 0 ? true : _options$resize;
  var window = getWindow(state.elements.popper);
  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);

  if (scroll) {
    scrollParents.forEach(function (scrollParent) {
      scrollParent.addEventListener('scroll', instance.update, passive);
    });
  }

  if (resize) {
    window.addEventListener('resize', instance.update, passive);
  }

  return function () {
    if (scroll) {
      scrollParents.forEach(function (scrollParent) {
        scrollParent.removeEventListener('scroll', instance.update, passive);
      });
    }

    if (resize) {
      window.removeEventListener('resize', instance.update, passive);
    }
  };
} // eslint-disable-next-line import/no-unused-modules


var eventListeners = {
  name: 'eventListeners',
  enabled: true,
  phase: 'write',
  fn: function fn() {},
  effect: effect,
  data: {}
};

var hash$1 = {
  left: 'right',
  right: 'left',
  bottom: 'top',
  top: 'bottom'
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, function (matched) {
    return hash$1[matched];
  });
}

var hash = {
  start: 'end',
  end: 'start'
};
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, function (matched) {
    return hash[matched];
  });
}

function getBoundingClientRect(element) {
  var rect = element.getBoundingClientRect();
  return {
    width: rect.width,
    height: rect.height,
    top: rect.top,
    right: rect.right,
    bottom: rect.bottom,
    left: rect.left,
    x: rect.left,
    y: rect.top
  };
}

function getWindowScroll(node) {
  var win = getWindow(node);
  var scrollLeft = win.pageXOffset;
  var scrollTop = win.pageYOffset;
  return {
    scrollLeft: scrollLeft,
    scrollTop: scrollTop
  };
}

function getWindowScrollBarX(element) {
  // If <html> has a CSS width greater than the viewport, then this will be
  // incorrect for RTL.
  // Popper 1 is broken in this case and never had a bug report so let's assume
  // it's not an issue. I don't think anyone ever specifies width on <html>
  // anyway.
  // Browsers where the left scrollbar doesn't cause an issue report `0` for
  // this (e.g. Edge 2019, IE11, Safari)
  return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
}

function getViewportRect(element) {
  var win = getWindow(element);
  var html = getDocumentElement(element);
  var visualViewport = win.visualViewport;
  var width = html.clientWidth;
  var height = html.clientHeight;
  var x = 0;
  var y = 0; // NB: This isn't supported on iOS <= 12. If the keyboard is open, the popper
  // can be obscured underneath it.
  // Also, `html.clientHeight` adds the bottom bar height in Safari iOS, even
  // if it isn't open, so if this isn't available, the popper will be detected
  // to overflow the bottom of the screen too early.

  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height; // Uses Layout Viewport (like Chrome; Safari does not currently)
    // In Chrome, it returns a value very close to 0 (+/-) but contains rounding
    // errors due to floating point numbers, so we need to check precision.
    // Safari returns a number <= 0, usually < -1 when pinch-zoomed
    // Feature detection fails in mobile emulation mode in Chrome.
    // Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) <
    // 0.001
    // Fallback here: "Not Safari" userAgent

    if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }

  return {
    width: width,
    height: height,
    x: x + getWindowScrollBarX(element),
    y: y
  };
}

// of the `<html>` and `<body>` rect bounds if horizontally scrollable

function getDocumentRect(element) {
  var html = getDocumentElement(element);
  var winScroll = getWindowScroll(element);
  var body = element.ownerDocument.body;
  var width = Math.max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  var height = Math.max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
  var y = -winScroll.scrollTop;

  if (getComputedStyle(body || html).direction === 'rtl') {
    x += Math.max(html.clientWidth, body ? body.clientWidth : 0) - width;
  }

  return {
    width: width,
    height: height,
    x: x,
    y: y
  };
}

function isScrollParent(element) {
  // Firefox wants us to check `-x` and `-y` variations as well
  var _getComputedStyle = getComputedStyle(element),
      overflow = _getComputedStyle.overflow,
      overflowX = _getComputedStyle.overflowX,
      overflowY = _getComputedStyle.overflowY;

  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}

function getScrollParent(node) {
  if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {
    // $FlowFixMe[incompatible-return]: assume body is always available
    return node.ownerDocument.body;
  }

  if (isHTMLElement(node) && isScrollParent(node)) {
    return node;
  }

  return getScrollParent(getParentNode(node));
}

/*
given a DOM element, return the list of all scroll parents, up the list of ancesors
until we get to the top window object. This list is what we attach scroll listeners
to, because if any of these parent elements scroll, we'll need to re-calculate the
reference element's position.
*/

function listScrollParents(element, list) {
  if (list === void 0) {
    list = [];
  }

  var scrollParent = getScrollParent(element);
  var isBody = getNodeName(scrollParent) === 'body';
  var win = getWindow(scrollParent);
  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list.concat(target);
  return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
  updatedList.concat(listScrollParents(getParentNode(target)));
}

function rectToClientRect(rect) {
  return Object.assign(Object.assign({}, rect), {}, {
    left: rect.x,
    top: rect.y,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}

function getInnerBoundingClientRect(element) {
  var rect = getBoundingClientRect(element);
  rect.top = rect.top + element.clientTop;
  rect.left = rect.left + element.clientLeft;
  rect.bottom = rect.top + element.clientHeight;
  rect.right = rect.left + element.clientWidth;
  rect.width = element.clientWidth;
  rect.height = element.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}

function getClientRectFromMixedType(element, clippingParent) {
  return clippingParent === viewport ? rectToClientRect(getViewportRect(element)) : isHTMLElement(clippingParent) ? getInnerBoundingClientRect(clippingParent) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
} // A "clipping parent" is an overflowable container with the characteristic of
// clipping (or hiding) overflowing elements with a position different from
// `initial`


function getClippingParents(element) {
  var clippingParents = listScrollParents(getParentNode(element));
  var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle(element).position) >= 0;
  var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;

  if (!isElement(clipperElement)) {
    return [];
  } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414


  return clippingParents.filter(function (clippingParent) {
    return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';
  });
} // Gets the maximum area that the element is visible in due to any number of
// clipping parents


function getClippingRect(element, boundary, rootBoundary) {
  var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
  var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
  var firstClippingParent = clippingParents[0];
  var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
    var rect = getClientRectFromMixedType(element, clippingParent);
    accRect.top = Math.max(rect.top, accRect.top);
    accRect.right = Math.min(rect.right, accRect.right);
    accRect.bottom = Math.min(rect.bottom, accRect.bottom);
    accRect.left = Math.max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element, firstClippingParent));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}

function getVariation(placement) {
  return placement.split('-')[1];
}

function computeOffsets(_ref) {
  var reference = _ref.reference,
      element = _ref.element,
      placement = _ref.placement;
  var basePlacement = placement ? getBasePlacement(placement) : null;
  var variation = placement ? getVariation(placement) : null;
  var commonX = reference.x + reference.width / 2 - element.width / 2;
  var commonY = reference.y + reference.height / 2 - element.height / 2;
  var offsets;

  switch (basePlacement) {
    case top:
      offsets = {
        x: commonX,
        y: reference.y - element.height
      };
      break;

    case bottom:
      offsets = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;

    case right:
      offsets = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;

    case left:
      offsets = {
        x: reference.x - element.width,
        y: commonY
      };
      break;

    default:
      offsets = {
        x: reference.x,
        y: reference.y
      };
  }

  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;

  if (mainAxis != null) {
    var len = mainAxis === 'y' ? 'height' : 'width';

    switch (variation) {
      case start:
        offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
        break;

      case end:
        offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
        break;
    }
  }

  return offsets;
}

function detectOverflow(state, options) {
  if (options === void 0) {
    options = {};
  }

  var _options = options,
      _options$placement = _options.placement,
      placement = _options$placement === void 0 ? state.placement : _options$placement,
      _options$boundary = _options.boundary,
      boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,
      _options$rootBoundary = _options.rootBoundary,
      rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,
      _options$elementConte = _options.elementContext,
      elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,
      _options$altBoundary = _options.altBoundary,
      altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
      _options$padding = _options.padding,
      padding = _options$padding === void 0 ? 0 : _options$padding;
  var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
  var altContext = elementContext === popper ? reference : popper;
  var referenceElement = state.elements.reference;
  var popperRect = state.rects.popper;
  var element = state.elements[altBoundary ? altContext : elementContext];
  var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary);
  var referenceClientRect = getBoundingClientRect(referenceElement);
  var popperOffsets = computeOffsets({
    reference: referenceClientRect,
    element: popperRect,
    strategy: 'absolute',
    placement: placement
  });
  var popperClientRect = rectToClientRect(Object.assign(Object.assign({}, popperRect), popperOffsets));
  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
  // 0 or negative = within the clipping rect

  var overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

  if (elementContext === popper && offsetData) {
    var offset = offsetData[placement];
    Object.keys(overflowOffsets).forEach(function (key) {
      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
      var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';
      overflowOffsets[key] += offset[axis] * multiply;
    });
  }

  return overflowOffsets;
}

/*:: type OverflowsMap = { [ComputedPlacement]: number }; */

/*;; type OverflowsMap = { [key in ComputedPlacement]: number }; */
function computeAutoPlacement(state, options) {
  if (options === void 0) {
    options = {};
  }

  var _options = options,
      placement = _options.placement,
      boundary = _options.boundary,
      rootBoundary = _options.rootBoundary,
      padding = _options.padding,
      flipVariations = _options.flipVariations,
      _options$allowedAutoP = _options.allowedAutoPlacements,
      allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
  var variation = getVariation(placement);
  var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {
    return getVariation(placement) === variation;
  }) : basePlacements;
  var allowedPlacements = placements$1.filter(function (placement) {
    return allowedAutoPlacements.indexOf(placement) >= 0;
  });

  if (allowedPlacements.length === 0) {
    allowedPlacements = placements$1;
  } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...


  var overflows = allowedPlacements.reduce(function (acc, placement) {
    acc[placement] = detectOverflow(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding
    })[getBasePlacement(placement)];
    return acc;
  }, {});
  return Object.keys(overflows).sort(function (a, b) {
    return overflows[a] - overflows[b];
  });
}

function getExpandedFallbackPlacements(placement) {
  if (getBasePlacement(placement) === auto) {
    return [];
  }

  var oppositePlacement = getOppositePlacement(placement);
  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
}

function flip(_ref) {
  var state = _ref.state,
      options = _ref.options,
      name = _ref.name;

  if (state.modifiersData[name]._skip) {
    return;
  }

  var _options$mainAxis = options.mainAxis,
      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
      _options$altAxis = options.altAxis,
      checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
      specifiedFallbackPlacements = options.fallbackPlacements,
      padding = options.padding,
      boundary = options.boundary,
      rootBoundary = options.rootBoundary,
      altBoundary = options.altBoundary,
      _options$flipVariatio = options.flipVariations,
      flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
      allowedAutoPlacements = options.allowedAutoPlacements;
  var preferredPlacement = state.options.placement;
  var basePlacement = getBasePlacement(preferredPlacement);
  var isBasePlacement = basePlacement === preferredPlacement;
  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
    return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding,
      flipVariations: flipVariations,
      allowedAutoPlacements: allowedAutoPlacements
    }) : placement);
  }, []);
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var checksMap = new Map();
  var makeFallbackChecks = true;
  var firstFittingPlacement = placements[0];

  for (var i = 0; i < placements.length; i++) {
    var placement = placements[i];

    var _basePlacement = getBasePlacement(placement);

    var isStartVariation = getVariation(placement) === start;
    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
    var len = isVertical ? 'width' : 'height';
    var overflow = detectOverflow(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      altBoundary: altBoundary,
      padding: padding
    });
    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;

    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = getOppositePlacement(mainVariationSide);
    }

    var altVariationSide = getOppositePlacement(mainVariationSide);
    var checks = [];

    if (checkMainAxis) {
      checks.push(overflow[_basePlacement] <= 0);
    }

    if (checkAltAxis) {
      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }

    if (checks.every(function (check) {
      return check;
    })) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }

    checksMap.set(placement, checks);
  }

  if (makeFallbackChecks) {
    // `2` may be desired in some cases – research later
    var numberOfChecks = flipVariations ? 3 : 1;

    var _loop = function _loop(_i) {
      var fittingPlacement = placements.find(function (placement) {
        var checks = checksMap.get(placement);

        if (checks) {
          return checks.slice(0, _i).every(function (check) {
            return check;
          });
        }
      });

      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        return "break";
      }
    };

    for (var _i = numberOfChecks; _i > 0; _i--) {
      var _ret = _loop(_i);

      if (_ret === "break") break;
    }
  }

  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
} // eslint-disable-next-line import/no-unused-modules


var flip$1 = {
  name: 'flip',
  enabled: true,
  phase: 'main',
  fn: flip,
  requiresIfExists: ['offset'],
  data: {
    _skip: false
  }
};

function getSideOffsets(overflow, rect, preventedOffsets) {
  if (preventedOffsets === void 0) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }

  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}

function isAnySideFullyClipped(overflow) {
  return [top, right, bottom, left].some(function (side) {
    return overflow[side] >= 0;
  });
}

function hide(_ref) {
  var state = _ref.state,
      name = _ref.name;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var preventedOffsets = state.modifiersData.preventOverflow;
  var referenceOverflow = detectOverflow(state, {
    elementContext: 'reference'
  });
  var popperAltOverflow = detectOverflow(state, {
    altBoundary: true
  });
  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name] = {
    referenceClippingOffsets: referenceClippingOffsets,
    popperEscapeOffsets: popperEscapeOffsets,
    isReferenceHidden: isReferenceHidden,
    hasPopperEscaped: hasPopperEscaped
  };
  state.attributes.popper = Object.assign(Object.assign({}, state.attributes.popper), {}, {
    'data-popper-reference-hidden': isReferenceHidden,
    'data-popper-escaped': hasPopperEscaped
  });
} // eslint-disable-next-line import/no-unused-modules


var hide$1 = {
  name: 'hide',
  enabled: true,
  phase: 'main',
  requiresIfExists: ['preventOverflow'],
  fn: hide
};

function distanceAndSkiddingToXY(placement, rects, offset) {
  var basePlacement = getBasePlacement(placement);
  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;

  var _ref = typeof offset === 'function' ? offset(Object.assign(Object.assign({}, rects), {}, {
    placement: placement
  })) : offset,
      skidding = _ref[0],
      distance = _ref[1];

  skidding = skidding || 0;
  distance = (distance || 0) * invertDistance;
  return [left, right].indexOf(basePlacement) >= 0 ? {
    x: distance,
    y: skidding
  } : {
    x: skidding,
    y: distance
  };
}

function offset(_ref2) {
  var state = _ref2.state,
      options = _ref2.options,
      name = _ref2.name;
  var _options$offset = options.offset,
      offset = _options$offset === void 0 ? [0, 0] : _options$offset;
  var data = placements.reduce(function (acc, placement) {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
    return acc;
  }, {});
  var _data$state$placement = data[state.placement],
      x = _data$state$placement.x,
      y = _data$state$placement.y;

  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x;
    state.modifiersData.popperOffsets.y += y;
  }

  state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules


var offset$1 = {
  name: 'offset',
  enabled: true,
  phase: 'main',
  requires: ['popperOffsets'],
  fn: offset
};

function popperOffsets(_ref) {
  var state = _ref.state,
      name = _ref.name;
  // Offsets are the actual position the popper needs to have to be
  // properly positioned near its reference element
  // This is the most basic placement, and will be adjusted by
  // the modifiers in the next step
  state.modifiersData[name] = computeOffsets({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: 'absolute',
    placement: state.placement
  });
} // eslint-disable-next-line import/no-unused-modules


var popperOffsets$1 = {
  name: 'popperOffsets',
  enabled: true,
  phase: 'read',
  fn: popperOffsets,
  data: {}
};

function getAltAxis(axis) {
  return axis === 'x' ? 'y' : 'x';
}

function preventOverflow(_ref) {
  var state = _ref.state,
      options = _ref.options,
      name = _ref.name;
  var _options$mainAxis = options.mainAxis,
      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
      _options$altAxis = options.altAxis,
      checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
      boundary = options.boundary,
      rootBoundary = options.rootBoundary,
      altBoundary = options.altBoundary,
      padding = options.padding,
      _options$tether = options.tether,
      tether = _options$tether === void 0 ? true : _options$tether,
      _options$tetherOffset = options.tetherOffset,
      tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
  var overflow = detectOverflow(state, {
    boundary: boundary,
    rootBoundary: rootBoundary,
    padding: padding,
    altBoundary: altBoundary
  });
  var basePlacement = getBasePlacement(state.placement);
  var variation = getVariation(state.placement);
  var isBasePlacement = !variation;
  var mainAxis = getMainAxisFromPlacement(basePlacement);
  var altAxis = getAltAxis(mainAxis);
  var popperOffsets = state.modifiersData.popperOffsets;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign(Object.assign({}, state.rects), {}, {
    placement: state.placement
  })) : tetherOffset;
  var data = {
    x: 0,
    y: 0
  };

  if (!popperOffsets) {
    return;
  }

  if (checkMainAxis) {
    var mainSide = mainAxis === 'y' ? top : left;
    var altSide = mainAxis === 'y' ? bottom : right;
    var len = mainAxis === 'y' ? 'height' : 'width';
    var offset = popperOffsets[mainAxis];
    var min = popperOffsets[mainAxis] + overflow[mainSide];
    var max = popperOffsets[mainAxis] - overflow[altSide];
    var additive = tether ? -popperRect[len] / 2 : 0;
    var minLen = variation === start ? referenceRect[len] : popperRect[len];
    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
    // outside the reference bounds

    var arrowElement = state.elements.arrow;
    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
      width: 0,
      height: 0
    };
    var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();
    var arrowPaddingMin = arrowPaddingObject[mainSide];
    var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
    // to include its full size in the calculation. If the reference is small
    // and near the edge of a boundary, the popper can overflow even if the
    // reference is not overflowing as well (e.g. virtual elements with no
    // width or height)

    var arrowLen = within(0, referenceRect[len], arrowRect[len]);
    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - tetherOffsetValue : minLen - arrowLen - arrowPaddingMin - tetherOffsetValue;
    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + tetherOffsetValue : maxLen + arrowLen + arrowPaddingMax + tetherOffsetValue;
    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
    var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    var offsetModifierValue = state.modifiersData.offset ? state.modifiersData.offset[state.placement][mainAxis] : 0;
    var tetherMin = popperOffsets[mainAxis] + minOffset - offsetModifierValue - clientOffset;
    var tetherMax = popperOffsets[mainAxis] + maxOffset - offsetModifierValue;
    var preventedOffset = within(tether ? Math.min(min, tetherMin) : min, offset, tether ? Math.max(max, tetherMax) : max);
    popperOffsets[mainAxis] = preventedOffset;
    data[mainAxis] = preventedOffset - offset;
  }

  if (checkAltAxis) {
    var _mainSide = mainAxis === 'x' ? top : left;

    var _altSide = mainAxis === 'x' ? bottom : right;

    var _offset = popperOffsets[altAxis];

    var _min = _offset + overflow[_mainSide];

    var _max = _offset - overflow[_altSide];

    var _preventedOffset = within(_min, _offset, _max);

    popperOffsets[altAxis] = _preventedOffset;
    data[altAxis] = _preventedOffset - _offset;
  }

  state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules


var preventOverflow$1 = {
  name: 'preventOverflow',
  enabled: true,
  phase: 'main',
  fn: preventOverflow,
  requiresIfExists: ['offset']
};

function getHTMLElementScroll(element) {
  return {
    scrollLeft: element.scrollLeft,
    scrollTop: element.scrollTop
  };
}

function getNodeScroll(node) {
  if (node === getWindow(node) || !isHTMLElement(node)) {
    return getWindowScroll(node);
  } else {
    return getHTMLElementScroll(node);
  }
}

// Composite means it takes into account transforms as well as layout.

function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
  if (isFixed === void 0) {
    isFixed = false;
  }

  var documentElement = getDocumentElement(offsetParent);
  var rect = getBoundingClientRect(elementOrVirtualElement);
  var isOffsetParentAnElement = isHTMLElement(offsetParent);
  var scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };

  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
    isScrollParent(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }

    if (isHTMLElement(offsetParent)) {
      offsets = getBoundingClientRect(offsetParent);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }

  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}

function order(modifiers) {
  var map = new Map();
  var visited = new Set();
  var result = [];
  modifiers.forEach(function (modifier) {
    map.set(modifier.name, modifier);
  }); // On visiting object, check for its dependencies and visit them recursively

  function sort(modifier) {
    visited.add(modifier.name);
    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
    requires.forEach(function (dep) {
      if (!visited.has(dep)) {
        var depModifier = map.get(dep);

        if (depModifier) {
          sort(depModifier);
        }
      }
    });
    result.push(modifier);
  }

  modifiers.forEach(function (modifier) {
    if (!visited.has(modifier.name)) {
      // check for visited object
      sort(modifier);
    }
  });
  return result;
}

function orderModifiers(modifiers) {
  // order based on dependencies
  var orderedModifiers = order(modifiers); // order based on phase

  return modifierPhases.reduce(function (acc, phase) {
    return acc.concat(orderedModifiers.filter(function (modifier) {
      return modifier.phase === phase;
    }));
  }, []);
}

function debounce(fn) {
  var pending;
  return function () {
    if (!pending) {
      pending = new Promise(function (resolve) {
        Promise.resolve().then(function () {
          pending = undefined;
          resolve(fn());
        });
      });
    }

    return pending;
  };
}

function mergeByName(modifiers) {
  var merged = modifiers.reduce(function (merged, current) {
    var existing = merged[current.name];
    merged[current.name] = existing ? Object.assign(Object.assign(Object.assign({}, existing), current), {}, {
      options: Object.assign(Object.assign({}, existing.options), current.options),
      data: Object.assign(Object.assign({}, existing.data), current.data)
    }) : current;
    return merged;
  }, {}); // IE11 does not support Object.values

  return Object.keys(merged).map(function (key) {
    return merged[key];
  });
}

var DEFAULT_OPTIONS = {
  placement: 'bottom',
  modifiers: [],
  strategy: 'absolute'
};

function areValidElements() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return !args.some(function (element) {
    return !(element && typeof element.getBoundingClientRect === 'function');
  });
}

function popperGenerator(generatorOptions) {
  if (generatorOptions === void 0) {
    generatorOptions = {};
  }

  var _generatorOptions = generatorOptions,
      _generatorOptions$def = _generatorOptions.defaultModifiers,
      defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
      _generatorOptions$def2 = _generatorOptions.defaultOptions,
      defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
  return function createPopper(reference, popper, options) {
    if (options === void 0) {
      options = defaultOptions;
    }

    var state = {
      placement: 'bottom',
      orderedModifiers: [],
      options: Object.assign(Object.assign({}, DEFAULT_OPTIONS), defaultOptions),
      modifiersData: {},
      elements: {
        reference: reference,
        popper: popper
      },
      attributes: {},
      styles: {}
    };
    var effectCleanupFns = [];
    var isDestroyed = false;
    var instance = {
      state: state,
      setOptions: function setOptions(options) {
        cleanupModifierEffects();
        state.options = Object.assign(Object.assign(Object.assign({}, defaultOptions), state.options), options);
        state.scrollParents = {
          reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],
          popper: listScrollParents(popper)
        }; // Orders the modifiers based on their dependencies and `phase`
        // properties

        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

        state.orderedModifiers = orderedModifiers.filter(function (m) {
          return m.enabled;
        }); // Validate the provided modifiers so that the consumer will get warned

        runModifierEffects();
        return instance.update();
      },
      // Sync update – it will always be executed, even if not necessary. This
      // is useful for low frequency updates where sync behavior simplifies the
      // logic.
      // For high frequency updates (e.g. `resize` and `scroll` events), always
      // prefer the async Popper#update method
      forceUpdate: function forceUpdate() {
        if (isDestroyed) {
          return;
        }

        var _state$elements = state.elements,
            reference = _state$elements.reference,
            popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
        // anymore

        if (!areValidElements(reference, popper)) {

          return;
        } // Store the reference and popper rects to be read by modifiers


        state.rects = {
          reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),
          popper: getLayoutRect(popper)
        }; // Modifiers have the ability to reset the current update cycle. The
        // most common use case for this is the `flip` modifier changing the
        // placement, which then needs to re-run all the modifiers, because the
        // logic was previously ran for the previous placement and is therefore
        // stale/incorrect

        state.reset = false;
        state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
        // is filled with the initial data specified by the modifier. This means
        // it doesn't persist and is fresh on each update.
        // To ensure persistent data, use `${name}#persistent`

        state.orderedModifiers.forEach(function (modifier) {
          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
        });

        for (var index = 0; index < state.orderedModifiers.length; index++) {

          if (state.reset === true) {
            state.reset = false;
            index = -1;
            continue;
          }

          var _state$orderedModifie = state.orderedModifiers[index],
              fn = _state$orderedModifie.fn,
              _state$orderedModifie2 = _state$orderedModifie.options,
              _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
              name = _state$orderedModifie.name;

          if (typeof fn === 'function') {
            state = fn({
              state: state,
              options: _options,
              name: name,
              instance: instance
            }) || state;
          }
        }
      },
      // Async and optimistically optimized update – it will not be executed if
      // not necessary (debounced to run at most once-per-tick)
      update: debounce(function () {
        return new Promise(function (resolve) {
          instance.forceUpdate();
          resolve(state);
        });
      }),
      destroy: function destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };

    if (!areValidElements(reference, popper)) {

      return instance;
    }

    instance.setOptions(options).then(function (state) {
      if (!isDestroyed && options.onFirstUpdate) {
        options.onFirstUpdate(state);
      }
    }); // Modifiers have the ability to execute arbitrary code before the first
    // update cycle runs. They will be executed in the same order as the update
    // cycle. This is useful when a modifier adds some persistent data that
    // other modifiers need to use, but the modifier is run after the dependent
    // one.

    function runModifierEffects() {
      state.orderedModifiers.forEach(function (_ref3) {
        var name = _ref3.name,
            _ref3$options = _ref3.options,
            options = _ref3$options === void 0 ? {} : _ref3$options,
            effect = _ref3.effect;

        if (typeof effect === 'function') {
          var cleanupFn = effect({
            state: state,
            name: name,
            instance: instance,
            options: options
          });

          var noopFn = function noopFn() {};

          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }

    function cleanupModifierEffects() {
      effectCleanupFns.forEach(function (fn) {
        return fn();
      });
      effectCleanupFns = [];
    }

    return instance;
  };
}

var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];
var createPopper = /*#__PURE__*/popperGenerator({
  defaultModifiers: defaultModifiers
}); // eslint-disable-next-line import/no-unused-modules

/**
 * @license
 * Scale https://github.com/telekom/scale
 *
 * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
class Popover {
  constructor(anchor, popover, options) {
    this.handleTransitionEnd = this.handleTransitionEnd.bind(this);
    this.anchor = anchor;
    this.popover = popover;
    this.options = Object.assign({
      skidding: 0,
      distance: 0,
      placement: 'bottom-start',
      strategy: 'absolute',
      transitionElement: this.popover,
      visibleClass: 'popover-visible',
      onAfterShow: () => { },
      onAfterHide: () => { },
      onTransitionEnd: () => { },
    }, options);
    this.isVisible = false;
    this.popover.hidden = true;
    this.popover.classList.remove(this.options.visibleClass);
    this.popover.addEventListener('transitionend', this.handleTransitionEnd);
  }
  destroy() {
    this.popover.removeEventListener('transitionend', this.handleTransitionEnd);
    if (this.popper) {
      this.popper.destroy();
      this.popper = null;
    }
  }
  show() {
    this.isVisible = true;
    this.popover.hidden = false;
    requestAnimationFrame(() => this.popover.classList.add(this.options.visibleClass));
    if (this.popper) {
      this.popper.destroy();
    }
    this.popper = createPopper(this.anchor, this.popover, {
      placement: this.options.placement,
      strategy: this.options.strategy,
      modifiers: [
        {
          name: 'flip',
          enabled: this.flip,
          options: {
            boundary: 'viewport',
          },
        },
        {
          name: 'preventOverflow',
          enabled: this.preventOverflow,
        },
        {
          name: 'offset',
          options: {
            offset: [this.options.skidding, this.options.distance],
          },
        },
      ],
    });
    this.popover.addEventListener('transitionend', () => this.options.onAfterShow.call(this), { once: true });
    // Reposition the menu after it appears in case a modifier kicked in
    requestAnimationFrame(() => this.popper.update());
  }
  hide() {
    // Apply the hidden styles and wait for the transition before hiding completely
    this.isVisible = false;
    this.popover.classList.remove(this.options.visibleClass);
  }
  reposition() {
    this.popper.update();
  }
  setFlip(flip) {
    this.flip = flip;
  }
  setPreventOverflow(preventOverflow) {
    this.preventOverflow = preventOverflow;
  }
  setOptions(options) {
    this.options = Object.assign(this.options, options);
    this.isVisible
      ? this.popover.classList.add(this.options.visibleClass)
      : this.popover.classList.remove(this.options.visibleClass);
    // Update popper options
    if (this.popper) {
      this.popper.setOptions({
        placement: this.options.placement,
        strategy: this.options.strategy,
      });
      requestAnimationFrame(() => this.popper.update());
    }
  }
  handleTransitionEnd(event) {
    const target = event.target;
    // Make sure the transition event originates from from the correct element, and not one that has bubbled up
    if (target === this.options.transitionElement) {
      // This is called before the element is hidden so users can do things like reset scroll. It will fire once for
      // every transition property. Use `event.propertyName` to determine which property has finished transitioning.
      this.options.onTransitionEnd.call(this, event);
      // Make sure we only do this once, since transitionend will fire for every transition
      if (!this.isVisible && !this.popover.hidden) {
        this.popover.hidden = true;
        this.popover.classList.remove(this.options.visibleClass);
        this.options.onAfterHide.call(this);
      }
    }
  }
}

const tooltipCss = "/*!@:host*/.sc-scale-tooltip-h{--radius:var(--scl-radius-4);--background:var(--scl-color-grey-60);--color:var(--scl-color-white);--font-weight:var(--scl-font-weight-regular);--font-size:var(--scl-font-size-16);--line-height:1.4;--spacing:var(--scl-spacing-2) var(--scl-spacing-8);--arrow-size:5px;--arrow-offset:var(--scl-spacing-8);--max-width:20rem;--transition-delay-hide:0s;--transition-duration-hide:var(--scl-motion-duration-immediate);--transition-timing-function-hide:ease;--transition-duration-show:var(--scl-motion-duration-immediate);--transition-timing-function-show:ease;--z-index:var(--scl-z-index-70);display:contents;position:relative;box-sizing:border-box}/*!@.tooltip-positioner*/.tooltip-positioner.sc-scale-tooltip{position:absolute}/*!@.slot-container*/.slot-container.sc-scale-tooltip{width:max-content;height:max-content}/*!@.tooltip*/.tooltip.sc-scale-tooltip{max-width:var(--max-width);border-radius:var(--radius);background-color:var(--background);font-size:var(--font-size);font-weight:var(--font-weight);line-height:var(--line-height);color:var(--color);opacity:0;padding:var(--spacing);transform:scale(0.8);transform-origin:bottom;transition-property:opacity, transform;transition-delay:var(--transition-delay-hide);transition-duration:var(--transition-duration-hide);transition-timing-function:var(--transition-timing-function-hide)}/*!@.tooltip::after*/.tooltip.sc-scale-tooltip::after{content:'';position:absolute;width:0;height:0}/*!@.tooltip-positioner.popover-visible .tooltip*/.tooltip-positioner.popover-visible.sc-scale-tooltip .tooltip.sc-scale-tooltip{opacity:1;transform:none;transition-duration:var(--transition-duration-show);transition-timing-function:var(--transition-timing-function-show)}/*!@.tooltip-positioner[data-popper-placement^='top'] .tooltip*/.tooltip-positioner[data-popper-placement^='top'].sc-scale-tooltip .tooltip.sc-scale-tooltip{transform-origin:bottom}/*!@.tooltip-positioner[data-popper-placement^='bottom'] .tooltip*/.tooltip-positioner[data-popper-placement^='bottom'].sc-scale-tooltip .tooltip.sc-scale-tooltip{transform-origin:top}/*!@.tooltip-positioner[data-popper-placement^='left'] .tooltip*/.tooltip-positioner[data-popper-placement^='left'].sc-scale-tooltip .tooltip.sc-scale-tooltip{transform-origin:right}/*!@.tooltip-positioner[data-popper-placement^='right'] .tooltip*/.tooltip-positioner[data-popper-placement^='right'].sc-scale-tooltip .tooltip.sc-scale-tooltip{transform-origin:left}/*!@.tooltip-positioner[data-popper-placement^='bottom'] .tooltip::after*/.tooltip-positioner[data-popper-placement^='bottom'].sc-scale-tooltip .tooltip.sc-scale-tooltip::after{bottom:100%;left:calc(50% - var(--arrow-size));border-bottom:var(--arrow-size) solid var(--background);border-left:var(--arrow-size) solid transparent;border-right:var(--arrow-size) solid transparent}/*!@.tooltip-positioner[data-popper-placement='bottom-start'] .tooltip::after*/.tooltip-positioner[data-popper-placement='bottom-start'].sc-scale-tooltip .tooltip.sc-scale-tooltip::after{left:var(--arrow-offset)}/*!@.tooltip-positioner[data-popper-placement='bottom-end'] .tooltip::after*/.tooltip-positioner[data-popper-placement='bottom-end'].sc-scale-tooltip .tooltip.sc-scale-tooltip::after{right:var(--arrow-offset);left:auto}/*!@.tooltip-positioner[data-popper-placement^='top'] .tooltip::after*/.tooltip-positioner[data-popper-placement^='top'].sc-scale-tooltip .tooltip.sc-scale-tooltip::after{top:100%;left:calc(50% - var(--arrow-size));border-top:var(--arrow-size) solid var(--background);border-left:var(--arrow-size) solid transparent;border-right:var(--arrow-size) solid transparent}/*!@.tooltip-positioner[data-popper-placement='top-start'] .tooltip::after*/.tooltip-positioner[data-popper-placement='top-start'].sc-scale-tooltip .tooltip.sc-scale-tooltip::after{left:var(--arrow-offset)}/*!@.tooltip-positioner[data-popper-placement='top-end'] .tooltip::after*/.tooltip-positioner[data-popper-placement='top-end'].sc-scale-tooltip .tooltip.sc-scale-tooltip::after{right:var(--arrow-offset);left:auto}/*!@.tooltip-positioner[data-popper-placement^='left'] .tooltip::after*/.tooltip-positioner[data-popper-placement^='left'].sc-scale-tooltip .tooltip.sc-scale-tooltip::after{top:calc(50% - var(--arrow-size));left:100%;border-left:var(--arrow-size) solid var(--background);border-top:var(--arrow-size) solid transparent;border-bottom:var(--arrow-size) solid transparent}/*!@.tooltip-positioner[data-popper-placement='left-start'] .tooltip::after*/.tooltip-positioner[data-popper-placement='left-start'].sc-scale-tooltip .tooltip.sc-scale-tooltip::after{top:var(--arrow-offset)}/*!@.tooltip-positioner[data-popper-placement='left-end'] .tooltip::after*/.tooltip-positioner[data-popper-placement='left-end'].sc-scale-tooltip .tooltip.sc-scale-tooltip::after{top:auto;bottom:var(--arrow-offset)}/*!@.tooltip-positioner[data-popper-placement^='right'] .tooltip::after*/.tooltip-positioner[data-popper-placement^='right'].sc-scale-tooltip .tooltip.sc-scale-tooltip::after{top:calc(50% - var(--arrow-size));right:100%;border-right:var(--arrow-size) solid var(--background);border-top:var(--arrow-size) solid transparent;border-bottom:var(--arrow-size) solid transparent}/*!@.tooltip-positioner[data-popper-placement='right-start'] .tooltip::after*/.tooltip-positioner[data-popper-placement='right-start'].sc-scale-tooltip .tooltip.sc-scale-tooltip::after{top:var(--arrow-offset)}/*!@.tooltip-positioner[data-popper-placement='right-end'] .tooltip::after*/.tooltip-positioner[data-popper-placement='right-end'].sc-scale-tooltip .tooltip.sc-scale-tooltip::after{top:auto;bottom:var(--arrow-offset)}@media screen and (-ms-high-contrast: active){/*!@.tooltip*/.tooltip.sc-scale-tooltip{border:1px solid yellow}}";

let id = 0;
class Tooltip {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.tooltipBeforeShow = createEvent$1(this, "scale-before-show", 7);
    this.tooltipShow = createEvent$1(this, "scale-show", 7);
    this.tooltipBeforeHide = createEvent$1(this, "scale-before-hide", 7);
    this.tooltipHide = createEvent$1(this, "scale-hide", 7);
    this.componentId = `tooltip-${++id}`;
    this.isVisible = false;
    /** (optional) The content of the Tooltip supporting Text only */
    this.content = '';
    /** (optional) Position of the Tooltip on the Object */
    this.placement = 'top';
    /** (optional) Disable Tooltip */
    this.disabled = false;
    /** (optional) Distance of the Tooltip from the Target Object (related to the `placement`) */
    this.distance = 5;
    /** (optional) Set the Tooltip to open per default (will still be closed on closing Events) */
    this.open = false;
    /** (optional) skidding moves the tooltip of the element in dependence of its `placement` to the element either
     * on an x-axis (at `placement` top/down) or on a y-axis (for output `placement` left/right)
     */
    this.skidding = 0;
    /** (optional) Set custom trigger Event selection */
    this.trigger = 'hover focus';
    /** (optional) Switching the flip option of the tooltip on and off */
    this.flip = true;
    /** (optional) Switching the preventOverflow option of the tooltip on and off */
    this.preventOverflow = false;
    this.mouseOverTooltip = false;
  }
  handleOpenChange() {
    this.open ? this.showTooltip() : this.hideTooltip();
  }
  connectedCallback() {
    this.handleBlur = this.handleBlur.bind(this);
    this.handleClick = this.handleClick.bind(this);
    this.handleFocus = this.handleFocus.bind(this);
    this.handleKeyDown = this.handleKeyDown.bind(this);
    this.handleMouseOver = this.handleMouseOver.bind(this);
    this.handleMouseOut = this.handleMouseOut.bind(this);
    this.handleSlotChange = this.handleSlotChange.bind(this);
  }
  componentDidLoad() {
    this.target = this.getTarget();
    this.popover = new Popover(this.target, this.tooltipPositioner);
    this.syncPopoverOptions();
    this.host.addEventListener('blur', this.handleBlur, true);
    this.host.addEventListener('click', this.handleClick, true);
    this.host.addEventListener('focus', this.handleFocus, true);
    this.tooltipPositioner.hidden = !this.open;
    if (this.open) {
      this.showTooltip();
    }
  }
  componentDidUpdate() {
    this.syncPopoverOptions();
  }
  disconnectedCallback() {
    this.popover.destroy();
    this.host.removeEventListener('blur', this.handleBlur, true);
    this.host.removeEventListener('click', this.handleClick, true);
    this.host.removeEventListener('focus', this.handleFocus, true);
  }
  async showTooltip() {
    if (this.isVisible) {
      return;
    }
    const scaleShow = this.tooltipBeforeShow.emit();
    if (scaleShow.defaultPrevented) {
      this.open = false;
      return;
    }
    this.isVisible = true;
    this.open = true;
    this.popover.show();
  }
  async hideTooltip() {
    if (!this.isVisible) {
      return;
    }
    const tooltipBeforeHide = this.tooltipBeforeHide.emit();
    if (tooltipBeforeHide.defaultPrevented) {
      this.open = true;
      return;
    }
    this.isVisible = false;
    this.open = false;
    this.popover.hide();
  }
  getTarget() {
    const target = this.host.shadowRoot.querySelector('.slot-container');
    if (!target) {
      throw new Error('Invalid tooltip target: no child element was found.');
    }
    return target;
  }
  handleBlur() {
    if (this.hasTrigger('focus')) {
      this.hideTooltip();
    }
  }
  handleClick() {
    if (this.hasTrigger('click')) {
      this.open ? this.hideTooltip() : this.showTooltip();
    }
  }
  handleFocus() {
    if (this.hasTrigger('focus')) {
      this.showTooltip();
    }
  }
  handleKeyDown(event) {
    if (this.open && event.key === 'Escape') {
      event.stopPropagation();
      this.hideTooltip();
    }
  }
  handleMouseOver() {
    if (this.hasTrigger('hover')) {
      this.showTooltip();
    }
  }
  handleTooltipMouseOver() {
    this.mouseOverTooltip = true;
  }
  handleMouseOut() {
    if (!this.mouseOverTooltip) {
      if (this.hasTrigger('hover')) {
        this.hideTooltip();
      }
    }
  }
  handleSlotChange() {
    const oldTarget = this.target;
    const newTarget = this.getTarget();
    if (newTarget !== oldTarget) {
      if (oldTarget) {
        oldTarget.removeAttribute('aria-describedby');
      }
      newTarget.setAttribute('aria-describedby', this.componentId);
    }
  }
  hasTrigger(triggerType) {
    const triggers = this.trigger.split(' ');
    return triggers.includes(triggerType);
  }
  syncPopoverOptions() {
    this.popover.setOptions({
      placement: this.placement,
      distance: this.distance,
      skidding: this.skidding,
      transitionElement: this.tooltip,
      onAfterHide: () => this.tooltipHide.emit(),
      onAfterShow: () => this.tooltipShow.emit(),
    });
    this.popover.setPreventOverflow(this.preventOverflow);
    this.popover.setFlip(this.flip);
  }
  render() {
    return (hAsync(Host$1, { class: "host-container", onKeyDown: this.handleKeyDown, onMouseOver: this.handleMouseOver, onMouseOut: this.handleMouseOut }, hAsync("div", { class: "slot-container" }, hAsync("slot", { onSlotchange: this.handleSlotChange })), !this.disabled && (hAsync("div", { class: "tooltip-positioner", ref: (el) => (this.tooltipPositioner = el), onMouseOver: this.handleTooltipMouseOver }, hAsync("div", { class: {
        tooltip: true,
        'tooltip--open': this.open,
      }, onMouseOver: this.handleTooltipMouseOver, part: "base", ref: (el) => (this.tooltip = el), id: this.componentId, role: "tooltip", "aria-hidden": this.open ? 'false' : 'true' }, hAsync("div", { class: "content-wrapper", tabindex: 0 }, hAsync("slot", { name: "content" }, this.content)))))));
  }
  get host() { return getElement$1(this); }
  static get watchers() { return {
    "open": ["handleOpenChange"]
  }; }
  static get style() { return tooltipCss; }
  static get cmpMeta() { return {
    "$flags$": 9,
    "$tagName$": "scale-tooltip",
    "$members$": {
      "content": [1],
      "placement": [1],
      "disabled": [4],
      "distance": [2],
      "open": [1540],
      "skidding": [2],
      "trigger": [1],
      "flip": [4],
      "preventOverflow": [4, "prevent-overflow"],
      "mouseOverTooltip": [32],
      "showTooltip": [64],
      "hideTooltip": [64]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["open", "open"]]
  }; }
}

const iconCss$B = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class UserFileAnalytics {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M21 17.5L15.5 23v-4a1.5 1.5 0 011.5-1.5h4zM21 1v15.5h-4a2.5 2.5 0 00-2.5 2.5v4H6a3 3 0 01-3-3V1h18zm-3.654 6.01a.754.754 0 00-.716.24l-3.465 3.95-3-2.5-3.935 4.56a.75.75 0 00.57 1.24.76.76 0 00.565-.265l2.965-3.44 3 2.5 4.435-5.05a.753.753 0 00-.42-1.234z" }))) : (hAsync("g", null, hAsync("path", { d: "M20.5 1v17l-5 5h-10c-1.65 0-3-1.35-3-3V1zM19 2.5H4V20c0 .85.65 1.5 1.5 1.5h9v-3c0-.85.65-1.5 1.5-1.5h3zm-2.85 4.75c.25-.3.75-.3 1.05-.05s.3.75.05 1.05L12.8 13.3l-3-2.5-2.95 3.45c-.15.15-.35.25-.55.25-.15 0-.35-.05-.45-.2-.35-.25-.35-.75-.1-1.05L9.7 8.7l3 2.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$B; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-user-file-analytics",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$A = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class UserFileAttachment {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M7 23a6.24 6.24 0 01-4.435-10.64l11.5-11.5a1 1 0 011.4 1.4l-11.5 11.5A4.264 4.264 0 0010 19.785L20.77 9a2.507 2.507 0 10-3.545-3.545L6.44 16.235A.76.76 0 107.5 17.31l7.97-7.955a1 1 0 111.4 1.4L8.915 18.71a2.74 2.74 0 11-3.875-3.875L15.82 4.05a4.5 4.5 0 116.355 6.355L11.39 21.185A6.2 6.2 0 017 23z" }))) : (hAsync("g", null, hAsync("path", { d: "M7 22.75c-1.55 0-3.05-.6-4.25-1.75a6.005 6.005 0 010-8.5L14.25 1c.3-.3.75-.3 1.05 0s.3.75 0 1.05L3.8 13.55a4.496 4.496 0 000 6.35 4.496 4.496 0 006.35 0l10.8-10.8c1.05-1.05 1.05-2.8 0-3.9-.5-.5-1.2-.8-1.95-.8s-1.4.3-1.95.8L6.25 16.05c-.15.2-.25.45-.25.7s.1.5.3.7c.4.4 1.05.4 1.4 0l7.95-7.95c.3-.3.75-.3 1.05 0s.3.75 0 1.05l-7.95 8c-.45.45-1.1.75-1.75.75s-1.3-.25-1.75-.75c-.5-.5-.75-1.1-.75-1.8s.25-1.25.7-1.75L16 4.2a4.255 4.255 0 016 0 4.255 4.255 0 010 6L11.2 21c-1.15 1.2-2.7 1.75-4.2 1.75z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$A; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-user-file-attachment",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$z = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class UserFileAudioFile {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M21 17.5L15.5 23v-4a1.5 1.5 0 011.5-1.5zM21 1v15.5h-4a2.5 2.5 0 00-2.5 2.5v4H6a3 3 0 01-3-3V1zm-9.5 4.225v7a3 3 0 00-.91-.205c-1.345-.09-2.45.73-2.465 1.83s1.065 2.04 2.41 2.15c.87.07 2.465-.25 2.465-2.345V8.79l2.375.565V7.58z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M20.5 1v17l-5 5h-10c-1.65 0-3-1.35-3-3V1zM19 2.5H4V20c0 .85.65 1.5 1.5 1.5h9v-3c0-.85.65-1.5 1.5-1.5h3zm-8 2.65l4 2.45v1.75l-2.5-.6v4.9c0 2.1-1.6 2.4-2.45 2.35-1.35-.1-2.4-1.05-2.4-2.15S8.75 11.9 10.1 12c.3 0 .6.1.9.2z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$z; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-user-file-audio-file",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$y = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class UserFileBilling {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M19.25 4.03v1.5l1.145.105-1.4 15.435a1.5 1.5 0 01-1.5 1.365h-.14L7.4 21.53l-.15-.03H4.92A3 3 0 007.265 23l9.985.925c.092.005.183.005.275 0a3 3 0 003-2.73L22.02 4.28l-2.77-.25zM7.25 4V0l-5.5 5.5h4A1.5 1.5 0 007.25 4zm10.5 13V0h-9.5v4a2.5 2.5 0 01-2.5 2.5h-4V17a3 3 0 003 3h10a3 3 0 003-3zm-5.535-2.135c-.162.064-.33.114-.5.15-.17.035-.34.06-.5.08-.16.02-.345 0-.5 0A3.235 3.235 0 018.68 14.5a3.3 3.3 0 01-1.115-2.045h-1l.355-1h.535v-.64h-.9l.355-1h.68c.096-.43.265-.842.5-1.215a2.92 2.92 0 01.73-.805 2.71 2.71 0 01.915-.455 3.775 3.775 0 011.015-.205 5.14 5.14 0 011.74.29l-.385 1.115a2.625 2.625 0 00-.555-.15 5.44 5.44 0 00-.75-.045c-.4-.011-.794.104-1.125.33a2.05 2.05 0 00-.715 1.08h2.84l-.285 1h-2.72a1.03 1.03 0 000 .17v.47h2.5l-.285 1H8.96c.109.433.352.82.695 1.105a2 2 0 001.265.375c.268.005.536-.03.795-.1.21-.06.41-.143.6-.25l.295 1.09c-.12.1-.253.185-.395.25z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M19 4.05l2.8.25-1.55 16.95a2.98 2.98 0 01-3.25 2.7L7 23c-1.05-.05-1.9-.65-2.35-1.5H7c.05.05.1.05.15.05l9.95.9c.85.1 1.6-.55 1.65-1.35l1.4-15.45-1.15-.1v-1.5zM17.5 0v17c0 1.65-1.35 3-3 3h-10c-1.65 0-3-1.35-3-3V5l5-5h11zM16 1.5H7.5v3C7.5 5.35 6.85 6 6 6H3v11c0 .85.65 1.5 1.5 1.5h10c.85 0 1.5-.65 1.5-1.5V1.5zM8.6 7.9c1-.75 2.6-.75 3.7-.3l-.4 1.1c-.6-.25-1.75-.35-2.45.15-.3.25-.55.6-.7 1.1h2.85l-.3 1H8.55v.65h2.5l-.3 1H8.7c.15.5.4.85.7 1.1.6.45 1.75.55 2.7 0l.3 1.1c-.85.6-2.8.65-3.95-.2-.55-.45-.9-1.1-1.1-2.05h-1l.35-1h.55v-.65h-.9l.35-1h.7c.2-.8.55-1.5 1.2-2z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$y; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-user-file-billing",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$x = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class UserFileBussinesUsers {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M12 15.333a.88.88 0 01.715.367l.975 1.34a2.355 2.355 0 01-.965.81l.545 1.81 2.875-4.16h1.215a4.73 4.73 0 014.685 3.97l.175 1.03H1.78l.175-1.03A4.73 4.73 0 016.64 15.5h1.215l2.875 4.16.545-1.81a2.355 2.355 0 01-.965-.81l.975-1.34a.88.88 0 01.715-.367zM12 1.75A5.08 5.08 0 0117.25 7c0 3.175-2.21 6.25-5.25 6.25S6.75 10.175 6.75 7A5.08 5.08 0 0112 1.75z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M11.285 15.695a.885.885 0 011.43 0l.975 1.345c-.28.39-.61.655-.965.81l.545 1.81 2.875-4.16h1.215c2.33 0 4.3 1.67 4.685 3.97l.17 1.03H1.78l.175-1.03A4.738 4.738 0 016.64 15.5h1.215l2.875 4.16.545-1.81c-.355-.155-.685-.425-.965-.81zM12 1c3.475 0 6 2.525 6 6 0 3.38-2.41 7-6 7s-6-3.62-6-7c0-3.475 2.525-6 6-6zm0 1.5C9.395 2.5 7.5 4.395 7.5 7c0 2.655 1.81 5.5 4.5 5.5s4.5-2.845 4.5-5.5c0-2.605-1.895-4.5-4.5-4.5z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$x; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-user-file-bussines-users",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$w = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class UserFileCommunities {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M4.775 13.05a5 5 0 00-1.05 1.5h-.06a1.5 1.5 0 00-1.47 1.22L1.86 17.5H.335l.385-2a3 3 0 012.945-2.45zm15.56.015A3 3 0 0123.28 15.5l.36 2h-1.5l-.335-1.715a1.5 1.5 0 00-1.47-1.22h-.06a5 5 0 00-1.05-1.5zm-4.625.05a3.5 3.5 0 013.47 2.94l.24 1.445H4.58l.24-1.435a3.5 3.5 0 013.47-2.94h1.34L12 15.5l2.37-2.385zM12 2.235a4.775 4.775 0 014.88 4.885c0 3.07-2.19 5.57-4.88 5.57s-4.88-2.5-4.88-5.57A4.775 4.775 0 0112 2.235zm-5.6 1.58c.223 0 .445.019.665.055-.29.448-.513.934-.665 1.445a2.18 2.18 0 00-2.28 2.28c0 1.36.915 2.86 2.28 2.86.17 0 .338-.026.5-.075.234.457.521.885.855 1.275a3.38 3.38 0 01-1.375.3c-2.085 0-3.78-1.955-3.78-4.36a3.695 3.695 0 013.8-3.78zm11.24 0a3.695 3.695 0 013.78 3.78c0 2.405-1.695 4.36-3.78 4.36a3.38 3.38 0 01-1.375-.3c.334-.39.62-.818.855-1.275.162.049.33.074.5.075 1.365 0 2.28-1.48 2.28-2.86a2.18 2.18 0 00-2.26-2.28 5.595 5.595 0 00-.665-1.445c.22-.036.442-.055.665-.055zm-5.449.92H12A2.275 2.275 0 009.62 7.12c0 1.45 1 3.07 2.38 3.07s2.38-1.62 2.38-3.07A2.28 2.28 0 0012 4.735z" }))) : (hAsync("g", null, hAsync("path", { d: "M15.7 14.6c1.75 0 3.2 1.25 3.5 2.95l.25 1.45H4.6l.25-1.4c.25-1.7 1.7-2.95 3.45-2.95h1.35L12 17l2.35-2.4zm4.65-.05c1.45 0 2.7 1.05 2.95 2.45l.4 2h-1.55l-.35-1.75c-.1-.7-.75-1.2-1.45-1.2h-.05c-.25-.55-.6-1.05-1.05-1.5zm-15.55 0c-.45.45-.8.95-1.1 1.5h-.05c-.7 0-1.3.5-1.45 1.2L1.85 19H.3l.4-2c.25-1.45 1.5-2.45 2.95-2.45zM12 4.25c2.5 0 4.4 1.9 4.4 4.4 0 2.45-1.8 5.05-4.4 5.05s-4.4-2.65-4.4-5.05c0-2.5 1.9-4.4 4.4-4.4zm-5.6 1.1c.2 0 .45 0 .65.05-.25.45-.5.95-.65 1.45-1.35 0-2.3.95-2.3 2.3S5.05 12 6.4 12c.15 0 .35-.05.5-.1.25.45.5.85.85 1.25-.4.2-.85.3-1.35.3-2.1 0-3.8-1.95-3.8-4.3 0-2.15 1.65-3.8 3.8-3.8zm11.2-.1c2.15 0 3.8 1.65 3.8 3.8 0 2.4-1.7 4.35-3.8 4.35-.45 0-.9-.1-1.35-.3.35-.35.6-.8.85-1.25.15.05.3.1.5.1 1.4 0 2.3-1.45 2.3-2.85 0-1.35-.95-2.3-2.3-2.35-.15-.55-.35-1-.65-1.45.2-.05.4-.05.65-.05zm-5.6.5c-1.7 0-2.9 1.15-2.9 2.9 0 1.7 1.15 3.55 2.9 3.55s2.9-1.8 2.9-3.55c0-1.7-1.2-2.9-2.9-2.9z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$w; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-user-file-communities",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$v = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class UserFileContacts {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M18 1.5H3v21h15a3 3 0 003-3v-15a3 3 0 00-3-3zM12 8a2 2 0 012.085 2.09c0 1.27-.88 2.5-2.085 2.5s-2.085-1.225-2.085-2.5A2 2 0 0112 8zm-3.75 7.5l.135-.72A1.665 1.665 0 0110 13.415h.82L12 14.58l1.165-1.165H14c.803.001 1.49.575 1.635 1.365l.115.72h-7.5z" }))) : (hAsync("g", null, hAsync("path", { d: "M18 1.5c1.65 0 3 1.35 3 3v15c0 1.65-1.35 3-3 3H3v-21zM18 3H4.5v18H18c.85 0 1.5-.65 1.5-1.5v-15c0-.85-.65-1.5-1.5-1.5zm-4 10.4c.8 0 1.45.6 1.6 1.4l.15.7h-7.5l.1-.7c.15-.8.85-1.35 1.65-1.35h.85L12 14.6l1.2-1.2zM12 8c1.15 0 2.1.85 2.1 2.1s-.9 2.5-2.1 2.5-2.1-1.25-2.1-2.5S10.85 8 12 8z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$v; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-user-file-contacts",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$u = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class UserFileContracts {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M3 .5v19a3 3 0 003 3h7.5v-1.88a2.25 2.25 0 112.5 0v1.88h2a3 3 0 003-3V.5H3zm13 13H8A.75.75 0 118 12h8a.75.75 0 110 1.5zm0-3H8A.75.75 0 118 9h8a.75.75 0 110 1.5zm0-3H8A.75.75 0 118 6h8a.75.75 0 110 1.5z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M14.75 16.5c1.25 0 2.25 1 2.25 2.25 0 .75-.4 1.45-1 1.85v2.9l-1.25-.5-1.25.5v-2.9c-.6-.4-1-1.05-1-1.85 0-1.25 1-2.25 2.25-2.25zM21 .5v19c0 1.65-1.35 3-3 3h-.5V21h.5c.85 0 1.5-.65 1.5-1.5V2h-15v17.5c0 .85.65 1.5 1.5 1.5h6v1.5H6c-1.65 0-3-1.35-3-3V.5h18zM16 12c.4 0 .75.35.75.75s-.35.75-.75.75H8c-.4 0-.75-.35-.75-.75S7.6 12 8 12zm0-3c.4 0 .75.35.75.75s-.35.75-.75.75H8c-.4 0-.75-.35-.75-.75S7.6 9 8 9zm0-3c.4 0 .75.35.75.75s-.35.75-.75.75H8c-.4 0-.75-.35-.75-.75S7.6 6 8 6z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$u; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-user-file-contracts",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$t = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class UserFileFamilies {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M8.035 15.25a3.78 3.78 0 002.08-.63 7.29 7.29 0 01-.795-1.265c-.38.255-.827.392-1.285.395-1.695 0-2.835-1.815-2.835-3.5a2.71 2.71 0 012.835-2.83c.284.003.566.043.84.12.167-.48.388-.94.66-1.37a4.58 4.58 0 00-1.5-.25A4.235 4.235 0 003.7 10.235c0 2.42 1.74 5.015 4.335 5.015zm7-.355c2.5 0 4.29-2.5 4.29-5.105a4.15 4.15 0 00-4.29-4.29 4.15 4.15 0 00-4.29 4.29c0 2.595 1.805 5.105 4.29 5.105zm8.345 5.06a4 4 0 00-3.965-3.355H17.7l-2.665 2.665L12.37 16.6h-1.715a4 4 0 00-3.965 3.355l-.09.545h16.87l-.09-.545zM6.955 16.5H4.5a3.395 3.395 0 00-3.355 2.845L.93 20.5h1.5l.15-.89A1.9 1.9 0 014.5 18h1.31a5.445 5.445 0 011.145-1.5z" }))) : (hAsync("g", null, hAsync("path", { d: "M12.25 16.5l2.85 2.75 2.75-2.75h1.6c1.95 0 3.65 1.4 3.95 3.35l.1.65H6.6l.1-.65c.3-1.95 2-3.35 3.95-3.35zm-5.4 0c-.45.45-.8.95-1.1 1.5H4.5c-.95 0-1.75.65-1.9 1.6l-.15.9H.95l.2-1.15c.25-1.65 1.7-2.85 3.35-2.85zm8.2-11.75C18 4.75 20.1 6.9 20.1 9.8c0 2.8-2.05 5.85-5.05 5.85C12 15.65 10 12.6 10 9.8c0-2.95 2.1-5.05 5.05-5.05zm-7 1.15c.55 0 1.05.1 1.5.25-.25.4-.5.85-.65 1.35-.25-.05-.55-.1-.85-.1-1.7 0-2.85 1.2-2.85 2.85 0 1.7 1.15 3.5 2.85 3.5.5 0 .9-.15 1.3-.4.25.45.5.85.8 1.25-.6.4-1.3.65-2.1.65-2.6 0-4.35-2.6-4.35-5 0-2.5 1.9-4.35 4.35-4.35zm7 .35c-2.1 0-3.55 1.45-3.55 3.55s1.45 4.35 3.55 4.35c2.15 0 3.55-2.25 3.55-4.35s-1.45-3.55-3.55-3.55z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$t; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-user-file-families",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$s = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class UserFileHandshake {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M23.265 7.347l-3.526.597a2.449 2.449 0 01-2.077-.455l-1.386-1.092a3.57 3.57 0 00-3.615-.49l-.2-.167a3.737 3.737 0 00-4.409-.23L6.48 6.612a3.531 3.531 0 01-2.674.534l-2.45-.49a.735.735 0 00-.278 1.426l2.449.49a5.016 5.016 0 003.781-.754l1.577-1.069a2.238 2.238 0 012.508.044L8.043 9.67a1.47 1.47 0 001.714 2.375l3.565-2.155a1.47 1.47 0 011.93.362l3.473 4.546h.049c.43.676.367 1.518-.142 1.851a.891.891 0 01-.456.137h-.563l-.127.544a.882.882 0 01-1.088.715l-.553-.098-.24.49a.887.887 0 01-.309.367 1.009 1.009 0 01-.842.088l-.539-.161-.294.49a.877.877 0 01-.26.274 1.259 1.259 0 01-1.528-.333c.348-.813.265-1.665-.289-2.111a1.367 1.367 0 00-.9-.28 1.35 1.35 0 00-.432-.69 1.37 1.37 0 00-.872-.28 1.313 1.313 0 00-.455-.778c-.2-.156-.442-.25-.696-.27a1.352 1.352 0 00-.49-.832c-.641-.514-1.69-.304-2.448.456l-3.782-1.333a.744.744 0 00-.49 1.406l3.512 1.224a1.646 1.646 0 00.407 1.749c.2.156.442.25.695.27.089.662.67 1.145 1.338 1.111.11.651.698 1.11 1.356 1.058.07.27.22.51.431.69.573.456 1.47.339 2.185-.22a2.939 2.939 0 001.959.789 2.37 2.37 0 001.69-.7 2.376 2.376 0 001.557-.368c.21-.13.395-.296.549-.49a2.297 2.297 0 001.254-.377 2.39 2.39 0 00.842-.98c.245-.068.475-.18.681-.327a2.728 2.728 0 00.813-3.429l3.017-.7V7.347z" }))) : (hAsync("g", null, hAsync("path", { d: "M22.608 13.008l-3.024.912-3.12-4.08a2.16 2.16 0 00-2.832-.528l-3.504 2.112a.68.68 0 01-.912-.144c-.288-.288-.24-.768.048-1.056l3.6-3.12a2.853 2.853 0 011.824-.672c.624 0 1.248.192 1.728.576l1.344 1.056c.768.576 1.728.816 2.64.576l2.496-.576a.716.716 0 10-.336-1.392l-2.4.672c-.48.096-1.008 0-1.44-.336l-1.344-1.056a4.26 4.26 0 00-2.592-.912c-.912 0-1.776.288-2.544.864-1.2-1.008-3.024-1.104-4.32-.24L6.336 6.72c-.768.48-1.68.672-2.592.48l-2.4-.48a.79.79 0 00-.864.576.79.79 0 00.576.864l2.4.48c.336.048.624.096.96.096.96 0 1.92-.288 2.736-.816l1.536-1.056c.72-.48 1.68-.48 2.352 0L8.304 9.168c-.912.816-1.008 2.208-.192 3.072a2.12 2.12 0 002.736.384L14.4 10.56c.336-.192.72-.096.96.192 0 0 2.496 3.264 3.072 4.032.528.72.288 1.536-.144 1.776-.288.192-1.008.144-1.008.144s-.096.864-.528 1.104c-.384.24-1.248 0-1.248 0s-.24.672-.528.864c-.48.336-1.344-.048-1.344-.048s-.336.576-.528.72c-.24.144-.576.192-.912.048.528-1.104.384-2.352-.432-3.024a1.826 1.826 0 00-.816-.384c-.144-.24-.288-.384-.48-.576-.24-.192-.48-.288-.768-.384-.144-.24-.288-.48-.528-.672-.192-.144-.384-.24-.576-.336-.144-.288-.336-.576-.576-.768-1.008-.816-2.496-.48-3.552.672l-3.024-.912c-.384-.144-.768.096-.912.48s.096.768.48.912l2.784.912c-.336 1.008-.096 2.016.624 2.592.192.144.384.24.576.336.144.288.336.576.576.768s.48.288.768.384c.144.24.288.48.528.672s.528.336.816.384c.144.24.288.384.48.576.384.288.816.432 1.296.432.624 0 1.344-.288 1.92-.768.432.24.864.336 1.296.336s.912-.144 1.296-.384c.144-.096.24-.192.384-.288.528.048 1.056-.048 1.536-.384.192-.144.384-.288.528-.48a2.38 2.38 0 001.248-.384c.384-.24.624-.576.816-.96.24-.048.48-.144.672-.288.576-.384.96-1.008 1.056-1.776.048-.24 0-.48 0-.72l2.928-.864c.384-.096.576-.528.48-.912-.24-.48-.624-.672-1.008-.576zm-11.952 6.24c-.528.672-1.296.816-1.632.576-.24-.192-.336-.864-.336-.864s-.672.144-.96-.096-.336-.912-.336-.912-.672.144-.96-.096-.288-.912-.288-.912-.576.048-.864-.144c-.336-.288-.336-1.056.24-1.728.528-.672 1.296-.864 1.632-.576s.288.912.288.912.624-.048.864.192c.288.288.288.912.288.912s.624-.144.96.096.336.864.336.864.624-.144.96.096.336 1.008-.192 1.68z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$s; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-user-file-handshake",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$r = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class UserFileIdCard {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M.5 3.5v14a3 3 0 003 3h17a3 3 0 003-3v-14H.5zm7.755 4.47a2 2 0 012.08 2.095c0 1.265-.875 2.5-2.08 2.5s-2.085-1.225-2.085-2.5A2 2 0 018.255 7.97zM4.5 15.47l.13-.72a1.665 1.665 0 011.64-1.365h.815L8.25 14.55l1.16-1.165h.815a1.665 1.665 0 011.64 1.365l.135.72H4.5zM19.25 14h-5a.75.75 0 110-1.5h5a.75.75 0 110 1.5zm0-3h-5a.75.75 0 110-1.5h5a.75.75 0 110 1.5z" }))) : (hAsync("g", null, hAsync("path", { d: "M23.5 3.5v14c0 1.65-1.35 3-3 3h-17c-1.65 0-3-1.35-3-3v-14zM22 5H2v12.5c0 .85.65 1.5 1.5 1.5h17c.85 0 1.5-.65 1.5-1.5zM7.15 13.5l1.15 1.1 1.1-1.1h.75c.75 0 1.4.55 1.55 1.3l.1.7H4.7l.15-.7c.15-.75.8-1.3 1.55-1.3zm12.1-1c.4 0 .75.35.75.75s-.35.75-.75.75h-5c-.4 0-.75-.35-.75-.75s.35-.75.75-.75zm-11-4.45c1.15 0 2.1.85 2.1 2.1s-.9 2.5-2.1 2.5-2.1-1.25-2.1-2.5.95-2.1 2.1-2.1zm11 1.45c.4 0 .75.35.75.75s-.35.75-.75.75h-5c-.4 0-.75-.35-.75-.75s.35-.75.75-.75z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$r; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-user-file-id-card",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$q = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class UserFileImageFile {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M21 17.5L15.5 23v-4a1.5 1.5 0 011.5-1.5zM21 1v15.5h-4a2.5 2.5 0 00-2.5 2.5v4H6a3 3 0 01-3-3V1zm-7.5 8l-2.64 3.4-1.5-1.935L6.23 14.5h11.54zM7.75 7a1.25 1.25 0 100 2.5 1.25 1.25 0 000-2.5z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M21 1v17l-5 5H6c-1.655 0-3-1.345-3-3V1zm-1.5 1.5h-15V20c0 .825.675 1.5 1.5 1.5h9v-3c0-.83.67-1.5 1.5-1.5h3zm-6 6.5l4.27 5.5H6.23l3.13-4.035 1.5 1.935zM7.75 7a1.25 1.25 0 110 2.5 1.25 1.25 0 010-2.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$q; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-user-file-image-file",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$p = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class UserFileLogout {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M10.5 13.25c3.04 0 5.25-3.075 5.25-6.25a5.08 5.08 0 00-5.25-5.25A5.08 5.08 0 005.25 7c0 3.175 2.21 6.25 5.25 6.25zm4.25 4.25h1.75v-1.95a4.554 4.554 0 00-.645-.05h-2.26L10.5 18.595 7.405 15.5H5.14a4.73 4.73 0 00-4.685 3.97L.28 20.5h12.36a2.195 2.195 0 01-.14-.75 2.245 2.245 0 012.25-2.25zm8.95 2.245L18 16v3h-3.25a.75.75 0 000 1.5H18v3l5.7-3.755z" }))) : (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M18 16l5.7 3.75L18 23.5v-3h-3.25c-.4 0-.75-.35-.75-.75s.35-.75.75-.75H18v-3zm-10.6-.5l3.1 3.1 3.1-3.1h2.429c.171.003.321.012.471.05v1.95h-1.75c-1.4 0-2.5 1.25-2.2 2.7.05.1.05.2.1.3H.3l.15-1.05c.4-2.3 2.35-3.95 4.7-3.95H7.4zM10.5 1c3.5 0 6 2.5 6 6 0 3.4-2.4 7-6 7s-6-3.6-6-7c0-3.5 2.5-6 6-6zm0 1.5C7.9 2.5 6 4.4 6 7c0 2.65 1.8 5.5 4.5 5.5S15 9.65 15 7c0-2.6-1.9-4.5-4.5-4.5z" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$p; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-user-file-logout",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$o = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class UserFilePdfFile {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M21 17.5L15.5 23v-4a1.5 1.5 0 011.5-1.5h4zM21 1v15.5h-4a2.5 2.5 0 00-2.5 2.5v4H6a3 3 0 01-3-3V1h18zM8.545 6.877L8.4 6.88H6.605v4.845h.975v-1.63h.82A1.5 1.5 0 0010 8.5a1.5 1.5 0 00-1.6-1.62zm3.83.003H10.69v4.845h1.685c1.26 0 2.05-.845 2.05-2.42s-.79-2.425-2.05-2.425zm5.625 0h-2.805v4.845h1V9.79h1.73v-.91h-1.73V7.79H18v-.91zm-5.7.91c.7 0 1.11.48 1.11 1.53s-.435 1.5-1.11 1.5h-.63V7.79zm-3.965 0A.635.635 0 019 8.5a.635.635 0 01-.665.685H7.58V7.79z" }))) : (hAsync("g", null, hAsync("path", { d: "M21 1v17l-5 5H6c-1.655 0-3-1.345-3-3V1zm-1.5 1.5h-15V20c0 .825.675 1.5 1.5 1.5h9v-3c0-.83.67-1.5 1.5-1.5h3zM8.315 7.05c.94 0 1.6.58 1.6 1.61s-.66 1.6-1.6 1.6H7.5v1.63h-.98V7.05zm3.885 0c1.26 0 2.05.845 2.05 2.42 0 1.57-.79 2.42-2.05 2.42h-1.68V7.05zm5.59-.005v.91h-1.795v1.09h1.73v.91h-1.73v1.935h-.98V7.045zm-5.665.91h-.63v3.03h.63c.675 0 1.11-.45 1.11-1.515s-.435-1.515-1.11-1.515zm-3.875 0h-.755v1.4h.755c.365 0 .65-.245.65-.695 0-.46-.28-.705-.65-.705z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$o; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-user-file-pdf-file",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$n = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class UserFileSwitchUsers {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M18.136 17.62v1.945h2.874a.783.783 0 010 1.565h-2.874v1.941l-4.174-2.728 4.174-2.724zM6.783 14.347l2.99 3.02 3.02-3.02h2.087c-.257.386-.393.84-.391 1.304.005.735.352 1.426.939 1.868L13.1 19.043H0l.157-.85a4.586 4.586 0 014.539-3.845h2.087zm12.928-1.425l4.174 2.724-4.174 2.729v-1.941h-2.874a.783.783 0 110-1.565h2.874v-1.947zM9.793 1.304a4.847 4.847 0 015.014 4.988c0 3.031-2.113 5.969-5.014 5.969-2.9 0-5.009-2.917-5.009-5.948a4.847 4.847 0 015.009-5.009z" }))) : (hAsync("g", null, hAsync("path", { d: "M18 18.65v1.85h2.75c.4 0 .75.35.75.75s-.35.75-.75.75H18v1.85l-4-2.6zM7.1 15.5l2.9 2.9 2.85-2.9h2c-.3.45-.45 1.05-.3 1.7.1.55.45 1 .85 1.35L13.15 20H.6l.15-.8c.35-2.15 2.2-3.7 4.35-3.7zm12.4-1.35l4 2.6-4 2.6V17.5h-2.75c-.4 0-.75-.35-.75-.75s.35-.75.75-.75h2.75zM10 2.25c3.2 0 5.55 2.35 5.55 5.55 0 3.1-2.25 6.45-5.55 6.45S4.45 10.9 4.45 7.8c0-3.2 2.35-5.55 5.55-5.55zm0 1.5c-2.35 0-4.05 1.7-4.05 4.05 0 2.4 1.65 4.95 4.05 4.95s4.05-2.55 4.05-4.95c0-2.35-1.7-4.05-4.05-4.05z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$n; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-user-file-switch-users",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$m = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class UserFileUser {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { "fill-rule": "evenodd", d: "M8.905 15.5L12 18.595l3.095-3.095h2.265a4.73 4.73 0 014.685 3.97l.175 1.03H1.78l.175-1.03A4.73 4.73 0 016.64 15.5h2.265zM12 1.75A5.08 5.08 0 0117.25 7c0 3.175-2.21 6.25-5.25 6.25S6.75 10.175 6.75 7A5.08 5.08 0 0112 1.75z" }))) : (hAsync("g", null, hAsync("path", { d: "M8.9 16.5l3.1 3.1 3.1-3.1h2.25c2.35 0 4.3 1.65 4.7 3.95l.2 1.05H1.8l.15-1.05c.4-2.3 2.35-3.95 4.7-3.95zM12 2c3.5 0 6 2.5 6 6 0 3.4-2.4 7-6 7s-6-3.6-6-7c0-3.5 2.5-6 6-6zm0 1.5C9.4 3.5 7.5 5.4 7.5 8c0 2.65 1.8 5.5 4.5 5.5s4.5-2.85 4.5-5.5c0-2.6-1.9-4.5-4.5-4.5z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$m; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-user-file-user",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$l = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class UserFileVideos {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M21 17.5L15.5 23v-4a1.5 1.5 0 011.5-1.5zM21 1v15.5h-4a2.5 2.5 0 00-2.5 2.5v4H6a3 3 0 01-3-3V1zM9.5 8.25v7.5L15.24 12z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M21 1v17l-5 5H6c-1.65 0-3-1.35-3-3V1zm-1.5 1.5h-15V20c0 .85.65 1.5 1.5 1.5h9v-3c0-.85.65-1.5 1.5-1.5h3zm-10 5.75L15.25 12 9.5 15.75z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$l; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-user-file-videos",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$k = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class WeatherCloudy {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M10.469 8.3a5.664 5.664 0 015.29 3.608 4.368 4.368 0 012.242 3.81 4.368 4.368 0 01-4.151 4.357l-.211.006H4.81a4.015 4.015 0 01-4.01-4.011 4.01 4.01 0 011.897-3.405 3.635 3.635 0 013.611-3.256c.23 0 .461.024.697.074A5.659 5.659 0 0110.469 8.3zm9.278 4.646a.6.6 0 01.766-.069l.083.07.849.848a.6.6 0 01-.774.912l-.075-.064-.849-.848a.6.6 0 010-.848zM16.601 6.8c1.655 0 3 1.346 3 3 0 1.111-.61 2.08-1.51 2.598a5.558 5.558 0 00-1.379-1.314 6.835 6.835 0 00-2.598-2.947A2.992 2.992 0 0116.6 6.8zm6.25 2.4a.6.6 0 01.097 1.192l-.097.008h-1.2a.6.6 0 01-.097-1.192l.097-.008h1.2zM11.758 4.957a.6.6 0 01.765-.07l.083.07.849.848a.6.6 0 01-.774.912l-.075-.063-.848-.849a.6.6 0 010-.848zm8.838 0a.6.6 0 01.918.765l-.069.083-.849.849a.596.596 0 01-.848 0 .6.6 0 01-.07-.766l.07-.083.848-.848zM16.601 2.95a.6.6 0 01.592.503l.008.097v1.2a.6.6 0 01-1.192.097L16 4.75v-1.2a.6.6 0 01.6-.6z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M10.5 8.381a5.577 5.577 0 015.242 3.639A4.246 4.246 0 0118 15.764a4.242 4.242 0 01-4.025 4.23l-.211.006H4.673A3.877 3.877 0 01.8 16.127c0-1.391.75-2.669 1.942-3.355a3.486 3.486 0 014.262-3.158A5.574 5.574 0 0110.5 8.381zm0 1.2a4.377 4.377 0 00-2.758.978l-.191.165-.262.238-.335-.115a2.286 2.286 0 00-.738-.125c-1.206 0-2.196.94-2.277 2.126l-.005.156.024.517-.373.166A2.677 2.677 0 002 16.127a2.676 2.676 0 002.504 2.668l.169.005h9.09a3.04 3.04 0 003.037-3.036 3.044 3.044 0 00-1.613-2.68l-.178-.088-.243-.11-.082-.253A4.381 4.381 0 0010.5 9.58zm9.246 3.365a.6.6 0 01.766-.069l.083.07.849.848a.6.6 0 01-.774.912l-.075-.063-.849-.849a.6.6 0 010-.849zM16.6 6.8c1.654 0 3 1.346 3 3 0 1.132-.63 2.118-1.558 2.63a5.44 5.44 0 00-1.344-1.24 6.765 6.765 0 00-2.628-2.996A2.998 2.998 0 0116.6 6.8zm6.25 2.4a.6.6 0 01.097 1.192l-.097.008h-1.2a.6.6 0 01-.097-1.192l.097-.008h1.2zm-2.254-4.244a.6.6 0 01.917.766l-.069.083-.849.849a.598.598 0 01-.848 0 .6.6 0 01-.07-.766l.07-.083.849-.849zm-8.84 0a.6.6 0 01.766-.069l.083.07.849.848a.6.6 0 01-.774.912l-.075-.063-.848-.849a.6.6 0 010-.849zM16.6 2.95a.6.6 0 01.592.503l.008.097v1.2a.6.6 0 01-1.192.097L16 4.75v-1.2a.6.6 0 01.6-.6z", "fill-rule": "nonzero" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$k; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-weather-cloudy",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$j = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class WeatherCloudyRain {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M9.366 18.195a.142.142 0 01.234.08v.046l-.479 3.063a1.227 1.227 0 01-1.402 1.023c-.974-.152-1.364-1.319-.728-2.027l.09-.09 2.285-2.095zm-1.25-4.16a.142.142 0 01.234.08v.047l-.529 3.386a1.342 1.342 0 01-1.533 1.118c-1.069-.167-1.496-1.45-.79-2.224l.09-.09 2.528-2.316zm4.934-1.304a.142.142 0 01.234.08v.046l-.615 3.936a1.537 1.537 0 01-1.756 1.28c-1.226-.191-1.714-1.669-.896-2.554l.096-.096 2.937-2.692zM10.51 5.95a5.56 5.56 0 015.233 3.674 4.25 4.25 0 012.261 3.753c0 2.265-1.775 4.12-3.999 4.231l-.23.005c.052-.13.098-.265.133-.405l.044-.214.616-3.936a1.441 1.441 0 00-2.28-1.382l-.119.098-2.518 2.308a1.443 1.443 0 00-2.294-1.103l-.12.098-2.528 2.316a2.616 2.616 0 00-.846 2.13 3.86 3.86 0 01-3.059-3.777c0-1.4.755-2.684 1.952-3.366C2.86 8.558 4.365 7.107 6.2 7.107c.27 0 .54.033.806.098A5.53 5.53 0 0110.51 5.95zm9.236 4.596a.6.6 0 01.765-.069l.083.07.85.848a.6.6 0 01-.775.912l-.074-.064-.849-.848a.6.6 0 010-.849zM16.601 4.4c1.654 0 3 1.345 3 3 0 1.132-.63 2.118-1.558 2.63a5.43 5.43 0 00-1.344-1.24 6.768 6.768 0 00-2.628-2.996 2.997 2.997 0 012.53-1.394zm6.25 2.4a.6.6 0 01.097 1.192L22.85 8h-1.2a.6.6 0 01-.098-1.192l.098-.008h1.2zM11.757 2.556a.6.6 0 01.766-.069l.083.07.849.848a.6.6 0 01-.775.912l-.074-.064-.849-.848a.6.6 0 010-.849zm8.84 0a.6.6 0 01.917.766l-.07.083-.848.848a.596.596 0 01-.849 0 .6.6 0 01-.07-.765l.07-.083.85-.849zM16.6.55a.6.6 0 01.592.503l.008.097v1.2a.6.6 0 01-1.193.097l-.007-.097v-1.2a.6.6 0 01.6-.6z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M9.365 18.196a.141.141 0 01.235.078v.047l-.48 3.063a1.227 1.227 0 01-1.401 1.023c-.974-.152-1.365-1.319-.728-2.027l.089-.09 2.285-2.094zm-1.25-4.16a.142.142 0 01.235.079v.047l-.53 3.386a1.342 1.342 0 01-1.533 1.118c-1.068-.167-1.495-1.45-.79-2.224l.091-.09 2.527-2.316zm4.934-1.304a.141.141 0 01.235.079v.047l-.616 3.935a1.536 1.536 0 01-1.755 1.28c-1.227-.191-1.715-1.669-.897-2.554l.096-.096 2.937-2.691zm-2.55-6.75a5.577 5.577 0 015.243 3.638A4.246 4.246 0 0118 13.364a4.242 4.242 0 01-4.025 4.23l-.211.006h-.085c.053-.13.098-.266.132-.407l.043-.215.092-.587a3.038 3.038 0 002.854-3.027 3.044 3.044 0 00-1.613-2.68l-.178-.088-.243-.11-.082-.253A4.381 4.381 0 0010.5 7.18a4.377 4.377 0 00-2.757.978l-.191.165-.262.238-.335-.115a2.286 2.286 0 00-.738-.125c-1.206 0-2.196.94-2.277 2.126l-.005.156.024.517-.373.166A2.677 2.677 0 002 13.727c0 1.296.927 2.379 2.152 2.621-.158.37-.22.776-.187 1.184A3.877 3.877 0 01.8 13.727c0-1.391.75-2.669 1.942-3.355a3.486 3.486 0 014.262-3.158A5.574 5.574 0 0110.5 5.981zm9.247 4.564a.6.6 0 01.766-.069l.083.07.849.848a.6.6 0 01-.774.912l-.075-.063-.849-.849a.6.6 0 010-.849zM16.6 4.4c1.654 0 3 1.346 3 3 0 1.132-.63 2.118-1.558 2.63a5.44 5.44 0 00-1.344-1.24 6.765 6.765 0 00-2.628-2.996A2.998 2.998 0 0116.6 4.4zm6.25 2.4a.6.6 0 01.097 1.192L22.85 8h-1.2a.6.6 0 01-.097-1.192l.097-.008h1.2zm-2.254-4.244a.6.6 0 01.917.766l-.069.083-.849.849a.598.598 0 01-.848 0 .6.6 0 01-.07-.766l.07-.083.849-.849zm-8.84 0a.6.6 0 01.766-.069l.083.07.849.848a.6.6 0 01-.774.912l-.075-.063-.848-.849a.6.6 0 010-.849zM16.6.55a.6.6 0 01.592.503l.008.097v1.2a.6.6 0 01-1.192.097L16 2.35v-1.2a.6.6 0 01.6-.6z", "fill-rule": "nonzero" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$j; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-weather-cloudy-rain",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$i = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class WeatherCloudySleet {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M11.599 19.171a.138.138 0 01.23.077v.046l-.47 3a1.2 1.2 0 01-1.372 1c-.954-.149-1.337-1.29-.713-1.985l.087-.088 2.238-2.05zm-5.079-3.35L7.201 17l.68-1.179 1.04.6-.68 1.178H9.6v1.2H8.24l.68 1.178-1.04.6L7.2 19.4l-.68 1.179-1.04-.6.681-1.18H4.801V17.6h1.36l-.68-1.18 1.04-.6zm7.356-2.006a.12.12 0 01.197.062l.002.045-.522 3.333a1.302 1.302 0 11-2.256-1.068l.091-.092 2.488-2.28zM10.507 5.95a5.56 5.56 0 015.233 3.674 4.25 4.25 0 012.261 3.753 4.236 4.236 0 01-3.168 4.1l.004-.02.522-3.334a1.42 1.42 0 00-2.243-1.363l-.117.096-2.49 2.281a2.626 2.626 0 00-.283.303l-.12.165L7.7 14.21a1 1 0 00-.881-.06l-.12.058-2.698 1.552a.999.999 0 00-.494.748l-.007.118v.802a3.861 3.861 0 01-2.7-3.683c0-1.4.755-2.684 1.952-3.366.102-1.822 1.608-3.273 3.443-3.273.27 0 .54.033.806.098a5.53 5.53 0 013.505-1.255zm9.24 4.596a.6.6 0 01.765-.069l.083.07.85.848a.6.6 0 01-.775.912l-.074-.064-.849-.848a.6.6 0 010-.849zM16.601 4.4c1.654 0 3 1.345 3 3 0 1.132-.63 2.118-1.558 2.63a5.43 5.43 0 00-1.344-1.24 6.768 6.768 0 00-2.628-2.996 2.997 2.997 0 012.53-1.394zm6.25 2.4a.6.6 0 01.097 1.192L22.85 8h-1.2a.6.6 0 01-.098-1.192l.098-.008h1.2zM11.757 2.556a.6.6 0 01.765-.069l.084.07.849.848a.6.6 0 01-.775.912l-.074-.064-.849-.848a.6.6 0 010-.849zm8.84 0a.6.6 0 01.917.766l-.07.083-.848.848a.596.596 0 01-.849 0 .6.6 0 01-.07-.765l.07-.083.85-.849zM16.6.55a.6.6 0 01.592.503l.008.097v1.2a.6.6 0 01-1.193.097l-.007-.097v-1.2a.6.6 0 01.6-.6z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M11.828 19.294l-.47 3a1.201 1.201 0 01-1.25 1.013l-.122-.013c-.995-.155-1.368-1.392-.626-2.072l2.238-2.05a.138.138 0 01.23.122zM6.52 15.821l.68 1.18.681-1.179 1.04.6L8.24 17.6H9.6v1.2H8.239l.68 1.178-1.039.6L7.2 19.4l-.68 1.18-1.04-.601.681-1.179H4.8v-1.2h1.361l-.68-1.179 1.039-.6zm7.554-1.899l-.522 3.334a1.302 1.302 0 01-1.354 1.098l-.132-.014c-1.078-.168-1.483-1.508-.678-2.245l2.487-2.28a.12.12 0 01.199.107zM10.5 5.982a5.577 5.577 0 015.242 3.638A4.246 4.246 0 0118 13.364c0 2.004-1.4 3.683-3.273 4.121l.011-.044.2-1.278a3.04 3.04 0 001.862-2.8 3.044 3.044 0 00-1.613-2.68l-.178-.087-.243-.11-.082-.253A4.381 4.381 0 0010.5 7.18a4.377 4.377 0 00-2.757.978l-.191.165-.262.238-.335-.115a2.286 2.286 0 00-.738-.125c-1.206 0-2.196.94-2.277 2.126l-.005.156.024.517-.373.166A2.677 2.677 0 002 13.727c0 1.028.584 1.921 1.437 2.368l.163.079v1.272a3.877 3.877 0 01-2.8-3.719c0-1.391.75-2.669 1.942-3.355a3.486 3.486 0 014.262-3.158A5.574 5.574 0 0110.5 5.981zm10.012 4.495l.083.07.849.848a.6.6 0 01-.774.912l-.075-.063-.849-.849a.6.6 0 01.766-.918zM16.6 4.4c1.654 0 3 1.346 3 3 0 1.132-.63 2.118-1.558 2.63a5.44 5.44 0 00-1.344-1.24 6.765 6.765 0 00-2.628-2.996A2.998 2.998 0 0116.6 4.4zm6.25 2.4a.6.6 0 01.097 1.192L22.85 8h-1.2a.6.6 0 01-.097-1.192l.097-.008h1.2zm-1.406-4.244a.6.6 0 01.07.766l-.07.083-.849.849a.598.598 0 01-.848 0 .6.6 0 01-.07-.766l.07-.083.849-.849a.6.6 0 01.848 0zm-8.922-.069l.083.07.849.848a.6.6 0 01-.774.912l-.075-.063-.848-.849a.6.6 0 01.765-.918zM16.6.55a.6.6 0 01.592.503l.008.097v1.2a.6.6 0 01-1.192.097L16 2.35v-1.2a.6.6 0 01.6-.6z", "fill-rule": "nonzero" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$i; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-weather-cloudy-sleet",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$h = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class WeatherCloudySnow {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M7.08 18.622l1.04.6-.681 1.178h1.36v1.2H7.44l.68 1.178-1.04.6L6.4 22.2l-.68 1.178-1.04-.6.681-1.178H4v-1.2h1.36l-.68-1.178 1.04-.6.68 1.178.68-1.178zm5.2-3.6l1.04.6-.681 1.178h1.36V18h-1.36l.68 1.178-1.04.6-.68-1.178-.68 1.178-1.04-.6L10.56 18H9.2v-1.2h1.36l-.68-1.178 1.04-.6.68 1.178.68-1.178zm-1.785-9.077a5.56 5.56 0 015.233 3.674 4.25 4.25 0 012.261 3.753 4.24 4.24 0 01-2.698 3.952l-.191.069v-1.438a1 1 0 00-.402-.8l-.099-.066-2.5-1.443a1 1 0 00-.88-.059l-.12.059-2.498 1.438a1 1 0 00-.494.75l-.007.117v1.651h-.586l-.614-.355a1.002 1.002 0 00-.882-.059l-.119.059-.61.352h-.861A3.858 3.858 0 01.789 13.74c0-1.4.755-2.683 1.952-3.365.102-1.822 1.608-3.273 3.443-3.273.27 0 .54.033.806.098a5.53 5.53 0 013.505-1.256zm9.251 4.601a.6.6 0 01.766-.069l.083.07.85.848a.601.601 0 01-.776.912l-.074-.063-.849-.849a.601.601 0 010-.849zM16.6 4.4c1.654 0 3 1.346 3 3 0 1.132-.63 2.118-1.558 2.63a5.45 5.45 0 00-1.344-1.24 6.769 6.769 0 00-2.628-2.996A3 3 0 0116.6 4.4zm6.25 2.4a.6.6 0 01.097 1.192L22.85 8h-1.2a.6.6 0 01-.097-1.192l.097-.008h1.2zM11.757 2.556a.6.6 0 01.765-.069l.083.07.85.848a.601.601 0 01-.776.912l-.074-.063-.848-.849a.6.6 0 010-.849zm8.839 0a.6.6 0 01.917.766l-.069.083-.849.849a.599.599 0 01-.848 0 .6.6 0 01-.07-.766l.07-.083.849-.849zM16.6.55a.6.6 0 01.592.502l.008.098v1.2a.6.6 0 01-1.192.097L16 2.35v-1.2a.6.6 0 01.6-.6z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M7.08 18.622l1.04.6-.68 1.178H8.8v1.2H7.44l.68 1.178-1.04.6L6.4 22.2l-.68 1.178-1.04-.6.68-1.178H4v-1.2h1.36l-.68-1.178 1.04-.6.68 1.178.68-1.178zm5.2-3.6l1.04.6-.68 1.178H14V18h-1.36l.68 1.178-1.04.6-.68-1.178-.68 1.178-1.04-.6.68-1.178H9.2v-1.2h1.36l-.68-1.178 1.04-.6.68 1.178.68-1.178zm-1.78-9.04a5.577 5.577 0 015.242 3.638A4.246 4.246 0 0118 13.364a4.238 4.238 0 01-2.607 3.905l-.193.075v-1.306a3.039 3.039 0 001.6-2.674 3.044 3.044 0 00-1.613-2.68l-.178-.088-.243-.11-.082-.253A4.381 4.381 0 0010.5 7.18a4.377 4.377 0 00-2.757.978l-.191.165-.262.238-.335-.115a2.286 2.286 0 00-.738-.125c-1.206 0-2.196.94-2.277 2.126l-.005.156.024.517-.373.166A2.677 2.677 0 002 13.727a2.676 2.676 0 002.504 2.668l.169.005H8v1.2H4.673A3.877 3.877 0 01.8 13.727c0-1.391.75-2.669 1.942-3.355a3.486 3.486 0 014.262-3.158A5.574 5.574 0 0110.5 5.981zm9.246 4.564a.6.6 0 01.766-.069l.083.07.849.848a.6.6 0 01-.774.912l-.075-.063-.849-.849a.6.6 0 010-.849zM16.6 4.4c1.654 0 3 1.346 3 3 0 1.132-.63 2.118-1.558 2.63a5.44 5.44 0 00-1.344-1.24 6.765 6.765 0 00-2.628-2.996A2.998 2.998 0 0116.6 4.4zm6.25 2.4a.6.6 0 01.097 1.192L22.85 8h-1.2a.6.6 0 01-.097-1.192l.097-.008h1.2zm-2.254-4.244a.6.6 0 01.917.766l-.069.083-.849.849a.598.598 0 01-.848 0 .6.6 0 01-.07-.766l.07-.083.849-.849zm-8.84 0a.6.6 0 01.766-.069l.083.07.849.848a.6.6 0 01-.774.912l-.075-.063-.848-.849a.6.6 0 010-.849zM16.6.55a.6.6 0 01.592.503l.008.097v1.2a.6.6 0 01-1.192.097L16 2.35v-1.2a.6.6 0 01.6-.6z", "fill-rule": "nonzero" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$h; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-weather-cloudy-snow",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$g = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class WeatherCloudyThunderRain {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M10.999 19.171a.138.138 0 01.23.077v.046l-.47 3a1.201 1.201 0 01-1.372 1c-.954-.149-1.337-1.29-.713-1.985l.087-.088 2.238-2.05zM9.21 15.2l-2.562 3.6h2.487L4.09 22.878c-.128.103-.296-.029-.254-.166l.023-.046L5.663 20H3.751l2.662-4.8H9.21zm4.066-1.385a.12.12 0 01.197.062l.002.044-.522 3.334a1.301 1.301 0 01-1.487 1.085c-1.034-.162-1.448-1.403-.769-2.154l.091-.091 2.488-2.28zM10.507 5.95a5.56 5.56 0 015.233 3.674 4.25 4.25 0 012.261 3.753c0 2.195-1.668 4.005-3.795 4.215l.032-.137.52-3.333a1.421 1.421 0 00-2.24-1.365l-.117.096L11.26 13.9H5.647l-1.984 3.579A3.863 3.863 0 01.8 13.746c0-1.4.755-2.684 1.952-3.366.102-1.822 1.608-3.273 3.443-3.273.27 0 .54.033.806.098a5.53 5.53 0 013.505-1.255zm9.24 4.596a.6.6 0 01.765-.069l.083.07.85.848a.6.6 0 01-.775.912l-.074-.064-.849-.848a.6.6 0 010-.849zM16.601 4.4c1.654 0 3 1.345 3 3 0 1.132-.63 2.118-1.558 2.63a5.43 5.43 0 00-1.344-1.24 6.768 6.768 0 00-2.628-2.996 2.997 2.997 0 012.53-1.394zm6.25 2.4a.6.6 0 01.097 1.192L22.85 8h-1.2a.6.6 0 01-.098-1.192l.098-.008h1.2zM11.757 2.556a.6.6 0 01.765-.069l.084.07.849.848a.6.6 0 01-.775.912l-.074-.064-.849-.848a.6.6 0 010-.849zm8.84 0a.6.6 0 01.917.766l-.07.083-.848.848a.596.596 0 01-.849 0 .6.6 0 01-.07-.765l.07-.083.85-.849zM16.6.55a.6.6 0 01.592.503l.008.097v1.2a.6.6 0 01-1.193.097l-.007-.097v-1.2a.6.6 0 01.6-.6z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M10.998 19.171a.138.138 0 01.23.077v.046l-.47 3a1.201 1.201 0 01-1.372 1c-.953-.149-1.336-1.29-.713-1.985l.087-.087 2.238-2.05zM9.21 15.2l-2.562 3.6h2.487l-5.047 4.078c-.127.103-.295-.029-.253-.166l.022-.046L5.663 20H3.75l2.661-4.8H9.21zm4.065-1.385a.12.12 0 01.198.062l.001.045-.522 3.333a1.301 1.301 0 01-1.354 1.099l-.132-.014-.126-.026c-.942-.238-1.295-1.408-.643-2.128l.09-.091 2.488-2.28zM10.5 5.981a5.577 5.577 0 015.242 3.639A4.246 4.246 0 0118 13.364a4.238 4.238 0 01-3.897 4.218l.035-.141.171-1.093a3.04 3.04 0 002.491-2.984 3.044 3.044 0 00-1.613-2.68l-.178-.088-.243-.11-.082-.253A4.381 4.381 0 0010.5 7.18a4.377 4.377 0 00-2.757.978l-.191.165-.262.238-.335-.115a2.286 2.286 0 00-.738-.125c-1.206 0-2.196.94-2.277 2.126l-.005.156.024.517-.373.166A2.677 2.677 0 002 13.727c0 1.319.96 2.417 2.218 2.633l.166.024-.614 1.106A3.877 3.877 0 01.8 13.727c0-1.391.75-2.669 1.942-3.355a3.486 3.486 0 014.262-3.158A5.574 5.574 0 0110.5 5.981zm9.246 4.565a.6.6 0 01.766-.069l.083.07.849.848a.6.6 0 01-.774.912l-.075-.063-.849-.849a.6.6 0 010-.849zM16.6 4.4c1.654 0 3 1.346 3 3 0 1.132-.63 2.118-1.558 2.63a5.44 5.44 0 00-1.344-1.24 6.765 6.765 0 00-2.628-2.996A2.998 2.998 0 0116.6 4.4zm6.25 2.4a.6.6 0 01.097 1.192L22.85 8h-1.2a.6.6 0 01-.097-1.192l.097-.008h1.2zm-2.254-4.244a.6.6 0 01.917.766l-.069.083-.849.849a.598.598 0 01-.848 0 .6.6 0 01-.07-.766l.07-.083.849-.849zm-8.84 0a.6.6 0 01.766-.069l.083.07.849.848a.6.6 0 01-.774.912l-.075-.063-.848-.849a.6.6 0 010-.849zM16.6.55a.6.6 0 01.592.503l.008.097v1.2a.6.6 0 01-1.192.097L16 2.35v-1.2a.6.6 0 01.6-.6z", "fill-rule": "nonzero" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$g; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-weather-cloudy-thunder-rain",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$f = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class WeatherCloudyThunderSnow {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M8.81 15.2l-2.562 3.6h2.487L3.69 22.878c-.128.103-.296-.029-.253-.166l.022-.046L5.263 20H3.351l2.662-4.8H8.81zm3.471-.179l1.04.6-.681 1.179H14V18h-1.36l.68 1.178-1.039.6-.68-1.178-.68 1.178-1.04-.6.68-1.178h-1.36v-1.2h1.36l-.68-1.179 1.04-.6.68 1.179.68-1.179zM10.51 5.95a5.56 5.56 0 015.233 3.674 4.25 4.25 0 012.26 3.753 4.24 4.24 0 01-2.515 3.874l-.187.077v-1.486a1 1 0 00-.403-.802l-.1-.065-2.7-1.55a1 1 0 00-.877-.058l-.118.058-.828.475H5.247l-1.924 3.47a3.865 3.865 0 01-2.52-3.624c0-1.4.756-2.684 1.953-3.366.102-1.822 1.607-3.273 3.443-3.273.27 0 .54.033.805.098A5.53 5.53 0 0110.51 5.95zm9.237 4.596a.6.6 0 01.765-.069l.083.07.85.848a.6.6 0 01-.775.912l-.074-.064-.849-.848a.6.6 0 010-.849zM16.601 4.4c1.654 0 3 1.345 3 3 0 1.132-.63 2.118-1.558 2.63a5.43 5.43 0 00-1.344-1.24 6.768 6.768 0 00-2.628-2.996 2.997 2.997 0 012.53-1.394zm6.25 2.4a.6.6 0 01.097 1.192L22.85 8h-1.2a.6.6 0 01-.098-1.192l.098-.008h1.2zM11.757 2.556a.6.6 0 01.766-.069l.083.07.849.848a.6.6 0 01-.775.912l-.074-.064-.849-.848a.6.6 0 010-.849zm8.84 0a.6.6 0 01.917.766l-.07.083-.848.848a.596.596 0 01-.849 0 .6.6 0 01-.07-.765l.07-.083.85-.849zM16.6.55a.6.6 0 01.592.503l.008.097v1.2a.6.6 0 01-1.193.097l-.007-.097v-1.2a.6.6 0 01.6-.6z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M8.81 15.2l-2.562 3.6h2.487l-5.047 4.078c-.127.103-.295-.029-.253-.166l.022-.046L5.263 20H3.35l2.661-4.8H8.81zm3.47-.178l1.04.6-.68 1.178H14V18h-1.36l.68 1.178-1.04.6-.68-1.178-.68 1.178-1.04-.6.68-1.178H9.2v-1.2h1.36l-.68-1.178 1.04-.6.68 1.178.68-1.178zm-1.78-9.04a5.577 5.577 0 015.242 3.638A4.246 4.246 0 0118 13.364a4.238 4.238 0 01-2.607 3.905l-.193.075v-1.306a3.039 3.039 0 001.6-2.674 3.044 3.044 0 00-1.613-2.68l-.178-.088-.243-.11-.082-.253A4.381 4.381 0 0010.5 7.18a4.377 4.377 0 00-2.757.978l-.191.165-.262.238-.335-.115a2.286 2.286 0 00-.738-.125c-1.206 0-2.196.94-2.277 2.126l-.005.156.024.517-.373.166A2.677 2.677 0 002 13.727c0 1.19.781 2.197 1.857 2.542l.164.047-.595 1.074A3.876 3.876 0 01.8 13.727c0-1.391.75-2.669 1.942-3.355a3.486 3.486 0 014.262-3.158A5.574 5.574 0 0110.5 5.981zm9.246 4.564a.6.6 0 01.766-.069l.083.07.849.848a.6.6 0 01-.774.912l-.075-.063-.849-.849a.6.6 0 010-.849zM16.6 4.4c1.654 0 3 1.346 3 3 0 1.132-.63 2.118-1.558 2.63a5.44 5.44 0 00-1.344-1.24 6.765 6.765 0 00-2.628-2.996A2.998 2.998 0 0116.6 4.4zm6.25 2.4a.6.6 0 01.097 1.192L22.85 8h-1.2a.6.6 0 01-.097-1.192l.097-.008h1.2zm-2.254-4.244a.6.6 0 01.917.766l-.069.083-.849.849a.598.598 0 01-.848 0 .6.6 0 01-.07-.766l.07-.083.849-.849zm-8.84 0a.6.6 0 01.766-.069l.083.07.849.848a.6.6 0 01-.774.912l-.075-.063-.848-.849a.6.6 0 010-.849zM16.6.55a.6.6 0 01.592.503l.008.097v1.2a.6.6 0 01-1.192.097L16 2.35v-1.2a.6.6 0 01.6-.6z", "fill-rule": "nonzero" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$f; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-weather-cloudy-thunder-snow",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$e = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class WeatherHeavySleet {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M14.747 18.404a.174.174 0 01.289.103v.052l-.588 3.748a1.502 1.502 0 01-1.716 1.252c-1.199-.188-1.675-1.632-.876-2.498l.094-.093 2.797-2.564zM9.85 14.218l1.3.75-.886 1.532H12V18h-1.667l.816 1.413-1.299.75L9 18.69l-.85 1.473-1.3-.75L7.666 18H6v-1.5h1.735l-.885-1.532 1.3-.75L9 15.69l.85-1.472zm7.744-2.508a.15.15 0 01.249.083v.05l-.653 4.166a1.626 1.626 0 01-1.858 1.356c-1.3-.203-1.817-1.771-.946-2.708l.098-.098 3.11-2.85zM13.51.547a7.596 7.596 0 017.15 5.02 5.805 5.805 0 013.088 5.127c0 3.05-2.357 5.55-5.332 5.767l.031-.124.027-.127.652-4.167a1.45 1.45 0 00-2.29-1.391l-.12.098-3.11 2.85c-.235.215-.425.46-.574.726l-.104.202L9.5 12.54a1 1 0 00-.88-.06l-.12.058-3.297 1.893a1.001 1.001 0 00-.495.75l-.007.117v1.116a5.275 5.275 0 01-4.45-5.216A5.299 5.299 0 012.915 6.6c.14-2.49 2.197-4.471 4.705-4.471.369 0 .737.045 1.1.133A7.558 7.558 0 0113.51.547z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M14.748 18.404a.173.173 0 01.288.103l-.001.051-.587 3.749a1.502 1.502 0 01-1.716 1.252c-1.199-.188-1.676-1.632-.876-2.498l.094-.093 2.798-2.564zM9.85 14.217l1.298.75-.884 1.533H12V18h-1.666l.816 1.413-1.3.75L9 18.69l-.85 1.473-1.3-.75L7.668 18H6v-1.5h1.736l-.885-1.533 1.298-.75L9 15.69l.85-1.473zm7.743-2.508a.15.15 0 01.248.084v.05l-.651 4.166a1.626 1.626 0 01-1.859 1.357c-1.3-.204-1.817-1.772-.946-2.71l.099-.097 3.109-2.85zM13.511.566a7.596 7.596 0 017.15 5.019 5.805 5.805 0 013.089 5.127c0 2.982-2.252 5.443-5.134 5.754l.03-.11.026-.114.21-1.335a4.285 4.285 0 003.368-4.195A4.3 4.3 0 0019.937 6.9l-.196-.096-.303-.138-.101-.317c-.816-2.562-3.157-4.284-5.825-4.284-1.42 0-2.79.501-3.887 1.415l-.216.188-.329.302-.421-.146a3.178 3.178 0 00-1.037-.176A3.206 3.206 0 004.918 5.14c-.465.728-.52 1.42-.506 1.912l.03.498-.466.209a3.791 3.791 0 00-2.226 3.456A3.784 3.784 0 004.312 14.8l.188.058v1.542a5.282 5.282 0 01-4.25-5.185 5.299 5.299 0 012.667-4.598c.14-2.49 2.197-4.472 4.705-4.472.369 0 .736.045 1.1.134a7.558 7.558 0 014.79-1.715z", "fill-rule": "nonzero" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$e; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-weather-heavy-sleet",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$d = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class WeatherHeavySnow {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M8.35 17.807l1.299.75L8.816 20h1.683v1.5H8.781l.868 1.503-1.3.75-.85-1.473-.85 1.473-1.3-.75.869-1.503H4.499V20h1.684l-.833-1.443 1.299-.75.85 1.473.85-1.473zm6.5-4.5l1.298.75-.833 1.443H17V17H15.28l.868 1.503-1.299.75L14 17.78l-.85 1.473-1.3-.75.868-1.503H11v-1.5h1.683l-.832-1.443 1.298-.75L14 14.78l.85-1.473zM13.51.547a7.596 7.596 0 017.15 5.02 5.805 5.805 0 013.088 5.127c0 3.015-2.302 5.49-5.229 5.757l-.22.016v-2.089a1 1 0 00-.402-.802l-.099-.065-3.302-1.903a1.001 1.001 0 00-.877-.06l-.119.058-3.298 1.889a.999.999 0 00-.496.75l-.007.117v2.11l-4.479-.004C2.455 16.32.25 14.017.25 11.198A5.299 5.299 0 012.916 6.6C3.056 4.11 5.112 2.13 7.62 2.13c.37 0 .737.045 1.1.133A7.558 7.558 0 0113.51.547z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M8.35 17.807l1.3.75L8.816 20H10.5v1.5H8.781l.868 1.503-1.298.75L7.5 22.28l-.85 1.473-1.3-.75.869-1.503H4.5V20h1.684l-.833-1.443 1.298-.75.851 1.474.85-1.474zm6.5-4.5l1.3.75-.833 1.443H17V17h-1.719l.868 1.503-1.299.75L14 17.78l-.85 1.473-1.3-.75L12.72 17H11v-1.5h1.684l-.833-1.443 1.298-.75L14 14.78l.85-1.473zM13.512.565a7.596 7.596 0 017.149 5.019 5.803 5.803 0 013.089 5.127c0 2.945-2.196 5.379-5.026 5.739l-.224.024v-1.507c2.108-.251 3.75-2.063 3.75-4.256a4.3 4.3 0 00-2.314-3.813l-.195-.095-.303-.138-.101-.317c-.816-2.563-3.157-4.284-5.825-4.284-1.42 0-2.79.5-3.888 1.415l-.216.188-.328.301-.422-.146a3.178 3.178 0 00-1.036-.176 3.21 3.21 0 00-2.806 1.665 3.382 3.382 0 00-.405 1.84l.031.4-.466.209a3.791 3.791 0 00-2.226 3.456c0 2.02 1.579 3.677 3.557 3.78L5.5 15h4v1.5h-4c-2.895 0-5.25-2.37-5.25-5.284a5.299 5.299 0 012.667-4.598c.14-2.49 2.197-4.472 4.705-4.472.369 0 .736.045 1.1.134a7.558 7.558 0 014.79-1.715z", "fill-rule": "nonzero" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$d; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-weather-heavy-snow",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$c = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class WeatherMoonClear {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M15.969 17.442c-.649-.252-3.322-1.348-4.553-4.569-1.531-4.01.61-7.204 1.754-8.37l.031-.029a7.877 7.877 0 012.181-1.556l-.006-.001A9.404 9.404 0 004.32 8.968a9.368 9.368 0 00-.218 5.499 9.398 9.398 0 004.22 5.649 9.339 9.339 0 006.245 1.271 9.327 9.327 0 006.14-3.636 7.93 7.93 0 01-4.739-.31z", "fill-rule": "nonzero" }))) : (hAsync("g", null, hAsync("path", { d: "M15.969 17.442c-.649-.252-3.322-1.348-4.553-4.569-1.531-4.01.61-7.204 1.754-8.37l.031-.029a7.877 7.877 0 012.181-1.556l-.006-.001A9.404 9.404 0 004.32 8.968a9.368 9.368 0 00-.218 5.499 9.398 9.398 0 004.22 5.649 9.339 9.339 0 006.245 1.271 9.327 9.327 0 006.14-3.636 7.93 7.93 0 01-4.739-.31z", "fill-rule": "nonzero" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$c; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-weather-moon-clear",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$b = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class WeatherMoonCloudyA {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M10.1 8.381a5.577 5.577 0 015.242 3.639 4.246 4.246 0 012.258 3.744 4.242 4.242 0 01-4.024 4.23l-.212.006h-9.09A3.877 3.877 0 01.4 16.127c0-1.391.75-2.668 1.941-3.355a3.486 3.486 0 014.262-3.158A5.575 5.575 0 0110.1 8.381zm8.077-5.476a5.383 5.383 0 012.621-.03 4.55 4.55 0 003.058 8.515 5.374 5.374 0 01-2.934 1.969c-.913.24-1.83.23-2.685.015a5.421 5.421 0 00-1.938-2.184 6.749 6.749 0 00-2.137-2.675 5.404 5.404 0 014.015-5.61z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M10.1 8.381a5.577 5.577 0 015.242 3.639 4.246 4.246 0 012.258 3.744 4.242 4.242 0 01-4.025 4.23l-.211.006H4.273A3.877 3.877 0 01.4 16.127c0-1.391.75-2.669 1.942-3.355a3.486 3.486 0 014.262-3.158A5.574 5.574 0 0110.1 8.381zm0 1.2a4.377 4.377 0 00-2.758.978l-.191.165-.262.238-.335-.115a2.286 2.286 0 00-.738-.125c-1.206 0-2.196.94-2.277 2.126l-.005.156.024.517-.373.166a2.677 2.677 0 00-1.585 2.44 2.676 2.676 0 002.504 2.668l.169.005h9.09a3.04 3.04 0 003.037-3.036 3.044 3.044 0 00-1.613-2.68l-.178-.088-.243-.11-.082-.253A4.381 4.381 0 0010.1 9.58zm8.076-6.675a5.38 5.38 0 012.622-.03 4.549 4.549 0 003.057 8.515 5.376 5.376 0 01-2.934 1.968c-.912.24-1.83.23-2.685.015a5.42 5.42 0 00-1.938-2.184 6.748 6.748 0 00-2.137-2.676 5.403 5.403 0 014.015-5.608z", "fill-rule": "nonzero" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$b; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-weather-moon-cloudy-a",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$a = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class WeatherMoonCloudyB {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M11.41 7.252a6.077 6.077 0 015.72 4.015 4.644 4.644 0 012.47 4.102c0 2.483-1.95 4.515-4.39 4.626L15 20H5C2.684 20 .8 18.104.8 15.772c0-1.53.826-2.932 2.134-3.678.112-1.992 1.757-3.577 3.764-3.577.295 0 .59.036.88.107a6.044 6.044 0 013.832-1.372zM18.66 3.68a3.83 3.83 0 011.867-.022 3.24 3.24 0 002.177 6.064 3.832 3.832 0 01-3.649 1.483 5.804 5.804 0 00-.967-.769 7.32 7.32 0 00-2.294-2.904A3.847 3.847 0 0118.66 3.68z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M11.41 7.252a6.077 6.077 0 015.719 4.015A4.644 4.644 0 0119.6 15.37c0 2.483-1.95 4.515-4.39 4.626L15 20H5C2.684 20 .8 18.104.8 15.772c0-1.53.826-2.932 2.134-3.678.111-1.992 1.757-3.577 3.763-3.577.295 0 .59.036.88.107a6.047 6.047 0 013.832-1.372zm0 1.2c-1.126 0-2.211.392-3.085 1.11l-.198.172-.263.24-.337-.116a2.542 2.542 0 00-.83-.14c-.94 0-1.764.512-2.212 1.275a2.696 2.696 0 00-.358 1.495l.027.352-.373.168A3.033 3.033 0 002 15.772c0 1.61 1.251 2.93 2.824 3.023L5 18.8h10c1.875 0 3.4-1.54 3.4-3.43a3.44 3.44 0 00-1.828-3.04l-.18-.087-.242-.11-.08-.255a4.883 4.883 0 00-4.66-3.426zm7.25-4.772a3.83 3.83 0 011.868-.022 3.239 3.239 0 002.177 6.064 3.829 3.829 0 01-3.65 1.483 5.807 5.807 0 00-.967-.769 7.317 7.317 0 00-2.294-2.904 3.847 3.847 0 012.867-3.852z", "fill-rule": "nonzero" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$a; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-weather-moon-cloudy-b",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$9 = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class WeatherMoonRain {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M8.966 18.196a.142.142 0 01.234.078v.047l-.479 3.064a1.226 1.226 0 01-1.402 1.022c-.974-.152-1.364-1.319-.728-2.027l.09-.09 2.285-2.094zm-1.25-4.16a.142.142 0 01.234.08v.046l-.529 3.387-.014.051a1.34 1.34 0 11-2.593-.66c.053-.17.141-.335.27-.482l.105-.106 2.527-2.316zm4.934-1.304a.142.142 0 01.234.079v.047l-.615 3.935a1.537 1.537 0 01-1.756 1.28c-1.226-.191-1.714-1.67-.896-2.555l.096-.095 2.937-2.691zm-2.543-6.769a5.56 5.56 0 015.233 3.674 4.25 4.25 0 012.26 3.753c0 2.265-1.775 4.121-3.998 4.231l-.21.006h-.132a3.03 3.03 0 00.161-.48l.034-.168.615-3.936a1.34 1.34 0 00-2.122-1.286l-.11.091L9.14 14.32a1.342 1.342 0 00-2.124-1.26l-.11.09-2.528 2.317c-.331.304-.577.69-.71 1.118-.099.318-.13.648-.1.973A3.859 3.859 0 01.4 13.759c0-1.4.755-2.683 1.952-3.365C2.455 8.572 3.96 7.12 5.796 7.12c.27 0 .54.033.805.098a5.53 5.53 0 013.506-1.256zm8.07-5.458a5.383 5.383 0 012.621-.03 4.548 4.548 0 003.057 8.515 5.373 5.373 0 01-2.933 1.969c-.912.24-1.83.23-2.685.015A5.421 5.421 0 0016.3 8.79a6.749 6.749 0 00-2.137-2.676A5.404 5.404 0 0118.177.505z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M8.965 18.196a.141.141 0 01.235.078v.047l-.48 3.063a1.227 1.227 0 01-1.401 1.023c-.974-.152-1.365-1.319-.728-2.027l.089-.09 2.285-2.094zm-1.25-4.16a.142.142 0 01.235.079v.047l-.53 3.386-.045.181a1.339 1.339 0 01-1.488.937c-.812-.127-1.251-.899-1.105-1.602l.032-.123.046-.127a1.32 1.32 0 01.224-.356l.104-.106 2.527-2.316zm4.934-1.304a.141.141 0 01.235.079v.047l-.616 3.935a1.536 1.536 0 01-1.755 1.28c-1.227-.191-1.715-1.669-.897-2.554l.096-.096 2.937-2.691zm-2.55-6.75a5.577 5.577 0 015.243 3.638 4.245 4.245 0 012.258 3.744 4.242 4.242 0 01-4.025 4.23l-.211.006h-.085a2.88 2.88 0 00.132-.407l.043-.215.092-.587a3.038 3.038 0 002.854-3.027 3.044 3.044 0 00-1.613-2.68l-.178-.088-.243-.11-.082-.253A4.381 4.381 0 0010.1 7.18a4.377 4.377 0 00-2.757.978l-.191.165-.262.238-.335-.115a2.286 2.286 0 00-.738-.125c-1.206 0-2.196.94-2.277 2.126l-.005.156.024.517-.373.166a2.677 2.677 0 00-1.585 2.44c0 1.296.927 2.379 2.152 2.621-.158.37-.22.776-.187 1.184A3.877 3.877 0 01.4 13.727c0-1.391.75-2.669 1.942-3.355a3.486 3.486 0 014.262-3.158A5.574 5.574 0 0110.1 5.981zM18.177.504a5.38 5.38 0 012.622-.03 4.548 4.548 0 003.057 8.515 5.376 5.376 0 01-2.934 1.969c-.912.24-1.83.23-2.685.015a5.42 5.42 0 00-1.938-2.184 6.748 6.748 0 00-2.137-2.676A5.403 5.403 0 0118.176.505z", "fill-rule": "nonzero" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$9; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-weather-moon-rain",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$8 = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class WeatherMoonSleet {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M11.199 19.171a.138.138 0 01.23.077v.046l-.47 3a1.201 1.201 0 01-1.372 1c-.954-.149-1.337-1.29-.713-1.985l.087-.088 2.238-2.05zm-3.72-3.348l1.039.6-.68 1.178h1.36v1.2h-1.36l.68 1.179-1.04.6-.68-1.179-.68 1.179-1.04-.6.68-1.179h-1.36v-1.2h1.36l-.68-1.178 1.04-.6.68 1.178.68-1.178zm5.997-2.008a.12.12 0 01.197.062l.002.044-.522 3.334a1.301 1.301 0 01-1.487 1.085c-1.034-.162-1.448-1.403-.769-2.154l.091-.091 2.488-2.28zm-3.37-7.865a5.56 5.56 0 015.234 3.674 4.25 4.25 0 012.26 3.753c0 2.013-1.403 3.7-3.276 4.128l.015-.065.521-3.333a1.32 1.32 0 00-2.083-1.269l-.108.089-2.491 2.283a2.35 2.35 0 00-.268.292l-.114.158-2.498-1.443a1 1 0 00-.88-.06l-.12.06-2.7 1.554a1 1 0 00-.493.749l-.007.118v.79A3.862 3.862 0 01.4 13.746c0-1.4.755-2.684 1.952-3.366.102-1.822 1.607-3.273 3.443-3.273.27 0 .54.033.805.098a5.53 5.53 0 013.506-1.255zM18.178.505a5.37 5.37 0 012.621-.03 4.548 4.548 0 003.057 8.515 5.377 5.377 0 01-2.933 1.969c-.912.24-1.83.23-2.685.015A5.424 5.424 0 0016.3 8.79a6.749 6.749 0 00-2.137-2.676A5.403 5.403 0 0118.177.505z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M11.198 19.171a.138.138 0 01.23.077v.046l-.47 3a1.201 1.201 0 01-1.372 1c-.953-.149-1.336-1.29-.713-1.985l.087-.087 2.238-2.05zm-3.718-3.35l1.04.6-.68 1.179H9.2v1.2H7.84l.68 1.178-1.04.6L6.8 19.4l-.68 1.178-1.04-.6.68-1.178H4.4v-1.2h1.36l-.68-1.178 1.04-.6L6.8 17l.68-1.178zm5.995-2.006a.12.12 0 01.198.062l.001.045-.522 3.333a1.301 1.301 0 01-1.354 1.099l-.132-.014-.126-.026c-.942-.238-1.295-1.408-.643-2.128l.09-.091 2.488-2.28zM10.1 5.981a5.577 5.577 0 015.242 3.639 4.245 4.245 0 012.258 3.744 4.24 4.24 0 01-3.273 4.12l.011-.043.2-1.278a3.04 3.04 0 001.862-2.8 3.044 3.044 0 00-1.613-2.68l-.178-.087-.243-.11-.082-.253A4.381 4.381 0 0010.1 7.18a4.377 4.377 0 00-2.757.978l-.191.165-.262.238-.335-.115a2.286 2.286 0 00-.738-.125c-1.206 0-2.196.94-2.277 2.126l-.005.156.024.517-.373.166a2.677 2.677 0 00-1.585 2.44c0 1.028.584 1.921 1.437 2.368l.163.079v1.272a3.877 3.877 0 01-2.8-3.719c0-1.391.75-2.669 1.942-3.355a3.486 3.486 0 014.262-3.158A5.574 5.574 0 0110.1 5.981zM18.176.505a5.38 5.38 0 012.622-.03 4.548 4.548 0 003.057 8.515 5.376 5.376 0 01-2.934 1.969c-.912.24-1.83.23-2.685.015a5.42 5.42 0 00-1.938-2.184 6.748 6.748 0 00-2.137-2.676A5.403 5.403 0 0118.176.505z", "fill-rule": "nonzero" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$8; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-weather-moon-sleet",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$7 = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class WeatherMoonSnow {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M6.681 18.621l1.04.6L7.04 20.4H8.4v1.2H7.04l.68 1.178-1.039.6-.68-1.178-.68 1.178-1.04-.6.68-1.178h-1.36v-1.2h1.36l-.68-1.179 1.04-.6L6 19.8l.68-1.179zm5.2-3.6l1.04.6-.681 1.179h1.36V18h-1.36l.68 1.178-1.039.6-.68-1.178-.68 1.178-1.04-.6.68-1.178h-1.36v-1.2h1.36l-.68-1.179 1.04-.6.68 1.179.68-1.179zM10.108 5.95a5.56 5.56 0 015.233 3.674 4.25 4.25 0 012.261 3.753 4.24 4.24 0 01-2.514 3.873l-.187.078v-1.482a1 1 0 00-.4-.8l-.1-.065-2.7-1.565a1 1 0 00-.882-.06l-.119.06-2.699 1.554a1 1 0 00-.493.748l-.007.118v1.757l-.996-.581a1 1 0 00-.889-.06l-.12.06-1.012.591H4.04a3.858 3.858 0 01-3.639-3.857c0-1.4.755-2.684 1.952-3.366.102-1.822 1.608-3.273 3.443-3.273.27 0 .54.033.806.098a5.53 5.53 0 013.505-1.255zm8.07-5.445a5.37 5.37 0 012.62-.03 4.548 4.548 0 003.057 8.515 5.377 5.377 0 01-2.933 1.969c-.912.24-1.83.23-2.685.015A5.424 5.424 0 0016.3 8.79a6.749 6.749 0 00-2.137-2.676A5.403 5.403 0 0118.177.505z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M6.68 18.622l1.04.6-.68 1.178H8.4v1.2H7.04l.68 1.178-1.04.6L6 22.2l-.68 1.178-1.04-.6.68-1.178H3.6v-1.2h1.36l-.68-1.178 1.04-.6L6 19.8l.68-1.178zm5.2-3.6l1.04.6-.68 1.178h1.36V18h-1.36l.68 1.178-1.04.6-.68-1.178-.68 1.178-1.04-.6.68-1.178H8.8v-1.2h1.36l-.68-1.178 1.04-.6.68 1.178.68-1.178zm-1.78-9.04a5.577 5.577 0 015.242 3.638 4.245 4.245 0 012.258 3.744 4.238 4.238 0 01-2.607 3.905l-.193.075v-1.306a3.039 3.039 0 001.6-2.674 3.044 3.044 0 00-1.613-2.68l-.178-.088-.243-.11-.082-.253A4.381 4.381 0 0010.1 7.18a4.377 4.377 0 00-2.757.978l-.191.165-.262.238-.335-.115a2.286 2.286 0 00-.738-.125c-1.206 0-2.196.94-2.277 2.126l-.005.156.024.517-.373.166a2.677 2.677 0 00-1.585 2.44 2.676 2.676 0 002.504 2.668l.169.005H7.6v1.2H4.273A3.877 3.877 0 01.4 13.727c0-1.391.75-2.669 1.942-3.355a3.486 3.486 0 014.262-3.158A5.574 5.574 0 0110.1 5.981zM18.176.504a5.38 5.38 0 012.622-.03 4.548 4.548 0 003.057 8.515 5.376 5.376 0 01-2.934 1.969c-.912.24-1.83.23-2.685.015a5.42 5.42 0 00-1.938-2.184 6.748 6.748 0 00-2.137-2.676A5.403 5.403 0 0118.176.505z", "fill-rule": "nonzero" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$7; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-weather-moon-snow",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$6 = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class WeatherMoonThunderRain {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M10.598 19.171a.138.138 0 01.23.077v.046l-.47 3a1.201 1.201 0 01-1.372 1c-.953-.149-1.336-1.291-.713-1.984l.087-.088 2.238-2.05zM8.81 15.2l-2.562 3.6h2.487l-5.047 4.078c-.127.103-.294-.029-.252-.166l.022-.046L5.263 20H3.351l2.661-4.8H8.81zm4.066-1.385a.12.12 0 01.197.062l.001.045-.521 3.333a1.3 1.3 0 01-1.487 1.085c-1.035-.161-1.449-1.403-.769-2.154l.09-.091 2.489-2.28zM10.22 5.962A5.577 5.577 0 0115.463 9.6a4.246 4.246 0 012.258 3.743 4.24 4.24 0 01-3.908 4.22l.024-.109.522-3.332a1.42 1.42 0 00-2.24-1.365l-.118.095L10.86 13.9H5.247l-1.952 3.52a3.878 3.878 0 01-2.774-3.712c0-1.392.75-2.669 1.942-3.355a3.486 3.486 0 014.261-3.158 5.575 5.575 0 013.496-1.233zM18.297.486a5.383 5.383 0 012.621-.03 4.55 4.55 0 003.058 8.515 5.374 5.374 0 01-2.934 1.969c-.912.24-1.83.23-2.685.015a5.421 5.421 0 00-1.938-2.184 6.749 6.749 0 00-2.137-2.676A5.404 5.404 0 0118.297.486z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M10.598 19.171a.138.138 0 01.23.077v.046l-.47 3a1.201 1.201 0 01-1.372 1c-.953-.149-1.336-1.29-.713-1.985l.087-.087 2.238-2.05zM8.81 15.2l-2.562 3.6h2.487l-5.047 4.078c-.127.103-.295-.029-.253-.166l.022-.046L5.263 20H3.35l2.661-4.8H8.81zm4.065-1.385a.12.12 0 01.198.062l.001.045-.522 3.333a1.301 1.301 0 01-1.354 1.099l-.132-.014-.126-.026c-.942-.238-1.295-1.408-.643-2.128l.09-.091 2.488-2.28zM10.1 5.981a5.577 5.577 0 015.242 3.639 4.245 4.245 0 012.258 3.744 4.239 4.239 0 01-3.897 4.218l.035-.141.171-1.093a3.04 3.04 0 002.491-2.984 3.044 3.044 0 00-1.613-2.68l-.178-.088-.243-.11-.082-.253A4.381 4.381 0 0010.1 7.18a4.377 4.377 0 00-2.757.978l-.191.165-.262.238-.335-.115a2.286 2.286 0 00-.738-.125c-1.206 0-2.196.94-2.277 2.126l-.005.156.024.517-.373.166a2.677 2.677 0 00-1.585 2.44c0 1.319.96 2.417 2.218 2.633l.166.024-.614 1.106A3.877 3.877 0 01.4 13.727c0-1.391.75-2.669 1.942-3.355a3.486 3.486 0 014.262-3.158A5.574 5.574 0 0110.1 5.981zM18.176.505a5.38 5.38 0 012.622-.03 4.548 4.548 0 003.057 8.515 5.376 5.376 0 01-2.934 1.969c-.912.24-1.83.23-2.685.015a5.42 5.42 0 00-1.938-2.184 6.748 6.748 0 00-2.137-2.676A5.403 5.403 0 0118.176.505z", "fill-rule": "nonzero" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$6; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-weather-moon-thunder-rain",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$5 = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class WeatherMoonThunderSnow {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M8.41 15.2l-2.562 3.6h2.487L3.29 22.878c-.128.103-.296-.029-.254-.166l.023-.046L4.863 20H2.951l2.662-4.8H8.41zm3.471-.178l1.04.6-.681 1.178h1.36V18h-1.36l.68 1.179-1.039.6-.68-1.179-.68 1.179-1.04-.6.68-1.179h-1.36v-1.2h1.36l-.68-1.178 1.04-.6.68 1.178.68-1.178zM10.107 5.98a5.56 5.56 0 015.233 3.674 4.25 4.25 0 012.26 3.753 4.239 4.239 0 01-2.606 3.913l-.193.075V15.9c0-.318-.15-.614-.401-.801l-.099-.065-2.6-1.504a1 1 0 00-.882-.059l-.12.06-.779.45L4.906 14l-1.902 3.431A3.864 3.864 0 01.4 13.777c0-1.4.755-2.683 1.952-3.365.102-1.822 1.607-3.273 3.443-3.273.27 0 .54.033.805.098a5.53 5.53 0 013.506-1.256zm8.07-5.476a5.377 5.377 0 012.621-.03 4.548 4.548 0 003.057 8.515 5.377 5.377 0 01-2.933 1.969c-.912.24-1.83.23-2.685.015A5.421 5.421 0 0016.3 8.79a6.749 6.749 0 00-2.137-2.676A5.404 5.404 0 0118.177.505z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M8.41 15.2l-2.562 3.6h2.487l-5.047 4.078c-.127.103-.295-.029-.253-.166l.022-.046L4.863 20H2.95l2.661-4.8H8.41zm3.47-.178l1.04.6-.68 1.178h1.36V18h-1.36l.68 1.178-1.04.6-.68-1.178-.68 1.178-1.04-.6.68-1.178H8.8v-1.2h1.36l-.68-1.178 1.04-.6.68 1.178.68-1.178zm-1.78-9.04a5.577 5.577 0 015.242 3.638 4.245 4.245 0 012.258 3.744 4.238 4.238 0 01-2.607 3.905l-.193.075v-1.306a3.039 3.039 0 001.6-2.674 3.044 3.044 0 00-1.613-2.68l-.178-.088-.243-.11-.082-.253A4.381 4.381 0 0010.1 7.18a4.377 4.377 0 00-2.757.978l-.191.165-.262.238-.335-.115a2.286 2.286 0 00-.738-.125c-1.206 0-2.196.94-2.277 2.126l-.005.156.024.517-.373.166a2.677 2.677 0 00-1.585 2.44c0 1.19.781 2.197 1.857 2.542l.164.047-.595 1.074A3.876 3.876 0 01.4 13.727c0-1.391.75-2.669 1.942-3.355a3.486 3.486 0 014.262-3.158A5.574 5.574 0 0110.1 5.981zM18.176.504a5.38 5.38 0 012.622-.03 4.548 4.548 0 003.057 8.515 5.376 5.376 0 01-2.934 1.969c-.912.24-1.83.23-2.685.015a5.42 5.42 0 00-1.938-2.184 6.748 6.748 0 00-2.137-2.676A5.403 5.403 0 0118.176.505z", "fill-rule": "nonzero" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$5; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-weather-moon-thunder-snow",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$4 = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class WeatherOvercast {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M15.288 11.384c1.133 0 2.226.375 3.12 1.066.213-.045.421-.067.628-.067a3.276 3.276 0 013.255 2.934A3.614 3.614 0 0124 18.386a3.618 3.618 0 01-3.422 3.609l-.192.005h-7.954A3.936 3.936 0 018.5 18.068c0-1.43.783-2.744 2.02-3.433a5.104 5.104 0 014.768-3.251zM11.851 1.26a6.788 6.788 0 016.389 4.485A5.188 5.188 0 0121 10.327c0 .391-.047.771-.13 1.138a4.576 4.576 0 00-2.133-.372 6.444 6.444 0 00-3.449-1.01 6.375 6.375 0 00-5.798 3.662 5.203 5.203 0 00-1.448 1.492l-.153.254-3.446-.004C1.972 15.355 0 13.297 0 10.777 0 9.07.923 7.501 2.384 6.67c.124-2.225 1.962-3.996 4.204-3.996.33 0 .658.04.983.12a6.755 6.755 0 014.28-1.533z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M15.288 11.384c1.133 0 2.226.375 3.12 1.066.213-.045.421-.067.628-.067a3.276 3.276 0 013.255 2.934A3.615 3.615 0 0124 18.386a3.618 3.618 0 01-3.422 3.609l-.192.005h-7.954A3.936 3.936 0 018.5 18.068c0-1.43.783-2.744 2.02-3.433a5.104 5.104 0 014.768-3.251zm0 1.5a3.61 3.61 0 00-3.383 2.329l-.066.185-.101.318-.304.136A2.436 2.436 0 0010 18.069a2.435 2.435 0 002.272 2.427l.16.005h7.954a2.116 2.116 0 002.114-2.114c0-.778-.43-1.49-1.11-1.858l-.149-.073-.47-.209.027-.472c.013-.35-.02-.674-.26-1.057a1.775 1.775 0 00-1.207-.81c-.383-.065-.676.012-.976.115l-.305.107-.327-.298a3.611 3.611 0 00-2.435-.947zM11.838 1.301a6.816 6.816 0 016.405 4.44A5.191 5.191 0 0121 10.319c0 .325-.034.642-.091.95a4.662 4.662 0 00-1.46-.365c.03-.191.051-.386.051-.585a3.69 3.69 0 00-1.987-3.265l-.185-.09-.304-.137-.102-.317A5.322 5.322 0 0011.84 2.8c-1.233 0-2.423.43-3.38 1.215l-.2.174-.328.297-.418-.143a2.767 2.767 0 00-.894-.151 2.766 2.766 0 00-2.757 2.594l-.005.168.03.641-.466.208A3.244 3.244 0 001.5 10.761a3.243 3.243 0 003.055 3.234L4.74 14h4.1a5.454 5.454 0 00-1.051 1.262l-.136.238H4.739A4.744 4.744 0 010 10.761c0-1.699.914-3.259 2.367-4.1a4.267 4.267 0 014.252-3.967c.32 0 .64.037.955.11a6.815 6.815 0 014.265-1.502z", "fill-rule": "nonzero" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$4; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-weather-overcast",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$3 = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class WeatherRain {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M11.959 17.134c.109-.1.276-.028.294.105l-.001.053-.599 3.828A1.534 1.534 0 019.9 22.398c-1.224-.19-1.711-1.666-.895-2.55l.096-.095 2.857-2.619zm-1.563-5.199c.11-.1.277-.028.294.105v.053l-.662 4.233a1.676 1.676 0 01-1.917 1.397c-1.341-.21-1.874-1.827-.976-2.793l.102-.1 3.159-2.895zm6.168-1.63c.109-.1.276-.028.294.105l-.001.053-.77 4.919a1.92 1.92 0 01-2.194 1.6c-1.539-.24-2.148-2.1-1.11-3.205l.11-.108 3.67-3.364zm-3.05-9.74a7.596 7.596 0 017.149 5.019 5.805 5.805 0 013.089 5.127c0 3.118-2.46 5.668-5.53 5.785l-.22.004-.928-.001a3.41 3.41 0 00.25-.675l.048-.241.77-4.92a1.475 1.475 0 00-2.336-1.416l-.122.1-3.67 3.364-.124.12.084-.537a1.478 1.478 0 00-2.334-1.418l-.121.1-3.16 2.895a2.948 2.948 0 00-.958 2.421l.022.193h-.2c-2.765-.146-4.971-2.45-4.971-5.27a5.299 5.299 0 012.667-4.598c.14-2.489 2.196-4.471 4.704-4.471.37 0 .737.045 1.1.134a7.558 7.558 0 014.79-1.715z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M11.957 17.134c.109-.1.276-.028.294.105l-.001.053-.599 3.828a1.534 1.534 0 01-1.752 1.278c-1.225-.19-1.712-1.666-.896-2.55l.097-.095 2.857-2.619zm-1.563-5.199c.11-.1.277-.028.294.105v.053l-.663 4.233a1.676 1.676 0 01-1.916 1.397c-1.341-.21-1.874-1.827-.976-2.793l.102-.1 3.159-2.895zm6.167-1.63c.11-.1.277-.028.295.105l-.001.053-.77 4.919a1.92 1.92 0 01-2.194 1.6c-1.539-.24-2.148-2.1-1.11-3.205l.11-.108 3.67-3.364zm-3.05-9.74a7.596 7.596 0 017.15 5.019 5.805 5.805 0 013.089 5.127c0 3.118-2.46 5.668-5.53 5.785L18 16.5h-.695c.093-.207.167-.426.218-.655l.044-.232.096-.613H18c2.343 0 4.25-1.924 4.25-4.289A4.3 4.3 0 0019.936 6.9l-.195-.096-.303-.138-.101-.317c-.816-2.562-3.157-4.284-5.825-4.284-1.42 0-2.79.501-3.888 1.415l-.216.188-.328.302-.422-.146a3.178 3.178 0 00-1.036-.176A3.214 3.214 0 004.747 5.44c-.313.631-.345 1.15-.33 1.634l.025.476-.466.209a3.791 3.791 0 00-2.226 3.456c0 2.046 1.619 3.714 3.631 3.777-.17.473-.23.982-.16 1.492C2.456 16.34.25 14.035.25 11.215a5.299 5.299 0 012.667-4.598c.14-2.489 2.197-4.471 4.705-4.471.369 0 .736.045 1.1.134a7.558 7.558 0 014.79-1.715z", "fill-rule": "nonzero" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$3; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-weather-rain",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$2 = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class WeatherSunny {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M12 19.75a.75.75 0 01.743.648l.007.102v2.75a.75.75 0 01-1.493.102l-.007-.102V20.5a.75.75 0 01.75-.75zm-6.54-2.27a.75.75 0 011.133.977l-.072.084-1.946 1.944a.748.748 0 01-1.06 0 .75.75 0 01-.073-.976l.072-.085L5.46 17.48zm12.02 0a.75.75 0 01.976-.073l.085.073 1.945 1.944a.75.75 0 01-.968 1.14l-.093-.079-1.945-1.944a.75.75 0 010-1.061zM12 6.75a5.25 5.25 0 110 10.5 5.25 5.25 0 010-10.5zm-8.5 4.5a.75.75 0 01.102 1.493l-.102.007H.75a.75.75 0 01-.102-1.493l.102-.007H3.5zm19.75 0a.75.75 0 01.102 1.493l-.102.007H20.5a.75.75 0 01-.102-1.493l.102-.007h2.75zm-3.825-7.736a.75.75 0 011.134.977l-.073.085-1.945 1.944a.748.748 0 01-1.06 0 .75.75 0 01-.073-.977l.072-.084 1.945-1.944zm-15.91 0a.75.75 0 01.976-.072l.084.072L6.521 5.46a.75.75 0 01-.969 1.14L5.46 6.52 3.514 4.576a.75.75 0 010-1.061zM12 0a.75.75 0 01.743.648l.007.102V3.5a.75.75 0 01-1.493.102L11.25 3.5V.75A.75.75 0 0112 0z", "fill-rule": "nonzero" }))) : (hAsync("g", null, hAsync("path", { d: "M12 19.75a.75.75 0 01.743.648l.007.102v2.75a.75.75 0 01-1.493.102l-.007-.102V20.5a.75.75 0 01.75-.75zm-6.54-2.27a.75.75 0 011.133.977l-.072.084-1.946 1.944a.748.748 0 01-1.06 0 .75.75 0 01-.073-.976l.072-.085L5.46 17.48zm12.02 0a.75.75 0 01.976-.073l.085.073 1.945 1.944a.75.75 0 01-.968 1.14l-.093-.079-1.945-1.944a.75.75 0 010-1.061zM12 6.75a5.25 5.25 0 110 10.5 5.25 5.25 0 010-10.5zm-8.5 4.5a.75.75 0 01.102 1.493l-.102.007H.75a.75.75 0 01-.102-1.493l.102-.007H3.5zm19.75 0a.75.75 0 01.102 1.493l-.102.007H20.5a.75.75 0 01-.102-1.493l.102-.007h2.75zm-3.825-7.736a.75.75 0 011.134.977l-.073.085-1.945 1.944a.748.748 0 01-1.06 0 .75.75 0 01-.073-.977l.072-.084 1.945-1.944zm-15.91 0a.75.75 0 01.976-.072l.084.072L6.521 5.46a.75.75 0 01-.969 1.14L5.46 6.52 3.514 4.576a.75.75 0 010-1.061zM12 0a.75.75 0 01.743.648l.007.102V3.5a.75.75 0 01-1.493.102L11.25 3.5V.75A.75.75 0 0112 0z", "fill-rule": "nonzero" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$2; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-weather-sunny",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss$1 = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class WeatherThunderRain {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M14.01 18.465a.173.173 0 01.287.102v.052l-.587 3.748a1.502 1.502 0 01-1.716 1.252c-1.199-.188-1.676-1.632-.876-2.498l.094-.093 2.797-2.563zM11.773 13.5L8.569 18h3.111l-6.308 5.097c-.161.13-.373-.04-.315-.213l.026-.052 2.26-3.337H4.95L8.277 13.5h3.497zm5.082-1.731a.15.15 0 01.248.083v.05l-.652 4.167a1.626 1.626 0 01-1.858 1.355c-1.3-.203-1.817-1.771-.946-2.708l.098-.098 3.11-2.85zM13.523.565a7.596 7.596 0 017.15 5.019 5.805 5.805 0 013.089 5.127c0 3.118-2.461 5.668-5.53 5.785l-.22.004h-.329l.03-.114.024-.116.652-4.166a1.45 1.45 0 00-2.29-1.392l-.12.098-1.518 1.39h-6.95L5.14 16.477a5.27 5.27 0 01-4.877-5.26 5.299 5.299 0 012.667-4.598c.14-2.49 2.196-4.472 4.704-4.472.37 0 .737.045 1.1.134a7.558 7.558 0 014.79-1.715z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M13.998 18.465a.173.173 0 01.288.102l-.001.052-.587 3.748a1.502 1.502 0 01-1.716 1.252c-1.199-.188-1.676-1.632-.876-2.498l.094-.093 2.798-2.563zM11.761 13.5L8.557 18h3.111L5.36 23.098c-.16.13-.373-.04-.315-.213l.027-.052 2.26-3.337H4.939L8.264 13.5h3.497zm5.082-1.731a.15.15 0 01.248.083v.05l-.651 4.167a1.626 1.626 0 01-1.859 1.355c-1.3-.203-1.817-1.771-.946-2.708l.099-.098 3.109-2.85zM13.511.565a7.596 7.596 0 017.15 5.019 5.805 5.805 0 013.089 5.128c0 3.118-2.46 5.667-5.53 5.784l-.22.005h-.127l.026-.1.023-.099.205-1.308c2.284-.069 4.123-1.961 4.123-4.282a4.3 4.3 0 00-2.314-3.813l-.195-.095-.303-.138-.101-.318c-.816-2.561-3.157-4.283-5.825-4.283-1.42 0-2.79.5-3.888 1.415l-.216.188-.328.301-.354-.122c-.34-.115-.66-.2-1.105-.2a3.22 3.22 0 00-3.034 2.176 3.259 3.259 0 00-.176 1.154l.014.307.017.267-.398.179a3.8 3.8 0 00-.807.471 3.798 3.798 0 00-1.487 3.014c0 2.022 1.579 3.678 3.557 3.78L5.5 15h.218l-.811 1.464C2.291 16.166.25 13.927.25 11.216a5.299 5.299 0 012.667-4.598c.14-2.49 2.197-4.472 4.705-4.472.369 0 .736.045 1.1.134a7.558 7.558 0 014.79-1.715z", "fill-rule": "nonzero" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss$1; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-weather-thunder-rain",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

const iconCss = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

class WeatherThunderSnow {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (hAsync(Host$1, null, hAsync("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && hAsync("title", null, this.accessibilityTitle), hAsync("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (hAsync("g", null, hAsync("path", { d: "M11.262 13.5L8.057 18h3.112L4.86 23.098c-.16.13-.373-.04-.314-.213l.026-.052 2.26-3.337H4.44L7.766 13.5h3.496zm4.589-.223l1.299.75-.85 1.474H18v1.495h-1.703l.853 1.478-1.299.75-.85-1.474-.851 1.474-1.299-.75.853-1.479H12V15.5h1.701l-.85-1.473 1.299-.75.85 1.474.851-1.473zM13.514.566a7.596 7.596 0 017.15 5.019 5.805 5.805 0 013.089 5.127c0 2.66-1.792 4.9-4.223 5.576l-.23.059v-2.002a1 1 0 00-.404-.804l-.1-.064-3.303-1.887a1 1 0 00-.868-.06l-.118.057-1.007.566-.085.049H7l-2.343 4.221a5.275 5.275 0 01-4.404-5.207A5.299 5.299 0 012.92 6.618c.14-2.489 2.197-4.471 4.705-4.471.369 0 .736.045 1.1.134a7.558 7.558 0 014.79-1.715z", "fill-rule": "evenodd" }))) : (hAsync("g", null, hAsync("path", { d: "M11.262 13.5H7.765l-3.326 5.995h2.393l-2.26 3.338c-.128.189.111.408.288.265L11.168 18H8.057l3.205-4.5zm4.588-.223l1.3.75-.851 1.474H18v1.495h-1.704l.854 1.478-1.3.75L15 17.75l-.85 1.474-1.3-.75.854-1.479H12V15.5h1.701l-.85-1.473 1.298-.75.851 1.474.85-1.473zM13.512.566a7.596 7.596 0 017.149 5.019 5.804 5.804 0 013.089 5.127 5.789 5.789 0 01-4.023 5.515l-.227.067v-1.574a4.292 4.292 0 002.75-4.008 4.3 4.3 0 00-2.314-3.813l-.195-.095-.303-.138-.101-.317c-.816-2.563-3.157-4.284-5.825-4.284-1.42 0-2.79.5-3.888 1.415l-.216.188-.328.301-.422-.146a3.178 3.178 0 00-1.036-.176 3.22 3.22 0 00-3.007 2.1 3.327 3.327 0 00-.2 1.37l.027.435-.466.209a3.791 3.791 0 00-2.226 3.456 3.775 3.775 0 003.283 3.75l.193.02-.78 1.407A5.285 5.285 0 01.25 11.215a5.299 5.299 0 012.667-4.598c.14-2.489 2.197-4.471 4.705-4.471.369 0 .736.045 1.1.134a7.558 7.558 0 014.79-1.715z", "fill-rule": "nonzero" })))))));
  }
  get hostElement() { return getElement$1(this); }
  static get style() { return iconCss; }
  static get cmpMeta() { return {
    "$flags$": 0,
    "$tagName$": "scale-icon-weather-thunder-snow",
    "$members$": {
      "size": [514],
      "fill": [1],
      "color": [1],
      "selected": [516],
      "decorative": [4],
      "accessibilityTitle": [1, "accessibility-title"]
    },
    "$listeners$": undefined,
    "$lazyBundleId$": "-",
    "$attrsToReflect$": [["size", "size"], ["selected", "selected"]]
  }; }
}

registerComponents([
  Accordion,
  ActionAdd,
  ActionAddCard,
  ActionAutoLogin,
  ActionBackspace,
  ActionChangelog,
  ActionCircleAdd,
  ActionCircleClose,
  ActionClose,
  ActionCopyPaste,
  ActionCutPaste,
  ActionDisabledMicrophone,
  ActionDownload,
  ActionDragAndDrop,
  ActionEdit,
  ActionFastForward,
  ActionFavorite,
  ActionFilter,
  ActionForward,
  ActionFullScreen,
  ActionHidePassword,
  ActionIndeterminate,
  ActionInstall,
  ActionLink,
  ActionLogout,
  ActionLoop,
  ActionMenu,
  ActionMicrophone,
  ActionMinimizeScreen,
  ActionMore,
  ActionMove,
  ActionMute,
  ActionNotification,
  ActionPause,
  ActionPin,
  ActionPlay,
  ActionPopUpWindow,
  ActionPrint,
  ActionRandom,
  ActionRefresh,
  ActionRemove,
  ActionRestart,
  ActionSearch,
  ActionShoppingCart,
  ActionShowPassword,
  ActionSort,
  ActionSoundOn,
  ActionStreamOn,
  ActionSuccess,
  ActionThumbsDown,
  ActionThumbsUp,
  ActionTilesAdd,
  ActionUpload,
  ActionVolumeDown,
  ActionVolumeUp,
  ActionZoomIn,
  ActionZoomOut,
  Alert,
  AlertCompliance,
  AlertError,
  AlertHelp,
  AlertImprintDataprivacy,
  AlertInformation,
  AlertLegal,
  AlertSecurity,
  AlertWarning,
  AppFooter,
  AppNavigationUserMenu,
  Breadcrumb,
  Button,
  Callout,
  Card,
  Carousel,
  ChartStackCard,
  Checkbox,
  CheckboxGroup,
  Collapsible,
  CommunicationCallIncoming,
  CommunicationCallOutgoing,
  CommunicationChat,
  CommunicationEmail,
  CommunicationEndCall,
  CommunicationFeedback,
  CommunicationMessage,
  CommunicationPhoneNumber,
  CommunicationRecipient,
  CommunicationVoiceMessage,
  ContentAchievement,
  ContentApplications,
  ContentBiometric,
  ContentBookmark,
  ContentCalendar,
  ContentClipboard,
  ContentClock,
  ContentCreditCard,
  ContentDelivery,
  ContentDigitalBanking,
  ContentDigitalMedia,
  ContentDraftFile,
  ContentESim,
  ContentEu,
  ContentFeatures,
  ContentFlexibleTariffs,
  ContentHeart,
  ContentHistory,
  ContentInternational,
  ContentInternationalSms,
  ContentInterview,
  ContentKey,
  ContentLock,
  ContentMediaFolder,
  ContentMoneyAt,
  ContentMusic,
  ContentNews,
  ContentPrepaidActivate,
  ContentPriceTag,
  ContentRss,
  ContentShop,
  ContentSignal,
  ContentSimCard,
  ContentSmile,
  ContentTariffs,
  ContentTransport,
  ContentUnlock,
  ContentVoucher,
  ContentWallet,
  DataGrid,
  DatePicker,
  DeviceAddDevice,
  DeviceCamera,
  DeviceChangeCamera,
  DeviceComputer,
  DeviceDevicePhone,
  DeviceDeviceRouter,
  DeviceDeviceTv,
  DeviceDeviceWatch,
  DeviceFixedLineServices,
  DeviceMediaReceiver,
  DeviceMobileDevicesCombination,
  DeviceMobileEquipment,
  DeviceMobilePhoneInsurance,
  DeviceMobileServices,
  DeviceNoCamera,
  DevicePhotoCamera,
  DeviceRemoteController,
  DeviceReplacementMobilephone,
  DeviceScreenRotate,
  DeviceSmartSpeaker,
  DeviceTvAndMobile,
  Divider,
  Dropdown,
  DuetDatePicker,
  Header,
  HomeHome,
  HomeInternetAtHome,
  HomeIot,
  HomeNoWifi,
  HomeSmarthome,
  HomeWifi,
  Icon,
  Input,
  Link,
  List,
  ListItem,
  LoadingSpinner,
  Logo$1,
  Logo,
  LogoSvg,
  MainNavigationMobile,
  MegaMenu,
  MenuFlyout,
  MenuFlyoutDivider,
  MenuFlyoutItem,
  MenuFlyoutList,
  Modal,
  NavIcon,
  NavMain,
  NavSegment,
  NavigationCircleTopUp,
  NavigationCollapseDown,
  NavigationCollapseUp,
  NavigationExternalLink,
  NavigationInternalLink,
  NavigationLeft,
  NavigationLocation,
  NavigationMyLocation,
  NavigationRight,
  NavigationSectorMobile,
  NavigationStart,
  NavigationTopUp,
  NotificationBadge,
  NotificationMessage,
  NotificationMessageSvg,
  Pagination,
  ProcessOrderStatus,
  ProcessProcessing,
  ProgressBar,
  RadioButton,
  RadioButtonGroup,
  RatingStars,
  ServiceDevicesService,
  ServiceMaintanance,
  ServiceServices,
  ServiceSettings,
  ServiceSupport,
  Shell,
  SidebarNav,
  SidebarNavCollapsible,
  SidebarNavItem,
  Slider,
  SsrSlotFix,
  Switch,
  TProductMagentaCloud,
  TProductMagentaTv,
  TProductMagentaone,
  TProductMeasureInternetSpeed,
  TProductSeamlessConnectivity,
  TProductTelekomShopB,
  TProductUsage,
  TabHeader,
  TabNav,
  TabPanel,
  Table,
  Tag,
  TextField,
  Textarea,
  Toast,
  ToggleButton,
  ToggleGroup,
  Tooltip,
  UserFileAnalytics,
  UserFileAttachment,
  UserFileAudioFile,
  UserFileBilling,
  UserFileBussinesUsers,
  UserFileCommunities,
  UserFileContacts,
  UserFileContracts,
  UserFileFamilies,
  UserFileHandshake,
  UserFileIdCard,
  UserFileImageFile,
  UserFileLogout,
  UserFilePdfFile,
  UserFileSwitchUsers,
  UserFileUser,
  UserFileVideos,
  WeatherCloudy,
  WeatherCloudyRain,
  WeatherCloudySleet,
  WeatherCloudySnow,
  WeatherCloudyThunderRain,
  WeatherCloudyThunderSnow,
  WeatherHeavySleet,
  WeatherHeavySnow,
  WeatherMoonClear,
  WeatherMoonCloudyA,
  WeatherMoonCloudyB,
  WeatherMoonRain,
  WeatherMoonSleet,
  WeatherMoonSnow,
  WeatherMoonThunderRain,
  WeatherMoonThunderSnow,
  WeatherOvercast,
  WeatherRain,
  WeatherSunny,
  WeatherThunderRain,
  WeatherThunderSnow,
]);

exports.hydrateApp = hydrateApp;


  /*hydrateAppClosure end*/
  hydrateApp(window, $stencilHydrateOpts, $stencilHydrateResults, $stencilAfterHydrate, $stencilHydrateResolve);
  }

  hydrateAppClosure($stencilWindow);
}

function createWindowFromHtml(e, t) {
 let r = templateWindows.get(t);
 return null == r && (r = new MockWindow(e), templateWindows.set(t, r)), cloneWindow(r);
}

function normalizeHydrateOptions(e) {
 const t = Object.assign({
  serializeToHtml: !1,
  destroyWindow: !1,
  destroyDocument: !1
 }, e || {});
 return "boolean" != typeof t.clientHydrateAnnotations && (t.clientHydrateAnnotations = !0), 
 "boolean" != typeof t.constrainTimeouts && (t.constrainTimeouts = !0), "number" != typeof t.maxHydrateCount && (t.maxHydrateCount = 300), 
 "boolean" != typeof t.runtimeLogging && (t.runtimeLogging = !1), "number" != typeof t.timeout && (t.timeout = 15e3), 
 Array.isArray(t.excludeComponents) ? t.excludeComponents = t.excludeComponents.filter(filterValidTags).map(mapValidTags) : t.excludeComponents = [], 
 Array.isArray(t.staticComponents) ? t.staticComponents = t.staticComponents.filter(filterValidTags).map(mapValidTags) : t.staticComponents = [], 
 t;
}

function filterValidTags(e) {
 return "string" == typeof e && e.includes("-");
}

function mapValidTags(e) {
 return e.trim().toLowerCase();
}

function generateHydrateResults(e) {
 "string" != typeof e.url && (e.url = "https://hydrate.stenciljs.com/"), "string" != typeof e.buildId && (e.buildId = createHydrateBuildId());
 const t = {
  buildId: e.buildId,
  diagnostics: [],
  url: e.url,
  host: null,
  hostname: null,
  href: null,
  pathname: null,
  port: null,
  search: null,
  hash: null,
  html: null,
  httpStatus: null,
  hydratedCount: 0,
  anchors: [],
  components: [],
  imgs: [],
  scripts: [],
  staticData: [],
  styles: [],
  title: null
 };
 try {
  const r = new URL(e.url, "https://hydrate.stenciljs.com/");
  t.url = r.href, t.host = r.host, t.hostname = r.hostname, t.href = r.href, t.port = r.port, 
  t.pathname = r.pathname, t.search = r.search, t.hash = r.hash;
 } catch (e) {
  renderCatchError(t, e);
 }
 return t;
}

function renderBuildDiagnostic(e, t, r, s) {
 const n = {
  level: t,
  type: "build",
  header: r,
  messageText: s,
  relFilePath: null,
  absFilePath: null,
  lines: []
 };
 return e.pathname ? "/" !== e.pathname && (n.header += ": " + e.pathname) : e.url && (n.header += ": " + e.url), 
 e.diagnostics.push(n), n;
}

function renderBuildError(e, t) {
 return renderBuildDiagnostic(e, "error", "Hydrate Error", t);
}

function renderCatchError(e, t) {
 const r = renderBuildError(e, null);
 return null != t && (null != t.stack ? r.messageText = t.stack.toString() : null != t.message ? r.messageText = t.message.toString() : r.messageText = t.toString()), 
 r;
}

function runtimeLog(e, t, r) {
 global.console[t].apply(global.console, [ `[ ${e}  ${t} ] `, ...r ]);
}

function inspectElement(e, t, r) {
 const s = t.children;
 for (let t = 0, n = s.length; t < n; t++) {
  const n = s[t], o = n.nodeName.toLowerCase();
  if (o.includes("-")) {
   const t = e.components.find((e => e.tag === o));
   null != t && (t.count++, r > t.depth && (t.depth = r));
  } else switch (o) {
  case "a":
   const t = collectAttributes(n);
   t.href = n.href, "string" == typeof t.href && (e.anchors.some((e => e.href === t.href)) || e.anchors.push(t));
   break;

  case "img":
   const r = collectAttributes(n);
   r.src = n.src, "string" == typeof r.src && (e.imgs.some((e => e.src === r.src)) || e.imgs.push(r));
   break;

  case "link":
   const s = collectAttributes(n);
   s.href = n.href, "string" == typeof s.rel && "stylesheet" === s.rel.toLowerCase() && "string" == typeof s.href && (e.styles.some((e => e.link === s.href)) || (delete s.rel, 
   delete s.type, e.styles.push(s)));
   break;

  case "script":
   const o = collectAttributes(n);
   if (n.hasAttribute("src")) o.src = n.src, "string" == typeof o.src && (e.scripts.some((e => e.src === o.src)) || e.scripts.push(o)); else {
    const t = n.getAttribute("data-stencil-static");
    t && e.staticData.push({
     id: t,
     type: n.getAttribute("type"),
     content: n.textContent
    });
   }
  }
  inspectElement(e, n, ++r);
 }
}

function collectAttributes(e) {
 const t = {}, r = e.attributes;
 for (let e = 0, s = r.length; e < s; e++) {
  const s = r.item(e), n = s.nodeName.toLowerCase();
  if (SKIP_ATTRS.has(n)) continue;
  const o = s.nodeValue;
  "class" === n && "" === o || (t[n] = o);
 }
 return t;
}

function patchDomImplementation(e, t) {
 let r;
 if (null != e.defaultView ? (t.destroyWindow = !0, patchWindow(e.defaultView), r = e.defaultView) : (t.destroyWindow = !0, 
 t.destroyDocument = !1, r = new MockWindow(!1)), r.document !== e && (r.document = e), 
 e.defaultView !== r && (e.defaultView = r), "function" != typeof e.documentElement.constructor.prototype.getRootNode && (e.createElement("unknown-element").constructor.prototype.getRootNode = getRootNode), 
 "function" == typeof e.createEvent) {
  const t = e.createEvent("CustomEvent").constructor;
  r.CustomEvent !== t && (r.CustomEvent = t);
 }
 try {
  e.baseURI;
 } catch (t) {
  Object.defineProperty(e, "baseURI", {
   get() {
    const t = e.querySelector("base[href]");
    return t ? new URL(t.getAttribute("href"), r.location.href).href : r.location.href;
   }
  });
 }
 return r;
}

function getRootNode(e) {
 const t = null != e && !0 === e.composed;
 let r = this;
 for (;null != r.parentNode; ) r = r.parentNode, !0 === t && null == r.parentNode && null != r.host && (r = r.host);
 return r;
}

function renderToString(e, t) {
 const r = normalizeHydrateOptions(t);
 return r.serializeToHtml = !0, new Promise((t => {
  let s;
  const n = generateHydrateResults(r);
  if (hasError(n.diagnostics)) t(n); else if ("string" == typeof e) try {
   r.destroyWindow = !0, r.destroyDocument = !0, s = new MockWindow(e), render(s, r, n, t);
  } catch (e) {
   s && s.close && s.close(), s = null, renderCatchError(n, e), t(n);
  } else if (isValidDocument(e)) try {
   r.destroyDocument = !1, s = patchDomImplementation(e, r), render(s, r, n, t);
  } catch (e) {
   s && s.close && s.close(), s = null, renderCatchError(n, e), t(n);
  } else renderBuildError(n, 'Invalid html or document. Must be either a valid "html" string, or DOM "document".'), 
  t(n);
 }));
}

function hydrateDocument(e, t) {
 const r = normalizeHydrateOptions(t);
 return r.serializeToHtml = !1, new Promise((t => {
  let s;
  const n = generateHydrateResults(r);
  if (hasError(n.diagnostics)) t(n); else if ("string" == typeof e) try {
   r.destroyWindow = !0, r.destroyDocument = !0, s = new MockWindow(e), render(s, r, n, t);
  } catch (e) {
   s && s.close && s.close(), s = null, renderCatchError(n, e), t(n);
  } else if (isValidDocument(e)) try {
   r.destroyDocument = !1, s = patchDomImplementation(e, r), render(s, r, n, t);
  } catch (e) {
   s && s.close && s.close(), s = null, renderCatchError(n, e), t(n);
  } else renderBuildError(n, 'Invalid html or document. Must be either a valid "html" string, or DOM "document".'), 
  t(n);
 }));
}

function render(e, t, r, s) {
 if (process.__stencilErrors || (process.__stencilErrors = !0, process.on("unhandledRejection", (e => {
  console.log("unhandledRejection", e);
 }))), function n(e, t, r, s) {
  try {
   e.location.href = r.url;
  } catch (e) {
   renderCatchError(s, e);
  }
  if ("string" == typeof r.userAgent) try {
   e.navigator.userAgent = r.userAgent;
  } catch (e) {}
  if ("string" == typeof r.cookie) try {
   t.cookie = r.cookie;
  } catch (e) {}
  if ("string" == typeof r.referrer) try {
   t.referrer = r.referrer;
  } catch (e) {}
  if ("string" == typeof r.direction) try {
   t.documentElement.setAttribute("dir", r.direction);
  } catch (e) {}
  if ("string" == typeof r.language) try {
   t.documentElement.setAttribute("lang", r.language);
  } catch (e) {}
  if ("string" == typeof r.buildId) try {
   t.documentElement.setAttribute("data-stencil-build", r.buildId);
  } catch (e) {}
  try {
   e.customElements = null;
  } catch (e) {}
  return r.constrainTimeouts && constrainTimeouts(e), function n(e, t, r) {
   try {
    const s = e.location.pathname;
    e.console.error = (...e) => {
     const n = e.reduce(((e, t) => {
      if (t) {
       if (null != t.stack) return e + " " + String(t.stack);
       if (null != t.message) return e + " " + String(t.message);
      }
      return String(t);
     }), "").trim();
     "" !== n && (renderCatchError(r, n), t.runtimeLogging && runtimeLog(s, "error", [ n ]));
    }, e.console.debug = (...e) => {
     renderBuildDiagnostic(r, "debug", "Hydrate Debug", [ ...e ].join(", ")), t.runtimeLogging && runtimeLog(s, "debug", e);
    }, t.runtimeLogging && [ "log", "warn", "assert", "info", "trace" ].forEach((t => {
     e.console[t] = (...e) => {
      runtimeLog(s, t, e);
     };
    }));
   } catch (e) {
    renderCatchError(r, e);
   }
  }(e, r, s), e;
 }(e, e.document, t, r), "function" == typeof t.beforeHydrate) try {
  const n = t.beforeHydrate(e.document);
  isPromise(n) ? n.then((() => {
   hydrateFactory(e, t, r, afterHydrate, s);
  })) : hydrateFactory(e, t, r, afterHydrate, s);
 } catch (n) {
  renderCatchError(r, n), finalizeHydrate(e, e.document, t, r, s);
 } else hydrateFactory(e, t, r, afterHydrate, s);
}

function afterHydrate(e, t, r, s) {
 if ("function" == typeof t.afterHydrate) try {
  const n = t.afterHydrate(e.document);
  isPromise(n) ? n.then((() => {
   finalizeHydrate(e, e.document, t, r, s);
  })) : finalizeHydrate(e, e.document, t, r, s);
 } catch (n) {
  renderCatchError(r, n), finalizeHydrate(e, e.document, t, r, s);
 } else finalizeHydrate(e, e.document, t, r, s);
}

function finalizeHydrate(e, t, r, s, n) {
 try {
  if (inspectElement(s, t.documentElement, 0), !1 !== r.removeUnusedStyles) try {
   ((e, t) => {
    try {
     const r = e.head.querySelectorAll("style[data-styles]"), s = r.length;
     if (s > 0) {
      const n = (e => {
       const t = {
        attrs: new Set,
        classNames: new Set,
        ids: new Set,
        tags: new Set
       };
       return collectUsedSelectors(t, e), t;
      })(e.documentElement);
      for (let e = 0; e < s; e++) removeUnusedStyleText(n, t, r[e]);
     }
    } catch (e) {
     ((e, t, r) => {
      const s = {
       level: "error",
       type: "build",
       header: "Build Error",
       messageText: "build error",
       relFilePath: null,
       absFilePath: null,
       lines: []
      };
      null != t && (null != t.stack ? s.messageText = t.stack.toString() : null != t.message ? s.messageText = t.message.toString() : s.messageText = t.toString()), 
      null == e || shouldIgnoreError(s.messageText) || e.push(s);
     })(t, e);
    }
   })(t, s.diagnostics);
  } catch (e) {
   renderCatchError(s, e);
  }
  if ("string" == typeof r.title) try {
   t.title = r.title;
  } catch (e) {
   renderCatchError(s, e);
  }
  s.title = t.title, r.removeScripts && removeScripts(t.documentElement);
  try {
   ((e, t) => {
    let r = e.head.querySelector('link[rel="canonical"]');
    "string" == typeof t ? (null == r && (r = e.createElement("link"), r.setAttribute("rel", "canonical"), 
    e.head.appendChild(r)), r.setAttribute("href", t)) : null != r && (r.getAttribute("href") || r.parentNode.removeChild(r));
   })(t, r.canonicalUrl);
  } catch (e) {
   renderCatchError(s, e);
  }
  try {
   (e => {
    const t = e.head;
    let r = t.querySelector("meta[charset]");
    null == r ? (r = e.createElement("meta"), r.setAttribute("charset", "utf-8")) : r.remove(), 
    t.insertBefore(r, t.firstChild);
   })(t);
  } catch (e) {}
  hasError(s.diagnostics) || (s.httpStatus = 200);
  try {
   const e = t.head.querySelector('meta[http-equiv="status"]');
   if (null != e) {
    const t = e.getAttribute("content");
    t && t.length > 0 && (s.httpStatus = parseInt(t, 10));
   }
  } catch (e) {}
  r.clientHydrateAnnotations && t.documentElement.classList.add("hydrated"), r.serializeToHtml && (s.html = serializeDocumentToString(t, r));
 } catch (e) {
  renderCatchError(s, e);
 }
 if (r.destroyWindow) try {
  r.destroyDocument || (e.document = null, t.defaultView = null), e.close && e.close();
 } catch (e) {
  renderCatchError(s, e);
 }
 n(s);
}

function serializeDocumentToString(e, t) {
 return serializeNodeToHtml(e, {
  approximateLineWidth: t.approximateLineWidth,
  outerHtml: !1,
  prettyHtml: t.prettyHtml,
  removeAttributeQuotes: t.removeAttributeQuotes,
  removeBooleanAttributeQuotes: t.removeBooleanAttributeQuotes,
  removeEmptyAttributes: t.removeEmptyAttributes,
  removeHtmlComments: t.removeHtmlComments,
  serializeShadowRoot: !1
 });
}

function isValidDocument(e) {
 return null != e && 9 === e.nodeType && null != e.documentElement && 1 === e.documentElement.nodeType && null != e.body && 1 === e.body.nodeType;
}

function removeScripts(e) {
 const t = e.children;
 for (let e = t.length - 1; e >= 0; e--) {
  const r = t[e];
  removeScripts(r), ("SCRIPT" === r.nodeName || "LINK" === r.nodeName && "modulepreload" === r.getAttribute("rel")) && r.remove();
 }
}

const templateWindows = new Map, createHydrateBuildId = () => {
 let e = "abcdefghijklmnopqrstuvwxyz", t = "";
 for (;t.length < 8; ) t += e[Math.floor(Math.random() * e.length)], 1 === t.length && (e += "0123456789");
 return t;
}, isPromise = e => !!e && ("object" == typeof e || "function" == typeof e) && "function" == typeof e.then, hasError = e => null != e && 0 !== e.length && e.some((e => "error" === e.level && "runtime" !== e.type)), shouldIgnoreError = e => e === TASK_CANCELED_MSG, TASK_CANCELED_MSG = "task canceled", SKIP_ATTRS = new Set([ "s-id", "c-id" ]), collectUsedSelectors = (e, t) => {
 if (null != t && 1 === t.nodeType) {
  const r = t.children, s = t.nodeName.toLowerCase();
  e.tags.add(s);
  const n = t.attributes;
  for (let r = 0, s = n.length; r < s; r++) {
   const s = n.item(r), o = s.name.toLowerCase();
   if (e.attrs.add(o), "class" === o) {
    const r = t.classList;
    for (let t = 0, s = r.length; t < s; t++) e.classNames.add(r.item(t));
   } else "id" === o && e.ids.add(s.value);
  }
  if (r) for (let t = 0, s = r.length; t < s; t++) collectUsedSelectors(e, r[t]);
 }
}, parseCss = (e, t) => {
 let r = 1, s = 1;
 const n = [], o = e => {
  const t = e.match(/\n/g);
  t && (r += t.length);
  const n = e.lastIndexOf("\n");
  s = ~n ? e.length - n : s + e.length;
 }, i = () => {
  const e = {
   line: r,
   column: s
  };
  return t => (t.position = new z(e), m(), t);
 }, a = o => {
  const i = e.split("\n"), a = {
   level: "error",
   type: "css",
   language: "css",
   header: "CSS Parse",
   messageText: o,
   absFilePath: t,
   lines: [ {
    lineIndex: r - 1,
    lineNumber: r,
    errorCharStart: s,
    text: e[r - 1]
   } ]
  };
  if (r > 1) {
   const t = {
    lineIndex: r - 1,
    lineNumber: r - 1,
    text: e[r - 2],
    errorCharStart: -1,
    errorLength: -1
   };
   a.lines.unshift(t);
  }
  if (r + 2 < i.length) {
   const e = {
    lineIndex: r,
    lineNumber: r + 1,
    text: i[r],
    errorCharStart: -1,
    errorLength: -1
   };
   a.lines.push(e);
  }
  return n.push(a), null;
 }, l = () => u(/^{\s*/), c = () => u(/^}/), u = t => {
  const r = t.exec(e);
  if (!r) return;
  const s = r[0];
  return o(s), e = e.slice(s.length), r;
 }, d = () => {
  let t;
  const r = [];
  for (m(), h(r); e.length && "}" !== e.charAt(0) && (t = w() || A()); ) !1 !== t && (r.push(t), 
  h(r));
  return r;
 }, m = () => u(/^\s*/), h = e => {
  let t;
  for (e = e || []; t = p(); ) !1 !== t && e.push(t);
  return e;
 }, p = () => {
  const t = i();
  if ("/" !== e.charAt(0) || "*" !== e.charAt(1)) return null;
  let r = 2;
  for (;"" !== e.charAt(r) && ("*" !== e.charAt(r) || "/" !== e.charAt(r + 1)); ) ++r;
  if (r += 2, "" === e.charAt(r - 1)) return a("End of comment missing");
  const n = e.slice(2, r - 2);
  return s += 2, o(n), e = e.slice(r), s += 2, t({
   type: 1,
   comment: n
  });
 }, f = () => {
  const e = u(/^([^{]+)/);
  return e ? trim(e[0]).replace(/\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*\/+/g, "").replace(/"(?:\\"|[^"])*"|'(?:\\'|[^'])*'/g, (function(e) {
   return e.replace(/,/g, "‌");
  })).split(/\s*(?![^(]*\)),\s*/).map((function(e) {
   return e.replace(/\u200C/g, ",");
  })) : null;
 }, g = () => {
  const e = i();
  let t = u(/^(\*?[-#\/\*\\\w]+(\[[0-9a-z_-]+\])?)\s*/);
  if (!t) return null;
  if (t = trim(t[0]), !u(/^:\s*/)) return a("property missing ':'");
  const r = u(/^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^\)]*?\)|[^};])+)/), s = e({
   type: 4,
   property: t.replace(commentre, ""),
   value: r ? trim(r[0]).replace(commentre, "") : ""
  });
  return u(/^[;\s]*/), s;
 }, y = () => {
  const e = [];
  if (!l()) return a("missing '{'");
  let t;
  for (h(e); t = g(); ) !1 !== t && (e.push(t), h(e));
  return c() ? e : a("missing '}'");
 }, C = () => {
  let e;
  const t = [], r = i();
  for (;e = u(/^((\d+\.\d+|\.\d+|\d+)%?|[a-z]+)\s*/); ) t.push(e[1]), u(/^,\s*/);
  return t.length ? r({
   type: 9,
   values: t,
   declarations: y()
  }) : null;
 }, S = (e, t) => {
  const r = new RegExp("^@" + e + "\\s*([^;]+);");
  return () => {
   const s = i(), n = u(r);
   if (!n) return null;
   const o = {
    type: t
   };
   return o[e] = n[1].trim(), s(o);
  };
 }, E = S("import", 7), b = S("charset", 0), T = S("namespace", 11), w = () => "@" !== e[0] ? null : (() => {
  const e = i();
  let t = u(/^@([-\w]+)?keyframes\s*/);
  if (!t) return null;
  const r = t[1];
  if (t = u(/^([-\w]+)\s*/), !t) return a("@keyframes missing name");
  const s = t[1];
  if (!l()) return a("@keyframes missing '{'");
  let n, o = h();
  for (;n = C(); ) o.push(n), o = o.concat(h());
  return c() ? e({
   type: 8,
   name: s,
   vendor: r,
   keyframes: o
  }) : a("@keyframes missing '}'");
 })() || (() => {
  const e = i(), t = u(/^@media *([^{]+)/);
  if (!t) return null;
  const r = trim(t[1]);
  if (!l()) return a("@media missing '{'");
  const s = h().concat(d());
  return c() ? e({
   type: 10,
   media: r,
   rules: s
  }) : a("@media missing '}'");
 })() || (() => {
  const e = i(), t = u(/^@custom-media\s+(--[^\s]+)\s*([^{;]+);/);
  return t ? e({
   type: 2,
   name: trim(t[1]),
   media: trim(t[2])
  }) : null;
 })() || (() => {
  const e = i(), t = u(/^@supports *([^{]+)/);
  if (!t) return null;
  const r = trim(t[1]);
  if (!l()) return a("@supports missing '{'");
  const s = h().concat(d());
  return c() ? e({
   type: 15,
   supports: r,
   rules: s
  }) : a("@supports missing '}'");
 })() || E() || b() || T() || (() => {
  const e = i(), t = u(/^@([-\w]+)?document *([^{]+)/);
  if (!t) return null;
  const r = trim(t[1]), s = trim(t[2]);
  if (!l()) return a("@document missing '{'");
  const n = h().concat(d());
  return c() ? e({
   type: 3,
   document: s,
   vendor: r,
   rules: n
  }) : a("@document missing '}'");
 })() || (() => {
  const e = i();
  if (!u(/^@page */)) return null;
  const t = f() || [];
  if (!l()) return a("@page missing '{'");
  let r, s = h();
  for (;r = g(); ) s.push(r), s = s.concat(h());
  return c() ? e({
   type: 12,
   selectors: t,
   declarations: s
  }) : a("@page missing '}'");
 })() || (() => {
  const e = i();
  if (!u(/^@host\s*/)) return null;
  if (!l()) return a("@host missing '{'");
  const t = h().concat(d());
  return c() ? e({
   type: 6,
   rules: t
  }) : a("@host missing '}'");
 })() || (() => {
  const e = i();
  if (!u(/^@font-face\s*/)) return null;
  if (!l()) return a("@font-face missing '{'");
  let t, r = h();
  for (;t = g(); ) r.push(t), r = r.concat(h());
  return c() ? e({
   type: 5,
   declarations: r
  }) : a("@font-face missing '}'");
 })(), A = () => {
  const e = i(), t = f();
  return t ? (h(), e({
   type: 13,
   selectors: t,
   declarations: y()
  })) : a("selector missing");
 };
 class z {
  constructor(e) {
   this.start = e, this.end = {
    line: r,
    column: s
   }, this.source = t;
  }
 }
 return z.prototype.content = e, {
  diagnostics: n,
  ...addParent((() => {
   const e = d();
   return {
    type: 14,
    stylesheet: {
     source: t,
     rules: e
    }
   };
  })())
 };
}, trim = e => e ? e.trim() : "", addParent = (e, t) => {
 const r = e && "string" == typeof e.type, s = r ? e : t;
 for (const t in e) {
  const r = e[t];
  Array.isArray(r) ? r.forEach((function(e) {
   addParent(e, s);
  })) : r && "object" == typeof r && addParent(r, s);
 }
 return r && Object.defineProperty(e, "parent", {
  configurable: !0,
  writable: !0,
  enumerable: !1,
  value: t || null
 }), e;
}, commentre = /\/\*[^*]*\*+([^/*][^*]*\*+)*\//g, getCssSelectors = e => {
 SELECTORS.all.length = SELECTORS.tags.length = SELECTORS.classNames.length = SELECTORS.ids.length = SELECTORS.attrs.length = 0;
 const t = (e = e.replace(/\./g, " .").replace(/\#/g, " #").replace(/\[/g, " [").replace(/\>/g, " > ").replace(/\+/g, " + ").replace(/\~/g, " ~ ").replace(/\*/g, " * ").replace(/\:not\((.*?)\)/g, " ")).split(" ");
 for (let e = 0, r = t.length; e < r; e++) t[e] = t[e].split(":")[0], 0 !== t[e].length && ("." === t[e].charAt(0) ? SELECTORS.classNames.push(t[e].substr(1)) : "#" === t[e].charAt(0) ? SELECTORS.ids.push(t[e].substr(1)) : "[" === t[e].charAt(0) ? (t[e] = t[e].substr(1).split("=")[0].split("]")[0].trim(), 
 SELECTORS.attrs.push(t[e].toLowerCase())) : /[a-z]/g.test(t[e].charAt(0)) && SELECTORS.tags.push(t[e].toLowerCase()));
 return SELECTORS.classNames = SELECTORS.classNames.sort(((e, t) => e.length < t.length ? -1 : e.length > t.length ? 1 : 0)), 
 SELECTORS;
}, SELECTORS = {
 all: [],
 tags: [],
 classNames: [],
 ids: [],
 attrs: []
}, serializeCssVisitNode = (e, t, r, s) => {
 const n = t.type;
 return 4 === n ? serializeCssDeclaration(t, r, s) : 13 === n ? serializeCssRule(e, t) : 1 === n ? "!" === t.comment[0] ? `/*${t.comment}*/` : "" : 10 === n ? serializeCssMedia(e, t) : 8 === n ? serializeCssKeyframes(e, t) : 9 === n ? serializeCssKeyframe(e, t) : 5 === n ? serializeCssFontFace(e, t) : 15 === n ? serializeCssSupports(e, t) : 7 === n ? "@import " + t.import + ";" : 0 === n ? "@charset " + t.charset + ";" : 12 === n ? serializeCssPage(e, t) : 6 === n ? "@host{" + serializeCssMapVisit(e, t.rules) + "}" : 2 === n ? "@custom-media " + t.name + " " + t.media + ";" : 3 === n ? serializeCssDocument(e, t) : 11 === n ? "@namespace " + t.namespace + ";" : "";
}, serializeCssRule = (e, t) => {
 const r = t.declarations, s = e.usedSelectors, n = t.selectors.slice();
 if (null == r || 0 === r.length) return "";
 if (s) {
  let t, r, o = !0;
  for (t = n.length - 1; t >= 0; t--) {
   const i = getCssSelectors(n[t]);
   o = !0;
   let a = i.classNames.length;
   if (a > 0 && e.hasUsedClassNames) for (r = 0; r < a; r++) if (!s.classNames.has(i.classNames[r])) {
    o = !1;
    break;
   }
   if (o && e.hasUsedTags && (a = i.tags.length, a > 0)) for (r = 0; r < a; r++) if (!s.tags.has(i.tags[r])) {
    o = !1;
    break;
   }
   if (o && e.hasUsedAttrs && (a = i.attrs.length, a > 0)) for (r = 0; r < a; r++) if (!s.attrs.has(i.attrs[r])) {
    o = !1;
    break;
   }
   if (o && e.hasUsedIds && (a = i.ids.length, a > 0)) for (r = 0; r < a; r++) if (!s.ids.has(i.ids[r])) {
    o = !1;
    break;
   }
   o || n.splice(t, 1);
  }
 }
 if (0 === n.length) return "";
 const o = [];
 let i = "";
 for (const e of t.selectors) i = removeSelectorWhitespace(e), o.includes(i) || o.push(i);
 return `${o}{${serializeCssMapVisit(e, r)}}`;
}, serializeCssDeclaration = (e, t, r) => "" === e.value ? "" : r - 1 === t ? e.property + ":" + e.value : e.property + ":" + e.value + ";", serializeCssMedia = (e, t) => {
 const r = serializeCssMapVisit(e, t.rules);
 return "" === r ? "" : "@media " + removeMediaWhitespace(t.media) + "{" + r + "}";
}, serializeCssKeyframes = (e, t) => {
 const r = serializeCssMapVisit(e, t.keyframes);
 return "" === r ? "" : "@" + (t.vendor || "") + "keyframes " + t.name + "{" + r + "}";
}, serializeCssKeyframe = (e, t) => t.values.join(",") + "{" + serializeCssMapVisit(e, t.declarations) + "}", serializeCssFontFace = (e, t) => {
 const r = serializeCssMapVisit(e, t.declarations);
 return "" === r ? "" : "@font-face{" + r + "}";
}, serializeCssSupports = (e, t) => {
 const r = serializeCssMapVisit(e, t.rules);
 return "" === r ? "" : "@supports " + t.supports + "{" + r + "}";
}, serializeCssPage = (e, t) => "@page " + t.selectors.join(", ") + "{" + serializeCssMapVisit(e, t.declarations) + "}", serializeCssDocument = (e, t) => {
 const r = serializeCssMapVisit(e, t.rules), s = "@" + (t.vendor || "") + "document " + t.document;
 return "" === r ? "" : s + "{" + r + "}";
}, serializeCssMapVisit = (e, t) => {
 let r = "";
 if (t) for (let s = 0, n = t.length; s < n; s++) r += serializeCssVisitNode(e, t[s], s, n);
 return r;
}, removeSelectorWhitespace = e => {
 let t = "", r = "", s = !1;
 for (let n = 0, o = (e = e.trim()).length; n < o; n++) if (r = e[n], "[" === r && "\\" !== t[t.length - 1] ? s = !0 : "]" === r && "\\" !== t[t.length - 1] && (s = !1), 
 !s && CSS_WS_REG.test(r)) {
  if (CSS_NEXT_CHAR_REG.test(e[n + 1])) continue;
  if (CSS_PREV_CHAR_REG.test(t[t.length - 1])) continue;
  t += " ";
 } else t += r;
 return t;
}, removeMediaWhitespace = e => {
 let t = "", r = "";
 for (let s = 0, n = (e = e.trim()).length; s < n; s++) if (r = e[s], CSS_WS_REG.test(r)) {
  if (CSS_WS_REG.test(t[t.length - 1])) continue;
  t += " ";
 } else t += r;
 return t;
}, CSS_WS_REG = /\s/, CSS_NEXT_CHAR_REG = /[>\(\)\~\,\+\s]/, CSS_PREV_CHAR_REG = /[>\(\~\,\+]/, removeUnusedStyleText = (e, t, r) => {
 try {
  const s = parseCss(r.innerHTML);
  if (t.push(...s.diagnostics), hasError(t)) return;
  try {
   r.innerHTML = ((e, t) => {
    const r = t.usedSelectors || null, s = {
     usedSelectors: r || null,
     hasUsedAttrs: !!r && r.attrs.size > 0,
     hasUsedClassNames: !!r && r.classNames.size > 0,
     hasUsedIds: !!r && r.ids.size > 0,
     hasUsedTags: !!r && r.tags.size > 0
    }, n = e.rules;
    if (!n) return "";
    const o = n.length, i = [];
    for (let e = 0; e < o; e++) i.push(serializeCssVisitNode(s, n[e], e, o));
    return i.join("");
   })(s.stylesheet, {
    usedSelectors: e
   });
  } catch (e) {
   t.push({
    level: "warn",
    type: "css",
    header: "CSS Stringify",
    messageText: e
   });
  }
 } catch (e) {
  t.push({
   level: "warn",
   type: "css",
   header: "CSS Parse",
   messageText: e
  });
 }
};

exports.createWindowFromHtml = createWindowFromHtml;
exports.hydrateDocument = hydrateDocument;
exports.renderToString = renderToString;
exports.serializeDocumentToString = serializeDocumentToString;
