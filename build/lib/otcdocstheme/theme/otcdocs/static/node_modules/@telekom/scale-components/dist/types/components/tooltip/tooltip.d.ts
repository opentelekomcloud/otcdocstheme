/**
 * @license
 * Scale https://github.com/telekom/scale
 *
 * Copyright (c) 2021 Egor Kirpichev and contributors, Deutsche Telekom AG
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
import { EventEmitter } from '../../stencil-public-runtime';
import Popover from './utilities/popover';
export declare class Tooltip {
  componentId: string;
  isVisible: boolean;
  popover: Popover;
  tooltipPositioner: HTMLElement;
  target: HTMLElement;
  tooltip: any;
  host: HTMLElement;
  /** (optional) The content of the Tooltip supporting Text only */
  content: string;
  /** (optional) Position of the Tooltip on the Object */
  placement: 'top' | 'top-start' | 'top-end' | 'right' | 'right-start' | 'right-end' | 'bottom' | 'bottom-start' | 'bottom-end' | 'left' | 'left-start' | 'left-end';
  /** (optional) Disable Tooltip */
  disabled: boolean;
  /** (optional) Distance of the Tooltip from the Target Object (related to the `placement`) */
  distance: number;
  /** (optional) Set the Tooltip to open per default (will still be closed on closing Events) */
  open: boolean;
  /** (optional) skidding moves the tooltip of the element in dependence of its `placement` to the element either
   * on an x-axis (at `placement` top/down) or on a y-axis (for output `placement` left/right)
   */
  skidding: number;
  /** (optional) Set custom trigger Event selection */
  trigger: string;
  /** (optional) Switching the flip option of the tooltip on and off */
  flip: boolean;
  /** (optional) Switching the preventOverflow option of the tooltip on and off */
  preventOverflow: boolean;
  mouseOverTooltip: boolean;
  tooltipBeforeShow: EventEmitter;
  tooltipShow: EventEmitter;
  tooltipBeforeHide: EventEmitter;
  tooltipHide: EventEmitter;
  handleOpenChange(): void;
  connectedCallback(): void;
  componentDidLoad(): void;
  componentDidUpdate(): void;
  disconnectedCallback(): void;
  showTooltip(): Promise<void>;
  hideTooltip(): Promise<void>;
  getTarget(): HTMLElement;
  handleBlur(): void;
  handleClick(): void;
  handleFocus(): void;
  handleKeyDown(event: KeyboardEvent): void;
  handleMouseOver(): void;
  handleTooltipMouseOver(): void;
  handleMouseOut(): void;
  handleSlotChange(): void;
  hasTrigger(triggerType: string): boolean;
  syncPopoverOptions(): void;
  render(): any;
}
