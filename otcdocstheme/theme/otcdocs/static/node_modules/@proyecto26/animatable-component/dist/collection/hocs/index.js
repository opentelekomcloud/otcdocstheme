var __rest = (this && this.__rest) || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
    t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
import { h } from '@stencil/core';
/**
 * HOC to wrap components with Animatable component
 * @param WrappedComponent - Component to be animated with Animatable component
 */
export function createAnimatableComponent(WrappedComponent) {
  return (props) => {
    const { ref, animation, keyFrames, keyFramesData, options, optionsData, animateId, delay, endDelay, duration, direction, composite, easing, fill, iterations, iterationStart, iterationComposite, autoPlay, fromClassName, toClassName, currentTime, startTime, playbackRate, onStart, onFinish, onCancel } = props, rest = __rest(props, ["ref", "animation", "keyFrames", "keyFramesData", "options", "optionsData", "animateId", "delay", "endDelay", "duration", "direction", "composite", "easing", "fill", "iterations", "iterationStart", "iterationComposite", "autoPlay", "fromClassName", "toClassName", "currentTime", "startTime", "playbackRate", "onStart", "onFinish", "onCancel"]);
    return h("animatable-component", { ref: ref, animation: animation, keyFrames: keyFrames, keyFramesData: keyFramesData, options: options, optionsData: optionsData, animateId: animateId, delay: delay, endDelay: endDelay, duration: duration, direction: direction, composite: composite, easing: easing, fill: fill, iterations: iterations, iterationStart: iterationStart, iterationComposite: iterationComposite, autoPlay: autoPlay, fromClassName: fromClassName, toClassName: toClassName, currentTime: currentTime, startTime: startTime, playbackRate: playbackRate, onStart: onStart, onFinish: onFinish, onCancel: onCancel },
      h(WrappedComponent, Object.assign({}, rest)));
  };
}
;
