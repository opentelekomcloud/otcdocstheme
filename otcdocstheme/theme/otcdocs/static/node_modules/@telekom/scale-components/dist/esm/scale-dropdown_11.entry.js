import { r as registerInstance, c as createEvent, h, a as Host, g as getElement } from './index-f2e5998d.js';
import { c as classnames } from './index-713f92a5.js';
import { e as emitEvent, a as isPseudoClassSupported } from './utils-524c237e.js';
import { s as statusNote } from './status-note-d227f142.js';

const dropdownCss = "scale-dropdown{--font-weight:var(--scl-font-weight-bold);--height:var(--scl-spacing-48);--height-small:var(--scl-spacing-40);--spacing-x:var(--scl-spacing-12);--spacing-dropdown:var(--scl-spacing-12) var(--scl-spacing-40) 0\n    calc(var(--spacing-x) - 1px);--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);--radius:var(--scl-radius-8);--border:var(--scl-spacing-1) solid var(--scl-color-text-standard);--border-error:var(--scl-spacing-2) solid var(--scl-color-background-error);--border-color-hover:var(--scl-color-primary-hover, #f90984);--border-color-focus:var(--scl-color-primary-hover, #f90984);--box-shadow-focus:0 0 0 var(--scl-spacing-2) var(--scl-color-focus);--color-disabled:var(--scl-color-background-disabled);--background-disabled:var(--scl-color-white);--transition-input:var(--transition);--font-size-input:var(--scl-font-size-16);--transition-helper-text:var(--transition);--font-size-helper-text:var(--scl-font-size-12);--line-height-helper-text:var(--scl-font-line-height-133);--color-helper-text:var(--scl-color-blue-70);--color-helper-text-error:var(--scl-color-text-error);--spacing-y-meta:var(--scl-spacing-4);--color-meta:var(--scl-color-text-standard);--height-icon:var(--scl-spacing-24);--color-icon:var(--scl-color-text-standard);--color-icon-hover:var(--scl-color-primary-hover, #f90984);--color-icon-active:var(--scl-color-primary-active, #cb0068);--transition-icon:var(--transition);--color-label:var(--scl-color-grey-60);--z-index-label:var(--scl-z-index-10);--transition-label:var(--transition);--font-size-label:var(--scl-font-size-16);--font-size-label-small:var(--scl-font-size-16);--font-weight-label:var(--scl-font-weight-medium);--font-size-label-focus:var(--scl-font-size-10);--font-weight-label-focus:var(--scl-font-weight-bold)}.dropdown{position:relative}.dropdown .input__helper-text{font-weight:var(--font-weight)}.dropdown .input__dropdown{width:100%;height:var(--height);margin:0;display:flex;outline:none;padding:var(--spacing-dropdown);z-index:1;box-sizing:border-box;transition:var(--transition-input);font-family:inherit;font-size:var(--font-size-input);border-radius:var(--radius);border:var(--border);white-space:nowrap;text-overflow:ellipsis;appearance:none;-webkit-appearance:none;background-color:var(--scl-color-background-standard)}@-moz-document url-prefix(){.dropdown .input__dropdown{text-indent:-2px}}.dropdown .input__dropdown-wrapper{position:relative}.dropdown .input__helper-text{transition:var(--transition-helper-text);padding-left:var(--spacing-x);font-size:var(--font-size-helper-text);line-height:var(--line-height-helper-text);color:var(--color-helper-text)}.dropdown .input__meta{display:flex;justify-content:space-between;margin-top:var(--spacing-y-meta);color:var(--color-meta)}.dropdown.dropdown--disabled .input__dropdown-wrapper .input__dropdown-icon{color:var(--color-disabled)}.dropdown:not(.dropdown--disabled):hover .input__dropdown-icon{color:var(--color-icon-hover)}.dropdown:not(.dropdown--disabled):active .input__dropdown-icon{color:var(--color-icon-active)}.dropdown:not(.dropdown--disabled) .input__dropdown:hover{border-color:var(--border-color-hover)}.dropdown:not(.dropdown--disabled) .input__dropdown:focus{border-color:var(--border-color-focus)}.dropdown:not(.dropdown--disabled) .input__dropdown:focus{box-shadow:var(--box-shadow-focus)}.dropdown .input__dropdown-wrapper .input__dropdown-icon{top:50%;right:var(--spacing-x);position:absolute;transform:translateY(-50%);pointer-events:none;height:var(--height-icon);color:var(--color-icon);transition:var(--transition-icon)}.input__label{top:0;left:0;color:var(--color-label);display:flex;z-index:var(--z-index-label);position:absolute;transition:var(--transition-label);pointer-events:none;font-size:var(--font-size-label);transform:translate(\n    var(--spacing-x),\n    calc((var(--scl-spacing-48) - var(--font-size-label)) / 2)\n  );font-weight:var(--font-weight-label)}.animated .input__label{transform:translate(var(--spacing-x), var(--scl-spacing-8));font-size:var(--font-size-label-focus);font-weight:var(--font-weight-label-focus);line-height:var(--scl-font-variant-label-size)}.dropdown--status-error .input__dropdown{border:var(--border-error)}.dropdown--status-error .input__helper-text{color:var(--color-helper-text-error)}.dropdown--size-small .input__dropdown{height:var(--height-small)}.dropdown--size-small .input__label{font-size:var(--font-size-label-small);transform:translate(\n    var(--spacing-x),\n    calc((var(--height-small) - var(--font-size-label-small)) / 2)\n  );font-weight:var(--font-weight-label-small)}.dropdown--size-small.animated .input__label{transform:translate(var(--spacing-x), var(--scl-spacing-4));font-size:var(--font-size-label-focus);font-weight:var(--font-weight-label-focus);line-height:var(--scl-font-variant-label-size)}.dropdown--transparent .input__dropdown{background-color:transparent}.dropdown--disabled label,.dropdown--disabled .input__label,.dropdown--disabled input,.dropdown--disabled .input__dropdown,.dropdown--disabled .input__helper-text{cursor:not-allowed;border-color:var(--color-disabled);color:var(--color-disabled);background:var(--background-disabled)}";

let i$3 = 0;
const Dropdown = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.scaleInput = createEvent(this, "scale-input", 7);
    this.scaleInputLegacy = createEvent(this, "scaleInput", 7);
    this.scaleChange = createEvent(this, "scale-change", 7);
    this.scaleChangeLegacy = createEvent(this, "scaleChange", 7);
    this.scaleFocus = createEvent(this, "scale-focus", 7);
    this.scaleFocusLegacy = createEvent(this, "scaleFocus", 7);
    this.scaleBlur = createEvent(this, "scale-blur", 7);
    this.scaleBlurLegacy = createEvent(this, "scaleBlur", 7);
    this.scaleKeyDown = createEvent(this, "scale-keydown", 7);
    this.scaleKeyDownLegacy = createEvent(this, "scaleKeydown", 7);
    /** (optional) Input name */
    this.name = '';
    /** (optional) Input label */
    this.label = '';
    /** (optional) Input size */
    this.size = '';
    /** (optional) Input helper text */
    this.helperText = '';
    /** @deprecated - invalid should replace status */
    this.status = '';
    /** (optional) Input status */
    this.invalid = false;
    /** (optional) Input value */
    this.value = '';
    /** (optional) Makes type `select` behave as a controlled component in React */
    this.controlled = false;
    // Handle change on <select> independently
    // so we can allow "controlled" (React) behavior,
    // in which only the `value` changing does update
    // the actual <select> value, not the user's input.
    this.handleSelectChange = (event) => {
      const target = event.target;
      if (this.controlled) {
        emitEvent(this, 'scaleChange', { value: target.value });
        this.selectElement.value = String(this.value);
        this.forceUpdate = String(Date.now());
      }
      else {
        this.value = target.value || '';
        this.emitChange();
      }
    };
    this.handleInput = (event) => {
      const target = event.target;
      if (target) {
        this.value = target.value || '';
        this.emitChange();
      }
      emitEvent(this, 'scaleInput', event);
    };
    this.handleChange = (event) => {
      const target = event.target;
      if (target) {
        this.value = target.value || '';
        this.emitChange();
      }
    };
    this.handleFocus = () => {
      emitEvent(this, 'scaleFocus');
    };
    this.handleBlur = () => {
      emitEvent(this, 'scaleBlur');
    };
    this.handleKeyDown = (event) => {
      emitEvent(this, 'scaleKeyDown', event);
    };
  }
  componentWillLoad() {
    this.hasSlotIcon = !!this.hostElement.querySelector('[slot="icon"]');
    if (this.inputId == null) {
      this.inputId = 'input-dropdown' + i$3++;
    }
  }
  componentDidLoad() {
    // Keep this.value up-to-date for type="select".
    // This is important also for React, where `value` is used to control the element state.
    const select = this.selectElement;
    const selectedValue = select.selectedIndex > -1
      ? select.options[select.selectedIndex].value
      : null;
    // If we have a `value` passed, set it on the <select> element
    // Otherwise, if we have an <option selected>, set its value on `value`
    if (this.value) {
      select.value = String(this.value);
    }
    else if (selectedValue) {
      this.value = selectedValue;
    }
    // This is a workaroud to prevent a bug in Stencil:
    // when using slots without Shadow DOM (possible only with Stencil)
    // sometimes an update in the Light DOM does not trigger a re-render
    // thus causing unexpected results.
    // https://gitlab.com/scale-ds/scale-telekom/-/issues/16
    if (this.selectElement) {
      this.mutationObserver = new MutationObserver(() => {
        this.forceUpdate = String(Date.now());
      });
      this.mutationObserver.observe(this.hostElement, {
        childList: true,
        subtree: true,
      });
    }
  }
  componentDidUpdate() {
    this.hasSlotIcon = !!this.hostElement.querySelector('[slot="icon"]');
  }
  componentDidRender() {
    // When type `select` and `controlled` is true,
    // make sure the <select> is always in sync with the value.
    const value = this.value == null ? '' : this.value.toString();
    if (this.controlled && this.selectElement.value.toString() !== value) {
      this.selectElement.value = value;
    }
    if (this.status !== '') {
      statusNote({
        tag: 'deprecated',
        message: 'Property "status" is deprecated. Please use the "invalid" property!',
        type: 'warn',
        source: this.hostElement,
      });
    }
  }
  disconnectedCallback() {
    if (this.mutationObserver) {
      this.mutationObserver.disconnect();
    }
  }
  // We're not watching `value` like we used to
  // because we get unwanted `scaleChange` events
  // because how we keep this.value up-to-date for type="select"
  // `this.value = selectedValue`
  emitChange() {
    emitEvent(this, 'scaleChange', {
      value: this.value == null ? this.value : this.value.toString(),
    });
  }
  render() {
    const ariaInvalidAttr = this.status === 'error' || this.invalid ? { 'aria-invalid': true } : {};
    const helperTextId = `helper-message-${i$3}`;
    const ariaDescribedByAttr = { 'aria-describedBy': helperTextId };
    return (h(Host, null, h("div", { class: this.getCssClassMap() }, h("label", { class: "input__label", htmlFor: this.inputId }, this.label), h("div", { class: "input__dropdown-wrapper" }, h("select", Object.assign({ ref: (el) => (this.selectElement = el), class: "input__dropdown",
      // @ts-ignore
      value: this.value, onChange: this.handleSelectChange, onFocus: this.handleFocus, onBlur: this.handleBlur, onKeyDown: this.handleKeyDown, disabled: this.disabled, required: this.required, multiple: this.multiple, id: this.inputId, name: this.name, size: this.visibleSize }, ariaInvalidAttr, (this.helperText ? ariaDescribedByAttr : {})), h("slot", null)), h("div", { class: "input__dropdown-icon" }, this.hasSlotIcon ? (h("slot", { name: "icon" })) : (h("scale-icon-navigation-collapse-down", { decorative: true })))), !!this.helperText && (h("div", { class: "input__meta", id: helperTextId, "aria-live": "polite", "aria-relevant": "additions removals" }, h("div", { class: "input__helper-text" }, this.helperText))))));
  }
  getCssClassMap() {
    return classnames('dropdown', this.disabled && `dropdown--disabled`, this.transparent && 'dropdown--transparent', this.status && `dropdown--status-${this.status}`, this.invalid && `dropdown--status-error`, this.size && `dropdown--size-${this.size}`, this.value != null && this.value !== '' && 'animated');
  }
  get hostElement() { return getElement(this); }
};
Dropdown.style = dropdownCss;

const iconCss$3 = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

const ActionHidePassword = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (h(Host, null, h("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && h("title", null, this.accessibilityTitle), h("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (h("g", null, h("path", { "fill-rule": "evenodd", d: "M1.988 1.988A.75.75 0 013.03 1.97l17.25 17.25a.745.745 0 010 1.06.75.75 0 01-1.06 0L1.97 3.03a.75.75 0 01.018-1.042zM4.705 7.89l2.95 2.95A4.67 4.67 0 007.5 12a4.5 4.5 0 004.5 4.5 4.67 4.67 0 001.16-.155l2.285 2.28c-1.1.419-2.268.63-3.445.625-5.25 0-8.25-3.875-10.75-7.25a30.11 30.11 0 013.455-4.11zM12 4.75c5.25 0 8.25 3.875 10.75 7.25a30.11 30.11 0 01-3.455 4.11l-2.95-2.95c.1-.379.152-.768.155-1.16A4.5 4.5 0 0012 7.5a4.67 4.67 0 00-1.16.155l-2.285-2.28A9.562 9.562 0 0112 4.75zm-3 7.44l2.8 2.8a3 3 0 01-2.8-2.8zm3.2-3.18a3 3 0 012.8 2.8z" }))) : (h("g", null, h("path", { "fill-rule": "evenodd", d: "M2.85 2.85c.3-.3.75-.3 1.05 0L21.15 20.1c.3.3.3.75 0 1.05-.3.3-.75.3-1.05 0L2.85 3.9c-.3-.3-.3-.75 0-1.05zm1.35 4.5L5.25 8.4c-1.1 1.05-2.1 2.3-3.05 3.6 2.55 3.5 5.3 6.5 9.8 6.5 1.05 0 2-.15 2.85-.45L16 19.2c-1.2.5-2.5.8-4 .8-5.8 0-9.15-4.55-11.35-7.55L.3 12l.35-.45c.95-1.3 2.1-2.85 3.55-4.2zM12 4c5.8 0 9.15 4.55 11.35 7.55l.35.45-.35.45c-.95 1.3-2.1 2.85-3.55 4.2l-1.05-1.05c1.1-1.05 2.1-2.3 3.05-3.6-2.55-3.5-5.3-6.5-9.8-6.5-1.05 0-2 .15-2.85.45L8 4.8c1.2-.5 2.5-.8 4-.8zm-4.35 6.85l5.5 5.5c-.35.1-.75.15-1.15.15-2.5 0-4.5-2-4.5-4.5 0-.4.05-.8.15-1.15zM12 7.5c2.5 0 4.5 2 4.5 4.5 0 .4-.05.8-.15 1.15l-5.5-5.5c.35-.1.75-.15 1.15-.15z" })))))));
  }
  get hostElement() { return getElement(this); }
};
ActionHidePassword.style = iconCss$3;

const iconCss$2 = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

const ActionSort = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (h(Host, null, h("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && h("title", null, this.accessibilityTitle), h("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (h("g", null, h("path", { "fill-rule": "evenodd", d: "M17.25 3.5c.69 0 1.25.56 1.25 1.25V14h3.17l-4.42 6.75L12.83 14H16V4.75c0-.69.56-1.25 1.25-1.25zm-10.5-.25L11.17 10H8v9.25a1.25 1.25 0 11-2.5 0V10H2.33l4.42-6.75z" }))) : (h("g", null, h("path", { d: "M17.25 4c.4 0 .75.35.75.75V14h3.65l-4.4 6.75-4.4-6.75h3.65V4.75c0-.4.35-.75.75-.75zm-10.5-.75l4.4 6.75H7.5v9.25c0 .4-.35.75-.75.75S6 19.65 6 19.25V10H2.35z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement(this); }
};
ActionSort.style = iconCss$2;

const iconCss$1 = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

const NavigationCollapseUp = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (h(Host, null, h("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && h("title", null, this.accessibilityTitle), h("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (h("g", null, h("path", { "fill-rule": "evenodd", d: "M20.12 17.31c-.332.001-.65-.13-.885-.365L12 9.71l-7.235 7.235A1.25 1.25 0 113 15.175l9-9 9 9a1.26 1.26 0 010 1.77c-.233.234-.55.365-.88.365z" }))) : (h("g", null, h("path", { d: "M20.1 16.8c-.2 0-.4-.05-.55-.2L12 9l-7.6 7.6c-.3.3-.75.3-1.05 0s-.3-.75 0-1.05L12 6.9l8.65 8.65c.3.3.3.75 0 1.05-.15.15-.35.2-.55.2z", "fill-rule": "evenodd" })))))));
  }
  get hostElement() { return getElement(this); }
};
NavigationCollapseUp.style = iconCss$1;

const iconCss = "scale-icon{--display:inline-flex;--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);display:var(--display)}scale-icon path{transition:var(--transition)}@media screen and (forced-colors: active), (-ms-high-contrast: active){scale-icon svg,.scale-icon{color:white;stroke:white}}";

const ServiceSettings = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) The width and height in pixels */
    this.size = 24;
    /** (optional) Sets the icon color via the `fill` attribute */
    this.fill = 'currentColor';
    /** (optional) Alias for `fill` */
    this.color = 'currentColor';
    /** (optional) If `true`, the icon changes visually */
    this.selected = false;
    /** (optional) If `true` the SVG element will get `aria-hidden="true"` */
    this.decorative = false;
  }
  connectedCallback() {
    if (!this.hostElement.hasAttribute('styles')) {
      this.hostElement.style.display = 'inline-flex';
    }
  }
  render() {
    const ariaHidden = this.decorative ? { 'aria-hidden': 'true' } : {};
    return (h(Host, null, h("svg", Object.assign({ class: "scale-icon", xmlns: "http://www.w3.org/2000/svg", width: this.size, height: this.size, viewBox: "0 0 24 24" }, ariaHidden), this.accessibilityTitle && h("title", null, this.accessibilityTitle), h("g", { fill: ((this.fill === 'currentColor') ? this.color : this.fill) }, this.selected ? (h("g", null, h("path", { "fill-rule": "evenodd", d: "M20.235 14.5L23 14v-4l-2.765-.5a1 1 0 01-.64-1.555l1.595-2.31-2.825-2.825-2.31 1.595a1 1 0 01-1.555-.64L14 1h-4l-.5 2.76a1 1 0 01-1.555.645L5.635 2.81 2.81 5.635l1.595 2.31a1 1 0 01-.64 1.555L1 10v4l2.76.5a1 1 0 01.645 1.555l-1.595 2.31 2.825 2.825 2.31-1.595a1 1 0 011.555.64L10 23h4l.5-2.765a1 1 0 011.555-.64l2.31 1.595 2.825-2.825-1.595-2.31a1 1 0 01.64-1.555zM12 15a3 3 0 110-6 3 3 0 010 6z" }))) : (h("g", null, h("path", { "fill-rule": "evenodd", d: "M14 1l.5 2.75c.15.75.95 1.05 1.55.65l2.3-1.6 2.85 2.85-1.6 2.3c-.4.6-.05 1.4.65 1.55L23 10v4l-2.75.5a.994.994 0 00-.65 1.55l1.6 2.3-2.85 2.85-2.3-1.6c-.6-.4-1.4-.05-1.55.65L14 23h-4l-.5-2.75c-.15-.7-.95-1.05-1.55-.65l-2.3 1.6-2.85-2.85 1.6-2.3c.4-.6.05-1.4-.65-1.55L1 14v-4l2.75-.5a.994.994 0 00.65-1.55l-1.6-2.3L5.65 2.8l2.3 1.6c.6.4 1.4.05 1.55-.65L10 1h4zm-1.25 1.5h-1.5l-.3 1.5c-.2 1.2-1.25 2.05-2.45 2.05-.5 0-1-.15-1.4-.45l-1.3-.9-1.05 1.05.9 1.3c.5.7.6 1.6.25 2.4-.3.8-1 1.35-1.85 1.5l-1.55.3v1.5l1.55.25c.85.15 1.5.7 1.85 1.5.35.8.25 1.7-.25 2.4l-.9 1.3 1.05 1.05 1.3-.9c.4-.3.9-.45 1.4-.45 1.2 0 2.25.85 2.45 2.05l.3 1.55h1.5l.3-1.55c.2-1.2 1.25-2.05 2.45-2.05.5 0 1 .15 1.4.45l1.3.9 1.05-1.05-.9-1.3c-.5-.7-.55-1.6-.25-2.3.3-.8 1-1.35 1.85-1.5l1.55-.3v-1.5l-1.55-.3c-.85-.15-1.5-.7-1.85-1.5-.35-.8-.25-1.7.25-2.4l.9-1.3-1.05-1.05-1.3.9c-.4.3-.9.45-1.4.45-1.2 0-2.25-.85-2.45-2.05l-.3-1.55zM12 9a3 3 0 110 6 3 3 0 010-6z" })))))));
  }
  get hostElement() { return getElement(this); }
};
ServiceSettings.style = iconCss;

const menuFlyoutItemCss = ":host{--box-shadow-focus:0 0 0 var(--scl-spacing-2) var(--scl-color-focus);display:block;position:relative;outline-color:transparent;padding-left:var(--scl-spacing-2);padding-right:var(--scl-spacing-2)}*{-webkit-tap-highlight-color:rgba(255, 255, 255, 0)}.menu-flyout-item{position:relative;display:flex;align-items:stretch;text-align:left;font-size:var(--scl-font-size-16);line-height:2.635em;padding:0 var(--scl-spacing-24);user-select:none;white-space:nowrap;border-radius:0;cursor:pointer;color:var(--scl-color-text-standard);max-width:calc(100vw - 2 * var(--scl-spacing-24) - 2 * 10px);overflow:hidden;min-width:fit-content;min-width:-moz-fit-content}.menu-flyout-item:focus:not(.menu-flyout-item--disabled),.menu-flyout-item:hover:not(.menu-flyout-item--disabled){color:var(--scl-color-primary-hover)}:host(:focus) .menu-flyout-item:not(.menu-flyout-item--disabled){color:var(--scl-color-primary-hover)}:host(:focus) .menu-flyout-item{box-shadow:var(--box-shadow-focus)}:host(:active) .menu-flyout-item:not(.menu-flyout-item--disabled){color:var(--scl-color-primary-active)}:host([aria-expanded='true']) .menu-flyout-item{color:var(--scl-color-primary-active)}.menu-flyout-item--disabled{outline:none;color:#ccc;cursor:not-allowed}:host([active])::before{content:'';display:block;position:absolute;top:0;left:0;height:100%;width:0;background-color:var(--scl-color-primary-active);border-left:var(--scl-spacing-2) solid transparent}.menu-flyout-item--active{color:var(--scl-color-primary-active)}@media screen and (forced-colors: active), (-ms-high-contrast: active){.menu-flyout-item--disabled:not(.menu-flyout-item--disabled),.menu-flyout-item--active:not(.menu-flyout-item--disabled){color:white;stroke:white}}.menu-flyout-item__label{flex:1 1 0;overflow:hidden;text-overflow:ellipsis}.menu-flyout-item__prefix{flex:0 0 auto;display:flex;align-items:center}.menu-flyout-item__check,slot[name='prefix']::slotted(:last-of-type){margin-right:var(--scl-spacing-8)}.menu-flyout-item__check{visibility:hidden}:host([aria-checked='true']) .menu-flyout-item__check{visibility:visible}.menu-flyout-item__suffix{flex:0 0 auto;display:flex;align-items:center}.menu-flyout-item__cascade,slot[name='suffix']::slotted(:first-of-type){margin-left:var(--scl-spacing-16)}";

const MenuFlyoutItem = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.scaleSelect = createEvent(this, "scale-select", 7);
    this.scaleSelectLegacy = createEvent(this, "scaleSelect", 7);
    /** (optional) Set to true to display arrow icon suffix */
    this.cascade = false; // TODO rename to `hasMenu`?
    /** (optional) Mark as active */
    this.active = false;
    /** (optional) Set to true to display check prefix, false to display empty prefix */
    this.checked = false;
    /** (optional) Disabled */
    this.disabled = false;
    this.hasSlotSublist = false;
  }
  // TODO there is lot of room for improving this, aka edge-cases
  async triggerEvent(eventType, key, closeOnSelect = true) {
    if (this.disabled) {
      return;
    }
    if (key === 'ArrowRight' && !this.hasSlotSublist) {
      return;
    }
    if (this.hasSlotSublist) {
      this.openSublist();
      return;
    }
    const detail = { eventType, key, item: this.hostElement, closeOnSelect };
    emitEvent(this, 'scaleSelect', detail);
  }
  connectedCallback() {
    this.hasSlotSublist =
      this.hostElement.querySelector('[slot="sublist"]') != null;
    if (this.hasSlotSublist) {
      this.cascade = true;
    }
  }
  openSublist() {
    const sublist = this.hostElement.querySelector('[slot="sublist"]');
    if (sublist == null) {
      return;
    }
    sublist.trigger = () => this.hostElement;
    sublist.direction = 'right';
    sublist.open();
  }
  getCssClassMap() {
    return classnames('menu-flyout-item', this.disabled && 'menu-flyout-item--disabled', this.checkable != null && 'menu-flyout-item--checkable', this.active && 'menu-flyout-item--active');
  }
  render() {
    const checked = this.checked ? 'true' : 'false';
    return (h(Host, { role: this.checkable ? `menuitem${this.checkable}` : 'menuitem', "aria-checked": this.checkable == null ? false : checked, "aria-disabled": this.disabled ? 'true' : undefined, tabindex: "-1" }, this.styles && h("style", null, this.styles), h("div", { class: this.getCssClassMap(), part: "base" }, h("span", { part: "prefix", class: "menu-flyout-item__prefix" }, this.checkable == null ? (h("slot", { name: "prefix" })) : (h("scale-icon-action-success", { class: "menu-flyout-item__check", size: 16 }))), h("span", { part: "label", class: "menu-flyout-item__label" }, h("slot", null)), h("span", { part: "suffix", class: "menu-flyout-item__suffix" }, this.cascade ? (h("scale-icon-navigation-right", { class: "menu-flyout-item__cascade", size: 16 })) : (h("slot", { name: "suffix" })))), h("slot", { name: "sublist" })));
  }
  get hostElement() { return getElement(this); }
};
MenuFlyoutItem.style = menuFlyoutItemCss;

const paginationCss = ":host{--color:var(--scl-color-grey-90);--radius:var(--scl-radius-12);--font-size:var(--scl-font-size-12);--border:1px solid var(--scl-color-grey-10);--color-hover:var(--scl-color-primary-hover);--color-active:var(--scl-color-primary-active);--color-button:var(--scl-color-grey-10);--border-button:var(--border);--box-shadow-focus:inset 0 0 0 2px var(--scl-color-focus);--radius-first-prompt:var(--radius) 0 0 var(--radius);--radius-last-prompt:0 var(--radius) var(--radius) 0;--radius-first-prompt-stack:0 0 0 var(--radius);--radius-last-prompt-stack:0 0 var(--radius) 0;--stroke-svg:var(--scl-color-grey-90);--stroke-svg-high-contrast:var(--scl-color-white);--width-button:42px;--padding-info:var(--scl-spacing-8);--height-button:56px;--height-button-small:40px;--line-height-info:calc(var(--height-button) - 2px);--line-height-info-small:calc(var(--height-button-small) - 2px)}.pagination{display:flex;overflow:auto;flex-wrap:wrap}.pagination__info,.pagination__info-responsive{color:var(--color);text-align:center;font-size:var(--font-size);line-height:var(--line-height-info);padding:0 var(--padding-info);border:var(--border);flex-shrink:0;border-left:0;border-right:0;white-space:nowrap;order:1}.pagination__info-responsive{display:none}.pagination--small .pagination__info,.pagination--small .pagination__info-responsive{line-height:var(--line-height-info-small)}.pagination__info span,.pagination__info-responsive span{font-weight:bold}button{display:flex;flex-shrink:0;justify-content:center;align-items:center;padding:0;margin:0;height:var(--height-button);width:var(--width-button);color:var(--color-button);background:none;border:var(--border-button)}.pagination--small button{height:var(--height-button-small)}button:focus{outline:none;box-shadow:var(--box-shadow-focus)}.pagination__first-prompt{border-radius:var(--radius-first-prompt);margin-right:-1px}.pagination__last-prompt{border-radius:var(--radius-last-prompt);margin-left:-1px;order:2}.pagination__next-prompt{order:2}button svg{display:block}button:not(:disabled){cursor:pointer}button:not(:disabled) svg{stroke:var(--stroke-svg)}button:not(:disabled):hover{border-color:var(--color-hover);z-index:1}button:not(:disabled):hover svg{stroke:var(--color-hover)}button:not(:disabled):active{border-color:var(--color-active);z-index:1}button:not(:disabled):active svg{stroke:var(--color-active)}.pagination--hide-borders .pagination__info,.pagination--hide-borders .pagination__info-responsive{border:0}.pagination--hide-borders .pagination__info-responsive{border-bottom:var(--border)}.pagination--hide-borders button{border-radius:0;border-top-width:0;border-bottom-width:0}.pagination--hide-borders button:not(:disabled):hover{border-width:1px;border-color:var(--color-hover)}.pagination__button-wrapper{display:flex}@media screen and (forced-colors: active), (-ms-high-contrast: active){button:not(:disabled) svg{stroke:var(--stroke-svg-high-contrast)}}@media screen and (max-width: 639px){:host{width:100%}.pagination{flex-direction:column}.pagination__info-responsive{display:initial;order:0;overflow:auto;border-left:var(--border);border-right:var(--border);border-bottom:0;border-radius:var(--radius) var(--radius) 0 0;line-height:var(--line-height-info-small)}.pagination__info{display:none;line-height:var(--line-height-info-small)}.pagination__first-prompt{border-radius:var(--radius-first-prompt-stack)}.pagination__last-prompt{border-radius:var(--radius-last-prompt-stack)}.pagination__next-prompt{margin-left:-1px}button{flex:1;height:var(--height-button-small)}.pagination--hide-borders .pagination__first-prompt{border-left-width:0}.pagination--hide-borders .pagination__last-prompt{border-right-width:0}}";

/*
  TODO
  ====
  [ ] Support pages text as well as elements eg `page 1 / 5` vs `1 - 12 / 100`
  [ ] Add Pages drop-down (awaiting menu and menu-list components)
  [ ] Add text input option for choosing currernt page/start element
  [ ] Add events for specific button interactions (first, prev, next, last)
  [ ] Add :focus-visible support to avoid focus upon click in chrome
  [ ] Add accessibility attributes
  [ ] Add icons to the icon components ?
*/
const name = 'pagination';
const Pagination = class {
  /* 6. Lifecycle Events (call order) */
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.scalePagination = createEvent(this, "scale-pagination", 7);
    this.scalePaginationLegacy = createEvent(this, "scalePagination", 7);
    /* 2. State Variables (alphabetical) */
    /* 3. Public Properties (alphabetical) */
    /** (optional) Deprecated; hideBorder should replace hideBorders */
    this.hideBorders = false;
    /** (optional) Set to true to hide top and bottom borders */
    this.hideBorder = false;
    /** (optional) Set number of rows/elements to show per page */
    this.pageSize = 10;
    /** (optional) Index of first element to display */
    this.startElement = 0;
    /** (optional) Total number of rows/elements used to calculate page displays */
    this.totalElements = 1;
    /** @deprecated - size should replace small */
    this.small = false;
    /** (optional) size  */
    this.size = 'large';
    /** (optional) translation to 'Go to first page'  */
    this.ariaLabelFirstPage = 'Go to first page';
    /** (optional) translation to 'Go to next page'  */
    this.ariaLabelNextPage = 'Go to next page';
    /** (optional) translation to 'Go to previous page'  */
    this.ariaLabelPreviousPage = 'Go to previous page';
    /** (optional) translation to 'Go to last page'  */
    this.ariaLabelLastPage = 'Go to last page';
    /* 5. Private Properties (alphabetical) */
    /** Calculated width of largest text so buttons don't move while changing pages */
    this.maxWidth = 100;
  }
  componentWillLoad() {
    this.calculateWidth();
  }
  componentWillUpdate() { }
  componentDidRender() {
    if (this.hideBorders !== false) {
      statusNote({
        tag: 'deprecated',
        message: 'Property "hideBorders" is deprecated. Please use the "hideBorder" property!',
        type: 'warn',
        source: this.hostElement,
      });
    }
    if (this.small !== false) {
      statusNote({
        tag: 'deprecated',
        message: 'Property "small" is deprecated. Please use the "size" property!',
        type: 'warn',
        source: this.hostElement,
      });
    }
  }
  componentDidLoad() { }
  componentDidUpdate() { }
  disconnectedCallback() { }
  /* 7. Listeners */
  calculateWidth() {
    // calculate max possible width
    this.maxWidth = (this.totalElements.toString().length * 3 + 3) * 9;
  }
  /* 8. Public Methods */
  /* 9. Local Methods */
  goFirstPage() {
    this.startElement = 0;
    this.emitUpdate();
  }
  goPreviousPage() {
    // Min to prevent going below 0
    this.startElement -= Math.min(this.pageSize, this.startElement);
    this.emitUpdate();
  }
  goNextPage() {
    this.startElement += this.pageSize;
    this.emitUpdate();
  }
  goLastPage() {
    const p = this.pageSize;
    // Make sure startElement is multiple of pageSize
    this.startElement = Math.ceil((this.totalElements - p) / p) * p;
    this.emitUpdate();
  }
  emitUpdate() {
    const data = {
      startElement: this.startElement,
    };
    emitEvent(this, 'scalePagination', data);
  }
  /* 10. Render */
  render() {
    const total = this.totalElements;
    const start = this.startElement + 1;
    const end = Math.min(this.startElement + this.pageSize, total);
    const isAtStart = start === 1;
    const isAtEnd = end === total;
    return (h(Host, null, this.styles && h("style", null, this.styles), h("div", { part: this.getBasePartMap(), class: this.getCssClassMap() }, h("div", { part: "info-responsive", class: `${name}__info-responsive` }, h("span", null, start, "-", end), ' ', "/ ", total), h("div", { class: `${name}__button-wrapper` }, h("div", { part: "info", class: `${name}__info`, style: { width: `${this.maxWidth}px` } }, h("span", null, start, "-", end), ' ', "/ ", total), h("button", { class: `${name}__first-prompt`, part: "first-prompt", disabled: isAtStart, onClick: () => this.goFirstPage(), "aria-label": this.ariaLabelFirstPage }, h("svg", { height: "12", viewBox: "0 0 48 52", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "#cacaca" }, h("path", { d: "M44.5 48.5L21.5 26L44.5 3.5M27.5 48.5L4.5 26L27.5 3.5", "stroke-width": "6", "stroke-linecap": "round" }))), h("button", { class: `${name}__prev-prompt`, part: "prev-prompt", disabled: isAtStart, onClick: () => this.goPreviousPage(), "aria-label": this.ariaLabelPreviousPage }, h("svg", { height: "12", viewBox: "0 0 37 52", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "#cacaca" }, h("path", { d: "M33 48L6 26L33 4", "stroke-width": "7", "stroke-linecap": "round" }))), h("button", { class: `${name}__next-prompt`, part: "next-prompt", disabled: isAtEnd, onClick: () => this.goNextPage(), "aria-label": this.ariaLabelNextPage }, h("svg", { height: "12", viewBox: "0 0 37 52", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "#cacaca" }, h("path", { d: "M4 4L31 26L4 48", "stroke-width": "7", "stroke-linecap": "round" }))), h("button", { class: `${name}__last-prompt`, part: "last-prompt", disabled: isAtEnd, onClick: () => this.goLastPage(), "aria-label": this.ariaLabelLastPage }, h("svg", { height: "12", viewBox: "0 0 48 52", fill: "none", xmlns: "http://www.w3.org/2000/svg", stroke: "#cacaca" }, h("path", { d: "M3.5 3.5L26.5 26L3.5 48.5M20.5 3.5L43.5 26L20.5 48.5", "stroke-width": "6", "stroke-linecap": "round" })))))));
  }
  getBasePartMap() {
    return this.getCssOrBasePartMap('basePart');
  }
  getCssClassMap() {
    return this.getCssOrBasePartMap('css');
  }
  getCssOrBasePartMap(mode) {
    const prefix = mode === 'basePart' ? '' : `${name}--`;
    return classnames(name, (this.hideBorder || this.hideBorders) && `${prefix}hide-borders`, (this.size === 'small' || this.small) && `${prefix}small`);
  }
  get hostElement() { return getElement(this); }
  static get watchers() { return {
    "totalElements": ["calculateWidth"]
  }; }
};
Pagination.style = paginationCss;

const progressBarCss = ":host{--color-error:var(--scl-color-text-error);--color-disabled:var(--scl-color-grey-50);--background:var(--scl-color-primary);--color-inner-status:var(--scl-color-background-standard);--font-size-inner-status:var(--scl-font-size-12);--font-size-status:var(--scl-font-size-12);--font-weight-status:var(--scl-font-weight-extrabold);--color-status:var(--scl-color-grey-60);--color-status-description:var(--scl-color-grey-60);--font-size-status-description:var(--scl-font-size-12);--font-weight-status-description:var(--scl-font-weight-bold);--spacing-label:var(--scl-spacing-8) 0;--border:1px solid var(--scl-color-grey-60)}.progress-bar{width:100%;max-width:30rem}.progress-bar--has-error .progress-bar__outer{border:1px solid var(--color-error)}.progress-bar--has-error .progress-bar__status-description{color:var(--color-error)}.progress-bar--disabled{cursor:not-allowed;opacity:0.5}.progress-bar--disabled .progress-bar__label{color:var(--color-disabled)}.progress-bar__label{display:block;padding:var(--spacing-label)}.progress-bar-wrapper{width:100%;display:flex;box-sizing:border-box;align-items:center}.progress-bar__outer{width:100%;height:var(--scl-spacing-8);margin:var(--scl-spacing-8);margin-left:0;overflow:hidden;position:relative;border-radius:100px;border:var(--border)}.progress-bar__inner{top:0;left:0;height:100%;display:flex;position:absolute;align-items:center;white-space:nowrap;justify-content:flex-end;animation-fill-mode:both;background:var(--background)}.progress-bar__inner-status{color:var(--color-inner-status);padding:0 12px;font-size:var(--font-size-inner-status)}.progress-bar__status{display:inline-block;font-size:var(--font-size-status);font-weight:var(--font-weight-status);color:var(--color-status)}.progress-bar__icon{height:16px}.progress-bar__status-description{color:var(--color-status-description);font-size:var(--font-size-status-description);font-weight:var(--font-weight-status-description)}.progress-bar__aria-live{clip:rect(0 0 0 0);width:1px;border:0;height:1px;margin:-1px;padding:0;overflow:hidden;position:absolute}";

let i$2 = 0;
const ProgressBar = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /** (optional) Progress bar busy switch */
    this.busy = false;
    /** (required) Progress bar percentage */
    this.percentage = 0;
    /** (optional) Progress bar stroke width */
    this.strokeWidth = 6;
    this.transitions = (width) => `
    @keyframes showProgress {
      from {
        width: 0;
      }
      to {
        width: ${width}%;
      }
    }
  `;
    this.progressStyle = () => {
      return {
        width: `${this.percentage}%`,
        border: '1px solid transparent',
        background: this.customColor ? this.customColor : `var(--background)`,
        animation: 'showProgress 3s ease-in-out',
      };
    };
  }
  componentWillLoad() {
    if (this.progressBarId == null) {
      this.progressBarId = 'progress-bar-' + i$2++;
    }
  }
  componentWillUpdate() { }
  disconnectedCallback() { }
  componentDidRender() {
    if (this.customColor !== undefined) {
      statusNote({
        tag: 'deprecated',
        message: `Property "customColor" is deprecated. 
          Please use css variable "--background" to set the progress bar background color;
          e.g. <scale-progress-bar percentage="20" style="--background: green"></scale-progress-bar>`,
        type: 'warn',
        source: this.hostElement,
      });
    }
  }
  render() {
    return (h(Host, null, this.styles && h("style", null, this.styles), h("style", null, this.transitions(this.percentage)), h("div", { part: this.getBasePartMap(), class: this.getCssClassMap() }, !!this.label && (h("label", { part: "label", class: "progress-bar__label", htmlFor: this.progressBarId }, this.label)), h("div", { part: "wrapper", class: "progress-bar-wrapper" }, h("div", { part: "outer", class: "progress-bar__outer", style: { height: `${this.strokeWidth}px` }, role: "progressbar", "aria-valuemin": 0, "aria-valuemax": 100, "aria-valuenow": this.percentage, "aria-busy": this.busy, "aria-valuetext": `${this.percentage}%`, "aria-label": this.label, id: this.progressBarId }, h("div", { part: "inner", class: "progress-bar__inner", style: this.progressStyle() }, !!this.statusInside && (h("div", { part: "inner-status", class: "progress-bar__inner-status", "aria-hidden": "true" }, this.percentage, "%")))), !!this.showStatus && (h("div", { part: "status", class: "progress-bar__status", "aria-hidden": "true" }, this.percentage, "%")), h("slot", { name: "icon" }))), !!this.statusDescription && (h("div", { part: "status-description", class: "progress-bar__status-description", role: "alert" }, this.statusDescription)), !this.mute && (h("span", { "aria-live": "polite", class: "progress-bar__aria-live" }, this.percentage !== Math.round(this.percentage / 10) * 10
      ? `${Math.round(this.percentage / 10) * 10}%`
      : null))));
  }
  getBasePartMap() {
    return this.getCssOrBasePartMap('basePart');
  }
  getCssClassMap() {
    return this.getCssOrBasePartMap('css');
  }
  getCssOrBasePartMap(mode) {
    const component = 'progress-bar';
    const prefix = mode === 'basePart' ? '' : `${component}--`;
    return classnames(component, this.hasError && `${prefix}has-error`, this.disabled && `${prefix}disabled`);
  }
  get hostElement() { return getElement(this); }
};
ProgressBar.style = progressBarCss;

const switchCss = ".switch{--size:20px;--offset:2px;--color-off:var(--scl-color-text-standard);--color-on:var(--scl-color-primary);--color-active:var(--scl-color-primary-active);--color-hover:var(--scl-color-primary-hover);--color-disabled:var(--scl-color-background-disabled);--color-state:var(--color-off);--color-state-contrast:var(--scl-color-background-standard);--color-background:var(--color-state-contrast);--color-toggle:var(--color-state);--color-text:var(--color-state);--transition-duration:var(--scl-motion-duration-fast);--transition-timing-function:var(--scl-motion-easing-standard);--box-shadow-focus:0 0 0 var(--scl-spacing-2) var(--scl-color-focus);--spacing-left:var(--scl-spacing-8);--font-weight:var(--scl-font-weight-medium);display:inline-block;position:relative}.switch label{cursor:pointer}.switch input{width:0;height:0;opacity:0;position:absolute}.switch .switch__wrapper{position:relative;border:1px solid var(--color-state);border-radius:calc(var(--size) / 2);width:calc(2 * var(--size) - var(--offset));height:calc(var(--size) - var(--offset));display:inline-flex;justify-content:space-between;background:var(--color-background);transition-property:background;transition-duration:var(--transition-duration);transition-timing-function:var(--transition-timing-function)}.switch .switch__text{display:flex;width:100%;color:var(--color-text);justify-content:space-evenly;font-size:var(--scl-font-size-12);line-height:calc(var(--size) - var(--offset));transition-property:color;transition-duration:var(--transition-duration);transition-timing-function:var(--transition-timing-function)}.switch .switch__text:before{content:'I'}.switch .switch__text:after{content:'0';position:relative;right:-1px}.switch .switch__toggle{position:absolute;border-radius:50%;padding:calc(0.5 * var(--size) - var(--offset));margin:calc(-0.5 * var(--size) + var(--offset));background:var(--color-toggle);left:calc(0.5 * var(--size) - 0.5 * var(--offset));top:50%;transition-property:transform, background;transition-duration:var(--transition-duration);transition-timing-function:var(--transition-timing-function)}.switch input:checked:disabled+.switch__wrapper .switch__toggle,.switch input:not(:checked):not(:disabled):active+.switch__wrapper .switch__toggle,.switch input:checked:not(:disabled):not(:active)+.switch__wrapper .switch__toggle{transform:translateX(var(--size))}.switch .switch__label{cursor:inherit;color:var(--color-text);margin-left:var(--spacing-left);font-weight:var(--font-weight);transition-property:color;transition-duration:var(--transition-duration);transition-timing-function:var(--transition-timing-function)}.switch--focus-visible-not-supported input:focus~.switch__wrapper{box-shadow:var(--box-shadow-focus)}.switch--focus-visible-supported input:focus-visible~.switch__wrapper{box-shadow:var(--box-shadow-focus)}.switch input:checked~.switch__wrapper{--color-state:var(--color-on);--color-background:var(--color-state);--color-toggle:var(--color-state-contrast);--color-text:var(--color-state-contrast)}.switch:hover,.switch:hover input~.switch__wrapper{--color-state:var(--color-hover)}.switch input:not(:disabled):active~.switch__wrapper{--color-state:var(--color-active);--color-background:var(--color-state);--color-toggle:var(--color-state-contrast);--color-text:var(--color-state-contrast)}.switch input:checked:not(:disabled):active~.switch__wrapper{--color-state:var(--color-active);--color-background:var(--color-state-contrast);--color-toggle:var(--color-active);--color-text:var(--color-active)}.switch input:not(:disabled):active~.switch__label{--color-text:var(--color-active)}.switch.switch--disabled{--color-state:var(--color-disabled);--color-hover:var(--color-disabled);--color-toggle:var(--color-disabled);--color-text:var(--color-disabled)}.switch.switch--disabled label{cursor:not-allowed}.switch.switch--disabled input:checked~.switch__wrapper{--color-state:var(--color-disabled);--color-toggle:var(--color-state-contrast);--color-text:var(--color-state-contrast)}";

let i$1 = 0;
// For chrome that applies :focus upon click, and :focus-visible isn't widely supported
const isFocusVisibleSupported = isPseudoClassSupported(':focus-visible');
const Switch = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.scaleChange = createEvent(this, "scale-change", 7);
    this.scaleChangeLegacy = createEvent(this, "scaleChange", 7);
    /** (optional) Active switch */
    this.checked = false;
    /** (optional) Disabled switch */
    this.disabled = false;
  }
  componentWillLoad() {
    if (this.inputId == null) {
      this.inputId = 'switch-' + i$1++;
    }
  }
  render() {
    return (h(Host, null, this.styles && h("style", null, this.styles), h("div", { class: this.getCssClassMap() }, h("label", { id: `${this.inputId}-label` }, h("input", { type: "checkbox", name: this.name, checked: this.checked, disabled: this.disabled, "aria-labelledby": `${this.inputId}-label`, id: this.inputId, onChange: (e) => {
        this.checked = e.target.checked;
        // bubble event through the shadow dom
        emitEvent(this, 'scaleChange', { value: this.checked });
      } }), h("div", { class: "switch__wrapper" }, h("div", { class: "switch__toggle" }), h("div", { class: "switch__text" })), this.label && h("span", { class: "switch__label" }, this.label)))));
  }
  getCssClassMap() {
    return classnames('switch', this.disabled && 'switch--disabled', isFocusVisibleSupported && 'switch--focus-visible-supported', !isFocusVisibleSupported && 'switch--focus-visible-not-supported');
  }
};
Switch.style = switchCss;

const tagCss = ":host{--background:var(--scl-color-text-standard);--color:var(--scl-color-white);--font-size:var(--scl-font-variant-body-size);--line-height:var(--scl-font-variant-body-line-height);--font-weight:var(--scl-font-weight-bold);--radius:var(--scl-radius-4);--box-shadow-focus:0 0 0 var(--scl-spacing-2) var(--scl-color-focus);--icon-color:var(--color);--icon-color-hover:var(--scl-color-primary-active);--background-secondary:var(--scl-color-teal-80);--background-disabled:var(--scl-color-background-disabled);--color-disabled:var(--scl-color-grey-60);--spacing-left-dismissable:var(--scl-spacing-2);--border-button-dismissable-focus:1px solid\n    var(--scl-color-background-standard);--box-shadow-button-dismissable-focus:var(--box-shadow-focus);--background-button-dismissable-hover:var(--scl-color-white);--height-button-dismissable-small:20px;--spacing-small:0 var(--scl-spacing-8);--font-size-small:var(--scl-font-size-12);--line-height-small:var(--scl-font-line-height-160)}.tag{border:1px solid transparent;display:inline-flex;outline:none;padding:0 10px;text-align:center;transition:all 0.15s ease-in-out;align-items:center;white-space:nowrap;border-radius:var(--scl-radius-4);vertical-align:baseline;justify-content:center;font-size:var(--font-size);line-height:var(--line-height);font-weight:var(--font-weight);background:var(--background);color:var(--color);cursor:default}.tag--variant-secondary{background:var(--background-secondary)}.tag scale-icon-action-close{color:var(--icon-color);transition:all 0.15s ease-in-out}.tag:not(.tag--disabled) scale-icon-action-close:hover{color:var(--icon-color-hover)}.tag--dismissable{padding-right:0}.tag--dismissable button{border:none;cursor:pointer;height:24px;margin:0;outline:none;padding:0;background:transparent;margin-left:var(--spacing-left-dismissable);border-radius:var(--radius)}.tag--dismissable button:focus{border:var(--border-button-dismissable-focus);background:var(--background-button-dismissable-focus);box-shadow:var(--box-shadow-button-dismissable-focus)}.tag--dismissable button:hover{background:var(--background-button-dismissable-hover)}.tag--dismissable button:focus scale-icon-action-close{top:-1px;position:relative}.tag--size-small{padding:var(--spacing-small);font-size:var(--font-size-small);line-height:var(--line-height-small)}.tag--size-small.tag--dismissable{padding-right:0}.tag--size-small.tag--dismissable button{height:var(--height-button-dismissable-small)}.tag--variant-secondary.tag--dismissable{background:var(--background-secondary)}.tag--variant-secondary.tag--disabled{opacity:0.5}.tag--link{text-decoration:none}.tag--link:focus{border:1px solid white;box-shadow:var(--box-shadow-focus)}.tag--link.tag--variant-secondary{background:var(--background-secondary)}.tag--link.tag--variant-secondary:hover{background:var(--background-secondary)}.tag--link.tag--variant-secondary:focus{border:1px solid white}.tag--disabled{background:var(--background-disabled);color:var(--color-disabled);cursor:not-allowed;color:var(--color-disabled)}.tag--disabled scale-icon-action-close{color:var(--color-disabled)}.tag--disabled button{cursor:not-allowed}.tag--disabled button:hover{cursor:not-allowed;background:var(--background-disabled)}";

const Tag = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.scaleClose = createEvent(this, "scale-close", 7);
    this.scaleCloseLegacy = createEvent(this, "scaleClose", 7);
    /** (optional) Tag href */
    this.href = '';
    /** (optional) Tag target */
    this.target = '_self';
    /** (optional) Tag dismissable */
    this.dismissable = false;
    /** (optional) Tag disabled */
    this.disabled = false;
    /** (optional) Dismiss label */
    this.dismissText = 'dismiss';
    this.handleClose = (event) => {
      event.preventDefault();
      event.stopPropagation();
      if (this.disabled) {
        return;
      }
      emitEvent(this, 'scaleClose', event);
    };
  }
  componentWillUpdate() { }
  disconnectedCallback() { }
  render() {
    const Element = !!this.href && !this.disabled ? 'a' : 'span';
    const linkProps = !!this.href
      ? {
        href: this.href,
        target: this.target,
      }
      : {};
    return (h(Host, null, this.styles && h("style", null, this.styles), h(Element, Object.assign({ part: this.getBasePartMap(), class: this.getCssClassMap() }, linkProps), h("slot", null), this.dismissable && (h("button", { part: "button-dismissable", disabled: this.disabled, "aria-label": this.dismissText, onClick: this.handleClose }, h("scale-icon-action-close", { part: "icon-dismissable", size: this.size === 'small' ? 20 : 24 }))))));
  }
  getBasePartMap() {
    return this.getCssOrBasePartMap('basePart');
  }
  getCssClassMap() {
    return this.getCssOrBasePartMap('css');
  }
  getCssOrBasePartMap(mode) {
    const component = 'tag';
    const prefix = mode === 'basePart' ? '' : `${component}--`;
    return classnames(mode === 'basePart' ? 'base' : component, this.size && `${prefix}size-${this.size}`, this.variant && `${prefix}variant-${this.variant}`, !!this.href && `${prefix}link`, !!this.dismissable && `${prefix}dismissable`, !!this.disabled && `${prefix}disabled`);
  }
};
Tag.style = tagCss;

const textFieldCss = "scale-text-field{--transition:all var(--scl-motion-duration-fast)\n    var(--scl-motion-easing-standard);--radius:var(--scl-radius-8);--border:var(--scl-spacing-1) solid var(--scl-color-text-standard);--border-error:var(--scl-spacing-2) solid var(--scl-color-background-error);--border-color-hover:var(--scl-color-primary-hover, #f90984);--border-color-focus:var(--scl-color-primary-hover, #f90984);--box-shadow-focus:0 0 0 var(--scl-spacing-2) var(--scl-color-focus);--height:var(--scl-spacing-48);--height-small:var(--scl-spacing-40);--spacing-x:var(--scl-spacing-12);--color-disabled:var(--scl-color-background-disabled);--background-disabled:var(--scl-color-white);--border-color-readonly:var(--scl-color-grey-0);--background-readonly:var(--scl-color-grey-0);--font-weight-meta:var(--scl-font-weight-bold);--font-size-meta:var(--scl-font-size-12);--line-height-meta:var(--scl-font-line-height-133);--spacing-y-meta:var(--scl-spacing-4);--color-meta:var(--scl-color-text-standard);--color-meta-error:var(--scl-color-text-error);--spacing-control:var(--scl-spacing-12) var(--spacing-x) 0\n    calc(var(--spacing-x) - 1px);--transition-control:var(--transition);--font-size-control:var(--scl-font-size-16);--transition-counter:var(--transition);--font-size-counter:var(--font-size-meta);--line-height-counter:var(--line-height-meta);--color-counter-error:var(--color-meta-error);--transition-helper-text:var(--transition);--font-size-helper-text:var(--font-size-meta);--line-height-helper-text:var(--line-height-meta);--color-helper-text:var(--scl-color-blue-70);--color-helper-text-error:var(--color-meta-error);--transition-placeholder:var(--transition);--color-placeholder:var(--scl-color-grey-60);--color-label:var(--scl-color-grey-60);--color-label-readonly:var(--scl-color-text-standard);--z-index-label:var(--scl-z-index-10);--transition-label:var(--transition);--font-size-label:var(--scl-font-size-16);--font-weight-label:var(--scl-font-weight-medium);--font-size-label-small:var(--scl-font-size-16);--font-weight-label-small:var(--scl-font-weight-medium);--font-size-label-focus:var(--scl-font-size-10);--font-weight-label-focus:var(--scl-font-weight-bold)}.text-field{position:relative}.text-field .text-field__helper-text,.text-field .text-field__counter{font-weight:var(--font-weight-meta)}.text-field .text-field__control{width:100%;height:var(--height);margin:0;display:flex;outline:none;padding:var(--spacing-control);z-index:1;box-sizing:border-box;transition:var(--transition-control);font-family:inherit;font-size:var(--font-size-control);border-radius:var(--radius);border:var(--border)}.text-field .text-field__counter{display:flex;transition:var(--transition-counter);margin-left:auto;padding-right:var(--spacing-x);justify-content:flex-end;font-size:var(--font-size-counter);line-height:var(--line-height-counter);color:inherit}.text-field .text-field__helper-text{transition:var(--transition-helper-text);padding-left:var(--spacing-x);font-size:var(--font-size-helper-text);line-height:var(--line-height-helper-text);color:var(--color-helper-text)}.text-field .text-field__meta{display:flex;justify-content:space-between;margin-top:var(--spacing-y-meta);color:var(--color-meta)}.text-field:not(.text-field--disabled):not(.text-field--readonly) .text-field__control:hover{border-color:var(--border-color-hover)}.text-field:not(.text-field--disabled):not(.text-field--readonly) .text-field__control:focus{border-color:var(--border-color-focus);box-shadow:var(--box-shadow-focus)}.text-field:not(.text-field--disabled) .text-field__control:focus::placeholder{color:var(--color-placeholder)}.text-field .text-field__control::placeholder,.text-field ::placeholder{color:transparent;transition:var(--transition-placeholder)}.text-field__label{top:0;left:0;color:var(--color-label);display:flex;z-index:var(--z-index-label);position:absolute;transition:var(--transition-label);pointer-events:none;font-size:var(--font-size-label);transform:translate(\n    var(--spacing-x),\n    calc((var(--height) - var(--font-size-label)) / 2)\n  );font-weight:var(--font-weight-label)}.text-field--has-focus:not(.text-field--readonly) .text-field__label,.animated .text-field__label{line-height:var(--scl-font-variant-label-size);transform:translate(var(--spacing-x), var(--scl-spacing-8));font-size:var(--font-size-label-focus);font-weight:var(--font-weight-label-focus)}.text-field--status-error .text-field__control{border:var(--border-error)}.text-field--status-error .text-field__helper-text{color:var(--color-helper-text-error)}.text-field--status-error .text-field__counter{color:var(--color-counter-error)}.text-field--size-small .text-field__control{height:var(--height-small)}.text-field--size-small .text-field__label{font-size:var(--font-size-label-small);transform:translate(\n    var(--spacing-x),\n    calc((var(--height-small) - var(--font-size-label-small)) / 2)\n  );font-weight:var(--font-weight-label-small)}.text-field--size-small.text-field--has-focus:not(.text-field--readonly) .text-field__label,.text-field--size-small.animated .text-field__label{line-height:var(--scl-font-variant-label-size);transform:translate(var(--spacing-x), var(--scl-spacing-4));font-size:var(--font-size-label-focus)}.text-field--transparent .text-field__control{background-color:transparent}.text-field--readonly input,.text-field--readonly .text-field__control{color:var(--color-label-readonly);border-color:var(--border-color-readonly);background:var(--background-readonly)}.text-field--readonly .text-field__control:focus{box-shadow:var(--box-shadow-focus)}.text-field--disabled label,.text-field--disabled .text-field__label,.text-field--disabled input,.text-field--disabled .text-field__control,.text-field--disabled .text-field__meta,.text-field--disabled .text-field__counter,.text-field--disabled .text-field__helper-text{cursor:not-allowed;border-color:var(--color-disabled);color:var(--color-disabled);background:var(--scl-color-white)}.text-field--disabled.animated label.text-field__label{color:var(--color-disabled)}input::-webkit-outer-spin-button,input::-webkit-inner-spin-button{-webkit-appearance:none}input[type='number']{-moz-appearance:textfield}";

let i = 0;
const TextField = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.scaleInput = createEvent(this, "scale-input", 7);
    this.scaleInputLegacy = createEvent(this, "scaleInput", 7);
    this.scaleChange = createEvent(this, "scale-change", 7);
    this.scaleChangeLegacy = createEvent(this, "scaleChange", 7);
    this.scaleFocus = createEvent(this, "scale-focus", 7);
    this.scaleFocusLegacy = createEvent(this, "scaleFocus", 7);
    this.scaleBlur = createEvent(this, "scale-blur", 7);
    this.scaleBlurLegacy = createEvent(this, "scaleBlur", 7);
    this.scaleKeyDown = createEvent(this, "scale-keydown", 7);
    this.scaleKeyDownLegacy = createEvent(this, "scaleKeydown", 7);
    /** (optional) Input type */
    this.type = 'text';
    /** (optional) Input name */
    this.name = '';
    /** (optional) Input label */
    this.label = '';
    /** (optional) Input size */
    this.size = '';
    /** (optional) Input helper text */
    this.helperText = '';
    /** @deprecated - invalid should replace status */
    this.status = '';
    /** (optional) Input status */
    this.invalid = false;
    /** (optional) Input placeHolder */
    this.placeholder = '';
    /** (optional) Input value */
    this.value = '';
    /** (optional) the step attribute specifies the interval between legal numbers in an <input type="number"> element. */
    this.step = '1';
    /** Whether the input element has focus */
    this.hasFocus = false;
    this.handleInput = (event) => {
      const target = event.target;
      if (target) {
        this.value = target.value || '';
        this.emitChange();
      }
      emitEvent(this, 'scaleInput', event);
    };
    this.handleChange = (event) => {
      const target = event.target;
      if (target) {
        this.value = target.value || '';
        this.emitChange();
      }
    };
    this.handleFocus = () => {
      emitEvent(this, 'scaleFocus');
      this.hasFocus = true;
    };
    this.handleBlur = () => {
      emitEvent(this, 'scaleBlur');
      this.hasFocus = false;
    };
    this.handleKeyDown = (event) => {
      emitEvent(this, 'scaleKeyDown', event);
    };
  }
  componentWillLoad() {
    if (this.inputId == null) {
      this.inputId = 'input-text-field' + i++;
    }
  }
  componentDidRender() {
    if (this.status !== '') {
      statusNote({
        tag: 'deprecated',
        message: 'Property "status" is deprecated. Please use the "invalid" property!',
        type: 'warn',
        source: this.hostElement,
      });
    }
  }
  // We're not watching `value` like we used to
  // because we get unwanted `scaleChange` events
  // because how we keep this.value up-to-date for type="select"
  // `this.value = selectedValue`
  emitChange() {
    emitEvent(this, 'scaleChange', {
      value: this.value == null ? this.value : this.value.toString(),
    });
  }
  render() {
    const ariaInvalidAttr = this.status === 'error' || this.invalid ? { 'aria-invalid': true } : {};
    const helperTextId = `helper-message-${i}`;
    const ariaDescribedByAttr = { 'aria-describedBy': helperTextId };
    return (h(Host, null, this.styles && h("style", null, this.styles), h("div", { class: this.getCssClassMap() }, h("label", { class: "text-field__label", htmlFor: this.inputId }, this.label), h("input", Object.assign({ type: this.type, class: "text-field__control", value: this.value }, (!!this.name ? { name: this.name } : {}), (!!this.inputAutofocus ? { autofocus: 'true' } : {}), { required: this.required, minLength: this.minLength, maxLength: this.maxLength, id: this.inputId, list: this.list, onInput: this.handleInput, onChange: this.handleChange, onFocus: this.handleFocus, onBlur: this.handleBlur, onKeyDown: this.handleKeyDown }, (!!this.placeholder ? { placeholder: this.placeholder } : {}), { disabled: this.disabled, readonly: this.readonly }, ariaInvalidAttr, (this.helperText ? ariaDescribedByAttr : {}), (this.type === 'number' ? { step: this.step } : {}))), (!!this.helperText || !!this.counter) && (h("div", { class: "text-field__meta", id: helperTextId, "aria-live": "polite", "aria-relevant": "additions removals" }, !!this.helperText && (h("div", { class: "text-field__helper-text" }, this.helperText)), this.counter && (h("div", { class: "text-field__counter" }, !!this.value ? String(this.value).length : 0, " /", ' ', this.maxLength)))))));
  }
  getCssClassMap() {
    // input[type="date"] will print a placeholder in some browsers
    const animated = (this.value != null && this.value !== '') || this.type === 'date';
    return classnames('text-field', this.type && `text-field--type-${this.type}`, this.hasFocus && 'text-field--has-focus', this.disabled && `text-field--disabled`, this.transparent && 'text-field--transparent', this.status && `text-field--status-${this.status}`, this.invalid && `text-field--status-error`, this.size && `text-field--size-${this.size}`, this.readonly && `text-field--readonly`, animated && 'animated');
  }
  get hostElement() { return getElement(this); }
};
TextField.style = textFieldCss;

export { Dropdown as scale_dropdown, ActionHidePassword as scale_icon_action_hide_password, ActionSort as scale_icon_action_sort, NavigationCollapseUp as scale_icon_navigation_collapse_up, ServiceSettings as scale_icon_service_settings, MenuFlyoutItem as scale_menu_flyout_item, Pagination as scale_pagination, ProgressBar as scale_progress_bar, Switch as scale_switch, Tag as scale_tag, TextField as scale_text_field };
